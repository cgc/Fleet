'λx.apply(and[size2,green],iota(filter(x.s, or[size2,not[size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:size3
'λx.exists(and[circle,iff[and[yellow,iff[yellow,rectangle]],or[size2,yellow]]], filter(filter(x.s, yellow), green))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(and[and[and[and[or[blue,apply(size-leq,x.o)],triangle],or[and[yellow,yellow],and[size3,or[green,and[green,triangle]]]]],not[size3]],nor[size1,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:size3;4:or[%s,%s];4:green;4:and[%s,%s];4:green;4:triangle;4:not[%s];4:size3;4:nor[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, implies[circle,or[nor[size2,or[and[yellow,not[size2]],apply(same_shape,x.o)]],blue]]), green), nand[size3,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:or[%s,%s];4:nor[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:green;4:nand[%s,%s];4:size3;4:size2
'λx.empty(filter(filter(x.s, apply(size-gt,iota(x.s))), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(or[size2,green],iota(filter(x.s, apply(same_color,iota(filter(x.s, size2))))))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.true'	0:true
'λx.contains(iota(filter(x.s, not[not[triangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:triangle;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, size1), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(iff[size3,size1],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, size1), yellow), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, not[size1]), blue), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue;4:circle
'λx.apply(and[nor[and[blue,size2],or[yellow,circle]],size1],iota(filter(x.s, and[rectangle,apply(same_size,iota(x.s))])))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:size2;4:or[%s,%s];4:yellow;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, apply(same_shape,iota(filter(filter(x.s, green), and[apply(same_color,iota(filter(x.s, not[size2]))),size3]))))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size3
'λx.apply(not[and[circle,or[and[rectangle,size3],size1]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.forall(apply(same_size,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[yellow,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[rectangle,green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), or[or[blue,or[green,size3]],size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:size3;4:size1
'λx.apply(not[and[size2,or[yellow,implies[not[rectangle],triangle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:not[%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),rectangle],iota(filter(filter(filter(x.s, size1), green), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:circle
'λx.apply(or[yellow,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(x.s, rectangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(x.s, size1)), filter(x.s, nand[rectangle,green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:green
'λx.contains(iota(filter(filter(x.s, not[circle]), not[and[size2,size3]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:not[%s];4:and[%s,%s];4:size2;4:size3;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), size3), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:blue
'λx.apply(circle,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(and[and[size3,apply(same_size,x.o)],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(or[not[rectangle],and[rectangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[and[green,implies[blue,triangle]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:implies[%s,%s];4:blue;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(not[apply(size-geq,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, nand[green,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:yellow
'λx.apply(not[triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(and[triangle,or[size2,and[implies[and[size3,not[triangle]],green],apply(same_shape,x.o)]]],filter(x.s, and[or[size1,blue],size2]))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size2
'λx.apply(not[triangle],iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(blue,iota(filter(filter(x.s, rectangle), not[yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:yellow
'λx.contains(iota(filter(x.s, size1)), filter(filter(filter(x.s, not[or[size2,size2]]), blue), implies[size1,green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:size2;4:blue;4:implies[%s,%s];4:size1;4:green
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, size2), apply(size-geq,x.o)), and[or[rectangle,or[triangle,not[apply(same_size,x.o)]]],triangle])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, green), size2), iff[yellow,rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:iff[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, size1), not[blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:blue
'λx.apply(not[and[size2,circle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[size3,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.exists(or[yellow,or[rectangle,and[rectangle,triangle]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.exists(and[and[and[circle,not[size3]],apply(size-gt,x.o)],green], filter(filter(filter(x.s, size3), size3), apply(same_color,iota(x.s))))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(not[yellow], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, circle), apply(same_size,iota(x.s))), or[triangle,nor[yellow,and[triangle,yellow]]]), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:yellow;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, iff[size1,triangle]), or[and[green,blue],and[implies[or[blue,or[rectangle,and[triangle,triangle]]],apply(same_shape,x.o)],rectangle]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:triangle;4:or[%s,%s];4:and[%s,%s];4:green;4:blue;4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, and[size3,nand[rectangle,and[and[blue,green],size2]]]), or[triangle,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:size2;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(not[not[green]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[and[not[green],green],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(blue,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(filter(filter(x.s, or[size2,not[triangle]]), implies[and[size1,size3],triangle]), and[size3,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:triangle;4:implies[%s,%s];4:and[%s,%s];4:size1;4:size3;4:triangle;4:and[%s,%s];4:size3;4:size1
'λx.apply(and[and[triangle,blue],or[rectangle,not[rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(x.s, size1))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, or[not[blue],rectangle]), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:blue;4:rectangle;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(x.s, implies[green,and[not[blue],rectangle]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:blue;4:rectangle
'λx.apply(blue,iota(filter(x.s, green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(nor[size3,not[yellow]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:size3;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(or[blue,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size3), and[or[and[rectangle,or[yellow,and[not[apply(same_shape,x.o)],implies[not[size2],blue]]]],size1],size3]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:not[%s];4:size2;4:blue;4:size1;4:size3;4:size3
'λx.apply(and[triangle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[green,triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[circle,nand[circle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(rectangle,iota(filter(filter(x.s, apply(size-geq,iota(x.s))), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[green,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.exists(or[triangle,circle], filter(filter(x.s, not[size3]), size2))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size2
'λx.exists(apply(same_size,iota(x.s)), filter(filter(x.s, green), rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, and[size1,rectangle]), green), circle), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle;4:green;4:circle;4:rectangle
'λx.apply(and[size1,iff[blue,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:iff[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_size,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(x.s, size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size3,filter(x.s, size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size1,filter(x.s, size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size2,filter(x.s, green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size1,filter(x.s, green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(and[triangle,size3], filter(filter(filter(filter(filter(x.s, triangle), nor[apply(same_size,x.o),not[circle]]), size2), or[size1,apply(same_size,iota(filter(filter(x.s, or[not[and[nor[yellow,yellow],nand[yellow,circle]]],and[not[size1],green]]), blue)))]), or[size1,size2]))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle;4:size2;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:yellow;4:yellow;4:nand[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:not[%s];4:size1;4:green;4:blue;4:or[%s,%s];4:size1;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, circle), not[size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size1
'λx.apply(implies[and[green,size3],apply(same_shape,x.o)],iota(filter(x.s, apply(same_shape,iota(filter(x.s, size3))))))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[circle,iff[or[not[and[triangle,or[triangle,and[and[circle,size3],triangle]]]],and[size1,apply(same_color,x.o)]],size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:triangle;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(or[or[size3,and[size3,circle]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(not[apply(same_shape,iota(x.s))],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(triangle,iota(filter(filter(filter(x.s, apply(size-leq,iota(filter(filter(x.s, not[green]), and[circle,size2])))), yellow), or[implies[circle,iff[yellow,circle]],blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:circle;4:size2;4:yellow;4:or[%s,%s];4:implies[%s,%s];4:circle;4:iff[%s,%s];4:yellow;4:circle;4:blue
'λx.apply(and[and[apply(same_size,iota(x.s)),or[rectangle,green]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[size3,and[triangle,and[size2,yellow]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:yellow
'λx.apply(or[size2,apply(size-geq,x.o)],iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(filter(filter(x.s, not[blue]), yellow), or[iff[yellow,size3],rectangle])), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:yellow;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(x.s, and[iff[size2,rectangle],rectangle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size2;4:rectangle;4:rectangle;4:green
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, rectangle), circle), and[apply(same_color,iota(filter(x.s, or[apply(same_shape,x.o),and[circle,circle]]))),circle]), size3), nor[rectangle,or[size1,implies[green,circle]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:circle;4:circle;4:size3;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:implies[%s,%s];4:green;4:circle
'λx.empty(filter(filter(filter(x.s, not[and[and[blue,size1],size1]]), circle), or[not[not[size3]],circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size1;4:circle;4:or[%s,%s];4:not[%s];4:not[%s];4:size3;4:circle
'λx.apply(and[size3,green],iota(filter(filter(filter(filter(filter(x.s, size3), yellow), and[blue,blue]), and[green,size3]), and[yellow,green])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:and[%s,%s];4:blue;4:blue;4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:yellow;4:green
'λx.apply(apply(same_size,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[and[triangle,size3],circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:circle
'λx.apply(or[and[and[blue,triangle],or[yellow,apply(size-leq,iota(x.s))]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[apply(size-geq,x.o),triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), apply(same_color,iota(filter(x.s, or[blue,yellow])))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow
'λx.apply(apply(same_size,iota(filter(filter(x.s, triangle), apply(same_size,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, or[rectangle,and[triangle,size1]]), yellow), or[blue,and[circle,and[not[apply(same_size,x.o)],triangle]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:size1;4:yellow;4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(or[or[not[triangle],not[size2]],apply(same_color,iota(filter(filter(filter(x.s, rectangle), blue), size2)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:not[%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, triangle), size3), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size2
'λx.apply(and[green,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[or[blue,size1],rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:rectangle
'λx.apply(and[size1,apply(same_size,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[nand[green,size2],rectangle],iota(filter(x.s, and[circle,nor[nor[nor[green,not[size2]],size1],and[size3,or[yellow,circle]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nor[%s,%s];4:nor[%s,%s];4:nor[%s,%s];4:green;4:not[%s];4:size2;4:size1;4:and[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:circle
'λx.apply(and[implies[and[green,and[circle,apply(size-geq,iota(x.s))]],not[not[and[yellow,size1]]]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), iff[green,and[not[size3],and[size2,apply(same_color,x.o)]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, and[or[size1,size1],size2]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:size1;4:size2;4:yellow
'λx.apply(and[and[rectangle,size1],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), apply(same_shape,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, not[implies[and[size1,not[size3]],nand[green,and[apply(same_size,x.o),apply(same_size,x.o)]]]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:size3;4:nand[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[rectangle,yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, apply(same_size,x.o)), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(and[apply(same_color,iota(filter(filter(x.s, triangle), size1))),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,nand[triangle,or[rectangle,implies[apply(same_color,iota(filter(filter(filter(filter(x.s, yellow), not[yellow]), blue), size1))),size1]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:yellow;4:blue;4:size1;4:size1;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, size3), green), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:rectangle
'λx.exists(iff[blue,apply(size-leq,iota(x.s))], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[and[and[triangle,blue],size2],and[circle,size2]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:size2;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[and[and[or[and[and[apply(size-gt,x.o),size1],and[green,green]],rectangle],yellow],or[circle,yellow]],size3],iota(filter(filter(x.s, apply(same_size,iota(x.s))), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:and[%s,%s];4:green;4:green;4:rectangle;4:yellow;4:or[%s,%s];4:circle;4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(and[nor[triangle,size2],apply(same_color,iota(filter(x.s, or[rectangle,not[blue]])))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(x.s))), triangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(and[nand[size3,or[and[triangle,apply(same_size,iota(filter(x.s, size2)))],green]],apply(size-leq,iota(x.s))],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, nand[size2,blue]), size2), and[not[not[yellow]],circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:blue;4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:yellow;4:circle
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, implies[apply(same_color,iota(filter(filter(filter(filter(filter(x.s, size3), yellow), or[and[or[and[green,circle],yellow],size3],blue]), yellow), blue))),circle]), circle), or[size2,green]), size1), not[size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:yellow;4:size3;4:blue;4:yellow;4:blue;4:circle;4:circle;4:or[%s,%s];4:size2;4:green;4:size1;4:not[%s];4:size2
'λx.apply(and[and[size2,and[not[size2],circle]],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size2;4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, blue), rectangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:green
'λx.contains(iota(x.s), filter(filter(x.s, and[or[and[triangle,or[size1,green]],apply(size-gt,x.o)],size3]), apply(size-lt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[size1,circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.forall(iff[apply(same_size,x.o),blue],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.exists(or[and[blue,and[and[not[size2],yellow],triangle]],not[not[or[or[and[size1,green],size2],size1]]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:yellow;4:triangle;4:not[%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:green;4:size2;4:size1;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, size3), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, apply(size-lt,iota(x.s))), not[size1]), green), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:green;4:green
'λx.apply(not[not[size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[not[size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[not[blue],not[triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[or[not[size2],rectangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(not[nand[size3,or[size3,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size3;4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(and[size1,size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[nor[size2,green],nor[size1,green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size2;4:green;4:nor[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[or[size3,nor[and[implies[triangle,triangle],circle],rectangle]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:triangle;4:triangle;4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[apply(size-gt,x.o),triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, green), blue), and[and[not[not[not[and[circle,triangle]]]],rectangle],and[triangle,circle]]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:and[%s,%s];4:circle;4:triangle;4:rectangle;4:and[%s,%s];4:triangle;4:circle;4:size3
'λx.forall(implies[yellow,green],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size2), or[apply(same_shape,x.o),circle]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size3
'λx.apply(and[green,and[implies[triangle,blue],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:green;1:%s.o;2:x
'λx.exists(or[not[size2],apply(same_size,x.o)], filter(x.s, and[green,green]))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(and[nor[triangle,or[triangle,yellow]],or[and[or[circle,and[and[blue,not[or[triangle,apply(same_size,x.o)]]],rectangle]],green],or[or[blue,not[or[size3,apply(same_color,x.o)]]],blue]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:green;4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, iff[triangle,nand[and[not[or[or[and[and[not[size2],and[green,blue]],green],blue],circle]],blue],and[size3,circle]]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:green;4:blue;4:green;4:blue;4:circle;4:blue;4:and[%s,%s];4:size3;4:circle
'λx.apply(and[not[size1],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[not[not[circle]],blue],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(x.s, not[circle]), apply(same_shape,x.o)), iff[size1,size1]), size3), green), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size1;4:size1;4:size3;4:green;4:triangle
'λx.apply(and[yellow,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[not[yellow],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(filter(filter(x.s, yellow), size3), and[and[green,not[rectangle]],size2]), and[apply(same_color,x.o),triangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:rectangle;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.apply(or[size3,and[apply(same_color,iota(x.s)),apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size1, filter(filter(filter(filter(x.s, green), green), green), or[apply(same_shape,iota(x.s)),green]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green
'λx.exists(and[yellow,and[size1,size1]], filter(filter(filter(x.s, size2), yellow), size3))'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:size3
'λx.forall(not[circle],x.s)'	0:forall(%s,%s);4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(implies[circle,or[size3,triangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[triangle,circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.apply(not[and[nand[nor[triangle,iff[green,rectangle]],and[and[apply(size-geq,iota(x.s)),size2],triangle]],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:triangle;4:iff[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size2;4:triangle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.contains(x.o, filter(filter(filter(x.s, yellow), size1), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:yellow
'λx.apply(implies[blue,and[green,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[rectangle,green]), implies[size3,blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:implies[%s,%s];4:size3;4:blue
'λx.apply(and[not[not[or[not[apply(same_size,x.o)],blue]]],and[circle,and[triangle,circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, implies[iff[size1,and[rectangle,and[rectangle,rectangle]]],nor[rectangle,not[triangle]]]), size2), blue), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle;4:nor[%s,%s];4:rectangle;4:not[%s];4:triangle;4:size2;4:blue;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, rectangle), size1)))), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:triangle
'λx.apply(size2,iota(filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, not[rectangle]), and[size1,size1]), green), green), size3), iff[yellow,apply(same_shape,iota(x.s))]), yellow), blue), rectangle), rectangle)))), or[yellow,yellow]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:size1;4:size1;4:green;4:green;4:size3;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue;4:rectangle;4:rectangle;4:or[%s,%s];4:yellow;4:yellow;4:rectangle
'λx.apply(or[rectangle,nor[yellow,size2]],iota(filter(filter(x.s, iff[nand[blue,rectangle],and[triangle,rectangle]]), nand[circle,iff[size2,or[apply(same_shape,iota(filter(x.s, not[size1]))),not[circle]]]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:triangle;4:rectangle;4:nand[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:not[%s];4:circle
'λx.contains(iota(filter(filter(filter(x.s, triangle), circle), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:triangle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, size1), yellow), or[or[and[not[apply(same_size,x.o)],rectangle],yellow],apply(size-geq,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[circle,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, size3), and[size1,triangle]), yellow), and[size1,yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:triangle;4:yellow;4:and[%s,%s];4:size1;4:yellow
'λx.apply(and[apply(same_color,iota(x.s)),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[and[green,triangle],and[or[or[blue,size3],yellow],or[or[not[size1],or[size1,and[green,green]]],size3]]],apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:yellow;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:green;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size2,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), size3), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size2
'λx.contains(iota(x.s), filter(x.s, not[not[and[and[triangle,size3],not[circle]]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:not[%s];4:circle
'λx.apply(nor[circle,size3],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[circle,size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, yellow), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, blue), green), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(and[apply(same_size,x.o),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(filter(x.s, green), circle), size2)), filter(filter(x.s, size2), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(and[and[and[size3,blue],and[size3,triangle]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:size3;4:triangle;4:green;1:%s.o;2:x
'λx.exists(apply(size-lt,x.o), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[circle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, nor[rectangle,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:size3
'λx.apply(or[and[circle,not[size3]],and[green,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size3;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size3), triangle), not[apply(same_size,iota(x.s))]), blue), apply(same_color,x.o)), not[nor[size1,green]]), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:nor[%s,%s];4:size1;4:green;4:size2
'λx.apply(size1,iota(filter(filter(x.s, and[or[or[or[blue,size3],blue],yellow],circle]), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:blue;4:yellow;4:circle;4:size3
'λx.apply(iff[and[or[size3,and[rectangle,triangle]],size2],and[circle,and[circle,triangle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:triangle;4:size2;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(filter(filter(x.s, and[size1,or[apply(same_shape,x.o),not[size2]]]), apply(same_color,x.o)), implies[circle,and[size2,apply(same_size,x.o)]]), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:circle;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(apply(size-geq,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[iff[circle,rectangle],nor[implies[rectangle,size2],yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:rectangle;4:nor[%s,%s];4:implies[%s,%s];4:rectangle;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nand[size2,or[blue,size1]],blue],iota(filter(filter(x.s, and[size2,or[blue,not[size1]]]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:or[%s,%s];4:blue;4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:blue;4:not[%s];4:size1;4:size2
'λx.apply(apply(same_shape,iota(filter(filter(x.s, or[size1,or[rectangle,blue]]), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(iff[yellow,iff[circle,and[and[size3,size3],circle]]],filter(filter(filter(filter(x.s, implies[apply(same_color,iota(filter(filter(filter(filter(filter(x.s, size3), yellow), or[and[or[and[green,circle],yellow],size3],blue]), yellow), blue))),circle]), circle), or[size2,green]), size1))'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:iff[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:yellow;4:size3;4:blue;4:yellow;4:blue;4:circle;4:circle;4:or[%s,%s];4:size2;4:green;4:size1
'λx.contains(iota(filter(x.s, and[or[or[size1,and[triangle,apply(same_size,x.o)]],triangle],apply(size-geq,x.o)])), filter(filter(x.s, circle), not[triangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:triangle
'λx.apply(not[yellow],iota(filter(filter(x.s, nand[size3,size1]), and[or[size2,green],rectangle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size1;4:and[%s,%s];4:or[%s,%s];4:size2;4:green;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, yellow), green), and[circle,nor[or[and[and[size2,implies[yellow,yellow]],and[and[apply(same_size,x.o),nand[rectangle,not[yellow]]],and[green,and[size2,size3]]]],or[blue,and[blue,or[green,implies[and[or[circle,size1],apply(size-geq,iota(x.s))],green]]]]],green]]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:and[%s,%s];4:circle;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:implies[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size3;4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;4:green;4:size1
'λx.forall(iff[and[not[size3],size3],size2],filter(filter(x.s, blue), and[size1,not[nor[circle,size3]]]))'	0:forall(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:size3;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:not[%s];4:nor[%s,%s];4:circle;4:size3
'λx.apply(or[blue,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[triangle,and[and[implies[size3,green],blue],and[circle,size3]]]), and[size3,or[and[size2,yellow],and[rectangle,blue]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:green;4:blue;4:and[%s,%s];4:circle;4:size3;4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size2), green), rectangle), circle), or[triangle,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:rectangle;4:circle;4:or[%s,%s];4:triangle;4:blue
'λx.apply(or[size2,and[size3,and[or[triangle,size3],and[blue,triangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[yellow,size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1
'λx.exists(iff[and[rectangle,yellow],size1], filter(filter(filter(x.s, rectangle), green), size2))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:size2
'λx.apply(not[size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[iff[nor[apply(same_color,iota(x.s)),green],rectangle],nor[green,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:rectangle;4:nor[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(nor[size2,and[circle,and[size3,blue]]],iota(filter(x.s, nor[size1,yellow])))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:yellow
'λx.contains(x.o, filter(filter(filter(x.s, green), circle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:triangle
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nor[rectangle,size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, yellow), yellow)), filter(filter(filter(filter(filter(x.s, implies[size2,size2]), size3), size1), apply(same_shape,iota(filter(filter(filter(x.s, rectangle), size3), size2)))), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:size2;4:size3;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size2;4:circle
'λx.apply(size1,iota(filter(x.s, and[size1,or[triangle,not[not[and[apply(size-geq,x.o),apply(size-geq,iota(filter(filter(x.s, size1), rectangle)))]]]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:not[%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(and[rectangle,and[nor[yellow,not[rectangle]],size1]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:not[%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[and[size2,iff[circle,rectangle]],not[circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size2;4:iff[%s,%s];4:circle;4:rectangle;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(and[green,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, apply(same_size,iota(filter(x.s, or[or[or[size1,rectangle],not[nor[not[green],and[size2,implies[yellow,blue]]]]],rectangle])))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:not[%s];4:nor[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:size2;4:implies[%s,%s];4:yellow;4:blue;4:rectangle
'λx.apply(and[not[size2],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, and[and[size1,rectangle],circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:circle
'λx.forall(and[blue,and[yellow,circle]],filter(x.s, or[not[rectangle],not[size3]]))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size3
'λx.apply(and[circle,and[apply(same_size,iota(x.s)),yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[blue,green], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, or[circle,not[and[and[yellow,apply(same_size,x.o)],size2]]]), green), nand[yellow,size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:green;4:nand[%s,%s];4:yellow;4:size3
'λx.apply(iff[not[rectangle],iff[rectangle,triangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:rectangle;4:iff[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, nand[iff[not[circle],rectangle],size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:iff[%s,%s];4:not[%s];4:circle;4:rectangle;4:size2
'λx.apply(and[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size2,blue],nand[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:blue;4:nand[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(nor[size1,and[and[size1,size2],and[and[size1,green],and[size3,implies[and[apply(same_size,x.o),size3],blue]]]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:and[%s,%s];4:size3;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(green,x.s)'	0:forall(%s,%s);4:green;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, blue), and[triangle,not[yellow]])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[blue,and[size2,and[rectangle,apply(size-lt,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), circle), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:yellow
'λx.exists(size3, filter(x.s, and[apply(same_size,x.o),not[size1]]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(size1,iota(filter(filter(x.s, nor[not[circle],triangle]), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:circle;4:triangle;4:size2
'λx.apply(or[and[green,iff[green,iff[nand[size3,circle],nor[blue,not[triangle]]]]],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:green;4:iff[%s,%s];4:nand[%s,%s];4:size3;4:circle;4:nor[%s,%s];4:blue;4:not[%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,apply(same_color,iota(filter(x.s, iff[triangle,blue])))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[circle,or[and[apply(same_shape,x.o),and[rectangle,blue]],blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:blue;4:blue
'λx.forall(rectangle,filter(filter(x.s, apply(same_shape,x.o)), size2))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(or[and[circle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, and[and[implies[yellow,yellow],size3],circle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:yellow;4:yellow;4:size3;4:circle
'λx.apply(and[rectangle,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[yellow,and[triangle,rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:rectangle
'λx.exists(and[not[size2],circle], filter(x.s, and[size1,size3]))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.exists(apply(same_size,x.o), filter(filter(filter(filter(filter(x.s, not[size2]), circle), blue), size1), rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle;4:blue;4:size1;4:rectangle
'λx.forall(size2,filter(x.s, and[apply(size-leq,x.o),and[blue,triangle]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, iff[yellow,apply(same_shape,x.o)]), apply(same_color,x.o)))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size3,triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[rectangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(and[circle,or[and[size2,apply(size-gt,iota(x.s))],and[circle,size2]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, iff[not[nand[or[or[size3,blue],size2],not[and[size2,rectangle]]]],rectangle]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:blue;4:size2;4:not[%s];4:and[%s,%s];4:size2;4:rectangle;4:rectangle;4:triangle
'λx.apply(nand[yellow,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[apply(same_color,iota(x.s)),triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(or[or[yellow,size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(circle,iota(filter(filter(x.s, rectangle), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.empty(filter(filter(x.s, not[nand[rectangle,circle]]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:rectangle;4:circle;4:blue
'λx.empty(filter(filter(x.s, or[circle,and[not[or[and[iff[circle,or[green,size2]],iff[size1,green]],not[and[blue,implies[circle,or[green,green]]]]]],rectangle]]), and[apply(same_size,iota(x.s)),size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:circle;4:or[%s,%s];4:green;4:size2;4:iff[%s,%s];4:size1;4:green;4:not[%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:or[%s,%s];4:green;4:green;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, and[apply(same_shape,x.o),circle]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:triangle
'λx.apply(implies[triangle,and[iff[or[size1,size1],size1],rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size1;4:size1;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, and[apply(same_color,iota(filter(filter(filter(filter(x.s, size3), and[apply(same_size,x.o),blue]), circle), not[circle]))),circle]), or[circle,size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:circle;4:not[%s];4:circle;4:circle;4:or[%s,%s];4:circle;4:size1
'λx.apply(or[size1,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size1,green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.forall(size1,filter(filter(x.s, and[triangle,and[size3,green]]), and[implies[apply(same_color,x.o),circle],and[implies[green,or[nand[nor[size1,apply(size-gt,iota(filter(x.s, triangle)))],size1],yellow]],size3]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:and[%s,%s];4:implies[%s,%s];4:green;4:or[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:yellow;4:size3
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, and[green,size1]), size2), or[apply(same_color,iota(x.s)),triangle]), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, not[triangle]), apply(same_color,iota(filter(filter(filter(x.s, blue), triangle), and[not[yellow],size3])))), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:and[%s,%s];4:not[%s];4:yellow;4:size3;4:size2
'λx.apply(not[or[and[circle,and[and[nand[green,nor[yellow,blue]],apply(same_size,iota(filter(x.s, green)))],triangle]],size3]],iota(filter(filter(x.s, triangle), and[rectangle,blue])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(and[circle,blue],iota(filter(x.s, and[circle,apply(same_color,iota(filter(filter(filter(x.s, and[rectangle,apply(same_color,x.o)]), apply(same_color,x.o)), triangle)))])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.forall(green,filter(x.s, circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, size2), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.empty(filter(filter(x.s, size1), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[rectangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[size2,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[and[size2,triangle],blue],circle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size3,and[yellow,apply(size-leq,x.o)]], filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.contains(x.o, filter(filter(x.s, size3), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.contains(x.o, filter(filter(x.s, size2), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(and[yellow,not[apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, or[not[blue],circle]), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:blue;4:circle;4:circle
'λx.apply(nand[not[or[or[not[apply(same_shape,x.o)],apply(same_size,iota(filter(filter(filter(x.s, rectangle), and[triangle,and[yellow,rectangle]]), iff[not[and[or[not[size3],size3],green]],green])))],size2]],rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:rectangle;4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:size3;4:green;4:green;4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, or[rectangle,and[not[blue],blue]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:blue
'λx.apply(not[and[or[circle,circle],apply(same_shape,iota(x.s))]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[size2,yellow],and[triangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(filter(filter(filter(filter(x.s, circle), and[yellow,not[size3]]), rectangle), green), green))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:not[%s];4:size3;4:rectangle;4:green;4:green
'λx.apply(and[size1,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[green,nand[or[and[not[and[blue,size1]],blue],not[size1]],or[not[size3],and[blue,nand[green,triangle]]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size1;4:blue;4:not[%s];4:size1;4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:blue;4:nand[%s,%s];4:green;4:triangle
'λx.empty(filter(filter(x.s, not[not[triangle]]), and[and[or[iff[implies[or[and[circle,apply(same_color,x.o)],or[size1,yellow]],apply(same_size,iota(filter(x.s, apply(same_size,iota(x.s)))))],yellow],green],or[circle,size2]],size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:green;4:or[%s,%s];4:circle;4:size2;4:size3
'λx.apply(or[and[and[green,green],size1],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, not[implies[implies[nand[blue,and[green,green]],size1],apply(same_shape,x.o)]]), triangle), nor[blue,triangle]), not[or[blue,rectangle]]), or[not[apply(size-geq,x.o)],blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:green;4:green;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:nor[%s,%s];4:blue;4:triangle;4:not[%s];4:or[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue
'λx.apply(not[apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, or[size3,yellow]), not[yellow]), size3), size1), apply(same_shape,iota(x.s))), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:yellow;4:not[%s];4:yellow;4:size3;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(or[yellow,blue],iota(filter(filter(filter(x.s, size1), and[size1,apply(size-geq,x.o)]), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1
'λx.apply(and[not[size1],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[yellow,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(and[not[nor[green,rectangle]],not[circle]], filter(filter(x.s, circle), not[and[size2,and[triangle,blue]]]))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:green;4:rectangle;4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:blue
'λx.contains(iota(filter(x.s, not[nor[triangle,not[size1]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:triangle;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(or[size1,size2],iota(filter(filter(x.s, and[apply(same_color,x.o),and[triangle,apply(size-geq,x.o)]]), not[triangle])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:triangle
'λx.empty(filter(filter(x.s, not[circle]), and[yellow,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(and[apply(same_color,iota(x.s)),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[size2,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[rectangle,rectangle],iota(filter(x.s, not[not[blue]])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue
'λx.contains(iota(x.s), filter(x.s, not[or[green,circle]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:green;4:circle
'λx.apply(or[and[size3,iff[triangle,yellow]],implies[rectangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:iff[%s,%s];4:triangle;4:yellow;4:implies[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), iff[and[and[or[triangle,blue],blue],apply(same_color,iota(x.s))],triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(or[not[yellow],or[circle,not[size3]]],iota(filter(filter(x.s, size3), and[size2,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:circle;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size2;4:size2
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), blue), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:size2
'λx.apply(size2,iota(filter(filter(x.s, green), and[triangle,size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:triangle;4:size3
'λx.apply(not[green],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[iff[triangle,green],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, not[green]), not[size3]), blue), size3), rectangle), not[implies[size3,blue]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:not[%s];4:size3;4:blue;4:size3;4:rectangle;4:not[%s];4:implies[%s,%s];4:size3;4:blue
'λx.apply(not[not[apply(same_shape,iota(filter(x.s, iff[apply(size-gt,x.o),rectangle])))]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(green,filter(x.s, size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(green,filter(x.s, green))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(filter(x.s, iff[apply(same_shape,iota(x.s)),yellow]), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, and[triangle,or[green,or[size1,implies[green,size1]]]]), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:or[%s,%s];4:size1;4:implies[%s,%s];4:green;4:size1;4:circle
'λx.apply(or[size2,and[and[size2,yellow],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[nand[not[rectangle],circle],size1],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, triangle), and[triangle,circle]), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:circle;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(or[triangle,and[triangle,circle]],iota(filter(x.s, or[green,blue])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.empty(filter(filter(filter(filter(x.s, green), yellow), not[and[not[rectangle],green]]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, apply(same_size,x.o)), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(size1,filter(filter(filter(filter(filter(x.s, apply(same_color,x.o)), circle), size3), and[yellow,circle]), triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:size3;4:and[%s,%s];4:yellow;4:circle;4:triangle
'λx.apply(and[green,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, and[triangle,not[and[and[or[and[triangle,and[not[apply(same_size,iota(x.s))],rectangle]],not[size1]],apply(same_size,iota(x.s))],nand[circle,and[blue,or[size1,size3]]]]]]), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:size3;4:size1
'λx.apply(blue,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(green,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.contains(x.o, filter(filter(x.s, yellow), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(and[circle,and[green,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(filter(x.s, yellow), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(size1,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(size1,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(not[apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, triangle), triangle), size2), and[green,or[size1,blue]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:size2;4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, green), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.contains(iota(filter(filter(x.s, yellow), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;3:%s.s;2:x
'λx.apply(and[not[not[not[apply(same_shape,iota(x.s))]]],and[and[size1,size3],nor[or[yellow,rectangle],size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:nor[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[iff[circle,apply(same_size,iota(filter(filter(x.s, nand[rectangle,circle]), size3)))]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:circle;4:size3
'λx.empty(filter(filter(filter(x.s, or[circle,yellow]), not[rectangle]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow;4:not[%s];4:rectangle;4:triangle
'λx.apply(nor[yellow,yellow],iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, or[size1,size3]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3;4:size1
'λx.apply(size1,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(apply(same_size,iota(filter(filter(x.s, and[rectangle,circle]), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), and[or[triangle,circle],rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:rectangle
'λx.forall(size3,filter(filter(x.s, rectangle), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(size3,iota(filter(x.s, or[yellow,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(not[and[triangle,or[green,blue]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[size2]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size1
'λx.apply(apply(same_shape,iota(filter(x.s, nand[implies[rectangle,size3],size2]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(x.s))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nor[size2,and[and[and[size3,circle],size2],and[rectangle,yellow]]]],iota(filter(x.s, and[circle,blue])))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size2;4:and[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(implies[blue,or[circle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, circle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(filter(x.s, apply(same_color,iota(x.s))), size3), yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:yellow
'λx.forall(not[apply(same_color,iota(x.s))],filter(filter(x.s, circle), implies[size1,size1]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:size1;4:size1
'λx.apply(and[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[not[implies[implies[green,triangle],or[and[green,rectangle],blue]]],apply(same_shape,x.o)]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:implies[%s,%s];4:green;4:triangle;4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.empty(filter(filter(filter(filter(x.s, rectangle), not[and[or[and[circle,rectangle],blue],green]]), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:blue;4:green;4:size1;4:rectangle
'λx.forall(not[and[blue,size3]],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[blue,and[rectangle,green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, apply(size-lt,x.o)), and[size2,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size2;4:size2
'λx.apply(and[apply(size-leq,x.o),circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[or[green,and[blue,blue]],not[not[apply(same_shape,x.o)]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:blue;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[circle,or[apply(same_size,x.o),size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(not[triangle],iota(filter(filter(x.s, size2), or[size1,blue])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size1;4:blue
'λx.apply(circle,x.o)'	0:apply(%s,%s);4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, blue), yellow), green), and[green,and[apply(same_color,iota(filter(x.s, not[yellow]))),not[size1]]]), green), and[yellow,size2]), and[nand[size2,and[size2,size2]],green]), and[circle,and[not[and[and[circle,and[size1,apply(same_color,x.o)]],size1]],green]]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:not[%s];4:size1;4:green;4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:size2;4:size2;4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:green;4:green
'λx.apply(size1,iota(filter(filter(filter(x.s, and[blue,and[not[rectangle],and[rectangle,nor[and[size2,triangle],green]]]]), triangle), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:green;4:triangle;4:blue
'λx.forall(or[and[green,size3],yellow],filter(x.s, blue))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:size3;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[apply(same_color,iota(x.s)),not[yellow]],filter(filter(filter(filter(x.s, nand[triangle,yellow]), not[or[apply(size-lt,x.o),rectangle]]), green), green))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:yellow;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:rectangle;4:green;4:green
'λx.contains(x.o, filter(filter(x.s, and[yellow,blue]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:triangle
'λx.apply(and[apply(same_size,iota(x.s)),and[yellow,triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, not[triangle]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(filter(filter(x.s, blue), size2), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:rectangle
'λx.exists(not[blue], filter(filter(x.s, and[triangle,size3]), or[blue,circle]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:blue;4:circle
'λx.forall(circle,filter(filter(filter(x.s, not[circle]), and[not[triangle],blue]), triangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:triangle;4:blue;4:triangle
'λx.apply(not[not[or[or[yellow,triangle],apply(same_color,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(and[size1,and[size3,apply(size-lt,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[implies[circle,or[circle,green]],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:or[%s,%s];4:circle;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, size3), size2), and[circle,circle]), size3), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:and[%s,%s];4:circle;4:circle;4:size3;4:rectangle
'λx.apply(or[triangle,and[green,size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[circle,green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green
'λx.apply(nor[and[iff[rectangle,size3],yellow],not[yellow]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:yellow;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(apply(size-lt,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(and[not[or[iff[not[yellow],triangle],yellow]],or[green,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:yellow;4:triangle;4:yellow;4:or[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),and[or[apply(same_color,x.o),rectangle],or[and[and[apply(same_shape,x.o),or[green,rectangle]],size1],apply(same_size,x.o)]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:rectangle;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[triangle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[rectangle,triangle],iota(filter(filter(filter(filter(x.s, green), rectangle), size2), not[green])))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:size2;4:not[%s];4:green
'λx.apply(and[not[green],and[triangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[implies[size1,not[circle]],yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size1;4:not[%s];4:circle;4:yellow
'λx.apply(or[apply(same_shape,x.o),green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[not[size1],iff[rectangle,triangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size1;4:iff[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[circle,yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow
'λx.apply(and[or[size2,size3],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[size2,size3],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:size3;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, implies[blue,or[circle,rectangle]]), iff[size2,or[not[not[circle]],and[triangle,green]]]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:or[%s,%s];4:circle;4:rectangle;4:iff[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[apply(same_size,x.o),circle],green],rectangle],iota(filter(filter(x.s, apply(size-lt,x.o)), and[size2,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size2;4:size2
'λx.apply(not[or[size1,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),triangle],iota(filter(filter(filter(x.s, green), or[yellow,not[green]]), and[green,size3])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:yellow;4:not[%s];4:green;4:and[%s,%s];4:green;4:size3
'λx.forall(yellow,filter(filter(filter(x.s, or[nor[circle,rectangle],apply(size-gt,x.o)]), size1), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:triangle
'λx.empty(filter(x.s, apply(same_color,iota(filter(x.s, blue)))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(filter(x.s, size1), iff[rectangle,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:rectangle;4:size1
'λx.apply(or[blue,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[and[blue,yellow],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[green,triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[nand[triangle,size2],green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:triangle;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[circle,or[rectangle,size2]], filter(x.s, size3))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[or[and[or[nand[circle,yellow],iff[size2,or[size1,and[green,green]]]],circle],yellow]],iota(filter(filter(x.s, apply(same_size,x.o)), rectangle)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:circle;4:yellow;4:iff[%s,%s];4:size2;4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:green;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, blue), not[yellow]), not[and[apply(same_color,x.o),blue]]), and[size2,apply(same_size,iota(filter(filter(filter(filter(x.s, yellow), and[and[or[yellow,size2],size1],and[apply(size-leq,iota(filter(filter(filter(x.s, yellow), blue), size1))),or[circle,not[and[blue,size3]]]]]), blue), size1)))])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size1;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:size3;4:blue;4:size1
'λx.exists(apply(size-geq,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[circle,circle],triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(x.s), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(circle,filter(x.s, and[yellow,apply(same_size,iota(filter(filter(filter(filter(x.s, rectangle), size3), and[rectangle,or[rectangle,circle]]), size3)))]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:circle;4:size3
'λx.apply(yellow,iota(filter(filter(filter(x.s, green), rectangle), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:blue
'λx.apply(or[nand[size1,size2],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:size1;4:size2;4:circle;1:%s.o;2:x
'λx.apply(not[not[or[rectangle,yellow]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(rectangle,filter(x.s, and[not[triangle],circle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:triangle;4:circle
'λx.apply(and[apply(same_size,x.o),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(nor[circle,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[green,size2]), and[triangle,circle]), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:triangle;4:circle;4:size1
'λx.apply(nor[apply(size-lt,x.o),size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, size3), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.exists(size3, filter(x.s, circle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size2, filter(x.s, circle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size1, filter(x.s, circle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, green))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[and[and[green,apply(same_color,x.o)],green]],iota(filter(filter(filter(filter(filter(x.s, green), not[or[and[yellow,nor[and[size1,yellow],size3]],size2]]), rectangle), and[size1,or[triangle,size3]]), size1)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:size3;4:size2;4:rectangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:size3;4:size1
'λx.apply(or[not[iff[triangle,not[green]]],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:triangle;4:not[%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[iff[or[size2,size3],apply(same_size,x.o)],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(iff[apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, apply(size-gt,x.o)), blue), and[or[size2,apply(same_color,iota(filter(x.s, green)))],apply(same_size,iota(x.s))]), blue), circle))),and[implies[size3,yellow],rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:circle;4:and[%s,%s];4:implies[%s,%s];4:size3;4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, size1), rectangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(apply(same_size,x.o), filter(filter(filter(x.s, size1), size1), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:green
'λx.exists(rectangle, filter(x.s, triangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(x.s, or[and[and[size1,triangle],green],size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:green;4:size3;3:%s.s;2:x
'λx.apply(and[not[and[not[blue],size2]],nand[iff[not[size1],triangle],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;4:nand[%s,%s];4:iff[%s,%s];4:not[%s];4:size1;4:triangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[or[size2,triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:triangle
'λx.apply(not[or[and[circle,and[circle,triangle]],size3]],iota(filter(filter(x.s, triangle), and[rectangle,blue])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:blue
'λx.exists(or[triangle,and[green,size3]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.apply(implies[size1,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, size2), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.contains(x.o, filter(filter(x.s, blue), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(and[circle,rectangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(not[implies[size1,or[green,not[yellow]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:size1;4:or[%s,%s];4:green;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(nand[size2,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(nand[not[nand[size1,circle]],size1],iota(filter(x.s, nor[or[triangle,not[blue]],size3])))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:nand[%s,%s];4:size1;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:blue;4:size3
'λx.apply(nor[green,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, nand[size1,iff[size2,green]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:iff[%s,%s];4:size2;4:green
'λx.apply(and[not[size1],or[size2,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(nand[size1,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, and[or[apply(size-gt,iota(filter(x.s, rectangle))),blue],nand[size3,yellow]]), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:nand[%s,%s];4:size3;4:yellow;4:green
'λx.exists(blue, filter(x.s, rectangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[yellow,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[or[or[triangle,apply(same_size,iota(x.s))],size3],or[green,and[rectangle,nand[apply(size-geq,x.o),nand[apply(same_shape,x.o),blue]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(nand[or[not[triangle],blue],or[yellow,nor[apply(same_color,iota(x.s)),size2]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:blue;4:or[%s,%s];4:yellow;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[not[size1],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size3), size2), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:triangle
'λx.apply(apply(size-lt,iota(filter(x.s, and[triangle,triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(x.s)),and[size1,circle]],iota(filter(filter(x.s, not[circle]), iff[and[and[size1,size1],yellow],iff[nand[and[blue,or[blue,size1]],blue],and[yellow,not[yellow]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:yellow;4:iff[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:size1;4:blue;4:and[%s,%s];4:yellow;4:not[%s];4:yellow
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, or[and[or[and[apply(same_shape,iota(filter(x.s, size3))),apply(same_size,x.o)],blue],blue],yellow]), circle), or[blue,green]), or[not[size1],apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:blue;4:yellow;4:circle;4:or[%s,%s];4:blue;4:green;4:or[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(x.s)),or[size2,blue]],iota(filter(filter(x.s, blue), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[not[and[size2,size3]],not[circle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size1,size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,nand[apply(same_size,iota(filter(x.s, or[not[size3],size1]))),circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size3;4:size1;4:circle;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, size1), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, apply(size-gt,iota(filter(filter(x.s, rectangle), apply(size-lt,x.o))))), and[apply(same_shape,x.o),yellow]), yellow))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.exists(and[not[size3],apply(size-leq,iota(filter(x.s, size1)))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(and[nor[iff[nor[and[green,apply(same_shape,x.o)],size3],blue],size3],rectangle],iota(filter(filter(filter(x.s, not[and[size1,yellow]]), size1), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:blue;4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:yellow;4:size1;4:rectangle
'λx.apply(apply(size-lt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, iff[apply(same_shape,iota(x.s)),yellow]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(apply(same_color,iota(filter(filter(x.s, size2), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;1:%s.o;2:x
'λx.apply(and[green,apply(size-lt,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(x.s, green), yellow), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:yellow
'λx.apply(and[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[or[and[circle,and[size1,size3]],not[not[size3]]],and[and[size1,yellow],circle]],nor[or[or[or[and[blue,apply(same_size,x.o)],size3],size1],size3],apply(same_color,iota(x.s))]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size3;4:not[%s];4:not[%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:circle;4:nor[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size1;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(not[size2], filter(filter(x.s, triangle), size1))'	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(and[yellow,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(not[apply(size-gt,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, or[yellow,and[blue,size2]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:size2
'λx.apply(and[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, nand[size1,not[size3]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:not[%s];4:size3
'λx.apply(size2,iota(filter(filter(x.s, blue), or[size1,circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:circle
'λx.apply(or[circle,not[not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), and[apply(same_shape,iota(x.s)),rectangle]), nor[and[circle,blue],circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:circle;4:blue;4:circle
'λx.apply(or[triangle,rectangle],iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(and[blue,yellow],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(triangle,filter(filter(filter(x.s, or[and[or[apply(same_color,iota(x.s)),size2],size2],rectangle]), rectangle), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:size2;4:rectangle;4:rectangle;4:rectangle
'λx.exists(or[and[and[green,apply(size-gt,x.o)],and[or[apply(size-leq,iota(x.s)),yellow],size3]],triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:yellow;4:size3;4:triangle;3:%s.s;2:x
'λx.apply(and[apply(same_size,x.o),apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, size2), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(and[nor[and[size3,implies[rectangle,yellow]],and[blue,triangle]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:implies[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:blue;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, and[circle,blue]), triangle), size2), not[size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue;4:triangle;4:size2;4:not[%s];4:size1
'λx.contains(x.o, filter(x.s, apply(size-leq,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(or[and[not[or[green,size3]],green],apply(same_shape,iota(x.s))], filter(x.s, iff[and[apply(same_shape,iota(x.s)),size3],or[size2,or[size1,and[and[size2,size2],apply(same_color,x.o)]]]]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:size3;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[apply(size-lt,iota(filter(filter(x.s, blue), implies[size3,circle]))),size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size3;4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[size2,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(not[and[not[or[yellow,not[rectangle]]],yellow]],iota(filter(filter(x.s, size2), and[green,and[yellow,circle]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:not[%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:circle
'λx.apply(size3,iota(filter(x.s, not[apply(same_color,x.o)])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[size3,not[rectangle]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:rectangle
'λx.empty(filter(x.s, apply(same_size,iota(filter(x.s, not[implies[triangle,circle]])))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:triangle;4:circle
'λx.forall(blue,filter(filter(x.s, circle), or[nand[yellow,apply(size-geq,iota(filter(filter(filter(filter(x.s, green), implies[apply(size-geq,iota(filter(x.s, apply(same_size,x.o)))),green]), implies[and[nand[apply(same_size,iota(x.s)),size3],circle],and[size2,not[and[blue,size1]]]]), size1)))],yellow]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:implies[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:circle;4:and[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:blue;4:size1;4:size1;4:yellow
'λx.forall(not[green],filter(filter(x.s, not[nor[iff[size1,size3],triangle]]), nor[triangle,circle]))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:iff[%s,%s];4:size1;4:size3;4:triangle;4:nor[%s,%s];4:triangle;4:circle
'λx.exists(nand[green,size1], filter(x.s, not[green]))'	0:exists(%s, %s);4:nand[%s,%s];4:green;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.forall(and[and[yellow,size1],not[circle]],filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(and[blue,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, and[not[apply(same_shape,iota(filter(filter(x.s, size2), blue)))],and[and[rectangle,green],triangle]]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size1,and[circle,apply(size-geq,x.o)]],iota(filter(filter(x.s, or[apply(same_size,iota(x.s)),circle]), nor[size1,apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,size2],iota(filter(filter(filter(filter(x.s, green), size1), size3), and[blue,not[blue]])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:size3;4:and[%s,%s];4:blue;4:not[%s];4:blue
'λx.apply(apply(same_color,iota(filter(x.s, or[blue,yellow]))),iota(filter(filter(filter(filter(filter(filter(x.s, yellow), nand[not[blue],size1]), green), yellow), circle), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:not[%s];4:blue;4:size1;4:green;4:yellow;4:circle;4:rectangle
'λx.forall(and[rectangle,rectangle],filter(filter(x.s, nor[not[or[green,triangle]],triangle]), apply(same_size,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:triangle;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(size2, filter(x.s, yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(x.s, yellow))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_size,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, nor[apply(same_color,x.o),size2]), rectangle), yellow), rectangle), size3), circle), size3), apply(size-leq,iota(filter(x.s, not[size3])))), or[rectangle,yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:rectangle;4:yellow;4:rectangle;4:size3;4:circle;4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:rectangle;4:yellow
'λx.apply(not[and[size2,or[size1,iff[yellow,green]]]],iota(filter(x.s, and[and[size2,blue],blue])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:iff[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:blue;4:blue
'λx.apply(iff[rectangle,size2],iota(filter(x.s, or[size2,size1])))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), size3), and[and[green,not[rectangle]],size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:rectangle;4:size2
'λx.apply(and[triangle,not[nor[and[triangle,and[and[size3,size2],blue]],green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:blue;4:green;1:%s.o;2:x
'λx.forall(apply(size-gt,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size3), yellow), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:triangle
'λx.exists(or[blue,size2], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, size1), implies[not[circle],size2]), yellow), and[yellow,circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:implies[%s,%s];4:not[%s];4:circle;4:size2;4:yellow;4:and[%s,%s];4:yellow;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, implies[circle,green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:green
'λx.forall(yellow,filter(x.s, not[nand[apply(same_shape,iota(x.s)),circle]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,nand[and[implies[size3,size1],and[yellow,size1]],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:size1;4:and[%s,%s];4:yellow;4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[rectangle,rectangle],iota(filter(filter(filter(filter(filter(x.s, yellow), not[or[apply(same_color,x.o),size2]]), and[circle,or[size3,and[and[or[apply(same_color,iota(x.s)),triangle],size1],green]]]), circle), or[and[triangle,yellow],yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1;4:green;4:circle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:yellow
'λx.forall(and[not[yellow],size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:size2;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[triangle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.apply(and[and[size2,blue],or[and[apply(same_color,x.o),blue],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:blue;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[yellow,apply(same_size,iota(filter(filter(filter(filter(x.s, rectangle), size1), and[rectangle,or[rectangle,circle]]), size3)))]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:circle;4:size3
'λx.apply(and[blue,implies[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(nor[size1,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[yellow,size3],iota(filter(filter(x.s, size1), nor[blue,apply(same_color,x.o)])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[green,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[circle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[implies[and[green,apply(same_size,iota(x.s))],not[or[size1,triangle]]],circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size1;4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,iota(x.s))), circle), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:size1
'λx.empty(filter(x.s, nand[size1,or[implies[implies[rectangle,and[rectangle,apply(same_size,iota(filter(filter(filter(x.s, not[size2]), size2), size2)))]],rectangle],yellow]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:or[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2;4:size2;4:rectangle;4:yellow
'λx.apply(not[rectangle],iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(green,iota(filter(filter(x.s, and[green,and[rectangle,green]]), and[blue,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:blue;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, and[triangle,size3]), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:yellow
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, size3), not[green]), not[apply(same_shape,x.o)]), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(and[green,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,x.o)), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, or[circle,yellow]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow;4:rectangle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, circle), yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, or[size2,blue]), not[and[nand[nand[and[yellow,not[rectangle]],size3],blue],size1]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:blue;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:rectangle;4:size3;4:blue;4:size1
'λx.contains(iota(filter(filter(x.s, and[size2,yellow]), size3)), filter(filter(filter(x.s, green), and[circle,size3]), nor[not[size1],size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:size3;4:nor[%s,%s];4:not[%s];4:size1;4:size2
'λx.contains(x.o, filter(x.s, and[apply(same_size,iota(x.s)),and[green,not[and[not[green],and[circle,and[not[blue],blue]]]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:blue;4:blue
'λx.contains(iota(filter(filter(x.s, not[size2]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size3;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[and[yellow,size3],not[green]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:not[%s];4:green
'λx.empty(filter(filter(filter(x.s, apply(same_size,iota(x.s))), and[size2,or[circle,rectangle]]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:rectangle;4:yellow
'λx.apply(and[blue,and[or[and[and[or[blue,blue],size2],size3],size3],iff[rectangle,size3]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:size2;4:size3;4:size3;4:iff[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[and[size3,circle],yellow],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(size-lt,x.o),size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[nor[rectangle,yellow],blue],filter(x.s, size3))'	0:forall(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:rectangle;4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(iff[implies[rectangle,rectangle],and[circle,size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(not[rectangle],iota(filter(x.s, and[and[and[and[and[apply(size-lt,iota(filter(x.s, size2))),size3],size2],and[rectangle,triangle]],nor[size3,yellow]],green])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size2;4:and[%s,%s];4:rectangle;4:triangle;4:nor[%s,%s];4:size3;4:yellow;4:green
'λx.apply(iff[not[not[nand[green,rectangle]]],blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:not[%s];4:nand[%s,%s];4:green;4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,yellow],iota(filter(filter(x.s, rectangle), apply(size-leq,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, yellow), green), rectangle), nor[rectangle,size2]), and[green,yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:rectangle;4:nor[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:green;4:yellow
'λx.contains(x.o, filter(filter(x.s, not[blue]), apply(same_color,iota(filter(filter(x.s, and[or[nand[rectangle,size2],yellow],triangle]), circle)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size2;4:yellow;4:triangle;4:circle
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), and[rectangle,triangle]), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:triangle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, green), apply(same_color,x.o)), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.forall(green,filter(filter(x.s, rectangle), green))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.empty(filter(x.s, apply(same_color,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size2), circle), nand[apply(same_shape,x.o),circle]), apply(same_color,x.o)), or[size1,triangle]), and[and[size3,yellow],and[apply(same_size,iota(filter(x.s, nand[green,and[yellow,size1]]))),blue]]), or[apply(size-geq,x.o),and[blue,apply(size-gt,iota(x.s))]])))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:and[%s,%s];4:yellow;4:size1;4:blue;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, and[rectangle,size1]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(and[green,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[green,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[green,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(nand[and[blue,not[green]],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(apply(size-lt,iota(filter(x.s, triangle))), filter(filter(filter(x.s, and[or[not[size2],not[blue]],or[circle,circle]]), and[size3,and[size3,apply(size-geq,x.o)]]), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:not[%s];4:blue;4:or[%s,%s];4:circle;4:circle;4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3
'λx.contains(iota(filter(filter(x.s, green), and[yellow,circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(not[and[apply(same_size,iota(filter(x.s, not[size1]))),size3]],iota(filter(x.s, nor[blue,yellow])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:yellow
'λx.apply(or[and[yellow,nand[size2,apply(same_shape,x.o)]],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(or[size1,triangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.contains(iota(filter(x.s, not[not[not[or[apply(same_size,x.o),rectangle]]]])), filter(filter(filter(filter(filter(filter(x.s, size1), blue), yellow), triangle), yellow), or[or[yellow,circle],rectangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:yellow;4:triangle;4:yellow;4:or[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:rectangle
'λx.exists(apply(same_shape,iota(filter(filter(x.s, and[size3,rectangle]), size3))), filter(filter(x.s, or[or[blue,blue],and[circle,yellow]]), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:and[%s,%s];4:circle;4:yellow;4:size1
'λx.apply(implies[rectangle,and[and[blue,blue],apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size1,size2])), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(size-gt,iota(filter(x.s, yellow))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), or[yellow,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:yellow;4:size3
'λx.apply(or[not[apply(same_color,iota(x.s))],yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, or[size1,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3
'λx.forall(and[implies[green,and[apply(size-gt,iota(x.s)),and[green,size1]]],circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1;4:circle;3:%s.s;2:x
'λx.exists(apply(same_color,iota(x.s)), filter(filter(x.s, yellow), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(or[and[and[nand[green,not[apply(same_size,iota(filter(filter(x.s, and[blue,and[and[apply(same_size,iota(x.s)),not[size1]],size2]]), triangle)))]],size2],size1],blue],iota(filter(x.s, iff[triangle,and[yellow,rectangle]])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:size2;4:triangle;4:size2;4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(implies[implies[and[green,nor[and[and[not[rectangle],blue],circle],apply(same_size,iota(x.s))]],rectangle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:blue;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[rectangle,size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[yellow,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[implies[blue,yellow],not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[and[or[size1,green],size3],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,and[size1,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[green,and[iff[not[triangle],not[yellow]],size2]], filter(x.s, size1))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:triangle;4:not[%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(yellow,iota(filter(x.s, and[blue,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(yellow,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(and[size2,and[circle,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, blue), not[yellow]), size2), not[apply(same_size,iota(x.s))])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow;4:size2;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, apply(same_size,iota(x.s)))), filter(x.s, and[blue,not[apply(same_shape,iota(x.s))]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,or[green,yellow]],iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, and[rectangle,apply(size-leq,iota(filter(filter(x.s, or[size1,size3]), nor[blue,blue])))]), size2), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3;4:nor[%s,%s];4:blue;4:blue;4:size2;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, not[circle]), yellow), and[and[rectangle,size2],size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size1
'λx.apply(not[not[and[yellow,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, size2), rectangle), green))),iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(not[or[blue,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size1), and[and[and[and[size1,or[and[and[size2,blue],circle],size3]],rectangle],rectangle],green]), circle), circle), nand[green,blue]), and[green,triangle]), circle), green), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:blue;4:circle;4:size3;4:rectangle;4:rectangle;4:green;4:circle;4:circle;4:nand[%s,%s];4:green;4:blue;4:and[%s,%s];4:green;4:triangle;4:circle;4:green;4:size1
'λx.apply(nor[triangle,or[size1,apply(same_size,x.o)]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(and[size2,triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(x.s, or[size3,green])), filter(filter(x.s, rectangle), or[blue,size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:blue;4:size2
'λx.apply(and[and[apply(same_color,iota(filter(filter(filter(filter(x.s, circle), not[blue]), or[blue,green]), and[yellow,green]))),circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue;4:or[%s,%s];4:blue;4:green;4:and[%s,%s];4:yellow;4:green;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,apply(same_size,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(and[circle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,size3],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, or[nor[and[green,triangle],rectangle],yellow]), green)))), size2), yellow), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:triangle;4:rectangle;4:yellow;4:green;4:size2;4:yellow;4:size2
'λx.apply(size3,iota(filter(filter(filter(x.s, and[green,triangle]), or[circle,not[size2]]), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:or[%s,%s];4:circle;4:not[%s];4:size2;4:circle
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), and[size3,triangle]), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size3;4:triangle;4:triangle
'λx.exists(or[circle,not[not[or[implies[iff[iff[circle,nor[blue,iff[circle,blue]]],green],and[blue,apply(size-gt,iota(x.s))]],not[green]]]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:not[%s];4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:iff[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:blue;4:green;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(or[green,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(or[size1,and[apply(same_size,iota(x.s)),apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[circle,circle],iota(filter(filter(filter(filter(x.s, green), blue), size2), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:size2;4:rectangle
'λx.forall(and[size1,triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.apply(and[blue,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[and[apply(same_color,iota(filter(x.s, not[rectangle]))),rectangle],circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:rectangle;4:circle
'λx.apply(or[and[size2,and[triangle,rectangle]],and[green,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.exists(not[and[size1,size1]], filter(x.s, not[size3]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.empty(filter(filter(x.s, apply(same_size,iota(filter(x.s, circle)))), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, and[blue,not[apply(same_color,x.o)]]), size1), apply(same_color,iota(filter(filter(x.s, green), yellow)))), nand[and[green,rectangle],size2]), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:size2;4:size1
'λx.apply(not[blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, size3), apply(same_size,x.o)), blue), size3), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size3;4:rectangle
'λx.forall(and[rectangle,triangle],filter(filter(x.s, apply(same_shape,iota(x.s))), and[size3,or[size2,and[size2,nand[rectangle,yellow]]]]))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:size2;4:and[%s,%s];4:size2;4:nand[%s,%s];4:rectangle;4:yellow
'λx.apply(and[and[blue,rectangle],nor[implies[rectangle,circle],green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:nor[%s,%s];4:implies[%s,%s];4:rectangle;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), rectangle), yellow), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:yellow;4:rectangle
'λx.empty(filter(filter(filter(x.s, green), size3), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:yellow
'λx.apply(and[size3,and[not[size2],blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[triangle,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(nor[and[yellow,triangle],size2],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(and[size3,nor[rectangle,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nor[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size2,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[nor[or[nor[circle,yellow],circle],blue],and[and[rectangle,size2],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:circle;4:blue;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, and[green,or[rectangle,apply(same_color,iota(x.s))]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size3,blue],yellow],iota(filter(filter(x.s, not[and[yellow,and[green,triangle]]]), not[and[apply(same_color,x.o),size3]])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:triangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(nand[size2,nor[apply(same_color,x.o),size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(size-geq,iota(filter(x.s, apply(same_size,x.o)))))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[rectangle,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,apply(same_size,iota(filter(filter(filter(x.s, implies[and[iff[triangle,size3],or[and[size3,size1],circle]],and[not[and[triangle,size3]],blue]]), apply(same_size,x.o)), and[blue,rectangle])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size3;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(and[triangle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.apply(or[triangle,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), blue), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size1
'λx.apply(or[and[yellow,green],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[size2,and[size2,triangle]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, blue), not[yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(not[apply(size-gt,iota(filter(x.s, or[and[size3,iff[yellow,apply(same_color,iota(x.s))]],and[blue,rectangle]])))],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[size2,iff[iff[or[size2,size3],and[size3,rectangle]],size1]],and[nor[yellow,apply(same_size,x.o)],triangle]],iota(filter(x.s, nand[green,size3])))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:size2;4:iff[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size2;4:size3;4:and[%s,%s];4:size3;4:rectangle;4:size1;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size3
'λx.apply(iff[or[size2,iff[iff[or[size2,size3],and[size3,rectangle]],size1]],and[nor[yellow,apply(same_size,x.o)],triangle]],iota(filter(x.s, nand[green,size2])))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:size2;4:iff[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size2;4:size3;4:and[%s,%s];4:size3;4:rectangle;4:size1;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size2
'λx.apply(green,iota(filter(x.s, and[and[circle,triangle],green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:green
'λx.apply(not[triangle],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(x.s)),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[yellow,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, apply(same_shape,iota(x.s))))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(or[and[circle,not[circle]],and[size1,circle]],iota(filter(x.s, or[and[not[apply(same_shape,iota(x.s))],and[rectangle,circle]],triangle])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:circle;4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:triangle
'λx.apply(not[iff[rectangle,not[implies[nor[yellow,and[size3,size1]],and[and[size2,and[not[not[triangle]],not[apply(same_size,x.o)]]],and[triangle,triangle]]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:rectangle;4:not[%s];4:implies[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:size1;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.forall(or[and[yellow,size1],triangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:triangle;3:%s.s;2:x
'λx.exists(size2, filter(filter(x.s, green), and[and[size1,yellow],yellow]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:yellow
'λx.apply(size1,iota(filter(x.s, and[circle,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow
'λx.contains(iota(filter(filter(filter(filter(x.s, green), size3), rectangle), nor[and[green,not[yellow]],green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, nand[circle,triangle]), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:triangle;4:rectangle
'λx.apply(blue,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(circle,filter(x.s, size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(circle,filter(x.s, size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(circle,filter(x.s, green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, not[size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(apply(size-gt,iota(filter(filter(filter(filter(x.s, triangle), and[green,green]), not[yellow]), apply(same_size,x.o)))),iota(filter(filter(x.s, and[apply(same_shape,iota(filter(filter(x.s, or[or[yellow,yellow],yellow]), apply(same_color,x.o)))),nor[rectangle,or[size1,rectangle]]]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:green;4:not[%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:rectangle;4:size2
'λx.contains(x.o, filter(x.s, not[green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(size3,iota(filter(filter(x.s, or[circle,green]), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:green;4:triangle
'λx.forall(apply(same_shape,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(size1,filter(x.s, apply(same_shape,iota(x.s))))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,iota(x.s)))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, size3), yellow), or[size2,and[not[green],circle]]), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:or[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:green;4:circle;4:circle
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), or[rectangle,yellow]), not[and[triangle,not[size3]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:rectangle;4:yellow;4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:size3
'λx.contains(iota(filter(x.s, and[nand[rectangle,apply(same_size,iota(x.s))],and[rectangle,size2]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(x.s)),circle],iota(filter(x.s, and[rectangle,and[nor[yellow,not[rectangle]],size1]])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:not[%s];4:rectangle;4:size1
'λx.apply(blue,iota(filter(x.s, and[and[and[triangle,blue],and[green,rectangle]],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:green;4:rectangle;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, iff[green,size2]), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size2;4:size2
'λx.forall(iff[and[apply(same_size,iota(filter(x.s, and[size1,circle]))),triangle],and[apply(size-gt,x.o),circle]],filter(filter(x.s, size1), size3))'	0:forall(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(implies[nand[rectangle,size1],nand[size3,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:rectangle;4:size1;4:nand[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[circle,size1])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1
'λx.forall(blue,filter(x.s, not[blue]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), or[size3,not[rectangle]]), and[size2,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size3;4:not[%s];4:rectangle;4:and[%s,%s];4:size2;4:circle
'λx.apply(and[triangle,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, or[circle,not[blue]]), and[yellow,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:blue;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(yellow,iota(filter(x.s, and[blue,size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.apply(size3,iota(filter(filter(filter(x.s, blue), blue), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size1
'λx.apply(or[not[circle],implies[triangle,and[or[circle,green],and[iff[not[size1],triangle],implies[and[triangle,or[or[triangle,yellow],blue]],rectangle]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:size1;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_size,iota(filter(filter(x.s, circle), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;1:%s.o;2:x
'λx.exists(apply(same_color,iota(x.s)), filter(x.s, and[green,size3]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.exists(circle, filter(x.s, and[blue,size3]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.apply(or[blue,yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[apply(size-gt,x.o),or[or[yellow,and[or[size1,yellow],blue]],apply(same_shape,x.o)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size1,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[and[blue,or[nor[rectangle,not[iff[size1,and[size2,or[triangle,yellow]]]]],size2]]],iota(filter(filter(x.s, triangle), and[size3,iff[blue,and[not[not[yellow]],implies[circle,nand[apply(same_size,iota(x.s)),or[circle,blue]]]]]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:not[%s];4:yellow;4:implies[%s,%s];4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue
'λx.false'	0:false
'λx.apply(nor[not[not[rectangle]],nor[implies[triangle,size2],triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:implies[%s,%s];4:triangle;4:size2;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), filter(filter(filter(filter(x.s, or[size3,nor[size2,triangle]]), size3), rectangle), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:nor[%s,%s];4:size2;4:triangle;4:size3;4:rectangle;4:rectangle
'λx.apply(not[and[size3,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, rectangle), and[size3,size1]), apply(size-gt,x.o)), and[size2,or[apply(same_shape,x.o),size1]]), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:triangle
'λx.forall(or[and[not[triangle],yellow],circle],filter(filter(filter(filter(x.s, and[not[yellow],rectangle]), size2), rectangle), size2))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:yellow;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:rectangle;4:size2;4:rectangle;4:size2
'λx.apply(size2,iota(filter(filter(x.s, implies[size3,size3]), apply(same_color,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, not[and[not[rectangle],apply(same_size,iota(filter(x.s, apply(size-gt,iota(x.s)))))]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[not[blue]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue
'λx.contains(iota(x.s), filter(filter(filter(x.s, yellow), not[and[apply(same_size,iota(filter(filter(x.s, green), or[or[size1,yellow],blue]))),size2]]), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:blue;4:size2;4:size1
'λx.apply(and[and[size3,rectangle],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[or[blue,green],circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, or[and[size1,and[size2,and[apply(same_size,iota(x.s)),size2]]],nor[green,rectangle]]), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:green;4:rectangle;4:circle
'λx.empty(filter(filter(x.s, blue), apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[not[size1],apply(same_color,iota(filter(filter(filter(filter(filter(x.s, green), or[apply(same_color,x.o),and[not[or[and[not[size1],and[size3,nand[or[size2,size1],rectangle]]],nand[not[green],blue]]],apply(same_color,x.o)]]), size3), green), apply(size-lt,iota(x.s)))))], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:size2;4:size1;4:rectangle;4:nand[%s,%s];4:not[%s];4:green;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[not[green],and[size2,implies[blue,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:size2;4:implies[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(filter(x.s, green), yellow), size1)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, or[and[and[size1,triangle],green],size3]), and[circle,size3]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:green;4:size3;4:and[%s,%s];4:circle;4:size3
'λx.apply(iff[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, not[triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;3:%s.s;2:x
'λx.exists(blue, x.s)'	0:exists(%s, %s);4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[nor[green,size3],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:green;4:size3;4:blue;1:%s.o;2:x
'λx.apply(nand[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, rectangle), size3), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[size1,and[yellow,blue]],iota(filter(x.s, and[rectangle,not[size2]])))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), triangle), or[or[or[blue,size3],yellow],size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:yellow;4:size1
'λx.apply(rectangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(triangle,filter(filter(x.s, triangle), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(or[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:circle;3:%s.s;2:x
'λx.apply(not[and[yellow,size1]],iota(filter(filter(filter(x.s, and[and[apply(size-geq,x.o),or[green,size1]],circle]), not[or[size3,rectangle]]), not[nand[and[circle,size1],size1]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:green;4:size1;4:circle;4:not[%s];4:or[%s,%s];4:size3;4:rectangle;4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:size1;4:size1
'λx.apply(and[yellow,not[yellow]],iota(filter(filter(x.s, size2), nor[yellow,and[triangle,and[green,blue]]])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:blue
'λx.forall(triangle,filter(x.s, apply(size-lt,iota(x.s))))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.forall(green,filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(circle, filter(x.s, triangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[or[triangle,triangle],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(iff[yellow,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, or[size3,size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size3
'λx.apply(circle,iota(filter(x.s, and[nor[circle,size1],or[blue,size1]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:circle;4:size1;4:or[%s,%s];4:blue;4:size1
'λx.forall(apply(size-lt,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[triangle,nand[and[size1,yellow],rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:nand[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, circle), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.empty(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), size2), yellow), blue), or[size2,size1]), size1), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:yellow;4:blue;4:or[%s,%s];4:size2;4:size1;4:size1;4:triangle
'λx.apply(not[and[rectangle,size2]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(x.s, and[size3,rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.empty(filter(filter(x.s, blue), not[not[rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:not[%s];4:rectangle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, size3), blue), and[not[blue],not[green]]), and[triangle,size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:green;4:and[%s,%s];4:triangle;4:size2
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), or[circle,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:circle;4:yellow
'λx.apply(rectangle,iota(filter(filter(x.s, and[green,triangle]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:rectangle
'λx.apply(not[and[rectangle,apply(same_color,x.o)]],iota(filter(filter(x.s, and[size1,size2]), and[green,size1])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:green;4:size1
'λx.apply(iff[and[apply(same_size,x.o),triangle],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(and[and[and[apply(same_color,iota(filter(filter(filter(filter(filter(x.s, green), blue), iff[rectangle,yellow]), size2), apply(same_shape,iota(filter(x.s, not[yellow])))))),and[circle,blue]],and[size2,and[green,triangle]]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:iff[%s,%s];4:rectangle;4:yellow;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,green],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:triangle;1:%s.o;2:x
'λx.exists(or[blue,nand[yellow,green]], filter(x.s, and[nand[not[green],size3],yellow]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:green;4:size3;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, and[or[not[yellow],circle],triangle]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:circle;4:triangle;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(circle,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.forall(or[green,size2],filter(filter(x.s, circle), blue))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.forall(circle,x.s)'	0:forall(%s,%s);4:circle;3:%s.s;2:x
'λx.apply(or[blue,and[or[circle,circle],yellow]],iota(filter(x.s, nand[blue,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:size2
'λx.apply(iff[yellow,apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, blue))),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size1), not[and[size2,size3]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:size2;4:size3
'λx.apply(yellow,iota(filter(x.s, and[not[rectangle],nor[and[blue,or[not[size2],and[size2,blue]]],not[or[green,triangle]]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size2;4:blue;4:not[%s];4:or[%s,%s];4:green;4:triangle
'λx.apply(or[green,and[blue,yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[blue,not[size1]],apply(same_color,iota(filter(filter(filter(filter(x.s, blue), blue), yellow), yellow)))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[and[and[green,size3],yellow],and[circle,rectangle]], filter(filter(x.s, size2), blue))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:yellow;4:and[%s,%s];4:circle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(nor[yellow,apply(same_color,x.o)],iota(filter(filter(filter(x.s, size3), and[rectangle,yellow]), size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:yellow;4:size2
'λx.apply(and[and[size3,not[and[yellow,blue]]],iff[size1,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:yellow;4:blue;4:iff[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(iff[blue,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, green), and[and[and[circle,green],triangle],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:triangle;4:blue
'λx.apply(and[apply(same_size,x.o),not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[green,not[rectangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:rectangle
'λx.apply(implies[and[apply(same_color,iota(filter(x.s, size1))),size3],not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, apply(same_color,iota(x.s))), yellow), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(not[size3],iota(filter(x.s, or[yellow,size2])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size2
'λx.apply(triangle,iota(filter(x.s, or[yellow,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green
'λx.forall(and[and[apply(same_shape,x.o),and[green,green]],iff[size3,or[size1,blue]]],filter(filter(x.s, yellow), apply(same_size,iota(x.s))))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:green;4:iff[%s,%s];4:size3;4:or[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(or[size3,apply(same_shape,x.o)],filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(size1,iota(filter(filter(filter(x.s, and[triangle,size1]), not[blue]), and[blue,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, iff[nor[size3,not[not[green]]],apply(same_shape,iota(x.s))]), implies[size1,or[not[and[apply(same_size,x.o),circle]],triangle]]), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nor[%s,%s];4:size3;4:not[%s];4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:triangle;4:size1
'λx.apply(and[nand[green,triangle],and[and[green,apply(same_shape,iota(filter(x.s, size3)))],not[rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:triangle;4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.exists(implies[not[triangle],green], filter(filter(filter(x.s, size3), rectangle), and[rectangle,and[apply(size-leq,x.o),or[apply(size-lt,iota(x.s)),apply(same_size,x.o)]]]))'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:triangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, size1), circle), size1), not[yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:size1;4:not[%s];4:yellow
'λx.exists(nor[size2,nor[triangle,blue]], filter(x.s, size1))'	0:exists(%s, %s);4:nor[%s,%s];4:size2;4:nor[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[size2,and[size2,triangle]],iota(filter(x.s, and[size2,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3
'λx.apply(or[green,size2],iota(filter(x.s, implies[apply(same_size,iota(filter(filter(x.s, blue), size1))),circle])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:circle
'λx.apply(iff[iff[apply(size-geq,iota(filter(filter(x.s, yellow), size2))),nor[rectangle,circle]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:nor[%s,%s];4:rectangle;4:circle;4:triangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(filter(x.s, nor[and[and[apply(size-lt,iota(x.s)),not[circle]],blue],circle]), triangle), not[size2]), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:blue;4:circle;4:triangle;4:not[%s];4:size2;4:green
'λx.apply(blue,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(not[green],x.o)'	0:apply(%s,%s);4:not[%s];4:green;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, not[size2]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), blue), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:triangle
'λx.apply(or[or[size1,size2],rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(filter(x.s, size1), triangle), blue), apply(size-gt,iota(x.s))), and[and[size3,size3],circle]), size1)), filter(filter(filter(x.s, implies[apply(same_color,iota(filter(filter(filter(filter(filter(x.s, size3), yellow), or[and[or[and[green,circle],yellow],size3],blue]), yellow), blue))),circle]), circle), or[size2,green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:yellow;4:size3;4:blue;4:yellow;4:blue;4:circle;4:circle;4:or[%s,%s];4:size2;4:green
'λx.apply(yellow,iota(filter(x.s, not[or[and[size3,size3],blue]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:blue
'λx.contains(iota(filter(x.s, or[green,circle])), filter(filter(x.s, yellow), apply(size-lt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[and[size2,and[green,not[yellow]]],rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:not[%s];4:yellow;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, or[green,or[size3,circle]]), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:circle;4:triangle
'λx.apply(nand[circle,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[green]), and[circle,size2]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:circle;4:size2;4:yellow
'λx.forall(and[rectangle,size3],filter(x.s, or[and[iff[green,size2],yellow],size2]))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:green;4:size2;4:yellow;4:size2
'λx.forall(green,filter(filter(filter(filter(x.s, size2), yellow), green), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:green;4:size1
'λx.contains(x.o, filter(filter(x.s, nand[nor[apply(same_color,x.o),circle],not[rectangle]]), iff[or[yellow,apply(same_shape,iota(x.s))],size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:not[%s];4:rectangle;4:iff[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(x.s, size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(implies[size3,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nor[or[rectangle,circle],and[size1,blue]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(x.s, not[size2]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.forall(circle,filter(x.s, not[size3]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(apply(same_color,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, rectangle), size3), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size2
'λx.apply(implies[nor[triangle,size1],implies[circle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:triangle;4:size1;4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), triangle), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:rectangle
'λx.apply(not[and[blue,and[blue,green]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[size2,and[and[and[size2,implies[rectangle,rectangle]],circle],apply(same_size,iota(x.s))]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:implies[%s,%s];4:rectangle;4:rectangle;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(nand[or[and[apply(size-geq,iota(x.s)),and[triangle,green]],green],size2], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green;4:green;4:size2;3:%s.s;2:x
'λx.apply(not[iff[size3,not[size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size3;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, green))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-lt,iota(filter(filter(x.s, size2), nor[apply(same_color,x.o),rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_shape,x.o),rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[green,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, apply(size-geq,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(filter(filter(x.s, circle), size2), size2), blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size2;4:blue
'λx.apply(apply(size-gt,iota(filter(filter(filter(filter(x.s, nand[nand[nand[size2,and[and[yellow,nand[and[not[size3],green],triangle]],green]],size3],and[yellow,and[green,not[size2]]]]), blue), size1), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nand[%s,%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:green;4:triangle;4:green;4:size3;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:not[%s];4:size2;4:blue;4:size1;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), size2), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(circle,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.contains(x.o, filter(x.s, and[size1,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1
'λx.contains(x.o, filter(x.s, and[size2,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(and[and[and[circle,circle],or[and[rectangle,nand[size3,size2]],and[apply(size-leq,iota(filter(x.s, triangle))),green]]],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:size3;4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, implies[circle,green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:green
'λx.apply(yellow,iota(filter(filter(x.s, apply(same_size,x.o)), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(apply(size-leq,iota(filter(x.s, size3))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,or[blue,or[not[triangle],apply(same_size,x.o)]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size3,rectangle],iota(filter(filter(x.s, and[apply(same_color,iota(filter(x.s, not[circle]))),circle]), or[circle,apply(size-leq,iota(filter(filter(x.s, or[or[and[yellow,not[circle]],and[yellow,circle]],size1]), size3)))])))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:circle;4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:circle;4:size1;4:size3
'λx.apply(not[size3],iota(filter(filter(filter(x.s, apply(size-geq,iota(x.s))), apply(size-lt,iota(x.s))), size3)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(implies[size2,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size2,size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, rectangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, blue), or[size3,or[size3,rectangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:rectangle
'λx.apply(and[yellow,and[size3,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, or[yellow,size2])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[and[and[size2,size1],size1],circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:size1;4:circle;3:%s.s;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), and[implies[and[blue,and[blue,and[yellow,blue]]],blue],blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:blue;4:blue;4:blue
'λx.empty(filter(filter(x.s, apply(same_color,iota(x.s))), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(green,iota(filter(filter(filter(x.s, yellow), size3), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:yellow
'λx.exists(implies[circle,and[circle,and[size1,and[circle,apply(same_shape,x.o)]]]], filter(filter(filter(filter(filter(x.s, yellow), and[or[nand[green,triangle],circle],and[green,size1]]), size2), and[green,rectangle]), triangle))'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:green;4:triangle;4:circle;4:and[%s,%s];4:green;4:size1;4:size2;4:and[%s,%s];4:green;4:rectangle;4:triangle
'λx.apply(and[blue,and[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, and[apply(same_color,x.o),triangle]))),iota(filter(filter(filter(x.s, size3), or[and[size3,not[size2]],not[rectangle]]), and[green,size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:size2;4:not[%s];4:rectangle;4:and[%s,%s];4:green;4:size3
'λx.exists(not[green], filter(filter(filter(filter(x.s, size1), not[green]), blue), rectangle))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:green;4:blue;4:rectangle
'λx.apply(not[blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), blue), green), or[not[and[yellow,size1]],size2]), and[size2,blue]), circle), or[yellow,rectangle]), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:green;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:size2;4:and[%s,%s];4:size2;4:blue;4:circle;4:or[%s,%s];4:yellow;4:rectangle;4:triangle
'λx.exists(size2, filter(x.s, apply(same_size,iota(x.s))))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, x.s)'	0:exists(%s, %s);4:triangle;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, size1), triangle), rectangle), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:rectangle;4:circle
'λx.apply(and[or[size2,apply(same_color,iota(filter(x.s, blue)))],or[blue,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, apply(same_shape,iota(x.s))), not[triangle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(rectangle,iota(x.s))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, not[size1]), or[yellow,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:or[%s,%s];4:yellow;4:size3
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(apply(same_color,iota(filter(filter(x.s, or[green,or[not[rectangle],yellow]]), rectangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, not[size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(circle,iota(filter(x.s, apply(size-geq,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[nand[size1,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nand[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(implies[or[implies[rectangle,rectangle],not[green]],iff[size1,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:green;4:iff[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[or[size3,size2],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,x.o),apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), and[blue,yellow]), blue), or[or[blue,apply(same_size,x.o)],circle]), size1), size3), or[rectangle,not[and[and[size1,circle],size2]]]), and[size1,and[size1,size1]])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:blue;4:yellow;4:blue;4:or[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size1;4:size3;4:or[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:size2;4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:size1
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(size-lt,x.o)), blue), green), size3), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:green;4:size3;4:circle
'λx.apply(implies[not[iff[green,and[and[circle,iff[nand[yellow,implies[size2,size3]],yellow]],size2]]],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:nand[%s,%s];4:yellow;4:implies[%s,%s];4:size2;4:size3;4:yellow;4:size2;4:size1;1:%s.o;2:x
'λx.apply(nor[green,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.forall(and[and[circle,size1],apply(same_size,iota(filter(x.s, size2)))],filter(x.s, rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(x.s), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[size1,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(filter(x.s, nand[iff[circle,rectangle],blue]), not[and[blue,rectangle]]), size1), not[size1]), circle), iff[apply(size-gt,iota(filter(x.s, and[and[circle,size1],rectangle]))),and[green,not[circle]]]), iff[rectangle,or[apply(same_color,iota(x.s)),green]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:iff[%s,%s];4:circle;4:rectangle;4:blue;4:not[%s];4:and[%s,%s];4:blue;4:rectangle;4:size1;4:not[%s];4:size1;4:circle;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:rectangle;4:and[%s,%s];4:green;4:not[%s];4:circle;4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, apply(same_size,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, x.s)'	0:exists(%s, %s);4:yellow;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), apply(size-lt,iota(filter(filter(x.s, yellow), circle)))), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:circle
'λx.apply(or[size2,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nand[apply(same_color,x.o),rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[and[size2,blue],apply(same_size,iota(x.s))], filter(filter(filter(x.s, blue), circle), yellow))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:yellow
'λx.apply(or[blue,rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(blue,filter(x.s, and[size1,triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.apply(or[blue,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), filter(filter(filter(filter(x.s, apply(size-geq,x.o)), and[yellow,yellow]), not[circle]), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:yellow;4:not[%s];4:circle;4:size2
'λx.forall(and[and[not[size3],size2],triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:size2;4:triangle;3:%s.s;2:x
'λx.apply(or[circle,rectangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), size2), not[blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:not[%s];4:blue
'λx.apply(and[circle,and[blue,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, yellow), iff[implies[size2,rectangle],and[and[size3,and[circle,apply(size-geq,iota(x.s))]],triangle]]), and[yellow,size1]), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:implies[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:yellow;4:size1;4:triangle
'λx.apply(not[iff[iff[apply(same_size,x.o),and[circle,circle]],and[triangle,and[not[and[green,rectangle]],size2]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, yellow), circle), triangle), size1), circle), apply(size-geq,iota(filter(filter(filter(filter(x.s, not[and[or[green,rectangle],triangle]]), blue), green), apply(size-gt,x.o)))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:triangle;4:size1;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:triangle;4:blue;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[green,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[circle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[iff[not[green],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, and[size3,size2]), nor[triangle,circle]), implies[size3,blue]), triangle), and[triangle,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2;4:nor[%s,%s];4:triangle;4:circle;4:implies[%s,%s];4:size3;4:blue;4:triangle;4:and[%s,%s];4:triangle;4:size2
'λx.exists(rectangle, filter(filter(x.s, and[size3,blue]), circle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;4:circle
'λx.apply(not[or[size1,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(not[or[implies[circle,and[blue,blue]],not[and[not[triangle],size2]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:triangle;4:size2;1:%s.o;2:x
'λx.forall(circle,filter(x.s, triangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[blue,yellow],or[size2,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(implies[and[rectangle,yellow],and[triangle,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, rectangle), yellow), implies[and[size1,triangle],size2]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:implies[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size2;4:blue
'λx.forall(rectangle,filter(filter(filter(x.s, green), size2), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:circle
'λx.apply(not[rectangle],iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[size3,green]), not[size3]), not[green]), green), circle), circle), size2)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:not[%s];4:size3;4:not[%s];4:green;4:green;4:circle;4:circle;4:size2
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(filter(filter(filter(x.s, blue), iff[not[or[size3,yellow]],size1]), size1), and[rectangle,blue]), blue), yellow), and[size3,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:yellow;4:size1;4:size1;4:and[%s,%s];4:rectangle;4:blue;4:blue;4:yellow;4:and[%s,%s];4:size3;4:blue
'λx.exists(and[rectangle,not[rectangle]], filter(x.s, apply(size-gt,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, and[implies[not[triangle],circle],not[blue]]), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:triangle;4:circle;4:not[%s];4:blue;4:circle
'λx.apply(blue,iota(filter(x.s, nand[and[size1,circle],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:size1;4:circle;4:blue
'λx.apply(not[and[triangle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, and[rectangle,triangle]), apply(size-leq,iota(x.s))))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[blue,green],green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(x.s, triangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.forall(size1,filter(x.s, not[iff[yellow,triangle]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:yellow;4:triangle
'λx.exists(or[not[green],nor[size1,apply(same_shape,x.o)]], filter(filter(filter(x.s, size3), and[or[size1,or[rectangle,or[nor[circle,green],apply(same_shape,iota(x.s))]]],size2]), size2))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:green;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:size2
'λx.exists(and[size1,size3], filter(filter(filter(x.s, circle), apply(same_size,iota(x.s))), size2))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.exists(or[size2,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.apply(nor[not[size1],green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[apply(same_size,iota(x.s)),blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[yellow],x.o)'	0:apply(%s,%s);4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(nor[not[not[yellow]],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:not[%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, size3), or[yellow,rectangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:yellow;4:rectangle
'λx.apply(or[size2,apply(size-geq,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,triangle],iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.exists(yellow, filter(filter(filter(x.s, nand[or[size2,apply(same_size,iota(filter(filter(filter(x.s, size3), size3), nor[not[blue],blue])))],size1]), and[nor[apply(same_size,iota(x.s)),apply(same_shape,iota(filter(x.s, size3)))],size1]), and[apply(same_color,x.o),or[apply(same_shape,iota(x.s)),triangle]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:nor[%s,%s];4:not[%s];4:blue;4:blue;4:size1;4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, blue), circle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:blue;3:%s.s;2:x
'λx.apply(apply(size-leq,iota(filter(filter(filter(filter(x.s, size2), triangle), and[apply(size-gt,iota(filter(filter(filter(filter(x.s, and[and[green,or[circle,triangle]],and[apply(same_size,iota(x.s)),triangle]]), rectangle), size1), size2))),rectangle]), yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle;4:size1;4:size2;4:rectangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, not[apply(size-gt,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(not[not[apply(same_shape,iota(filter(filter(filter(x.s, green), circle), green)))]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:green;1:%s.o;2:x
'λx.apply(and[green,circle],iota(filter(filter(filter(x.s, not[size2]), circle), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle;4:size2
'λx.apply(blue,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[and[yellow,green],green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[not[blue],size1]],iota(filter(filter(x.s, apply(same_size,iota(x.s))), and[and[size1,iff[circle,triangle]],and[circle,apply(same_size,x.o)]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:iff[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[not[and[size2,size3]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[circle,and[size2,apply(same_size,iota(filter(x.s, implies[size2,size1])))]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[triangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, yellow), blue), apply(same_color,iota(filter(x.s, or[size2,rectangle])))))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle
'λx.apply(and[or[and[size2,yellow],triangle],rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[rectangle,apply(same_shape,iota(x.s))],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[circle,rectangle],iota(filter(filter(x.s, iff[triangle,or[blue,and[triangle,not[not[yellow]]]]]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:yellow;4:size1
'λx.apply(and[and[not[rectangle],not[size2]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[not[and[yellow,rectangle]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;4:yellow;1:%s.o;2:x
'λx.exists(circle, filter(x.s, or[size2,and[yellow,triangle]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:triangle
'λx.forall(nor[green,size3],filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:nor[%s,%s];4:green;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, triangle), or[and[green,circle],triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:triangle
'λx.apply(circle,iota(filter(filter(filter(x.s, size3), rectangle), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:rectangle
'λx.apply(and[rectangle,and[and[or[blue,rectangle],or[blue,and[iff[rectangle,size1],not[nor[green,apply(same_shape,iota(x.s))]]]]],apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size1;4:not[%s];4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[apply(same_shape,x.o),and[size1,yellow]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.apply(and[nand[green,and[and[green,apply(same_color,iota(x.s))],size1]],not[rectangle]],iota(filter(filter(x.s, circle), and[rectangle,green])))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, size1), nor[implies[and[apply(same_shape,x.o),apply(same_shape,iota(x.s))],blue],size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(implies[and[yellow,size3],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:size2;1:%s.o;2:x
'λx.exists(rectangle, x.s)'	0:exists(%s, %s);4:rectangle;3:%s.s;2:x
'λx.exists(and[size2,size1], filter(filter(filter(filter(x.s, yellow), size3), size1), nand[yellow,or[size2,or[apply(same_shape,iota(x.s)),or[or[circle,rectangle],apply(size-lt,x.o)]]]]))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size1;4:nand[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[triangle,apply(size-gt,iota(filter(filter(filter(x.s, rectangle), not[and[size3,blue]]), triangle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:and[%s,%s];4:size3;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(implies[or[apply(size-geq,iota(x.s)),triangle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), apply(same_color,iota(filter(x.s, rectangle))))), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), size2), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size3
'λx.apply(size3,iota(filter(x.s, and[implies[apply(same_shape,iota(x.s)),apply(same_shape,x.o)],green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.contains(x.o, filter(filter(filter(x.s, triangle), and[and[green,circle],or[rectangle,implies[triangle,green]]]), not[rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:triangle;4:green;4:not[%s];4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, rectangle), triangle), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size1
'λx.apply(yellow,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(x.s, apply(same_size,iota(x.s)))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, yellow), and[or[size2,implies[circle,size3]],circle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:or[%s,%s];4:size2;4:implies[%s,%s];4:circle;4:size3;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, and[or[and[triangle,or[size1,not[size2]]],blue],size3]), apply(size-lt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:not[%s];4:size2;4:blue;4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(not[blue], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(yellow, filter(filter(x.s, yellow), and[and[nand[green,and[and[green,apply(same_color,iota(x.s))],size1]],not[rectangle]],yellow]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle;4:yellow
'λx.apply(iff[apply(same_size,iota(filter(x.s, yellow))),not[iff[yellow,iff[green,green]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:iff[%s,%s];4:yellow;4:iff[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, not[implies[blue,not[size1]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:not[%s];4:size1
'λx.empty(filter(x.s, apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(size-geq,iota(x.s)),filter(x.s, rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[size2,and[or[yellow,size1],circle]],iota(filter(filter(x.s, and[blue,size3]), not[or[size1,size2]])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:not[%s];4:or[%s,%s];4:size1;4:size2
'λx.forall(or[circle,or[rectangle,size2]],filter(x.s, and[size1,size3]))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.apply(and[and[not[and[apply(same_size,iota(filter(x.s, not[triangle]))),yellow]],or[rectangle,or[or[size2,blue],and[triangle,or[triangle,or[or[yellow,size2],circle]]]]]],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:yellow;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size2;4:blue;4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size2), size3))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.forall(not[size3],x.s)'	0:forall(%s,%s);4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(not[size2],x.s)'	0:forall(%s,%s);4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(or[green,not[circle]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, implies[size1,size1]), and[rectangle,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:size1;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, and[not[circle],and[apply(same_shape,iota(filter(filter(x.s, rectangle), not[size3]))),and[or[size1,green],and[size2,green]]]]), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:and[%s,%s];4:size2;4:green;4:rectangle
'λx.exists(size1, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(size3, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, not[and[size2,blue]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:blue
'λx.forall(and[size1,and[size3,triangle]],filter(filter(filter(filter(x.s, not[iff[size3,size1]]), or[blue,size1]), circle), apply(same_size,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:size3;4:size1;4:or[%s,%s];4:blue;4:size1;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[size3,yellow],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[and[blue,nor[triangle,green]],not[apply(same_shape,iota(filter(x.s, rectangle)))]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:triangle;4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,and[not[rectangle],circle]],iota(filter(filter(x.s, or[green,size2]), not[triangle])))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size2;4:not[%s];4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, not[green]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[yellow,and[green,not[circle]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:green;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size2), green), or[green,yellow]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:or[%s,%s];4:green;4:yellow;4:yellow
'λx.apply(and[yellow,blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[green,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_size,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, circle), not[size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size3
'λx.apply(blue,iota(filter(x.s, and[and[triangle,nand[yellow,circle]],or[size1,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:yellow;4:circle;4:or[%s,%s];4:size1;4:green
'λx.apply(and[and[blue,size3],iff[and[size1,yellow],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:iff[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[nand[rectangle,blue],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size3,circle],not[nand[size2,and[and[green,yellow],rectangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:not[%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(x.s), filter(x.s, not[and[rectangle,size2]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:size2
'λx.empty(filter(filter(x.s, green), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(implies[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,green],iota(filter(filter(filter(x.s, green), size1), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:yellow
'λx.forall(rectangle,filter(filter(filter(x.s, rectangle), not[not[apply(size-gt,x.o)]]), size2))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2
'λx.apply(or[apply(same_shape,x.o),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(nor[size3,not[green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(not[not[rectangle]],filter(filter(filter(filter(filter(filter(x.s, and[circle,yellow]), not[and[size3,circle]]), apply(same_size,x.o)), yellow), not[green]), triangle))'	0:forall(%s,%s);4:not[%s];4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:not[%s];4:green;4:triangle
'λx.apply(or[yellow,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[not[triangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(or[implies[or[apply(same_color,iota(x.s)),size3],and[and[size2,or[and[circle,triangle],size2]],size3]],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size2;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, not[nand[iff[green,triangle],size3]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:iff[%s,%s];4:green;4:triangle;4:size3
'λx.apply(not[not[yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[green,not[size3]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[apply(same_color,iota(x.s)),size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, circle), and[rectangle,size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(not[apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size2,circle],iota(filter(filter(x.s, and[size1,size3]), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;4:blue
'λx.apply(and[size2,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(x.s))'	0:apply(%s,%s);4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,nor[and[circle,or[green,triangle]],rectangle]],iota(filter(x.s, and[triangle,iff[circle,and[circle,blue]]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:iff[%s,%s];4:circle;4:and[%s,%s];4:circle;4:blue
'λx.apply(and[size1,not[apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[rectangle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(not[or[and[blue,circle],and[rectangle,size3]]],iota(filter(filter(x.s, and[circle,apply(same_shape,iota(x.s))]), size1)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(and[nor[triangle,or[or[blue,size2],not[iff[implies[green,and[and[apply(same_color,x.o),size1],size2]],or[rectangle,and[size1,size3]]]]]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:blue;4:size2;4:not[%s];4:iff[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(x.s, apply(same_shape,iota(x.s))), and[nand[not[not[size1]],implies[rectangle,apply(size-geq,x.o)]],blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:not[%s];4:size1;4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue
'λx.exists(or[apply(same_size,x.o),size3], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(green,filter(filter(filter(x.s, size2), size1), blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:blue
'λx.apply(and[size1,not[not[blue]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[iff[size2,rectangle],and[size2,and[size1,circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, iff[not[rectangle],yellow]), nand[size2,triangle]), and[rectangle,blue]), size3), iff[size2,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:rectangle;4:yellow;4:nand[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:rectangle;4:blue;4:size3;4:iff[%s,%s];4:size2;4:rectangle
'λx.exists(or[triangle,circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:circle;3:%s.s;2:x
'λx.apply(not[and[or[implies[and[and[or[not[blue],size3],implies[yellow,green]],rectangle],yellow],blue],size1]],iota(filter(filter(x.s, or[implies[triangle,size2],nor[yellow,blue]]), triangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:size3;4:implies[%s,%s];4:yellow;4:green;4:rectangle;4:yellow;4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:size2;4:nor[%s,%s];4:yellow;4:blue;4:triangle
'λx.apply(green,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[triangle,and[green,implies[or[apply(same_shape,iota(filter(x.s, implies[and[size1,yellow],nand[size1,and[green,implies[triangle,blue]]]]))),green],and[and[blue,nand[rectangle,green]],size2]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:nand[%s,%s];4:size1;4:and[%s,%s];4:green;4:implies[%s,%s];4:triangle;4:blue;4:green;4:and[%s,%s];4:and[%s,%s];4:blue;4:nand[%s,%s];4:rectangle;4:green;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, and[apply(size-geq,x.o),size3]), triangle), triangle), size1), yellow), and[size1,and[green,blue]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;4:triangle;4:triangle;4:size1;4:yellow;4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:blue
'λx.apply(size1,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size1,green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[size3,size3],iota(filter(x.s, and[green,rectangle])))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle
'λx.apply(and[size1,rectangle],iota(filter(filter(filter(filter(x.s, size1), green), and[green,circle]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:and[%s,%s];4:green;4:circle;4:blue
'λx.apply(and[or[iff[circle,rectangle],rectangle],apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:circle;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, size3)), filter(x.s, or[rectangle,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(or[blue,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, size2), nand[size2,not[not[not[blue]]]]), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:size2;4:not[%s];4:not[%s];4:not[%s];4:blue;4:rectangle
'λx.forall(size3,filter(filter(x.s, size1), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.forall(size2,filter(filter(x.s, size3), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(or[not[or[size3,rectangle]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(and[nor[blue,and[size3,blue]],and[rectangle,green]], filter(x.s, and[blue,apply(same_shape,iota(x.s))]))'	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, not[rectangle]), nor[triangle,blue]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:nor[%s,%s];4:triangle;4:blue
'λx.apply(and[yellow,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,not[green]],implies[size3,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:green;4:implies[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, apply(same_size,iota(filter(x.s, not[and[rectangle,size1]])))), and[apply(same_size,iota(filter(x.s, blue))),rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(apply(size-gt,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size2,and[yellow,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[and[blue,apply(size-lt,x.o)],apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, size2), size2), yellow), green), apply(size-geq,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:yellow;4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), green), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:circle
'λx.apply(and[or[triangle,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:blue;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, nor[apply(size-leq,x.o),apply(same_shape,iota(x.s))]), or[circle,green]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:green
'λx.apply(and[size2,nor[triangle,and[triangle,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, implies[nand[blue,green],size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:nand[%s,%s];4:blue;4:green;4:size1
'λx.apply(not[and[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[and[size1,or[implies[blue,apply(same_shape,x.o)],and[size2,or[blue,or[blue,yellow]]]]],green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:blue;4:or[%s,%s];4:blue;4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size2,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(iff[size2,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, size2)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, size3)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(x.s, size1)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(circle,filter(x.s, implies[circle,size2]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size2
'λx.contains(iota(filter(x.s, and[yellow,not[apply(same_color,x.o)]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[size1,apply(same_shape,iota(filter(x.s, implies[rectangle,and[circle,apply(same_shape,iota(x.s))]])))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(apply(size-lt,iota(filter(filter(filter(x.s, not[triangle]), apply(size-gt,x.o)), circle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.exists(not[and[size2,rectangle]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(and[rectangle,apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, implies[iff[size1,and[rectangle,and[rectangle,rectangle]]],nor[rectangle,not[triangle]]]), size2), blue), yellow), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle;4:nor[%s,%s];4:rectangle;4:not[%s];4:triangle;4:size2;4:blue;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, or[triangle,iff[triangle,circle]])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:triangle;4:circle
'λx.apply(rectangle,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, size3), or[or[size3,and[size3,circle]],yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:circle;4:yellow
'λx.exists(apply(same_color,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(circle,filter(x.s, implies[blue,size2]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size2
'λx.apply(or[and[and[apply(same_shape,x.o),and[not[and[rectangle,yellow]],and[and[and[not[size1],triangle],triangle],and[yellow,and[triangle,rectangle]]]]],size1],not[not[not[green]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:triangle;4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:rectangle;4:size1;4:not[%s];4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, blue), green), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:yellow
'λx.apply(apply(same_shape,iota(filter(filter(x.s, nor[nand[size2,rectangle],blue]), yellow))),iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nand[%s,%s];4:size2;4:rectangle;4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.contains(x.o, filter(filter(filter(x.s, triangle), triangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:green
'λx.empty(filter(filter(x.s, circle), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle
'λx.empty(filter(filter(filter(x.s, green), circle), not[nand[size2,size2]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:not[%s];4:nand[%s,%s];4:size2;4:size2
'λx.apply(and[size3,rectangle],iota(filter(filter(filter(filter(filter(x.s, blue), not[blue]), nand[or[apply(size-geq,x.o),or[triangle,size3]],size2]), rectangle), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:blue;4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:size3;4:size2;4:rectangle;4:blue
'λx.contains(iota(filter(x.s, green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(and[blue,circle],iota(filter(x.s, and[blue,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.exists(triangle, filter(x.s, nor[or[green,yellow],not[green]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:green;4:yellow;4:not[%s];4:green
'λx.contains(iota(filter(filter(x.s, yellow), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;3:%s.s;2:x
'λx.apply(not[iff[size2,triangle]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(filter(filter(x.s, and[apply(same_size,x.o),yellow]), triangle), size3), or[rectangle,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:triangle;4:size3;4:or[%s,%s];4:rectangle;4:size3
'λx.apply(and[yellow,or[size3,and[blue,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[yellow,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[blue,not[size3]],iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(and[rectangle,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), or[and[rectangle,circle],and[not[blue],implies[size1,implies[yellow,or[or[circle,green],yellow]]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:size1;4:implies[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:circle;4:green;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(or[yellow,triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(x.s, or[yellow,and[size2,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:green
'λx.apply(not[nor[and[triangle,triangle],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[not[apply(same_size,iota(x.s))],and[triangle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(implies[size3,or[yellow,size2]],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, or[size3,nor[rectangle,size3]]), implies[yellow,size2]), green), size2), iff[or[not[nor[triangle,not[size1]]],rectangle],triangle]), and[yellow,size2]), circle), yellow), blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:nor[%s,%s];4:rectangle;4:size3;4:implies[%s,%s];4:yellow;4:size2;4:green;4:size2;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:triangle;4:not[%s];4:size1;4:rectangle;4:triangle;4:and[%s,%s];4:yellow;4:size2;4:circle;4:yellow;4:blue
'λx.apply(and[apply(same_size,x.o),yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[size1,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size3), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), and[apply(same_size,x.o),size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, or[triangle,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3
'λx.forall(not[green],x.s)'	0:forall(%s,%s);4:not[%s];4:green;3:%s.s;2:x
'λx.forall(not[not[circle]],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(filter(x.s, triangle), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.contains(x.o, filter(filter(x.s, triangle), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.contains(x.o, filter(filter(x.s, triangle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.exists(nor[green,blue], filter(filter(filter(filter(x.s, or[green,rectangle]), size1), not[triangle]), not[circle]))'	0:exists(%s, %s);4:nor[%s,%s];4:green;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle;4:size1;4:not[%s];4:triangle;4:not[%s];4:circle
'λx.apply(nor[size3,yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[size2,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(nor[apply(size-leq,x.o),apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[circle,size1],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[and[and[circle,circle],or[and[rectangle,nand[size3,size2]],and[apply(size-leq,iota(filter(x.s, circle))),green]]],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:size3;4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(not[or[apply(same_color,x.o),size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[blue,yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(and[blue,circle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(filter(x.s, or[not[blue],circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:blue;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[and[size2,size3],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:circle
'λx.exists(and[and[rectangle,size1],size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:size1;3:%s.s;2:x
'λx.apply(apply(size-leq,iota(filter(filter(filter(x.s, blue), green), size3))),iota(filter(filter(filter(x.s, and[circle,green]), yellow), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;4:yellow;4:circle
'λx.apply(not[nor[and[apply(same_shape,x.o),size2],apply(same_color,iota(filter(filter(x.s, or[circle,triangle]), and[blue,not[iff[size1,size2]]])))]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:blue;4:not[%s];4:iff[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[implies[size2,and[rectangle,apply(same_size,iota(filter(x.s, size1)))]],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(and[not[circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size1), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, size2), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.contains(iota(x.s), filter(filter(x.s, size3), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.contains(iota(x.s), filter(filter(x.s, size2), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, size2), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(size3,iota(filter(x.s, and[triangle,and[blue,size1]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:size1
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, size1), not[size1])))), blue), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size1;4:blue;4:blue
'λx.exists(and[size1,and[yellow,not[blue]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:not[%s];4:blue;3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, green), triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(or[apply(same_color,x.o),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, nor[triangle,size1]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:size1;4:size2;3:%s.s;2:x
'λx.apply(and[rectangle,iff[size1,green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[or[green,triangle],green],not[circle]],iota(filter(filter(x.s, apply(size-leq,x.o)), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:triangle;4:green;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, yellow), size3), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:triangle
'λx.apply(and[and[circle,apply(same_size,iota(filter(x.s, and[or[blue,size2],not[and[size2,and[size2,size2]]]])))],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:size2;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(filter(x.s, circle), and[and[green,and[size2,yellow]],apply(same_shape,iota(x.s))]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[blue,iff[triangle,blue]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:iff[%s,%s];4:triangle;4:blue
'λx.exists(and[blue,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(and[circle,or[yellow,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(nand[size3,yellow],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, iff[or[size2,apply(same_color,x.o)],nand[circle,apply(size-lt,x.o)]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[circle,and[and[size3,blue],not[not[and[not[blue],rectangle]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:not[%s];4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, apply(same_color,iota(x.s))))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[circle,blue],iota(filter(x.s, and[and[blue,size3],green])))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:green
'λx.apply(or[iff[rectangle,triangle],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(filter(x.s, triangle), green))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.exists(size1, filter(filter(x.s, triangle), size2))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.exists(size3, filter(filter(x.s, triangle), size1))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.forall(apply(size-gt,x.o),filter(filter(x.s, rectangle), not[triangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle
'λx.apply(green,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[rectangle,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[implies[size3,not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size3;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(size3, filter(filter(filter(filter(filter(filter(x.s, not[rectangle]), green), green), apply(same_size,iota(x.s))), implies[circle,triangle]), yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:green;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:triangle;4:yellow
'λx.apply(or[triangle,and[size3,or[circle,or[circle,yellow]]]],iota(filter(x.s, not[and[iff[size2,green],not[size3]]])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:or[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:green;4:not[%s];4:size3
'λx.apply(nor[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[size1,size2]), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:size1;4:rectangle
'λx.apply(implies[and[circle,rectangle],implies[yellow,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[triangle,yellow]), rectangle), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow;4:rectangle;4:size3
'λx.apply(not[and[size2,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[and[size2,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.contains(iota(filter(x.s, circle)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[triangle,green],iota(filter(filter(x.s, and[size1,circle]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:green
'λx.apply(and[yellow,or[not[not[apply(size-gt,iota(x.s))]],and[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size2), blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(not[apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[triangle,rectangle],iota(filter(filter(filter(filter(x.s, green), not[size2]), not[yellow]), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size2;4:not[%s];4:yellow;4:triangle
'λx.apply(and[and[and[triangle,circle],or[and[rectangle,nand[size3,size2]],and[apply(size-leq,iota(filter(x.s, triangle))),green]]],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:size3;4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[and[triangle,nor[or[circle,nand[rectangle,not[and[green,not[apply(same_color,x.o)]]]]],and[and[or[size1,apply(same_color,x.o)],and[yellow,size1]],green]]],and[size2,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:or[%s,%s];4:circle;4:nand[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:size1;4:green;4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, and[size3,triangle]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle;4:size2
'λx.contains(iota(filter(filter(filter(filter(x.s, nand[circle,size1]), or[triangle,and[rectangle,and[not[and[and[size3,and[size2,and[or[apply(size-leq,x.o),and[circle,apply(same_color,x.o)]],blue]]],rectangle]],yellow]]]), circle), size2)), filter(filter(x.s, blue), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:size1;4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;4:yellow;4:circle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.empty(filter(x.s, and[apply(size-geq,iota(filter(filter(x.s, yellow), rectangle))),size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:size2
'λx.apply(or[iff[nand[rectangle,triangle],implies[yellow,blue]],size2],iota(filter(x.s, implies[size1,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:rectangle;4:triangle;4:implies[%s,%s];4:yellow;4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:size3
'λx.forall(size2,filter(filter(x.s, or[circle,yellow]), rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow;4:rectangle
'λx.apply(or[apply(same_color,x.o),size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, size1), iff[green,and[rectangle,not[rectangle]]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle
'λx.apply(and[and[or[green,not[size3]],circle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:size3;4:circle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, yellow), triangle), yellow)), filter(filter(x.s, rectangle), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.forall(or[apply(same_shape,x.o),rectangle],filter(filter(filter(x.s, size1), apply(same_color,x.o)), and[yellow,rectangle]))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(implies[yellow,apply(size-leq,iota(filter(x.s, and[and[green,triangle],circle])))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(nor[or[size1,not[or[yellow,size1]]],blue],iota(filter(x.s, and[apply(same_shape,x.o),size2])))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:yellow;4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(and[blue,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(x.s))'	0:apply(%s,%s);4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(x.s))'	0:apply(%s,%s);4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(x.s))'	0:apply(%s,%s);4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), rectangle), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:blue
'λx.apply(and[not[green],rectangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[or[yellow,green],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(not[and[circle,size2]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[circle,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(implies[green,apply(same_size,iota(x.s))],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[size1,size2],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[not[or[green,size1]],size2], filter(filter(filter(filter(x.s, not[or[size2,size1]]), rectangle), triangle), yellow))'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:size1;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:size1;4:rectangle;4:triangle;4:yellow
'λx.exists(and[not[apply(same_color,x.o)],circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(same_shape,x.o)), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(not[rectangle],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[not[and[green,circle]]]), nand[yellow,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:circle;4:nand[%s,%s];4:yellow;4:circle
'λx.apply(and[size3,yellow],iota(filter(x.s, and[circle,size1])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1
'λx.forall(and[blue,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.exists(green, filter(filter(x.s, not[implies[triangle,implies[circle,blue]]]), triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:triangle;4:implies[%s,%s];4:circle;4:blue;4:triangle
'λx.apply(not[and[size1,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(not[and[size1,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[or[blue,not[or[size3,apply(same_color,x.o)]]],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[apply(same_color,iota(filter(x.s, green))),apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[apply(same_color,iota(filter(x.s, triangle))),rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,nor[not[size3],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nor[%s,%s];4:not[%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,or[yellow,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(not[and[apply(same_size,iota(filter(x.s, implies[or[size1,blue],size2]))),triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size2;4:triangle;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, triangle), size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(green,iota(x.s))'	0:apply(%s,%s);4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(x.s), filter(x.s, and[apply(size-leq,x.o),or[triangle,not[size2]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:size2
'λx.apply(not[or[yellow,apply(same_shape,iota(x.s))]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, green), not[size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[green,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[green,apply(same_shape,iota(x.s))],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[circle,green],not[or[green,triangle]]],iota(filter(filter(x.s, and[apply(same_size,x.o),size3]), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:not[%s];4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:rectangle
'λx.empty(filter(filter(filter(filter(filter(x.s, size3), size1), green), circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:green;4:circle;4:blue
'λx.apply(and[or[triangle,blue],green],iota(filter(filter(filter(x.s, rectangle), rectangle), green)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:green
'λx.apply(triangle,iota(filter(filter(x.s, and[and[triangle,size2],blue]), or[and[triangle,or[size2,apply(same_size,x.o)]],yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:blue;4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(implies[and[apply(size-gt,x.o),not[size2]],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[blue,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[size2,circle]],iota(filter(filter(x.s, apply(same_size,x.o)), size2)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(implies[yellow,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(implies[not[or[circle,or[circle,green]]],blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:circle;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,circle],iota(filter(filter(x.s, or[not[circle],triangle]), implies[and[rectangle,size1],green])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:green
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, and[apply(same_size,iota(x.s)),rectangle]), blue), and[not[and[apply(same_size,x.o),green]],green]), triangle), green), or[and[nand[size3,not[and[nand[implies[green,size1],circle],apply(same_size,iota(x.s))]]],or[blue,yellow]],triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:blue;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:green;4:triangle;4:green;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:green;4:size1;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:triangle
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, or[size3,apply(same_color,iota(filter(x.s, size2)))]), size3), size2), and[size1,or[circle,green]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size2;4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:green
'λx.exists(circle, filter(x.s, green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[apply(same_shape,x.o),nand[green,size3]],iota(filter(x.s, or[yellow,not[and[size1,size3]]])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size1;4:size3
'λx.apply(and[not[and[green,and[and[size3,circle],apply(size-geq,iota(filter(filter(x.s, not[triangle]), circle)))]]],and[implies[nand[rectangle,and[blue,iff[not[green],triangle]]],yellow],size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:circle;4:and[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:iff[%s,%s];4:not[%s];4:green;4:triangle;4:yellow;4:size1;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, and[or[rectangle,circle],size3]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:size3
'λx.apply(apply(same_shape,iota(filter(filter(x.s, or[and[or[apply(same_color,iota(x.s)),size2],size2],yellow]), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:size2;4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(implies[or[not[not[apply(same_size,iota(filter(filter(filter(filter(x.s, size1), or[blue,size1]), yellow), and[triangle,green])))]],size2],rectangle], filter(filter(filter(filter(x.s, triangle), size3), rectangle), blue))'	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:size1;4:yellow;4:and[%s,%s];4:triangle;4:green;4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:rectangle;4:blue
'λx.apply(iff[apply(size-leq,iota(filter(x.s, yellow))),size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[blue,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(yellow, filter(filter(filter(filter(x.s, rectangle), not[yellow]), or[size3,iff[or[apply(same_color,iota(filter(x.s, rectangle))),and[size1,not[size1]]],green]]), and[rectangle,and[implies[not[circle],blue],triangle]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:yellow;4:or[%s,%s];4:size3;4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:not[%s];4:size1;4:green;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:circle;4:blue;4:triangle
'λx.exists(size1, filter(filter(filter(filter(filter(filter(x.s, rectangle), not[blue]), or[yellow,apply(same_shape,x.o)]), size3), triangle), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:blue;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:triangle;4:size1
'λx.empty(filter(filter(filter(x.s, size3), size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:green
'λx.exists(iff[green,size3], filter(filter(x.s, circle), nand[size1,green]))'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:size1;4:green
'λx.apply(size2,iota(filter(filter(x.s, not[yellow]), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2
'λx.apply(size3,iota(filter(filter(x.s, not[yellow]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size1
'λx.apply(and[apply(same_shape,iota(x.s)),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle
'λx.apply(nor[yellow,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[and[or[size1,and[and[circle,green],or[not[blue],circle]]],green],triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:or[%s,%s];4:not[%s];4:blue;4:circle;4:green;4:triangle
'λx.apply(nand[rectangle,not[and[green,not[apply(same_color,x.o)]]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[or[rectangle,triangle]]],iota(filter(x.s, and[rectangle,size2])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.empty(filter(filter(x.s, nor[size1,yellow]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:yellow;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, size1), yellow), triangle), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:triangle;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, apply(size-lt,x.o)), green), blue), and[implies[size3,apply(same_shape,x.o)],size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:blue;4:and[%s,%s];4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.forall(apply(same_shape,iota(x.s)),filter(filter(filter(x.s, size2), not[size2]), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size2;4:size3
'λx.contains(x.o, filter(filter(x.s, size2), apply(same_size,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, implies[blue,blue]), size1), or[green,and[size3,size1]]), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:blue;4:size1;4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:size1;4:size2
'λx.apply(apply(same_color,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(and[green,apply(same_color,iota(x.s))],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(filter(x.s, apply(size-lt,x.o)), and[green,nand[rectangle,circle]])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:green;4:nand[%s,%s];4:rectangle;4:circle
'λx.exists(and[blue,size1], filter(x.s, triangle))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, triangle), nand[size1,green]), circle)), filter(filter(x.s, not[or[size1,size2]]), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:size1;4:green;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size1;4:size2;4:size2
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, yellow), rectangle), and[circle,rectangle]), yellow), apply(size-gt,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:rectangle;4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[blue,nand[green,circle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(x.s, blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[triangle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(size-geq,x.o)), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, not[size1]), apply(size-leq,x.o)), size3), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3;4:triangle
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, rectangle), yellow), blue), nor[blue,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue;4:nor[%s,%s];4:blue;4:triangle
'λx.apply(or[and[size1,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[not[circle],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(x.s, rectangle), not[circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:circle;3:%s.s;2:x
'λx.exists(and[size2,green], filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), triangle))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:triangle
'λx.apply(and[and[nand[size1,yellow],not[and[yellow,blue]]],iff[yellow,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:yellow;4:not[%s];4:and[%s,%s];4:yellow;4:blue;4:iff[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(and[not[apply(same_shape,iota(x.s))],circle],filter(filter(x.s, not[nand[size3,or[triangle,size1]]]), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:size1;4:yellow
'λx.empty(filter(filter(x.s, and[size1,green]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:size3
'λx.forall(not[and[apply(size-gt,x.o),or[circle,yellow]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.exists(rectangle, filter(filter(filter(x.s, and[apply(same_size,iota(filter(x.s, blue))),blue]), size1), yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size1;4:yellow
'λx.forall(circle,filter(x.s, circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[circle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, and[size3,blue]), blue), apply(size-gt,x.o)), and[blue,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size2
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, size3), size3), size3))),iota(filter(filter(x.s, and[yellow,blue]), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:circle
'λx.apply(and[nand[size2,size1],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[apply(same_shape,x.o),nand[yellow,apply(size-leq,iota(filter(filter(x.s, rectangle), or[blue,iff[size3,yellow]])))]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:blue;4:iff[%s,%s];4:size3;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, and[or[blue,and[nor[triangle,circle],circle]],circle]), green), and[yellow,circle]), size1), circle), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:circle;4:circle;4:circle;4:green;4:and[%s,%s];4:yellow;4:circle;4:size1;4:circle;4:circle;1:%s.o;2:x
'λx.apply(nor[iff[apply(same_shape,x.o),size3],size2],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[apply(same_size,iota(x.s)),yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, blue), yellow)), filter(x.s, apply(same_shape,iota(filter(x.s, size2)))))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(filter(filter(x.s, blue), size1), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:circle
'λx.apply(size2,iota(filter(filter(filter(x.s, blue), size1), and[and[green,and[triangle,not[implies[triangle,and[green,and[size2,size1]]]]]],nand[size3,implies[implies[circle,not[or[size2,circle]]],apply(same_size,x.o)]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:not[%s];4:implies[%s,%s];4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size1;4:nand[%s,%s];4:size3;4:implies[%s,%s];4:implies[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:size2;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(or[size2,rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.apply(or[and[yellow,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:green;1:%s.o;2:x
'λx.apply(or[and[size3,not[or[circle,circle]]],not[size2]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:circle;4:circle;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), size2), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:circle
'λx.apply(iff[circle,and[green,size3]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[and[yellow,blue],size2],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,and[rectangle,and[triangle,not[size3]]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(and[or[and[not[not[size2]],triangle],and[size2,size1]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:size2;4:triangle;4:and[%s,%s];4:size2;4:size1;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, nor[rectangle,yellow]), triangle)), filter(x.s, and[size1,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.apply(green,iota(filter(x.s, or[green,blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, nor[size3,apply(same_color,x.o)]), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.forall(and[blue,and[or[size3,not[rectangle]],apply(same_size,iota(x.s))]],filter(x.s, rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[size2,rectangle], filter(x.s, size1))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, or[green,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle
'λx.apply(not[size2],iota(filter(filter(filter(x.s, size1), size3), triangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, circle), apply(same_size,iota(filter(x.s, yellow))))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[blue,or[triangle,green]], filter(filter(filter(filter(x.s, and[and[triangle,size2],blue]), or[and[triangle,or[size2,apply(same_size,x.o)]],yellow]), yellow), blue))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:blue;4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:yellow;4:blue
'λx.apply(iff[circle,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.contains(iota(filter(x.s, or[and[size2,not[blue]],and[apply(size-leq,x.o),or[triangle,not[size2]]]])), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(x.s)),and[triangle,and[and[size3,size2],blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(implies[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(or[blue,not[and[size3,rectangle]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(not[and[and[triangle,yellow],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(nor[green,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, not[green]), size2), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2;4:blue
'λx.empty(filter(filter(filter(x.s, or[size3,apply(same_color,x.o)]), not[rectangle]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle;4:triangle
'λx.exists(blue, filter(filter(filter(x.s, size2), yellow), nand[and[size3,size1],yellow]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:size3;4:size1;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.forall(and[implies[circle,not[apply(size-gt,x.o)]],not[size2]],filter(x.s, apply(same_color,iota(x.s))))'	0:forall(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, yellow), and[circle,apply(same_shape,iota(x.s))]), yellow), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(nand[circle,yellow],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[size2,size1],and[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:size1;4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[green,size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[and[circle,size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[implies[triangle,not[and[size1,size2]]],size2],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:size1;4:size2;4:size2;3:%s.s;2:x
'λx.exists(blue, filter(x.s, and[size2,apply(same_size,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size2), size2), or[size3,or[rectangle,nor[not[not[size3]],circle]]]), rectangle), implies[green,rectangle]), apply(same_size,x.o)), or[and[and[blue,green],and[apply(same_color,x.o),triangle]],size1]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:not[%s];4:size3;4:circle;4:rectangle;4:implies[%s,%s];4:green;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[triangle,apply(same_color,x.o)],and[size2,triangle]],iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, size2), not[and[triangle,triangle]]), size1), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[and[size3,size3],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, or[rectangle,and[or[not[size1],green],or[blue,and[and[size1,circle],implies[blue,yellow]]]]]), implies[rectangle,size3]), size2), green), green), rectangle), or[rectangle,green]), rectangle), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:implies[%s,%s];4:blue;4:yellow;4:implies[%s,%s];4:rectangle;4:size3;4:size2;4:green;4:green;4:rectangle;4:or[%s,%s];4:rectangle;4:green;4:rectangle;4:yellow
'λx.exists(or[or[or[blue,or[apply(same_size,iota(filter(x.s, apply(same_color,x.o)))),yellow]],size1],apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, size1), and[triangle,and[size1,implies[green,size3]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:implies[%s,%s];4:green;4:size3
'λx.exists(yellow, filter(x.s, yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[yellow,and[rectangle,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(or[blue,and[and[apply(same_shape,iota(x.s)),and[yellow,not[yellow]]],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(iff[apply(same_color,x.o),implies[and[circle,and[size1,implies[or[blue,not[green]],yellow]]],rectangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:implies[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:green;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[apply(size-leq,iota(filter(filter(x.s, blue), rectangle))),yellow],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:yellow;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(size-lt,iota(filter(filter(filter(filter(x.s, size3), and[apply(size-geq,iota(x.s)),and[rectangle,or[rectangle,blue]]]), not[and[not[not[apply(same_color,x.o)]],size1]]), size2)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2
'λx.apply(and[nor[size2,and[yellow,green]],or[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:green;4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[blue,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(and[and[green,apply(same_color,x.o)],yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(or[and[not[size1],nor[size1,apply(size-geq,x.o)]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(filter(filter(filter(filter(x.s, yellow), not[size3]), and[and[size2,size1],or[triangle,yellow]]), circle), yellow), apply(same_shape,iota(x.s))), size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:triangle;4:yellow;4:circle;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.exists(and[triangle,size2], filter(filter(x.s, yellow), blue))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(or[and[or[blue,not[size3]],size2],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:size3;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[size1,circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.apply(not[or[yellow,apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), circle), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:yellow
'λx.forall(apply(same_size,x.o),filter(x.s, triangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[not[yellow],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nor[and[apply(same_color,iota(x.s)),and[and[blue,size2],or[implies[circle,size3],and[apply(same_size,x.o),blue]]]],implies[or[or[size2,rectangle],circle],not[circle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:or[%s,%s];4:implies[%s,%s];4:circle;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:circle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[and[nor[yellow,not[and[circle,or[blue,and[or[triangle,not[blue]],and[and[apply(same_size,iota(x.s)),rectangle],rectangle]]]]]],triangle],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:rectangle;4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(size-geq,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), nor[and[size1,size3],or[apply(same_color,x.o),rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:and[%s,%s];4:size1;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, size1), not[size2]), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size2;4:green
'λx.apply(circle,iota(filter(filter(x.s, size2), or[blue,and[size2,not[size3]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:blue;4:and[%s,%s];4:size2;4:not[%s];4:size3
'λx.exists(nand[apply(same_shape,iota(filter(filter(filter(x.s, and[size3,circle]), rectangle), green))),circle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;4:rectangle;4:green;4:circle;3:%s.s;2:x
'λx.apply(and[yellow,and[not[circle],size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[nor[size1,yellow],or[rectangle,rectangle]],iota(filter(filter(x.s, circle), and[implies[apply(same_size,iota(x.s)),yellow],blue])))'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:size1;4:yellow;4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(or[and[triangle,nor[nand[size2,rectangle],triangle]],not[and[yellow,and[and[size2,and[rectangle,size1]],size2]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:nand[%s,%s];4:size2;4:rectangle;4:triangle;4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size1;4:size2;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(filter(filter(filter(filter(filter(x.s, not[blue]), triangle), or[or[blue,not[size3]],or[and[circle,apply(same_shape,x.o)],size1]]), size3), size3), triangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle;4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:size3;4:size3;4:triangle
'λx.apply(and[yellow,and[size1,apply(same_size,iota(x.s))]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, iff[size2,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, green), apply(same_size,iota(filter(filter(x.s, triangle), size1))))), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(triangle,filter(filter(x.s, apply(size-leq,iota(filter(filter(x.s, triangle), not[and[not[not[yellow]],circle]])))), size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:and[%s,%s];4:not[%s];4:not[%s];4:yellow;4:circle;4:size3
'λx.apply(green,iota(filter(filter(filter(x.s, circle), size3), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size2
'λx.apply(and[size1,not[apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[yellow,rectangle],iota(filter(x.s, nand[apply(size-gt,iota(x.s)),rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.exists(yellow, filter(x.s, blue))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[circle,and[yellow,and[size2,yellow]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(not[or[green,size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size3,and[blue,blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.forall(circle,filter(x.s, yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[and[size1,rectangle],circle]), not[circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:circle;4:not[%s];4:circle
'λx.apply(nand[nand[nor[apply(same_color,x.o),circle],not[rectangle]],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:not[%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size3)), filter(filter(filter(filter(x.s, green), not[and[apply(size-leq,iota(x.s)),apply(same_size,x.o)]]), apply(same_shape,x.o)), nor[circle,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:circle;4:circle
'λx.apply(nor[and[rectangle,size2],or[implies[size3,or[not[iff[size3,and[green,implies[not[nand[size3,not[size3]]],triangle]]]],size3]],or[nand[iff[and[triangle,size1],and[size3,size1]],apply(size-lt,iota(filter(filter(x.s, triangle), size1)))],size2]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:implies[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:size3;4:and[%s,%s];4:green;4:implies[%s,%s];4:not[%s];4:nand[%s,%s];4:size3;4:not[%s];4:size3;4:triangle;4:size3;4:or[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size2;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, size2), circle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:size1
'λx.apply(and[iff[rectangle,size1],not[nor[triangle,apply(same_shape,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size1;4:not[%s];4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size1, filter(filter(filter(x.s, not[blue]), iff[blue,not[and[or[and[rectangle,apply(same_shape,x.o)],apply(size-leq,iota(x.s))],yellow]]]), rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:iff[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, or[and[triangle,circle],blue]), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:blue;4:green
'λx.apply(circle,iota(filter(filter(x.s, apply(size-gt,iota(x.s))), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(x.s, or[not[triangle],yellow])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:triangle;4:yellow
'λx.apply(implies[size3,apply(same_color,iota(filter(filter(filter(x.s, size2), not[size2]), green)))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(nor[not[iff[or[size2,blue],size1]],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:size2;4:blue;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(implies[circle,and[green,apply(size-lt,iota(filter(x.s, not[yellow])))]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(filter(x.s, size1), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.exists(and[size1,not[size3]], filter(x.s, apply(size-gt,iota(filter(x.s, circle)))))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[triangle,or[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), nor[rectangle,size2]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[blue,circle],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, apply(same_size,iota(x.s))), yellow), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:size2;3:%s.s;2:x
'λx.apply(and[blue,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), rectangle), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:yellow
'λx.apply(nand[and[circle,triangle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, or[size1,circle]), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:circle;4:size2
'λx.contains(x.o, filter(filter(filter(filter(x.s, not[yellow]), size3), not[blue]), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;4:not[%s];4:blue;4:size1
'λx.apply(and[size2,rectangle],iota(filter(filter(x.s, yellow), nand[and[not[and[not[yellow],triangle]],or[not[rectangle],yellow]],apply(same_color,iota(filter(x.s, not[triangle])))])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:triangle;4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(x.s, yellow))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[and[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[size3],x.o)'	0:apply(%s,%s);4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[size1],x.o)'	0:apply(%s,%s);4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[size2],x.o)'	0:apply(%s,%s);4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[size1,apply(size-lt,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[iff[size3,size1],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size3;4:size1;4:blue;1:%s.o;2:x
'λx.exists(or[yellow,nand[yellow,or[apply(size-gt,x.o),apply(same_shape,iota(filter(x.s, circle)))]]], filter(x.s, not[not[size3]]))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3
'λx.apply(and[apply(size-lt,x.o),rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[green,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(not[and[rectangle,not[size2]]],iota(filter(filter(filter(x.s, size2), yellow), green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:green
'λx.apply(implies[implies[yellow,circle],and[circle,apply(same_size,x.o)]],iota(filter(x.s, iff[circle,yellow])))'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:yellow
'λx.apply(yellow,x.o)'	0:apply(%s,%s);4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(and[and[blue,not[rectangle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size2), blue), size3), not[size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:size3;4:not[%s];4:size3
'λx.apply(size3,iota(filter(x.s, apply(same_color,iota(filter(filter(filter(x.s, yellow), green), circle))))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:circle
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), rectangle), and[not[and[size1,size3]],circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:size3;4:circle
'λx.apply(or[and[triangle,yellow],nand[yellow,not[nor[size1,size2]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:nand[%s,%s];4:yellow;4:not[%s];4:nor[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size1,or[size3,not[triangle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:or[%s,%s];4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.forall(blue,filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[and[size3,circle],and[triangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[not[apply(same_shape,iota(x.s))],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size3), not[apply(same_shape,iota(x.s))]), green), not[blue]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:not[%s];4:blue;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, and[iff[or[rectangle,not[rectangle]],circle],yellow]), nor[iff[rectangle,size2],yellow]), size2), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:circle;4:yellow;4:nor[%s,%s];4:iff[%s,%s];4:rectangle;4:size2;4:yellow;4:size2;4:green
'λx.apply(blue,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(blue,iota(filter(x.s, apply(same_size,iota(filter(filter(filter(filter(filter(x.s, not[rectangle]), and[size3,yellow]), yellow), apply(same_color,x.o)), rectangle))))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:size3;4:yellow;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.contains(iota(x.s), filter(filter(x.s, size1), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(and[rectangle,size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[apply(size-gt,x.o)],iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(and[nand[green,triangle],and[triangle,apply(size-geq,iota(x.s))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:triangle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, and[or[rectangle,blue],and[rectangle,not[rectangle]]]), size2), implies[size2,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:size2;4:implies[%s,%s];4:size2;4:size1
'λx.contains(iota(x.s), filter(filter(filter(x.s, or[or[green,apply(same_shape,x.o)],yellow]), triangle), or[apply(same_size,x.o),circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.exists(apply(same_shape,iota(filter(x.s, or[size1,and[size1,apply(same_color,iota(x.s))]]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size1), and[size2,or[and[or[and[or[rectangle,yellow],triangle],size3],circle],triangle]]), yellow), or[and[and[green,size3],size2],apply(same_size,x.o)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:triangle;4:size3;4:circle;4:triangle;4:yellow;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, circle))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(yellow,iota(filter(filter(x.s, and[and[size1,rectangle],green]), not[circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:green;4:not[%s];4:circle
'λx.exists(blue, filter(x.s, yellow))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[nand[not[yellow],rectangle],yellow],iota(filter(x.s, and[green,blue])))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:yellow;4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue
'λx.apply(size1,iota(filter(filter(x.s, size1), nor[implies[triangle,green],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:green
'λx.apply(implies[not[size1],size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[yellow,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(iff[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, implies[size2,rectangle]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle;4:green
'λx.apply(and[size1,implies[yellow,circle]],iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:implies[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(and[apply(same_color,x.o),or[not[yellow],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[not[apply(same_color,iota(filter(filter(filter(x.s, size1), circle), rectangle)))],nand[and[yellow,size3],nor[size3,and[size1,size3]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:nor[%s,%s];4:size3;4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(or[or[apply(same_size,x.o),size3],and[blue,or[triangle,circle]]], filter(filter(x.s, green), yellow))'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(nor[green,triangle],iota(filter(filter(x.s, or[or[blue,and[size2,size2]],green]), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size2;4:size2;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(and[blue,yellow], filter(filter(x.s, circle), triangle))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.empty(filter(x.s, circle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, size1), blue), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:size2
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), triangle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(and[triangle,and[apply(size-geq,x.o),nand[and[or[not[circle],yellow],blue],size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:yellow;4:blue;4:size3;1:%s.o;2:x
'λx.apply(nor[size1,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(size1, filter(filter(filter(filter(filter(x.s, triangle), size3), circle), blue), or[yellow,and[and[apply(same_color,x.o),and[and[size2,circle],size3]],circle]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:circle;4:blue;4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size3;4:circle
'λx.apply(implies[apply(same_color,x.o),nor[rectangle,size2]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.forall(and[size1,and[yellow,circle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[not[or[size2,apply(same_size,iota(x.s))]],iff[size1,yellow]]), not[rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:yellow;4:not[%s];4:rectangle
'λx.empty(filter(filter(x.s, and[triangle,yellow]), or[green,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:green;4:yellow
'λx.empty(filter(filter(x.s, size1), iff[triangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:triangle;4:blue
'λx.exists(implies[circle,or[circle,green]], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(and[rectangle,green],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, green), apply(same_shape,iota(filter(filter(filter(x.s, yellow), green), circle)))), circle), and[not[size3],size2]), and[or[size3,and[size3,nor[size2,not[circle]]]],not[circle]]), green), and[and[yellow,size2],implies[and[green,triangle],green]]), size1), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:circle;4:circle;4:and[%s,%s];4:not[%s];4:size3;4:size2;4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:nor[%s,%s];4:size2;4:not[%s];4:circle;4:not[%s];4:circle;4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:implies[%s,%s];4:and[%s,%s];4:green;4:triangle;4:green;4:size1;4:yellow
'λx.forall(or[apply(same_size,x.o),triangle],filter(filter(filter(x.s, size3), green), triangle))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:triangle
'λx.apply(nor[size3,or[size1,green]],iota(filter(x.s, and[rectangle,apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:or[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(size-lt,iota(filter(filter(x.s, size2), blue))),rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[blue,green], filter(x.s, rectangle))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[blue,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[blue,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[blue,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.exists(circle, filter(x.s, apply(size-lt,iota(x.s))))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[not[green],apply(same_shape,x.o)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,and[rectangle,green]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[rectangle,size2],iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), size2), green), apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, yellow), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(or[size2,not[size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(x.s, or[green,size1]), triangle), circle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size1;4:triangle;4:circle
'λx.forall(or[circle,not[triangle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, circle), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(implies[circle,apply(size-geq,iota(filter(filter(filter(filter(x.s, size2), and[apply(same_shape,iota(x.s)),not[size1]]), size3), blue)))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:size3;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;3:%s.s;2:x
'λx.apply(and[or[blue,nor[size3,not[green]]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:size3;4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[and[or[triangle,blue],green],triangle],iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(x.s, rectangle), size3), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:yellow
'λx.apply(nor[rectangle,triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size3,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[and[blue,yellow],circle],iota(filter(filter(filter(filter(filter(x.s, or[yellow,size3]), and[rectangle,and[green,size3]]), yellow), size2), not[circle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size3;4:yellow;4:size2;4:not[%s];4:circle
'λx.apply(nand[or[yellow,size1],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,and[green,green]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(filter(filter(x.s, not[or[not[yellow],yellow]]), circle), size3), rectangle), circle), size1), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:not[%s];4:yellow;4:yellow;4:circle;4:size3;4:rectangle;4:circle;4:size1;4:triangle
'λx.exists(blue, filter(filter(filter(filter(x.s, yellow), green), not[size2]), circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:not[%s];4:size2;4:circle
'λx.exists(and[triangle,apply(size-lt,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, or[green,not[size3]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[yellow,not[apply(same_color,x.o)]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[apply(same_size,iota(x.s)),size3],iota(filter(filter(x.s, blue), implies[apply(same_color,x.o),or[triangle,or[size1,and[or[yellow,circle],size1]]]])))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:size1
'λx.empty(filter(x.s, and[size2,and[circle,and[size1,or[size3,rectangle]]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:rectangle
'λx.empty(filter(filter(filter(filter(filter(x.s, green), yellow), size1), and[not[green],or[blue,apply(same_color,iota(filter(x.s, size2)))]]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), nand[yellow,green]), iff[size3,or[size1,rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:green;4:iff[%s,%s];4:size3;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(or[circle,and[or[rectangle,or[blue,and[or[size1,or[and[circle,blue],iff[size2,and[rectangle,yellow]]]],size1]]],and[rectangle,or[blue,blue]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:yellow;4:size1;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(not[and[green,size1]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[iff[yellow,and[blue,apply(same_shape,iota(x.s))]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, circle), size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(nand[yellow,triangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, circle), size2), and[blue,size2]), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:and[%s,%s];4:blue;4:size2;4:blue
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, size3), triangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(nand[apply(size-geq,iota(x.s)),or[apply(size-leq,iota(x.s)),triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(implies[not[circle],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(not[not[apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size3), and[rectangle,and[triangle,implies[and[blue,and[rectangle,triangle]],or[green,blue]]]]), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:green;4:blue;4:green
'λx.apply(nand[size1,not[yellow]],iota(filter(filter(filter(filter(filter(filter(x.s, yellow), rectangle), and[circle,rectangle]), yellow), apply(size-gt,x.o)), size2)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:rectangle;4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.empty(filter(x.s, and[size2,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size2), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.contains(x.o, filter(filter(x.s, size3), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(green,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size2,or[nor[or[size1,or[or[apply(same_color,iota(x.s)),or[size1,size3]],size1]],or[nand[rectangle,not[size2]],size3]],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3;4:size1;4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:not[%s];4:size2;4:size3;4:triangle;1:%s.o;2:x
'λx.exists(nor[rectangle,yellow], filter(x.s, blue))'	0:exists(%s, %s);4:nor[%s,%s];4:rectangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(filter(x.s, and[rectangle,blue]), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;4:circle
'λx.apply(apply(same_color,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[blue,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[not[triangle],yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(yellow,filter(filter(x.s, blue), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(or[blue,size1],iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.exists(and[and[and[rectangle,triangle],and[apply(same_color,x.o),green]],green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:green;3:%s.s;2:x
'λx.apply(and[rectangle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, or[rectangle,or[not[triangle],circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:triangle;4:circle
'λx.contains(iota(filter(x.s, not[green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(not[or[size2,size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,or[apply(size-geq,iota(x.s)),and[size1,size3]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(circle, filter(x.s, blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, or[size2,and[and[yellow,implies[blue,and[implies[triangle,not[and[rectangle,and[triangle,triangle]]]],circle]]],size2]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:implies[%s,%s];4:blue;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:triangle;4:circle;4:size2
'λx.apply(size1,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.contains(x.o, x.s)'	0:contains(%s, %s);1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(filter(x.s, apply(same_size,iota(x.s))), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(implies[and[green,size2],size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,and[size2,not[rectangle]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[triangle,or[size3,size3]],and[size3,apply(size-leq,iota(x.s))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:size3;4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[green,and[blue,yellow]],iota(filter(x.s, nor[and[yellow,triangle],circle])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:circle
'λx.contains(x.o, filter(filter(x.s, iff[circle,yellow]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:yellow;4:size2
'λx.empty(filter(filter(x.s, or[apply(size-lt,iota(x.s)),triangle]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.forall(rectangle,filter(x.s, or[apply(size-leq,x.o),apply(same_shape,iota(x.s))]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size1,and[blue,apply(same_shape,x.o)]], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(filter(filter(x.s, size3), iff[size2,and[size1,size2]]), not[not[nor[or[not[apply(same_shape,x.o)],or[green,yellow]],rectangle]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:size2;4:and[%s,%s];4:size1;4:size2;4:not[%s];4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:yellow;4:rectangle
'λx.contains(iota(filter(filter(x.s, apply(same_shape,iota(filter(x.s, triangle)))), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(and[not[circle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), not[and[size1,size1]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:and[%s,%s];4:size1;4:size1
'λx.apply(triangle,iota(filter(x.s, and[triangle,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2
'λx.apply(or[not[not[apply(size-gt,x.o)]],and[iff[triangle,green],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[triangle,not[and[size1,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, or[nor[circle,rectangle],apply(size-gt,x.o)])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(or[not[blue],rectangle],filter(filter(x.s, yellow), yellow))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, yellow), not[circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:circle
'λx.apply(and[size1,and[yellow,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(iff[nor[nand[size2,and[implies[and[and[circle,blue],circle],circle],green]],nor[triangle,nor[apply(same_shape,iota(filter(x.s, and[or[blue,circle],triangle]))),green]]],size1],iota(filter(filter(x.s, rectangle), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:circle;4:circle;4:green;4:nor[%s,%s];4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:triangle;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(or[rectangle,rectangle],iota(filter(filter(filter(x.s, green), size2), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:rectangle
'λx.apply(and[nor[and[yellow,not[size3]],yellow],apply(same_shape,iota(filter(x.s, size1)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:size3;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.forall(or[circle,size3],filter(x.s, size2))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[and[size1,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[rectangle,or[rectangle,rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:rectangle
'λx.apply(or[nand[circle,size2],apply(same_size,iota(x.s))],iota(filter(filter(filter(x.s, size1), circle), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:triangle
'λx.apply(apply(size-lt,iota(filter(filter(x.s, size1), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), and[not[not[triangle]],apply(same_color,iota(filter(x.s, size3)))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(filter(filter(x.s, rectangle), triangle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:circle
'λx.apply(rectangle,iota(filter(x.s, and[circle,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[and[and[circle,not[size3]],green],and[circle,or[blue,size1]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size3;4:green;4:and[%s,%s];4:circle;4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.exists(and[blue,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[not[triangle],size3]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:triangle;4:size3;4:green
'λx.exists(or[size3,size2], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:size2;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[rectangle,and[size2,or[green,yellow]]]), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:or[%s,%s];4:green;4:yellow;4:size3
'λx.forall(and[rectangle,not[green]],filter(filter(filter(x.s, and[nand[rectangle,rectangle],circle]), and[size3,green]), size3))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:rectangle;4:circle;4:and[%s,%s];4:size3;4:green;4:size3
'λx.apply(or[nand[yellow,size3],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:yellow;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(not[implies[blue,circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size1), blue), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:green
'λx.apply(implies[blue,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[size1,and[size3,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[and[and[size2,and[not[and[yellow,size1]],not[rectangle]]],not[green]],blue],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:rectangle;4:not[%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(implies[iff[circle,nor[iff[size1,nand[size1,apply(size-lt,iota(x.s))]],blue]],apply(size-leq,x.o)], filter(filter(x.s, size1), or[rectangle,blue]))'	0:exists(%s, %s);4:implies[%s,%s];4:iff[%s,%s];4:circle;4:nor[%s,%s];4:iff[%s,%s];4:size1;4:nand[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:rectangle;4:blue
'λx.contains(iota(x.s), filter(filter(filter(x.s, blue), yellow), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, triangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[and[not[circle],yellow],circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,or[size1,and[and[or[yellow,triangle],and[and[yellow,circle],rectangle]],blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(and[size2,size1], filter(filter(filter(filter(x.s, yellow), size3), size1), nand[yellow,or[size2,or[apply(same_shape,iota(x.s)),size2]]]))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size1;4:nand[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), yellow), and[circle,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:and[%s,%s];4:circle;4:circle
'λx.apply(and[not[nand[rectangle,triangle]],and[green,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(or[blue,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[green,circle],iota(filter(filter(x.s, not[blue]), or[size1,blue])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:size1;4:blue
'λx.apply(not[triangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, or[blue,yellow]), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:yellow
'λx.apply(and[size3,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(nor[rectangle,iff[or[and[apply(size-geq,x.o),not[and[and[and[iff[triangle,not[size3]],apply(same_color,x.o)],rectangle],size2]]],and[blue,and[circle,and[circle,blue]]]],yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:size2;4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[green,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(implies[not[rectangle],apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, blue), triangle), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:circle
'λx.empty(filter(filter(x.s, and[triangle,rectangle]), not[apply(size-lt,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(iff[rectangle,triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,or[and[rectangle,rectangle],yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[size2,size1]), not[nor[or[triangle,not[size1]],iff[or[size1,apply(size-lt,iota(x.s))],and[or[rectangle,green],iff[or[not[size2],triangle],yellow]]]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:size1;4:iff[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:triangle;4:yellow
'λx.contains(iota(filter(x.s, not[implies[circle,and[or[circle,rectangle],green]]])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[and[circle,and[yellow,size1]],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:size1;4:size1;1:%s.o;2:x
'λx.apply(nor[nand[triangle,and[apply(same_color,x.o),or[not[size2],not[circle]]]],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:size2;4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[size1,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, green), and[apply(same_color,iota(x.s)),apply(same_shape,iota(filter(x.s, and[blue,implies[green,size2]])))]), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:implies[%s,%s];4:green;4:size2;4:yellow
'λx.apply(and[size2,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(nand[and[green,size2],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[circle,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(size3,iota(filter(x.s, and[not[and[iff[yellow,blue],size3]],triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:blue;4:size3;4:triangle
'λx.forall(and[size1,and[triangle,apply(same_color,iota(filter(x.s, blue)))]],filter(filter(x.s, size1), iff[triangle,not[size1]]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:triangle;4:not[%s];4:size1
'λx.apply(and[and[apply(size-geq,iota(x.s)),triangle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[not[and[and[circle,and[size1,apply(same_color,x.o)]],size1]],green]), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:green;4:green
'λx.empty(filter(filter(x.s, and[and[yellow,blue],not[circle]]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:not[%s];4:circle;4:yellow
'λx.forall(yellow,filter(filter(x.s, triangle), yellow))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.forall(blue,filter(x.s, circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(circle,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[triangle,apply(size-gt,iota(filter(x.s, not[size1])))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, implies[and[blue,blue],or[green,not[yellow]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:blue;4:blue;4:or[%s,%s];4:green;4:not[%s];4:yellow
'λx.apply(rectangle,iota(filter(filter(x.s, or[green,circle]), not[yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle;4:not[%s];4:yellow
'λx.apply(or[size1,or[green,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[triangle,and[and[or[size3,triangle],blue],triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_shape,iota(filter(filter(x.s, apply(size-geq,x.o)), size2))),filter(filter(filter(x.s, green), rectangle), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:rectangle
'λx.apply(and[size3,apply(size-geq,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(not[size1],filter(x.s, size2))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[size2,or[blue,and[yellow,or[rectangle,iff[size3,triangle]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), filter(filter(filter(filter(x.s, and[rectangle,circle]), size2), or[circle,size3]), size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:size2;4:or[%s,%s];4:circle;4:size3;4:size1
'λx.apply(and[size3,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[yellow,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(circle, filter(filter(x.s, size1), yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(and[triangle,or[yellow,apply(same_size,iota(x.s))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(and[not[rectangle],triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.exists(apply(size-gt,x.o), filter(filter(filter(x.s, yellow), yellow), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:blue
'λx.apply(and[nand[green,not[apply(same_size,iota(filter(filter(x.s, and[blue,and[and[apply(same_size,iota(x.s)),not[size1]],size2]]), triangle)))]],size2],iota(filter(filter(filter(x.s, iff[triangle,and[yellow,rectangle]]), yellow), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:size2;4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:rectangle;4:yellow;4:yellow
'λx.apply(and[not[rectangle],not[yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(not[blue],filter(filter(x.s, size3), yellow))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.contains(x.o, filter(filter(x.s, implies[and[size2,size3],blue]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size2;4:size3;4:blue;4:blue
'λx.apply(not[circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(circle, filter(filter(filter(x.s, and[size2,size2]), and[triangle,yellow]), yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2;4:and[%s,%s];4:triangle;4:yellow;4:yellow
'λx.apply(and[and[yellow,or[triangle,triangle]],not[and[size2,not[blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:triangle;4:not[%s];4:and[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.empty(filter(filter(x.s, size1), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.empty(filter(filter(x.s, size2), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(and[apply(size-lt,iota(filter(filter(x.s, size2), blue))),rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(and[rectangle,triangle],filter(filter(filter(x.s, and[blue,rectangle]), size3), size2))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:size3;4:size2
'λx.apply(blue,iota(filter(filter(filter(x.s, implies[iff[size1,and[rectangle,and[rectangle,rectangle]]],nor[blue,not[triangle]]]), size2), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle;4:nor[%s,%s];4:blue;4:not[%s];4:triangle;4:size2;4:blue
'λx.apply(not[nor[and[blue,green],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:green;4:size1;1:%s.o;2:x
'λx.apply(or[not[and[blue,nor[nor[size3,and[blue,or[green,size2]]],size3]]],size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:size2;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[or[size2,triangle],size3],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(apply(size-geq,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[size2,not[or[and[yellow,not[rectangle]],circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, and[circle,apply(same_color,iota(x.s))]), green), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:circle
'λx.apply(and[size1,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(nor[and[triangle,yellow],size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, nand[nor[apply(same_size,x.o),size3],apply(size-leq,iota(filter(x.s, not[and[not[blue],yellow]])))]), blue), triangle), yellow)), filter(filter(filter(x.s, or[nand[blue,size3],size2]), iff[circle,triangle]), and[rectangle,not[or[green,size1]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:yellow;4:blue;4:triangle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:blue;4:size3;4:size2;4:iff[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:green;4:size1
'λx.apply(not[or[size3,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), apply(same_color,iota(x.s))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size2,or[circle,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[rectangle,apply(same_shape,iota(filter(x.s, blue)))]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[size3,or[and[yellow,yellow],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(x.s)),or[and[size2,yellow],apply(same_color,iota(filter(filter(x.s, and[size1,implies[circle,circle]]), apply(same_size,x.o))))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, iff[size1,implies[rectangle,green]]), rectangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:implies[%s,%s];4:rectangle;4:green;4:rectangle;4:triangle
'λx.forall(apply(size-lt,x.o),filter(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size2), not[size1]), apply(size-lt,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:not[%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(filter(x.s, blue), and[triangle,apply(same_color,iota(x.s))]), and[size2,rectangle])))), rectangle), nand[blue,apply(same_size,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:rectangle;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[and[yellow,or[blue,nand[size2,size2]]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:nand[%s,%s];4:size2;4:size2;4:size2;1:%s.o;2:x
'λx.apply(not[and[size2,circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,size1],iota(filter(filter(filter(x.s, yellow), green), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(triangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[or[size1,apply(same_shape,iota(x.s))],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[circle,not[blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:blue
'λx.contains(iota(filter(filter(x.s, circle), green)), filter(filter(x.s, triangle), apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[size1,not[size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_color,iota(x.s))), apply(size-gt,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(or[or[size2,iff[yellow,circle]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:iff[%s,%s];4:yellow;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, implies[iff[yellow,size3],size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:yellow;4:size3;4:size3;1:%s.o;2:x
'λx.apply(and[and[and[apply(size-geq,iota(filter(x.s, not[blue]))),green],and[circle,size2]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:green;4:and[%s,%s];4:circle;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(nand[size2,and[triangle,or[yellow,and[blue,circle]]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(or[rectangle,apply(size-geq,iota(filter(x.s, nor[and[size1,size2],circle])))],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size1;4:size2;4:circle;3:%s.s;2:x
'λx.apply(and[implies[triangle,green],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.exists(size3, filter(filter(filter(filter(filter(filter(x.s, apply(size-lt,iota(x.s))), and[not[nor[size3,green]],nand[triangle,rectangle]]), size2), blue), circle), rectangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:size3;4:green;4:nand[%s,%s];4:triangle;4:rectangle;4:size2;4:blue;4:circle;4:rectangle
'λx.apply(and[rectangle,or[or[size2,size3],apply(size-gt,iota(x.s))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(nor[nor[and[green,size1],and[blue,apply(size-geq,iota(x.s))]],rectangle],filter(x.s, blue))'	0:forall(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:size1;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(x.s, size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(x.s, green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_shape,iota(filter(x.s, rectangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, apply(same_shape,x.o)), and[and[green,size2],or[circle,green]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:or[%s,%s];4:circle;4:green
'λx.exists(triangle, filter(filter(filter(filter(x.s, yellow), rectangle), rectangle), size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:rectangle;4:size1
'λx.forall(nand[or[green,apply(same_shape,x.o)],implies[and[size3,circle],apply(same_color,x.o)]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[size3,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(or[and[apply(same_shape,iota(filter(x.s, size3))),apply(same_size,x.o)],blue],iota(filter(filter(x.s, green), or[not[size1],apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[and[and[size3,or[iff[circle,circle],rectangle]],apply(size-leq,iota(filter(x.s, triangle)))],size2],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:iff[%s,%s];4:circle;4:circle;4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[not[yellow],yellow]), size3), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:yellow;4:size3;4:yellow
'λx.apply(nand[size2,apply(same_size,iota(filter(x.s, not[and[rectangle,size1]])))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nand[size2,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.forall(and[triangle,blue],filter(x.s, and[or[size1,blue],size2]))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size2
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(filter(filter(x.s, implies[or[triangle,blue],nand[green,nor[green,triangle]]]), apply(same_shape,x.o)), rectangle), rectangle), blue), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:nand[%s,%s];4:green;4:nor[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-geq,x.o),iota(filter(filter(x.s, implies[and[size2,circle],and[blue,blue]]), apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, not[and[green,or[size1,rectangle]]]), apply(size-lt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(implies[circle,green],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[yellow,nand[not[size3],triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:nand[%s,%s];4:not[%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,not[or[rectangle,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,size3],iota(filter(filter(filter(filter(x.s, implies[apply(same_color,iota(filter(filter(filter(filter(filter(x.s, size3), yellow), or[and[or[and[green,circle],yellow],size3],blue]), yellow), blue))),circle]), circle), size2), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:yellow;4:size3;4:blue;4:yellow;4:blue;4:circle;4:circle;4:size2;4:size1
'λx.apply(blue,iota(filter(x.s, and[not[circle],size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:size3
'λx.apply(not[apply(size-leq,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,x.o),triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, blue), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.forall(size3,filter(filter(x.s, blue), size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(not[or[size2,or[yellow,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_size,iota(filter(filter(x.s, circle), and[triangle,triangle]))))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(and[circle,size2],iota(filter(filter(filter(filter(filter(x.s, circle), iff[blue,size1]), green), blue), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:blue;4:size1;4:green;4:blue;4:triangle
'λx.contains(x.o, filter(x.s, not[implies[size3,size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:size3;4:size2
'λx.apply(and[size1,not[size3]],iota(filter(filter(filter(x.s, size1), triangle), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[blue,not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, triangle), nor[green,not[size2]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:green;4:not[%s];4:size2
'λx.apply(yellow,iota(filter(x.s, iff[blue,or[apply(same_color,x.o),circle]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(implies[rectangle,and[not[size1],size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(rectangle,iota(filter(filter(x.s, or[green,apply(same_shape,x.o)]), not[size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size2
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[size3,green]), rectangle), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:rectangle;4:yellow
'λx.contains(iota(filter(filter(x.s, size3), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;3:%s.s;2:x
'λx.apply(and[or[apply(same_color,x.o),size3],and[circle,or[green,circle]]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(filter(filter(x.s, blue), green), not[green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:not[%s];4:green
'λx.contains(iota(filter(x.s, triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, circle), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.exists(rectangle, filter(filter(filter(x.s, size1), and[apply(same_size,x.o),yellow]), yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:yellow
'λx.exists(or[rectangle,or[size3,and[green,size3]]], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(x.s, size1)), filter(filter(filter(x.s, rectangle), size2), implies[rectangle,green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:implies[%s,%s];4:rectangle;4:green
'λx.apply(and[size2,and[apply(same_color,iota(x.s)),or[size1,and[green,and[not[rectangle],rectangle]]]]],iota(filter(filter(filter(x.s, nor[and[triangle,circle],circle]), rectangle), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:circle;4:rectangle;4:size2
'λx.apply(and[apply(same_shape,iota(x.s)),triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size3,filter(filter(filter(filter(filter(filter(x.s, iff[size2,apply(same_color,iota(x.s))]), green), size2), size1), triangle), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:size2;4:size1;4:triangle;4:size1
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), rectangle), and[circle,rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:rectangle
'λx.exists(and[blue,size1], filter(x.s, apply(size-geq,iota(filter(x.s, nor[apply(same_shape,iota(x.s)),size3])))))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.forall(size3,filter(filter(x.s, green), not[triangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle
'λx.apply(and[and[size2,size3],and[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[or[size1,size3],or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size3;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(not[and[size1,size2]],iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(and[not[triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(implies[not[size3],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, rectangle), triangle), and[size3,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:and[%s,%s];4:size3;4:size3
'λx.apply(not[apply(same_color,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(x.s, and[apply(same_size,iota(x.s)),size1])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[green,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(filter(filter(filter(filter(x.s, blue), not[triangle]), green), size1), and[rectangle,not[not[or[yellow,size2]]]]), and[or[and[and[triangle,green],iff[blue,size1]],or[apply(same_size,x.o),circle]],and[and[size2,and[size3,size2]],blue]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:triangle;4:green;4:size1;4:and[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:or[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:iff[%s,%s];4:blue;4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:size2;4:blue
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, circle), triangle), green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:green
'λx.apply(nor[green,blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[size2]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),and[not[apply(same_color,x.o)],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), not[and[size3,rectangle]]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:size3;4:rectangle;4:rectangle
'λx.forall(circle,filter(filter(filter(x.s, apply(size-leq,x.o)), green), green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green;4:green
'λx.apply(and[apply(same_shape,iota(filter(x.s, not[rectangle]))),not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[size2,apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(filter(x.s, size1), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(apply(same_color,iota(filter(filter(x.s, not[and[green,size3]]), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:size3;4:size1;1:%s.o;2:x
'λx.apply(or[blue,iff[apply(same_size,iota(filter(filter(x.s, blue), and[circle,not[triangle]]))),size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:not[%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(same_size,iota(x.s))), size3))),iota(filter(filter(filter(filter(filter(x.s, size1), green), blue), not[triangle]), not[size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:blue;4:not[%s];4:triangle;4:not[%s];4:size1
'λx.apply(iff[size2,apply(same_shape,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(and[blue,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(or[or[rectangle,or[yellow,triangle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[size3]), rectangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle;4:triangle
'λx.apply(nor[and[circle,size3],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:size3;4:size1;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(x.s, size3), blue), apply(size-lt,x.o)), yellow), rectangle), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:rectangle;4:size3
'λx.empty(filter(filter(x.s, triangle), and[and[blue,and[size3,nor[circle,size1]]],blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:nor[%s,%s];4:circle;4:size1;4:blue
'λx.apply(size3,iota(filter(x.s, and[circle,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1
'λx.apply(size2,iota(filter(x.s, and[circle,size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2
'λx.apply(and[blue,and[or[circle,rectangle],green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[green,not[size3]],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[yellow,triangle]), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:size3
'λx.forall(circle,filter(filter(x.s, or[blue,size3]), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size3;4:yellow
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, size1), and[size1,apply(same_color,x.o)]), apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[apply(same_size,x.o),size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(iff[nor[and[rectangle,rectangle],size1],not[and[size2,size3]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:size1;4:not[%s];4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(x.s, blue))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[green,not[implies[green,green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:implies[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(and[iff[or[apply(size-lt,iota(filter(filter(filter(filter(x.s, triangle), nor[size3,size1]), triangle), not[and[blue,apply(size-lt,iota(x.s))]]))),size3],size1],or[and[triangle,triangle],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:size3;4:size1;4:triangle;4:not[%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size3;4:size1;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(or[apply(same_shape,x.o),yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[and[not[apply(same_size,x.o)],not[blue]],not[and[circle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size3), and[yellow,green]), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:yellow;4:green;4:size1
'λx.apply(yellow,iota(filter(filter(filter(x.s, blue), size2), and[apply(same_shape,x.o),green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(and[or[rectangle,yellow],not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(x.s, size1), blue), rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:rectangle
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, apply(same_size,iota(filter(x.s, size2)))), and[apply(size-lt,iota(filter(x.s, blue))),rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, size2), size2), green))),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[not[yellow],not[and[size1,and[or[size1,yellow],size1]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(nand[blue,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(nand[blue,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[circle,circle]), yellow), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:yellow;4:green
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, size3), size1), not[green]), apply(size-gt,iota(x.s))), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:not[%s];4:green;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, size1), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;3:%s.s;2:x
'λx.forall(apply(same_shape,iota(filter(x.s, implies[triangle,size1]))),filter(filter(filter(x.s, nor[iff[size3,size2],and[size2,and[and[yellow,or[yellow,yellow]],blue]]]), size1), or[size1,not[and[size2,or[yellow,implies[not[rectangle],triangle]]]]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:iff[%s,%s];4:size3;4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:yellow;4:blue;4:size1;4:or[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:not[%s];4:rectangle;4:triangle
'λx.apply(and[or[rectangle,not[size1]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[not[blue],yellow],iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(apply(size-gt,iota(filter(filter(filter(x.s, and[and[apply(same_color,iota(filter(x.s, not[rectangle]))),size2],circle]), and[rectangle,blue]), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size2;4:circle;4:and[%s,%s];4:rectangle;4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,size2],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, nand[iff[circle,rectangle],blue]), not[and[blue,rectangle]]), size1), not[size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:iff[%s,%s];4:circle;4:rectangle;4:blue;4:not[%s];4:and[%s,%s];4:blue;4:rectangle;4:size1;4:not[%s];4:size1
'λx.exists(size3, filter(filter(x.s, green), blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(and[size2,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, apply(size-gt,x.o)), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green
'λx.apply(or[and[size3,blue],not[blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:blue;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,or[or[green,apply(size-gt,iota(x.s))],size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(nand[rectangle,not[nand[green,triangle]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:nand[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(and[size3,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[rectangle,implies[size2,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:implies[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, or[green,circle]), triangle), yellow), or[size3,circle]), and[nor[apply(size-geq,iota(filter(filter(filter(x.s, or[and[rectangle,circle],blue]), size3), green))),yellow],size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle;4:triangle;4:yellow;4:or[%s,%s];4:size3;4:circle;4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:blue;4:size3;4:green;4:yellow;4:size2
'λx.exists(circle, filter(x.s, or[size3,size1]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size1
'λx.apply(and[size3,not[rectangle]],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, blue), apply(size-leq,x.o)), rectangle), yellow), rectangle), triangle), green), size3), and[circle,rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;4:yellow;4:rectangle;4:triangle;4:green;4:size3;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(implies[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[yellow,size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(filter(filter(x.s, green), and[and[rectangle,apply(size-leq,iota(x.s))],circle]), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:circle;4:size1
'λx.empty(filter(filter(filter(x.s, size3), yellow), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:yellow
'λx.contains(iota(filter(filter(x.s, circle), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[size2,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, nor[size2,size2]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:size2
'λx.apply(nand[size1,iff[size2,green]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:iff[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, yellow), size2), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:rectangle
'λx.apply(and[blue,and[green,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, not[green]), size1))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size1,and[size3,nor[blue,not[yellow]]]]],iota(filter(filter(x.s, size3), or[and[triangle,not[green]],or[not[size2],size1]])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:nor[%s,%s];4:blue;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:green;4:or[%s,%s];4:not[%s];4:size2;4:size1
'λx.exists(or[and[size2,and[size3,green]],and[and[not[size3],size1],size1]], filter(filter(x.s, nand[not[or[size1,iff[triangle,triangle]]],apply(size-gt,iota(filter(filter(filter(filter(filter(filter(x.s, or[triangle,size3]), not[apply(same_color,x.o)]), yellow), triangle), or[apply(size-lt,x.o),or[green,not[triangle]]]), green)))]), green))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:size1;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:size1;4:iff[%s,%s];4:triangle;4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:green;4:not[%s];4:triangle;4:green;4:green
'λx.apply(nor[not[blue],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[triangle,apply(same_color,iota(filter(filter(x.s, and[apply(same_size,x.o),apply(size-lt,x.o)]), triangle)))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[green,implies[rectangle,and[triangle,and[and[size1,size3],triangle]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:triangle
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, not[size3]), yellow), yellow), size3), and[not[and[size3,apply(size-lt,iota(filter(filter(x.s, size1), size1)))]],and[size2,blue]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:yellow;4:yellow;4:size3;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:and[%s,%s];4:size2;4:blue
'λx.apply(and[blue,size3],iota(filter(filter(x.s, rectangle), implies[triangle,size3])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:triangle;4:size3
'λx.apply(size3,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, yellow), yellow), size1)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[triangle,apply(same_shape,iota(filter(x.s, rectangle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[blue,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[and[apply(same_color,iota(filter(x.s, triangle))),circle],not[not[and[size1,yellow]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[or[blue,blue],and[circle,yellow]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[or[apply(size-geq,iota(x.s)),circle],and[not[or[nand[rectangle,rectangle],green]],and[blue,circle]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:rectangle;4:green;4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,rectangle],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[or[yellow,size1],blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, blue), apply(size-leq,x.o)), rectangle), yellow), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;4:yellow;4:rectangle
'λx.apply(or[triangle,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[not[yellow],nand[size3,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:nand[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(filter(x.s, blue), green), triangle), size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:triangle;4:size3
'λx.apply(blue,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(yellow,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.forall(iff[apply(same_color,iota(filter(x.s, rectangle))),size3],filter(x.s, circle))'	0:forall(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), rectangle), rectangle), iff[yellow,size2])), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:rectangle;4:iff[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[apply(same_color,x.o),triangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(filter(x.s, implies[size3,blue])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:blue
'λx.forall(nand[circle,not[yellow]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(or[and[size2,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:blue;4:green;1:%s.o;2:x
'λx.apply(or[and[triangle,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:green;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(filter(x.s, size3), size1), green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:green
'λx.apply(and[and[blue,size1],implies[size2,and[rectangle,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:implies[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, apply(same_size,iota(filter(filter(x.s, not[blue]), circle)))))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle
'λx.apply(not[rectangle],iota(filter(x.s, iff[not[apply(same_size,x.o)],circle])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(not[yellow],iota(filter(filter(x.s, apply(same_shape,x.o)), circle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(triangle,iota(filter(x.s, nand[size3,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:green
'λx.apply(and[not[and[not[and[blue,or[yellow,blue]]],or[blue,and[size1,nand[apply(size-gt,iota(filter(x.s, apply(same_shape,iota(x.s))))),rectangle]]]]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:nand[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(iff[not[yellow],apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(iff[green,size2], filter(x.s, size1))'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(filter(x.s, rectangle), triangle), not[size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:not[%s];4:size3;4:yellow
'λx.apply(or[not[blue],size3],iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[iff[not[not[apply(same_shape,x.o)]],apply(same_size,iota(x.s))],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), triangle), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:triangle
'λx.apply(and[and[blue,not[triangle]],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,iff[or[and[apply(size-geq,x.o),not[and[and[and[iff[triangle,not[size3]],apply(same_color,x.o)],rectangle],size2]]],and[blue,and[circle,and[circle,blue]]]],yellow]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:size2;4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size3,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(implies[triangle,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[yellow,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(not[apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[rectangle,nor[apply(same_shape,iota(filter(x.s, not[triangle]))),or[and[not[size3],or[yellow,rectangle]],triangle]]]), size3), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:yellow;4:rectangle;4:triangle;4:size3;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, circle), nor[and[yellow,circle],circle]), blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:circle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[triangle,implies[apply(size-geq,iota(x.s)),size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(and[iff[circle,and[size1,green]],nor[implies[rectangle,size2],yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:size1;4:green;4:nor[%s,%s];4:implies[%s,%s];4:rectangle;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, filter(x.s, implies[or[or[yellow,size3],size1],iff[green,size1]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:size1;4:iff[%s,%s];4:green;4:size1
'λx.contains(x.o, filter(x.s, apply(same_size,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, blue), rectangle), and[size2,size1]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:and[%s,%s];4:size2;4:size1
'λx.empty(filter(filter(x.s, size2), implies[size2,nor[triangle,apply(size-gt,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:size2;4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(and[apply(size-gt,iota(filter(filter(filter(filter(x.s, yellow), yellow), size1), rectangle))),circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:size1;4:rectangle;4:circle;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size1)), filter(filter(x.s, or[circle,yellow]), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow;4:size2
'λx.exists(size2, filter(filter(filter(x.s, implies[size2,rectangle]), implies[and[blue,not[circle]],nand[size2,apply(same_size,iota(filter(filter(filter(filter(x.s, and[green,blue]), circle), triangle), circle)))]]), circle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:circle;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue;4:circle;4:triangle;4:circle;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(filter(x.s, size3), and[rectangle,and[or[triangle,rectangle],implies[and[blue,size3],or[green,blue]]]]), green), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:blue;4:size3;4:or[%s,%s];4:green;4:blue;4:green;4:triangle
'λx.contains(x.o, filter(filter(x.s, size3), and[circle,nor[rectangle,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:blue
'λx.apply(apply(same_color,iota(filter(x.s, iff[size1,implies[rectangle,green]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:implies[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(implies[size3,and[yellow,and[or[size2,or[yellow,size1]],rectangle]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size1;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_color,iota(filter(filter(x.s, and[and[not[rectangle],implies[implies[green,size1],yellow]],green]), green))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:implies[%s,%s];4:implies[%s,%s];4:green;4:size1;4:yellow;4:green;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), apply(same_shape,iota(filter(x.s, triangle)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(blue,iota(filter(x.s, and[size1,green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green
'λx.apply(implies[size1,and[circle,size1]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[iff[not[yellow],and[or[circle,size3],not[rectangle]]],apply(size-geq,x.o)],iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, rectangle), rectangle)))), apply(size-gt,x.o)), and[not[size3],size3]), green), and[implies[size2,circle],rectangle]), not[rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:not[%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size3;4:size3;4:green;4:and[%s,%s];4:implies[%s,%s];4:size2;4:circle;4:rectangle;4:not[%s];4:rectangle
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, size3), triangle), not[apply(same_size,iota(x.s))]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[circle,apply(same_shape,iota(x.s))]), size1), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:size1
'λx.contains(iota(filter(filter(filter(x.s, yellow), nor[and[or[and[not[circle],green],and[and[circle,apply(same_color,iota(filter(filter(x.s, and[size3,apply(same_size,x.o)]), yellow)))],size2]],yellow],circle]), and[green,circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:size2;4:yellow;4:circle;4:and[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[not[size1],implies[size1,circle]]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:implies[%s,%s];4:size1;4:circle;4:size3
'λx.apply(nand[and[green,and[apply(same_color,x.o),and[or[and[implies[triangle,nor[size2,apply(same_size,iota(filter(x.s, size2)))]],rectangle],triangle],triangle]]],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:triangle;4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:triangle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[iff[yellow,triangle],and[triangle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[and[triangle,nand[yellow,circle]],or[size1,green]]), and[and[rectangle,size1],triangle]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:yellow;4:circle;4:or[%s,%s];4:size1;4:green;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:triangle;4:blue
'λx.apply(not[and[and[circle,circle],not[size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), circle), and[green,and[green,triangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, not[rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, triangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(and[nand[size2,yellow],and[apply(size-leq,iota(x.s)),green]],filter(x.s, size2))'	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(filter(x.s, or[rectangle,and[or[not[size1],green],or[blue,and[and[size1,circle],implies[blue,yellow]]]]]), implies[yellow,size3]), size2), green), green), rectangle), or[rectangle,green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:implies[%s,%s];4:blue;4:yellow;4:implies[%s,%s];4:yellow;4:size3;4:size2;4:green;4:green;4:rectangle;4:or[%s,%s];4:rectangle;4:green
'λx.apply(and[green,and[green,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), apply(size-geq,iota(filter(filter(x.s, size3), not[size1])))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size1
'λx.apply(and[and[not[implies[circle,and[yellow,green]]],size3],iff[blue,or[size1,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:green;4:size3;4:iff[%s,%s];4:blue;4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[apply(size-lt,iota(x.s)),yellow]), not[apply(same_color,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[implies[or[apply(same_shape,x.o),blue],circle],blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_shape,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(filter(filter(filter(x.s, circle), not[green]), size3), or[apply(same_shape,x.o),or[or[yellow,rectangle],blue]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:green;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:blue
'λx.apply(nor[apply(same_size,iota(x.s)),apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,x.o),yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, not[and[rectangle,size1]]), and[apply(same_size,iota(filter(x.s, blue))),rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(and[size2,size2],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.empty(filter(x.s, nor[size3,circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:circle
'λx.apply(and[implies[green,size2],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:size2;4:not[%s];4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(iff[apply(same_color,x.o),size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, size1), apply(same_color,x.o))))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[rectangle,size1],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[triangle,green],iota(filter(filter(x.s, triangle), or[yellow,apply(same_size,x.o)])))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(filter(filter(x.s, nand[rectangle,size1]), nand[size3,circle]), and[or[green,rectangle],blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:size1;4:nand[%s,%s];4:size3;4:circle;4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:blue
'λx.contains(iota(x.s), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[not[not[green]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, size2), rectangle), nor[yellow,rectangle]), or[size3,and[not[or[blue,size3]],circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:nor[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:size3;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), size2), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(and[green,apply(same_size,iota(filter(filter(x.s, and[and[triangle,yellow],triangle]), rectangle)))],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), or[size1,and[size2,triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size1;4:and[%s,%s];4:size2;4:triangle
'λx.apply(or[not[circle],size3],iota(filter(x.s, nand[rectangle,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:circle
'λx.forall(green,filter(x.s, triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[apply(same_shape,iota(filter(x.s, or[and[apply(same_shape,iota(filter(filter(x.s, size2), not[green]))),triangle],and[triangle,green]]))),triangle],apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:green;4:triangle;4:and[%s,%s];4:triangle;4:green;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(not[triangle],filter(filter(x.s, size1), and[or[not[circle],and[not[circle],and[circle,blue]]],size2]))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:circle;4:blue;4:size2
'λx.apply(and[size3,or[size1,and[circle,not[rectangle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:size1;4:and[%s,%s];4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[triangle,size3], filter(filter(filter(filter(filter(x.s, size1), green), size3), blue), green))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size3;4:blue;4:green
'λx.apply(size2,iota(filter(filter(filter(x.s, size1), size1), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:green
'λx.exists(and[circle,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:triangle;3:%s.s;2:x
'λx.apply(or[and[and[and[green,size3],green],circle],size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:green;4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(size-leq,iota(filter(x.s, green))),iota(filter(filter(x.s, triangle), and[blue,apply(same_size,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size3,filter(x.s, iff[apply(same_shape,iota(filter(filter(x.s, size2), yellow))),or[blue,nand[and[and[or[and[size2,size2],size2],yellow],triangle],size2]]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:or[%s,%s];4:blue;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size2;4:yellow;4:triangle;4:size2
'λx.apply(blue,iota(filter(filter(x.s, implies[apply(size-lt,x.o),yellow]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:size2
'λx.apply(apply(same_color,iota(filter(filter(x.s, size1), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(and[and[and[triangle,and[not[not[size3]],rectangle]],green],or[size2,iff[size3,nor[not[implies[rectangle,circle]],and[yellow,size2]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:not[%s];4:size3;4:rectangle;4:green;4:or[%s,%s];4:size2;4:iff[%s,%s];4:size3;4:nor[%s,%s];4:not[%s];4:implies[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, and[not[size3],green]), size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:green;4:size3
'λx.apply(triangle,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[and[triangle,circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[and[not[size2],circle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:circle;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, iff[blue,not[apply(same_shape,iota(filter(x.s, apply(size-lt,iota(filter(x.s, and[green,blue]))))))]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue
'λx.apply(size2,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.exists(blue, filter(x.s, circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[rectangle,or[and[triangle,triangle],size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.contains(iota(x.s), filter(x.s, or[green,not[size1]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:not[%s];4:size1
'λx.exists(or[size1,apply(size-geq,x.o)], filter(filter(filter(x.s, not[size2]), and[size2,not[size2]]), and[apply(same_shape,x.o),triangle]))'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:size2;4:not[%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.exists(nand[size1,rectangle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.forall(and[and[circle,size1],iff[size3,or[triangle,and[size3,or[circle,or[circle,yellow]]]]]],filter(filter(x.s, not[and[iff[size2,green],and[or[size1,green],and[blue,yellow]]]]), apply(size-leq,iota(filter(filter(x.s, size2), green)))))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:iff[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:or[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:green;4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:and[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.empty(filter(filter(x.s, yellow), apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[yellow,green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size2;1:%s.o;2:x
'λx.apply(or[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[size2,size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(apply(same_shape,iota(filter(filter(x.s, nand[rectangle,blue]), iff[size2,or[not[not[circle]],and[triangle,green]]]))),iota(filter(filter(filter(x.s, yellow), circle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:blue;4:iff[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:green
'λx.apply(nand[circle,and[apply(same_size,x.o),or[size2,size1]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[and[size3,circle],yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), rectangle), and[not[and[size1,size2]],circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:size2;4:circle
'λx.apply(and[size3,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(and[yellow,not[and[yellow,and[or[green,or[blue,rectangle]],green]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[size2,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[and[or[green,implies[implies[and[rectangle,apply(same_size,x.o)],and[and[yellow,size2],and[nor[size3,and[apply(same_shape,x.o),and[yellow,green]]],circle]]],and[circle,implies[circle,size2]]]],size2],size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:green;4:circle;4:and[%s,%s];4:circle;4:implies[%s,%s];4:circle;4:size2;4:size2;4:size2
'λx.apply(or[not[rectangle],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, or[blue,and[circle,and[not[apply(same_size,x.o)],triangle]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(size3,iota(filter(x.s, not[not[apply(same_size,iota(x.s))]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, or[and[size1,not[triangle]],size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:size1
'λx.apply(green,iota(filter(filter(filter(filter(x.s, blue), yellow), blue), and[not[blue],blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:blue;4:and[%s,%s];4:not[%s];4:blue;4:blue
'λx.empty(filter(filter(filter(x.s, size1), yellow), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size3
'λx.apply(and[not[green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:circle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, or[rectangle,not[triangle]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:triangle
'λx.forall(not[nand[apply(same_shape,iota(x.s)),rectangle]],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[green,or[and[circle,blue],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, or[rectangle,and[or[not[size1],green],or[blue,and[and[size1,circle],implies[blue,yellow]]]]]), implies[rectangle,size3]), size2), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:implies[%s,%s];4:blue;4:yellow;4:implies[%s,%s];4:rectangle;4:size3;4:size2;4:green
'λx.apply(iff[rectangle,and[not[not[yellow]],implies[circle,nand[apply(same_size,iota(x.s)),or[circle,blue]]]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:not[%s];4:yellow;4:implies[%s,%s];4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[apply(same_size,iota(filter(x.s, not[blue])))],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[green,not[triangle]])), filter(x.s, and[triangle,not[size2]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:size2
'λx.apply(and[apply(size-leq,x.o),rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[nand[iff[green,size3],blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:green;4:size3;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,size2],iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(and[not[apply(same_shape,iota(filter(filter(x.s, green), size3)))],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(filter(filter(x.s, rectangle), not[yellow]), size1), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:yellow;4:size1;4:blue
'λx.apply(implies[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(nor[not[and[iff[and[size1,circle],green],blue]],rectangle],filter(filter(x.s, or[blue,triangle]), and[yellow,size3]))'	0:forall(%s,%s);4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:circle;4:green;4:blue;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:yellow;4:size3
'λx.apply(circle,iota(filter(filter(filter(x.s, triangle), apply(size-gt,iota(filter(x.s, green)))), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(or[circle,iff[size1,triangle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(size-leq,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, and[triangle,rectangle]), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:circle
'λx.exists(implies[nand[apply(same_shape,iota(filter(filter(x.s, apply(same_color,x.o)), or[iff[or[size2,yellow],green],size3]))),rectangle],rectangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:green;4:size3;4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[size3,and[not[and[or[and[green,rectangle],and[rectangle,blue]],or[circle,size3]]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:rectangle;4:blue;4:or[%s,%s];4:circle;4:size3;4:yellow;1:%s.o;2:x
'λx.exists(not[circle], filter(filter(filter(x.s, size2), rectangle), and[rectangle,green]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:and[%s,%s];4:rectangle;4:green
'λx.exists(nor[not[size2],iff[circle,blue]], filter(filter(x.s, triangle), blue))'	0:exists(%s, %s);4:nor[%s,%s];4:not[%s];4:size2;4:iff[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(or[not[apply(size-lt,x.o)],not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), and[circle,apply(same_shape,iota(x.s))]), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(x.s, or[rectangle,triangle]), not[circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(and[blue,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, iff[yellow,not[and[blue,apply(same_shape,x.o)]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[and[rectangle,blue],apply(size-leq,iota(filter(x.s, size3)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(nand[not[or[blue,and[iff[green,apply(same_color,x.o)],implies[apply(same_color,iota(filter(filter(x.s, rectangle), and[blue,green]))),circle]]]],size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:blue;4:green;4:circle;4:size3;1:%s.o;2:x
'λx.apply(not[or[and[rectangle,green],implies[size3,blue]]],iota(filter(filter(filter(filter(x.s, rectangle), nand[blue,apply(same_size,x.o)]), yellow), or[and[triangle,size1],blue])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:implies[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:blue
'λx.apply(and[or[blue,or[and[circle,blue],apply(same_shape,x.o)]],and[apply(same_size,x.o),nand[size2,size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[circle,and[size1,blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[or[size1,circle],nor[and[green,rectangle],and[and[size3,and[size2,blue]],circle]]],iota(filter(filter(filter(filter(x.s, triangle), size2), not[not[circle]]), not[or[and[size1,triangle],yellow]])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:nor[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:not[%s];4:not[%s];4:circle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:yellow
'λx.apply(blue,iota(filter(x.s, or[size3,and[size2,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:green
'λx.apply(and[apply(same_size,iota(x.s)),yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-leq,iota(filter(x.s, nor[and[not[size1],circle],size1]))),filter(filter(filter(x.s, triangle), not[size2]), and[rectangle,green]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size2;4:and[%s,%s];4:rectangle;4:green
'λx.apply(and[blue,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,and[circle,green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,apply(same_shape,x.o)],not[apply(same_size,iota(x.s))]],iota(filter(filter(x.s, or[and[size3,size2],or[and[or[green,size2],size1],blue]]), and[size3,or[yellow,blue]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:size2;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:size2;4:size1;4:blue;4:and[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:blue
'λx.contains(iota(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), size2), and[or[size3,not[nor[yellow,circle]]],and[apply(same_size,iota(filter(x.s, implies[yellow,or[yellow,triangle]]))),or[apply(same_color,iota(x.s)),blue]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:nor[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.exists(not[blue], filter(filter(filter(filter(x.s, size3), apply(same_size,x.o)), and[apply(size-gt,x.o),size2]), rectangle))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;4:rectangle
'λx.apply(and[implies[triangle,green],blue],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[green,apply(same_size,x.o)],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, and[triangle,nor[size2,size2]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:size2;4:size2
'λx.apply(or[yellow,triangle],iota(filter(filter(filter(filter(x.s, and[iff[or[rectangle,not[rectangle]],circle],yellow]), nor[iff[rectangle,size2],circle]), size2), green)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:circle;4:yellow;4:nor[%s,%s];4:iff[%s,%s];4:rectangle;4:size2;4:circle;4:size2;4:green
'λx.apply(nand[and[and[apply(size-lt,iota(x.s)),rectangle],size1],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size1;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[circle,apply(size-lt,x.o)],iota(filter(x.s, iff[rectangle,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:size2
'λx.apply(and[apply(same_color,iota(x.s)),yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.exists(size1, filter(x.s, and[nor[size3,blue],blue]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:size3;4:blue;4:blue
'λx.apply(and[implies[rectangle,and[size2,size1]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[apply(same_color,iota(x.s)),blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(filter(x.s, rectangle), yellow), blue), nor[blue,size1]), and[triangle,size1]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue;4:nor[%s,%s];4:blue;4:size1;4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(nand[rectangle,triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(size-geq,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(or[blue,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.apply(and[yellow,and[and[blue,or[green,triangle]],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),or[and[iff[apply(same_shape,iota(filter(filter(x.s, size2), yellow))),or[blue,nand[and[and[or[and[size2,size2],green],yellow],triangle],size2]]],size2],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:or[%s,%s];4:blue;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:green;4:yellow;4:triangle;4:size2;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size1],iota(filter(x.s, and[green,green])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, green), or[or[not[triangle],not[size2]],apply(same_color,x.o)]), and[blue,and[size2,and[triangle,blue]]]), circle), apply(same_size,iota(x.s))), size3), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:not[%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:blue;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:rectangle
'λx.empty(filter(filter(filter(x.s, blue), yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:circle
'λx.apply(implies[size3,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(implies[size1,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, blue), nor[not[yellow],apply(same_shape,iota(filter(filter(filter(x.s, iff[size3,triangle]), and[circle,or[yellow,not[size1]]]), yellow)))])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:not[%s];4:size1;4:yellow
'λx.apply(apply(same_color,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(or[yellow,implies[rectangle,not[yellow]]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:implies[%s,%s];4:rectangle;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(filter(x.s, not[size2]), triangle), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:triangle;4:green
'λx.apply(not[and[size3,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(and[implies[green,size1],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, size2), circle), yellow), yellow), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:yellow;4:yellow;4:circle
'λx.apply(nand[or[or[triangle,circle],and[nor[apply(same_size,x.o),green],triangle]],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:triangle;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[blue,size3]), or[green,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size3;4:or[%s,%s];4:green;4:size3
'λx.empty(filter(filter(filter(filter(filter(x.s, size1), green), size1), and[rectangle,blue]), apply(same_color,iota(filter(filter(filter(x.s, green), yellow), size1)))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size1;4:and[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1
'λx.apply(or[blue,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size1), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(and[and[rectangle,size2],and[rectangle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[size1,yellow],iota(filter(filter(filter(filter(x.s, size2), apply(same_color,x.o)), and[or[blue,and[and[apply(same_shape,iota(x.s)),and[yellow,not[yellow]]],blue]],not[apply(same_size,iota(x.s))]]), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:yellow;4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(yellow,filter(filter(x.s, size2), nand[and[size2,circle],and[circle,circle]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:circle;4:circle
'λx.forall(size3,filter(x.s, and[size3,circle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle
'λx.apply(implies[green,iff[green,size3]],iota(filter(filter(x.s, not[nor[and[and[circle,not[not[apply(size-geq,x.o)]]],and[iff[size2,size1],circle]],or[and[triangle,triangle],and[size3,nor[apply(size-leq,x.o),nor[size3,not[or[green,and[size3,size2]]]]]]]]]), size1)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:iff[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:size2;4:size1;4:circle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:size3;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:nor[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;4:size1
'λx.contains(iota(filter(filter(x.s, triangle), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;3:%s.s;2:x
'λx.apply(not[green],iota(filter(x.s, not[not[blue]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, not[blue]), circle), and[triangle,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle;4:and[%s,%s];4:triangle;4:triangle
'λx.empty(filter(filter(x.s, blue), and[not[size2],and[green,nand[and[iff[blue,size2],blue],yellow]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:green;4:nand[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:size2;4:blue;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, and[yellow,implies[triangle,yellow]]), apply(same_shape,iota(filter(x.s, or[or[circle,rectangle],iff[nor[size3,implies[size3,size1]],iff[yellow,triangle]]]))))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:triangle;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:iff[%s,%s];4:nor[%s,%s];4:size3;4:implies[%s,%s];4:size3;4:size1;4:iff[%s,%s];4:yellow;4:triangle
'λx.apply(apply(same_color,iota(filter(filter(x.s, triangle), size2))),iota(filter(filter(filter(filter(x.s, nor[size3,apply(size-leq,x.o)]), circle), apply(same_size,iota(x.s))), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(apply(same_size,iota(filter(x.s, not[green]))),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(yellow,filter(filter(filter(filter(x.s, rectangle), apply(same_shape,x.o)), blue), nor[size1,yellow]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:nor[%s,%s];4:size1;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, size1), and[size1,and[circle,size3]]), nor[apply(same_size,x.o),implies[and[not[triangle],and[and[size2,size1],and[circle,yellow]]],and[not[or[nor[triangle,nand[apply(same_size,x.o),size3]],apply(size-lt,x.o)]],not[apply(size-geq,iota(filter(x.s, not[and[blue,yellow]])))]]]]), green), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size3;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:nor[%s,%s];4:triangle;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:yellow;4:green;4:green
'λx.apply(or[and[size3,not[and[size1,apply(same_shape,iota(filter(x.s, apply(size-leq,iota(filter(filter(x.s, not[size1]), not[size1]))))))]]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, nor[size2,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:rectangle
'λx.exists(triangle, filter(x.s, yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, triangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size3,filter(x.s, triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size1,filter(x.s, triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, or[and[yellow,triangle],rectangle]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[triangle,or[yellow,apply(same_size,iota(filter(filter(x.s, circle), not[or[or[and[implies[rectangle,or[or[size1,yellow],green]],nor[triangle,rectangle]],apply(same_shape,x.o)],not[or[triangle,blue]]]])))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:green;4:nor[%s,%s];4:triangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,iota(filter(filter(x.s, apply(same_color,iota(x.s))), size1))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(and[iff[green,triangle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[yellow,size2],iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(and[not[and[not[circle],size2]],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[not[green],and[green,not[implies[green,green]]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:green;4:not[%s];4:implies[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, apply(same_color,x.o)), size1), size3), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size3;4:size3
'λx.empty(filter(x.s, nor[size2,apply(same_color,iota(x.s))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(or[not[size3],and[size2,size3]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:size2;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,x.o)'	0:apply(%s,%s);4:triangle;1:%s.o;2:x
'λx.apply(and[circle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(and[size2,and[size2,nand[blue,yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(not[or[size2,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, and[and[yellow,yellow],apply(size-leq,x.o)]), size3), not[circle]), size2), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3;4:not[%s];4:circle;4:size2;4:size3
'λx.exists(and[rectangle,and[size1,size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size3;3:%s.s;2:x
'λx.apply(and[and[and[size1,rectangle],or[rectangle,and[triangle,yellow]]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[circle,iff[or[rectangle,and[size2,rectangle]],nand[and[circle,and[not[triangle],yellow]],size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:triangle;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[or[apply(same_color,iota(x.s)),implies[circle,size3]],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[circle],apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, size1), yellow), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[blue,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[green,triangle]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:triangle;4:triangle
'λx.apply(size2,iota(filter(filter(x.s, and[and[yellow,size2],not[yellow]]), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:not[%s];4:yellow;4:green
'λx.apply(or[not[and[apply(same_size,x.o),circle]],triangle],iota(filter(x.s, nand[circle,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:circle
'λx.forall(yellow,filter(filter(x.s, size3), circle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(nor[yellow,or[and[nor[blue,blue],size1],size3]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:blue;4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[or[implies[and[size3,blue],apply(same_size,iota(filter(x.s, circle)))],size2],not[blue]],iota(filter(filter(x.s, and[blue,not[or[green,size3]]]), not[yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:green;4:size3;4:not[%s];4:yellow
'λx.apply(rectangle,iota(filter(x.s, and[and[green,yellow],yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:yellow
'λx.contains(iota(filter(x.s, blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[or[rectangle,rectangle],nand[and[circle,and[or[not[circle],green],nand[and[size1,yellow],rectangle]]],size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:green;4:nand[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(x.s, nor[size1,and[green,blue]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:and[%s,%s];4:green;4:blue
'λx.apply(size2,iota(filter(x.s, implies[or[triangle,blue],nand[green,nor[green,triangle]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:nand[%s,%s];4:green;4:nor[%s,%s];4:green;4:triangle
'λx.apply(and[triangle,or[size3,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[triangle,iff[size2,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[triangle,yellow],implies[or[triangle,and[yellow,nand[not[size3],and[rectangle,blue]]]],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:nand[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:rectangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(x.s, green), yellow), and[nor[iff[size1,apply(size-geq,iota(filter(filter(x.s, apply(size-lt,x.o)), and[yellow,triangle])))],blue],blue]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:and[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:triangle;4:blue;4:blue
'λx.apply(and[green,size2],iota(filter(filter(filter(x.s, size3), circle), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:size2
'λx.apply(apply(size-gt,iota(filter(filter(filter(filter(x.s, triangle), and[green,green]), not[yellow]), apply(same_size,x.o)))),iota(filter(filter(x.s, and[apply(same_shape,iota(filter(x.s, apply(same_color,x.o)))),nor[rectangle,or[size1,rectangle]]]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:green;4:not[%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:rectangle;4:size2
'λx.forall(and[and[triangle,rectangle],size1],filter(filter(x.s, blue), green))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(and[apply(same_size,iota(filter(x.s, not[circle]))),apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,apply(same_shape,x.o)],iota(filter(x.s, and[nand[and[rectangle,green],and[green,not[implies[size2,size1]]]],rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:green;4:not[%s];4:implies[%s,%s];4:size2;4:size1;4:rectangle
'λx.apply(or[apply(same_shape,x.o),apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(or[circle,and[and[yellow,triangle],iff[and[or[apply(same_size,x.o),yellow],apply(same_shape,iota(x.s))],blue]]],filter(filter(filter(x.s, blue), blue), or[size3,circle]))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:or[%s,%s];4:size3;4:circle
'λx.apply(or[apply(same_shape,iota(filter(filter(filter(filter(x.s, yellow), triangle), apply(size-lt,x.o)), and[nand[rectangle,green],not[green]]))),implies[implies[triangle,yellow],not[triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:green;4:not[%s];4:green;4:implies[%s,%s];4:implies[%s,%s];4:triangle;4:yellow;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(implies[and[or[circle,size1],apply(size-geq,iota(x.s))],green],iota(filter(filter(x.s, and[green,apply(same_color,iota(x.s))]), not[and[circle,size2]])))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:size2
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[triangle,or[size2,yellow]], filter(x.s, size1))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, and[triangle,and[green,blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:blue
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size2), yellow), apply(same_size,x.o)), triangle), implies[and[and[blue,triangle],not[blue]],rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:not[%s];4:blue;4:rectangle
'λx.apply(or[green,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(size-leq,iota(filter(filter(filter(filter(x.s, and[and[not[size2],yellow],not[and[yellow,circle]]]), size3), or[not[yellow],yellow]), size3))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:yellow;4:not[%s];4:and[%s,%s];4:yellow;4:circle;4:size3;4:or[%s,%s];4:not[%s];4:yellow;4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(or[size1,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(nor[nand[size1,size2],blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:size1;4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), apply(same_size,iota(filter(x.s, apply(same_size,iota(x.s)))))), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:rectangle
'λx.contains(iota(filter(x.s, apply(same_size,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, rectangle), triangle), yellow), not[size2]), or[triangle,or[size3,size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:yellow;4:not[%s];4:size2;4:or[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:size2
'λx.apply(apply(same_size,iota(filter(filter(x.s, rectangle), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[circle,blue],iota(filter(x.s, and[size2,and[and[blue,apply(same_color,iota(filter(x.s, nand[apply(same_size,x.o),circle])))],yellow]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.contains(iota(filter(x.s, apply(size-leq,x.o))), filter(filter(x.s, and[size2,triangle]), size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:size1
'λx.apply(and[green,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size1],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, size3), size1), size1), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), size2), nor[not[size1],circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:nor[%s,%s];4:not[%s];4:size1;4:circle
'λx.exists(apply(size-gt,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[circle,yellow],iota(filter(filter(filter(x.s, circle), size3), green)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:green
'λx.apply(size1,iota(filter(filter(filter(x.s, rectangle), circle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:size1
'λx.apply(blue,iota(filter(x.s, and[yellow,and[and[and[size3,implies[size1,yellow]],implies[rectangle,and[triangle,nand[size1,blue]]]],or[green,blue]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:implies[%s,%s];4:size1;4:yellow;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size1;4:blue;4:or[%s,%s];4:green;4:blue
'λx.exists(apply(size-geq,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[not[size1],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:size2;1:%s.o;2:x
'λx.forall(or[implies[and[and[size3,size1],or[and[yellow,rectangle],size2]],circle],size2],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:size2;4:circle;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size2), and[circle,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:circle
'λx.apply(circle,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(not[apply(size-gt,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, nor[apply(same_size,iota(x.s)),triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.forall(apply(same_size,iota(filter(filter(x.s, not[size1]), circle))),filter(filter(filter(x.s, size1), not[rectangle]), not[rectangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle;4:not[%s];4:rectangle
'λx.contains(iota(x.s), filter(filter(x.s, size1), and[size3,and[and[triangle,size2],or[size2,or[size3,or[rectangle,nand[and[blue,size2],yellow]]]]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:blue;4:size2;4:yellow
'λx.apply(and[size2,or[size3,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, green)), filter(filter(filter(filter(filter(x.s, yellow), blue), apply(same_size,x.o)), not[size3]), apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[triangle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), not[or[size2,or[green,and[triangle,blue]]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:green;4:and[%s,%s];4:triangle;4:blue
'λx.apply(and[size1,blue],iota(filter(x.s, and[size2,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2
'λx.apply(iff[size1,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(nand[green,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[apply(size-geq,iota(filter(x.s, not[size3]))),circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, nor[or[and[and[size2,implies[yellow,yellow]],and[and[apply(same_size,iota(x.s)),nand[rectangle,not[yellow]]],and[green,and[size2,size3]]]],or[blue,and[blue,or[green,implies[and[or[circle,size1],apply(size-geq,iota(x.s))],green]]]]],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:implies[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size3;4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;4:green
'λx.apply(yellow,iota(filter(x.s, or[size1,and[size3,triangle]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:triangle
'λx.exists(not[and[green,not[and[circle,green]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(or[rectangle,and[green,size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_shape,iota(filter(x.s, yellow))),filter(filter(x.s, apply(same_color,x.o)), not[not[size1]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:not[%s];4:size1
'λx.apply(apply(same_shape,iota(filter(filter(x.s, or[and[or[apply(same_color,iota(x.s)),size2],size2],rectangle]), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:size2;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[nor[apply(size-geq,iota(x.s)),size3],iff[blue,or[size3,not[triangle]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:blue;4:or[%s,%s];4:size3;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[and[implies[and[green,and[circle,apply(size-geq,iota(x.s))]],not[and[yellow,apply(same_color,iota(x.s))]]],green],iff[green,and[not[and[yellow,size1]],blue]]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[green,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, apply(same_shape,iota(filter(filter(x.s, triangle), and[yellow,not[or[size2,rectangle]]])))))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:size2;4:rectangle
'λx.apply(nand[apply(same_shape,x.o),apply(size-leq,iota(filter(x.s, rectangle)))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,apply(size-leq,iota(filter(filter(filter(filter(x.s, nor[green,and[circle,not[not[apply(size-leq,x.o)]]]]), or[or[circle,size1],circle]), blue), size2)))],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:size1;4:circle;4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(or[blue,not[apply(same_size,iota(x.s))]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size1))),iota(filter(filter(filter(x.s, triangle), and[not[size2],size3]), and[yellow,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:size2;4:size3;4:and[%s,%s];4:yellow;4:blue
'λx.exists(apply(same_color,x.o), filter(filter(x.s, circle), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, implies[apply(size-geq,iota(x.s)),or[and[size2,and[size2,triangle]],or[rectangle,size1]]]), rectangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:triangle;4:or[%s,%s];4:rectangle;4:size1;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, circle), and[circle,circle]), blue)), filter(filter(x.s, green), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:circle;4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(and[apply(same_size,iota(filter(filter(x.s, size2), triangle))),size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,iff[yellow,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:iff[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[implies[green,rectangle],apply(size-lt,x.o)],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[implies[apply(same_color,iota(filter(filter(filter(filter(filter(x.s, size2), or[green,blue]), size3), size3), green))),rectangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:green;4:blue;4:size3;4:size3;4:green;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[green,size2],iota(filter(filter(filter(filter(x.s, triangle), not[blue]), size1), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue;4:size1;4:size3
'λx.apply(size3,iota(filter(x.s, and[size3,yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(nand[rectangle,or[not[green],and[triangle,or[green,green]]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,triangle],iota(filter(filter(filter(x.s, rectangle), and[triangle,apply(same_size,x.o)]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(or[rectangle,yellow],iota(filter(filter(filter(filter(x.s, triangle), size2), rectangle), and[circle,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:rectangle;4:and[%s,%s];4:circle;4:size3
'λx.exists(size3, filter(filter(filter(x.s, size1), or[rectangle,size1]), size3))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:rectangle;4:size1;4:size3
'λx.apply(implies[size1,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(iff[and[not[implies[or[or[or[size2,apply(same_color,iota(x.s))],size1],size1],rectangle]],circle],or[yellow,apply(same_shape,x.o)]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:size1;4:rectangle;4:circle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(green, filter(filter(x.s, rectangle), apply(same_color,x.o)))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, apply(size-geq,x.o)), not[not[rectangle]]))),iota(filter(x.s, not[and[triangle,nor[size3,not[and[or[size2,triangle],blue]]]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:blue
'λx.apply(or[apply(size-lt,x.o),and[circle,and[yellow,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[apply(size-leq,iota(filter(filter(filter(x.s, size3), size2), blue))),or[nor[blue,apply(same_shape,iota(filter(filter(filter(filter(x.s, circle), and[apply(size-leq,x.o),triangle]), blue), and[and[yellow,size3],size3])))],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:blue;4:or[%s,%s];4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;4:blue;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(not[blue],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[and[triangle,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[yellow,green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[and[green,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[size2,iff[and[blue,size1],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:blue;4:size1;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), not[or[yellow,blue]]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:or[%s,%s];4:yellow;4:blue;4:circle
'λx.exists(triangle, filter(x.s, or[size1,and[size1,and[size1,size1]]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:size1
'λx.empty(filter(filter(x.s, size1), or[or[yellow,triangle],green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:green
'λx.exists(or[blue,or[or[size3,apply(same_size,x.o)],blue]], filter(x.s, size2))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[size2,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(and[blue,not[yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(filter(x.s, circle), size3), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size1;3:%s.s;2:x
'λx.exists(or[size2,apply(same_size,iota(filter(filter(x.s, or[size3,size2]), and[size2,yellow])))], filter(filter(x.s, green), not[not[size3]]))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2;4:and[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:not[%s];4:size3
'λx.exists(blue, filter(filter(x.s, triangle), size1))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.exists(and[size1,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size2), size3), and[implies[triangle,green],blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:blue
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[blue,and[rectangle,triangle]]), size3), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:triangle;4:size3;4:triangle
'λx.apply(and[blue,triangle],iota(filter(filter(filter(x.s, implies[yellow,circle]), green), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:circle;4:green;4:size3
'λx.apply(or[or[size1,apply(size-geq,x.o)],size3],iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(implies[size1,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[green,and[and[apply(same_color,iota(filter(filter(x.s, rectangle), size3))),blue],not[blue]]],filter(x.s, triangle))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:blue;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[size3,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(filter(filter(filter(x.s, and[and[size3,rectangle],circle]), not[triangle]), and[or[or[triangle,circle],iff[not[rectangle],green]],nand[green,green]]), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:circle;4:not[%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:iff[%s,%s];4:not[%s];4:rectangle;4:green;4:nand[%s,%s];4:green;4:green;4:yellow
'λx.apply(and[and[blue,not[triangle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[not[not[size2]],nor[size2,and[circle,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:size2;4:nor[%s,%s];4:size2;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,iota(x.s))), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green
'λx.forall(yellow,x.s)'	0:forall(%s,%s);4:yellow;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, size1), size1), apply(same_size,iota(filter(x.s, or[blue,apply(size-lt,iota(filter(x.s, and[circle,yellow])))])))))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[or[size1,triangle],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[circle,size2],size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[circle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.forall(not[size2],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[green,and[triangle,or[yellow,apply(same_size,iota(filter(filter(x.s, circle), not[or[or[and[implies[rectangle,or[or[size1,yellow],green]],nor[triangle,rectangle]],apply(same_shape,x.o)],not[or[triangle,blue]]]])))]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:green;4:nor[%s,%s];4:triangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[rectangle,and[triangle,triangle]]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:triangle;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, size2), not[circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:circle
'λx.apply(and[not[size2],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[triangle]), apply(same_color,iota(filter(filter(filter(x.s, blue), triangle), and[not[yellow],size3]))))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:and[%s,%s];4:not[%s];4:yellow;4:size3
'λx.exists(and[rectangle,size3], filter(x.s, size1))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[iff[triangle,apply(same_color,x.o)],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,or[green,blue]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],x.o)'	0:apply(%s,%s);4:not[%s];4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, nand[size3,circle]), or[green,or[or[blue,rectangle],apply(same_shape,iota(x.s))]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:circle;4:or[%s,%s];4:green;4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size1,circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, and[iff[size3,blue],triangle]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:blue;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, yellow), triangle), green), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:green;4:size3
'λx.exists(apply(same_color,iota(x.s)), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), rectangle), yellow), blue), apply(size-lt,x.o)), nor[size2,triangle]), and[size2,size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:yellow;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nor[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:size2;4:size3
'λx.apply(or[size1,or[triangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, not[not[apply(same_shape,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[size3,apply(same_size,iota(filter(x.s, blue)))],not[apply(same_color,iota(x.s))]],iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.empty(filter(filter(x.s, implies[or[yellow,circle],apply(same_shape,iota(filter(filter(x.s, rectangle), circle)))]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:triangle
'λx.apply(nor[size3,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,or[circle,green]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(x.s, not[or[yellow,circle]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:circle
'λx.apply(apply(size-geq,iota(filter(filter(filter(x.s, size1), and[size3,circle]), and[rectangle,size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[and[not[size1],size2],apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, yellow), green), and[or[size1,size3],implies[nor[rectangle,and[green,blue]],apply(same_color,x.o)]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:and[%s,%s];4:or[%s,%s];4:size1;4:size3;4:implies[%s,%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[nor[not[yellow],triangle],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:yellow;4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[circle,implies[not[yellow],size1]],nor[green,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:implies[%s,%s];4:not[%s];4:yellow;4:size1;4:nor[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(implies[and[size1,green],size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[not[size2],size2],nand[or[blue,size2],green]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:size2;4:size2;4:nand[%s,%s];4:or[%s,%s];4:blue;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[circle],iota(filter(filter(x.s, and[or[circle,rectangle],green]), yellow)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:green;4:yellow
'λx.apply(iff[size2,or[size2,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(and[blue,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, nor[yellow,not[and[circle,or[blue,and[or[triangle,not[blue]],and[and[apply(same_size,iota(filter(x.s, or[not[apply(same_size,x.o)],blue]))),rectangle],rectangle]]]]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle;4:rectangle
'λx.apply(not[apply(same_color,iota(filter(filter(filter(x.s, size1), circle), rectangle)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[green,size3],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(and[and[and[green,size3],not[size2]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:not[%s];4:size2;4:size1;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, and[rectangle,blue]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(or[circle,blue],iota(filter(filter(x.s, or[iff[circle,rectangle],rectangle]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:circle;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[triangle,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.apply(not[and[rectangle,not[size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(x.s, not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.empty(filter(filter(filter(x.s, yellow), yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:circle
'λx.forall(nor[triangle,not[size1]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:triangle;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(or[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, and[rectangle,size3]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;4:triangle
'λx.forall(size1,filter(x.s, apply(same_size,iota(x.s))))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_color,x.o),green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, triangle), size3), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size2
'λx.apply(and[circle,not[triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(circle,iota(filter(filter(x.s, or[not[circle],triangle]), implies[and[apply(size-geq,x.o),size1],green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;4:green
'λx.apply(not[nand[iff[circle,not[and[apply(same_color,x.o),circle]]],nor[green,and[implies[blue,and[circle,or[nor[size2,and[or[and[and[and[or[yellow,size3],implies[blue,blue]],and[apply(same_size,x.o),apply(same_shape,iota(filter(x.s, green)))]],nand[triangle,blue]],green],and[circle,and[nand[green,size3],or[triangle,rectangle]]]]],nor[rectangle,triangle]]]],green]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:iff[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:nor[%s,%s];4:green;4:and[%s,%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:implies[%s,%s];4:blue;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:triangle;4:blue;4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:nand[%s,%s];4:green;4:size3;4:or[%s,%s];4:triangle;4:rectangle;4:nor[%s,%s];4:rectangle;4:triangle;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size1), circle), blue), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:blue;4:rectangle
'λx.forall(size2,filter(x.s, or[apply(same_color,iota(filter(x.s, green))),green]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, and[and[size2,or[size2,size3]],circle]), not[circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:size3;4:circle;4:not[%s];4:circle
'λx.exists(green, filter(filter(filter(x.s, rectangle), blue), and[size1,not[size3]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:and[%s,%s];4:size1;4:not[%s];4:size3
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nor[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[apply(size-leq,x.o)],iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, and[and[size1,rectangle],circle]), not[circle]), size2), apply(same_size,iota(filter(x.s, and[size1,size2])))), implies[circle,green]), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:circle;4:not[%s];4:circle;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:implies[%s,%s];4:circle;4:green;4:size2
'λx.forall(and[and[apply(same_shape,iota(filter(filter(x.s, or[or[yellow,yellow],yellow]), apply(same_color,x.o)))),nor[rectangle,or[size1,rectangle]]],size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:rectangle;4:size2;3:%s.s;2:x
'λx.forall(not[and[triangle,apply(same_shape,x.o)]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(apply(same_color,iota(x.s)),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(x.s), filter(filter(x.s, yellow), apply(same_shape,iota(x.s))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[not[apply(same_size,iota(filter(filter(x.s, size1), and[and[blue,and[rectangle,or[iff[yellow,size2],size1]]],or[triangle,and[rectangle,circle]]])))],not[green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:size2;4:size1;4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:circle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(not[and[size1,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), nand[circle,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:circle;4:circle
'λx.apply(triangle,iota(filter(x.s, or[apply(same_size,x.o),size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.contains(x.o, filter(filter(filter(filter(x.s, size1), and[size1,green]), size2), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:green;4:size2;4:rectangle
'λx.apply(and[rectangle,apply(same_size,iota(filter(filter(filter(x.s, not[size2]), size2), size2)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2;4:size2;1:%s.o;2:x
'λx.forall(circle,filter(x.s, or[apply(size-geq,iota(x.s)),blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:blue
'λx.forall(not[triangle],x.s)'	0:forall(%s,%s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.forall(and[or[triangle,blue],size2],filter(x.s, iff[and[yellow,blue],green]))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:green
'λx.apply(and[and[not[yellow],yellow],and[green,triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:yellow;4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, iff[rectangle,rectangle]), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:rectangle;4:size1
'λx.apply(not[and[yellow,and[and[blue,yellow],apply(same_shape,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(and[not[blue],or[not[and[size1,circle]],rectangle]],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:circle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, and[green,size2]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:green
'λx.forall(or[and[and[apply(same_size,iota(filter(x.s, iff[apply(size-lt,iota(filter(filter(x.s, blue), triangle))),size1]))),green],green],not[apply(same_color,x.o)]],filter(filter(filter(x.s, or[green,apply(same_color,x.o)]), size1), blue))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:size1;4:green;4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:blue
'λx.apply(green,iota(filter(filter(filter(x.s, size2), size3), not[size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:not[%s];4:size1
'λx.apply(and[or[blue,nor[yellow,and[yellow,green]]],and[rectangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:green;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[green,and[rectangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[or[implies[iff[circle,nor[iff[size1,or[green,yellow]],blue]],apply(same_color,x.o)],yellow],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:circle;4:nor[%s,%s];4:iff[%s,%s];4:size1;4:or[%s,%s];4:green;4:yellow;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[and[yellow,circle],blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, not[blue]), triangle), or[or[blue,not[size3]],or[and[circle,apply(same_shape,x.o)],size1]]), size3), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle;4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:size3;4:size3
'λx.apply(yellow,iota(filter(filter(filter(x.s, rectangle), triangle), not[size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:not[%s];4:size3
'λx.exists(size1, filter(filter(filter(x.s, blue), not[yellow]), and[size2,size3]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow;4:and[%s,%s];4:size2;4:size3
'λx.apply(nand[and[apply(same_shape,x.o),iff[rectangle,and[size1,size3]]],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size3;4:size1;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, green))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, size1))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, size2))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, size3))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, and[apply(same_color,iota(filter(filter(filter(filter(x.s, size3), and[apply(same_size,x.o),blue]), circle), not[circle]))),circle]), or[circle,apply(size-leq,iota(filter(filter(x.s, or[or[and[yellow,not[circle]],and[yellow,circle]],size1]), size3)))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:circle;4:not[%s];4:circle;4:circle;4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:circle;4:size1;4:size3
'λx.apply(size2,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size3,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[size1,rectangle],iota(filter(filter(filter(x.s, size1), or[circle,blue]), size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:blue;4:size1
'λx.forall(triangle,filter(x.s, yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[yellow,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, implies[triangle,size1]), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size1;4:green
'λx.forall(apply(same_shape,x.o),filter(x.s, and[not[nand[blue,triangle]],size2]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:blue;4:triangle;4:size2
'λx.exists(and[or[yellow,size1],size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:size3;3:%s.s;2:x
'λx.apply(nand[rectangle,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[not[green]],yellow],iota(filter(filter(x.s, circle), not[rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle
'λx.apply(yellow,iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(and[blue,and[green,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, apply(same_color,iota(x.s))), not[size3]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(or[blue,implies[triangle,and[green,blue]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,and[iff[iff[apply(same_shape,x.o),and[rectangle,and[nor[green,blue],iff[and[size3,triangle],blue]]]],size3],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:iff[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:green;4:blue;4:iff[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:blue;4:size3;4:blue;1:%s.o;2:x
'λx.apply(nor[implies[triangle,and[not[not[triangle]],apply(same_color,iota(filter(x.s, size3)))]],apply(size-geq,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(or[blue,green],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(or[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, not[blue]), and[blue,green]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:green
'λx.contains(x.o, filter(x.s, and[size3,or[nand[apply(same_shape,iota(filter(filter(filter(x.s, and[or[size1,circle],circle]), rectangle), green))),circle],and[circle,not[yellow]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:circle;4:circle;4:rectangle;4:green;4:circle;4:and[%s,%s];4:circle;4:not[%s];4:yellow
'λx.apply(green,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(x.s, green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, size2), and[and[green,implies[or[apply(size-geq,iota(x.s)),triangle],yellow]],size3]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:yellow;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(nor[apply(size-lt,iota(filter(filter(x.s, triangle), and[not[and[blue,and[not[yellow],apply(size-leq,iota(x.s))]]],apply(size-leq,iota(filter(filter(x.s, size1), and[or[not[circle],and[not[circle],and[circle,blue]]],size2])))]))),blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:circle;4:blue;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(yellow,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.forall(triangle,filter(x.s, blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,iota(filter(filter(x.s, not[rectangle]), rectangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,or[apply(same_size,iota(filter(x.s, rectangle))),apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(x.s, iff[yellow,green]), and[or[triangle,yellow],and[triangle,yellow]]), blue))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:green;4:and[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:triangle;4:yellow;4:blue
'λx.empty(filter(filter(filter(x.s, size2), blue), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,x.o)'	0:apply(%s,%s);4:green;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, blue), triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.exists(apply(same_size,x.o), filter(filter(filter(x.s, blue), size2), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:green
'λx.apply(and[size1,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.forall(not[size3],filter(filter(filter(x.s, size1), size3), apply(same_size,iota(x.s))))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(implies[blue,triangle], filter(x.s, circle))'	0:exists(%s, %s);4:implies[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size1, filter(x.s, implies[not[size3],size2]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:size3;4:size2
'λx.apply(and[circle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size3), apply(size-gt,x.o)), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:blue
'λx.apply(apply(same_size,iota(filter(x.s, apply(size-gt,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[and[apply(same_size,x.o),yellow],apply(size-leq,x.o)]), size3), not[circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3;4:not[%s];4:circle
'λx.forall(size3,filter(x.s, not[or[not[apply(same_color,iota(filter(filter(filter(x.s, implies[apply(same_size,iota(x.s)),iff[rectangle,green]]), triangle), size1)))],or[triangle,or[and[size3,apply(same_color,iota(x.s))],implies[circle,circle]]]]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:green;4:triangle;4:size1;4:or[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:circle
'λx.apply(and[blue,nand[yellow,and[not[or[green,and[and[yellow,iff[size3,and[rectangle,yellow]]],green]]],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:yellow;4:green;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(size2,x.o)'	0:apply(%s,%s);4:size2;1:%s.o;2:x
'λx.apply(size3,x.o)'	0:apply(%s,%s);4:size3;1:%s.o;2:x
'λx.apply(size1,x.o)'	0:apply(%s,%s);4:size1;1:%s.o;2:x
'λx.apply(and[and[circle,blue],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, iff[size2,green]), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:green;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, not[apply(same_shape,x.o)]), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, not[size3]), not[rectangle]), nand[size3,size3]), nor[triangle,size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:not[%s];4:rectangle;4:nand[%s,%s];4:size3;4:size3;4:nor[%s,%s];4:triangle;4:size1
'λx.apply(or[yellow,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, nor[apply(size-leq,x.o),blue]), apply(same_shape,iota(x.s))), yellow), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[yellow,and[yellow,and[or[circle,yellow],yellow]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:yellow
'λx.empty(filter(x.s, apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[yellow,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3
'λx.exists(yellow, filter(x.s, size1))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(yellow, filter(x.s, green))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(circle,filter(filter(x.s, yellow), nand[apply(same_color,x.o),green]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(nor[or[and[apply(size-geq,x.o),size3],size3],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;4:size3;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[blue,and[apply(same_size,x.o),blue]]), apply(same_shape,x.o)), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[green,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, not[rectangle]), nor[not[and[iff[not[apply(same_shape,iota(filter(x.s, rectangle)))],or[not[rectangle],circle]],size1]],circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:not[%s];4:rectangle;4:circle;4:size1;4:circle
'λx.exists(and[size2,yellow], filter(x.s, green))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[nor[not[and[size1,apply(same_shape,x.o)]],size3],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, and[size1,size2]), yellow), nand[yellow,size1]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:yellow;4:nand[%s,%s];4:yellow;4:size1;4:rectangle
'λx.apply(and[size3,or[triangle,or[and[and[size3,or[apply(same_color,iota(x.s)),yellow]],or[size1,blue]],size1]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size1;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, and[size3,and[triangle,not[yellow]]]), and[size1,rectangle]), size1), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:not[%s];4:yellow;4:and[%s,%s];4:size1;4:rectangle;4:size1;4:size2
'λx.apply(iff[yellow,circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(x.s, and[circle,triangle]), size3), iff[triangle,yellow]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:size3;4:iff[%s,%s];4:triangle;4:yellow
'λx.apply(not[and[green,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, implies[apply(same_size,x.o),nand[size1,blue]]), triangle)), filter(filter(x.s, yellow), or[size3,nand[or[nand[apply(same_color,x.o),circle],apply(same_shape,x.o)],and[and[not[nor[or[apply(same_shape,iota(x.s)),size3],nor[nand[size2,or[green,blue]],or[yellow,apply(same_size,x.o)]]]],rectangle],size2]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:size1;4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:nand[%s,%s];4:size2;4:or[%s,%s];4:green;4:blue;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size2
'λx.apply(and[triangle,blue],iota(filter(x.s, and[size2,and[circle,size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size3
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, or[apply(same_size,iota(x.s)),or[and[blue,yellow],green]]), and[triangle,rectangle]), yellow), green), yellow), circle), apply(same_shape,iota(filter(filter(filter(filter(x.s, and[and[size1,size2],rectangle]), circle), size3), green)))), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:green;4:and[%s,%s];4:triangle;4:rectangle;4:yellow;4:green;4:yellow;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:rectangle;4:circle;4:size3;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size1,and[circle,implies[or[size1,or[or[not[blue],size2],green]],green]]],filter(filter(filter(filter(filter(x.s, and[not[not[green]],rectangle]), or[not[triangle],size3]), yellow), rectangle), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:implies[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:size2;4:green;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:green;4:rectangle;4:or[%s,%s];4:not[%s];4:triangle;4:size3;4:yellow;4:rectangle;4:yellow
'λx.contains(iota(filter(x.s, or[circle,not[blue]])), filter(filter(filter(x.s, size1), size1), triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:triangle
'λx.exists(not[and[or[triangle,circle],size2]], filter(x.s, iff[and[not[size2],or[yellow,blue]],green]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:yellow;4:blue;4:green
'λx.apply(and[green,not[triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[green,yellow],not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:green;4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[blue,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, or[rectangle,green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, yellow), blue)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(iff[size2,size2], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(not[not[size1]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,apply(size-gt,iota(filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), rectangle), rectangle), iff[yellow,size2])))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:rectangle;4:iff[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(filter(x.s, size3), size2), or[size2,size3]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:or[%s,%s];4:size2;4:size3
'λx.apply(circle,iota(filter(x.s, and[size3,rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.apply(and[size1,nor[size2,and[size1,apply(same_color,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:size2;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size1), size2), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:yellow;3:%s.s;2:x
'λx.apply(iff[and[rectangle,apply(same_shape,x.o)],and[circle,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[size2,and[or[and[circle,and[apply(same_color,x.o),triangle]],not[green]],apply(size-lt,x.o)]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:not[%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[iff[or[yellow,size2],size1],or[size2,apply(same_color,iota(filter(x.s, rectangle)))]],iota(filter(filter(x.s, apply(same_size,iota(x.s))), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:size1;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.exists(green, filter(x.s, not[apply(same_color,x.o)]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(x.s, and[iff[or[size1,or[not[nor[size3,nand[iff[size1,circle],circle]]],rectangle]],or[size2,green]],rectangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:size3;4:nand[%s,%s];4:iff[%s,%s];4:size1;4:circle;4:circle;4:rectangle;4:or[%s,%s];4:size2;4:green;4:rectangle
'λx.apply(not[and[size2,and[green,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(implies[yellow,apply(size-lt,x.o)],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nor[circle,apply(same_shape,iota(filter(filter(x.s, and[or[triangle,size1],blue]), green)))],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(x.s, apply(size-lt,x.o)), or[and[not[triangle],apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), not[blue])))],size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(or[green,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(not[or[blue,size1]],filter(filter(x.s, not[size1]), circle))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:circle
'λx.contains(x.o, filter(x.s, not[triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(nor[nand[size1,or[blue,size1]],not[and[apply(same_shape,iota(x.s)),triangle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size1;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.exists(and[iff[not[blue],blue],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[apply(same_size,iota(x.s)),rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, triangle), yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(and[apply(same_shape,x.o),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), size2), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:triangle
'λx.apply(size3,iota(filter(filter(filter(x.s, size2), size1), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:triangle
'λx.empty(filter(x.s, not[apply(same_color,iota(x.s))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, and[green,and[rectangle,not[blue]]]), blue), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:not[%s];4:blue;4:blue;4:rectangle
'λx.apply(not[circle],iota(filter(filter(x.s, and[and[not[size1],or[or[apply(same_color,x.o),apply(same_size,x.o)],circle]],nand[circle,triangle]]), apply(same_color,x.o))))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:nand[%s,%s];4:circle;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(nor[circle,and[circle,green]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(and[rectangle,green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(filter(x.s, nor[rectangle,yellow]), nand[and[circle,and[blue,apply(same_color,iota(filter(x.s, or[implies[apply(same_shape,iota(filter(filter(x.s, size3), or[triangle,or[blue,and[green,size3]]]))),green],size2])))]],rectangle]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:size3;4:green;4:size2;4:rectangle
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.exists(circle, filter(filter(x.s, and[blue,yellow]), size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow;4:size1
'λx.exists(triangle, filter(filter(x.s, iff[and[size3,rectangle],size3]), and[size2,not[rectangle]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:size3;4:and[%s,%s];4:size2;4:not[%s];4:rectangle
'λx.apply(blue,iota(filter(x.s, nand[rectangle,green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:green
'λx.apply(nand[rectangle,and[size2,iff[and[size1,apply(size-geq,x.o)],size3]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, apply(same_color,iota(filter(x.s, size3)))))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[apply(same_color,iota(filter(x.s, or[not[blue],rectangle]))),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:blue;4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(iff[yellow,size1], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.apply(not[or[or[size2,implies[blue,green]],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:implies[%s,%s];4:blue;4:green;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[not[and[size2,size3]],nand[or[size2,yellow],or[blue,yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;4:nand[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,apply(same_color,x.o)],iota(filter(filter(filter(x.s, and[size1,blue]), rectangle), and[blue,blue])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:rectangle;4:and[%s,%s];4:blue;4:blue
'λx.apply(triangle,iota(filter(x.s, and[green,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue
'λx.apply(size1,iota(filter(x.s, implies[size3,not[triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:not[%s];4:triangle
'λx.exists(rectangle, filter(filter(filter(filter(x.s, or[yellow,or[size2,size1]]), size3), size3), rectangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:size1;4:size3;4:size3;4:rectangle
'λx.apply(nand[yellow,size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[rectangle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[size1,not[nor[apply(size-leq,x.o),triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,or[rectangle,rectangle]],iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), implies[rectangle,nor[yellow,circle]]), not[and[blue,rectangle]]), green), size2), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:yellow;4:circle;4:not[%s];4:and[%s,%s];4:blue;4:rectangle;4:green;4:size2;4:rectangle
'λx.apply(and[green,and[size1,and[triangle,and[circle,or[and[green,yellow],blue]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:green;4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,triangle],filter(x.s, apply(size-lt,iota(filter(x.s, size2)))))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[and[blue,and[apply(same_shape,iota(x.s)),size3]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:size3;1:%s.o;2:x
'λx.exists(nand[apply(same_size,x.o),rectangle], filter(x.s, not[blue]))'	0:exists(%s, %s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(nor[iff[or[implies[size1,nor[and[or[not[circle],size1],yellow],nand[not[yellow],size1]]],yellow],yellow],size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:size1;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:size1;4:yellow;4:nand[%s,%s];4:not[%s];4:yellow;4:size1;4:yellow;4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, circle)), filter(filter(x.s, triangle), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, or[not[blue],circle]), size2), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:blue;4:circle;4:size2;4:size1
'λx.exists(and[not[blue],rectangle], filter(x.s, implies[size1,circle]))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:circle
'λx.forall(not[apply(size-gt,iota(filter(filter(x.s, and[rectangle,and[size2,rectangle]]), and[and[yellow,blue],size2])))],filter(filter(x.s, or[or[implies[circle,size2],implies[and[apply(same_shape,x.o),rectangle],blue]],green]), yellow))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:circle;4:size2;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:blue;4:green;4:yellow
'λx.forall(apply(same_shape,iota(filter(x.s, size1))),filter(filter(x.s, apply(same_size,x.o)), not[not[size1]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:not[%s];4:size1
'λx.apply(or[yellow,size3],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(nor[blue,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, yellow))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, nor[triangle,not[size3]]), circle), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:not[%s];4:size3;4:circle;4:size1
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, not[size3]), size2), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(x.s, blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, rectangle), apply(same_color,x.o)), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(nand[implies[rectangle,size3],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size1,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[size1,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[size2,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[size2,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[size2,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[circle,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, or[apply(same_shape,iota(x.s)),or[size2,and[triangle,or[not[size1],or[or[size1,rectangle],and[not[triangle],and[triangle,circle]]]]]]]), not[rectangle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:triangle;4:circle;4:not[%s];4:rectangle;4:yellow
'λx.apply(size3,iota(filter(x.s, not[not[size1]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size1
'λx.apply(size1,iota(filter(filter(x.s, triangle), or[circle,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:circle;4:blue
'λx.apply(green,iota(filter(filter(filter(x.s, and[or[blue,and[circle,circle]],circle]), green), and[yellow,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:circle;4:circle;4:green;4:and[%s,%s];4:yellow;4:circle
'λx.apply(nor[or[size1,yellow],blue],iota(filter(x.s, and[apply(same_shape,x.o),size2])))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.empty(filter(filter(filter(x.s, not[blue]), and[size1,size1]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:size1;4:size1;4:blue
'λx.apply(blue,iota(filter(x.s, and[triangle,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2
'λx.apply(rectangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[apply(same_size,iota(filter(x.s, green))),size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, circle), not[circle]), yellow), nor[size3,circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:circle;4:yellow;4:nor[%s,%s];4:size3;4:circle
'λx.exists(and[blue,or[circle,blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[or[blue,and[nor[triangle,circle],circle]],circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:circle;4:circle;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(green,iota(filter(x.s, and[not[size1],size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:size1
'λx.apply(or[triangle,circle],iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, triangle), and[triangle,triangle]), and[blue,nor[implies[and[triangle,and[yellow,size2]],green],triangle]]), nor[and[and[or[green,and[size3,size3]],size3],or[rectangle,triangle]],size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:blue;4:nor[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:size2;4:green;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:size3;4:size3;4:or[%s,%s];4:rectangle;4:triangle;4:size3
'λx.apply(nor[circle,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[green,nor[green,yellow]],iota(filter(x.s, or[green,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nor[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle
'λx.contains(x.o, filter(filter(filter(filter(x.s, rectangle), yellow), green), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:green;4:blue
'λx.exists(yellow, filter(filter(filter(x.s, blue), rectangle), rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:rectangle
'λx.apply(and[rectangle,or[size2,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.forall(and[size1,and[and[rectangle,green],size3]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:size3;3:%s.s;2:x
'λx.forall(or[yellow,size3],filter(x.s, yellow))'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, or[yellow,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3
'λx.apply(apply(same_size,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, circle), nor[not[yellow],or[yellow,not[not[and[rectangle,and[rectangle,and[size2,rectangle]]]]]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:yellow;4:not[%s];4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:rectangle
'λx.forall(size3,filter(filter(x.s, apply(same_color,x.o)), not[rectangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, and[and[yellow,size3],yellow]), and[iff[triangle,and[triangle,and[or[green,triangle],and[apply(same_size,iota(x.s)),blue]]]],size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:yellow;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:green;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:size2
'λx.contains(x.o, filter(x.s, and[and[yellow,size2],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:blue
'λx.apply(and[nand[blue,not[and[triangle,yellow]]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:triangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, blue), size1), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:yellow
'λx.apply(nand[size2,size3],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size2,blue],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(and[rectangle,nor[size3,yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, circle), blue), rectangle), not[blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:rectangle;4:not[%s];4:blue
'λx.forall(size1,filter(x.s, yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[iff[or[blue,apply(same_color,iota(x.s))],iff[size1,size1]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size1;4:size1;1:%s.o;2:x
'λx.forall(not[not[implies[size2,not[nand[blue,yellow]]]]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:size2;4:not[%s];4:nand[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.apply(and[size3,and[size1,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, rectangle), and[circle,and[and[or[and[green,green],and[rectangle,size3]],rectangle],apply(same_color,iota(filter(filter(x.s, and[yellow,yellow]), and[size3,not[triangle]])))]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:rectangle;4:size3;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:size3;4:not[%s];4:triangle
'λx.apply(blue,x.o)'	0:apply(%s,%s);4:blue;1:%s.o;2:x
'λx.apply(implies[blue,not[apply(size-lt,iota(x.s))]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[green,and[size2,circle]],iota(filter(filter(filter(x.s, size1), nor[green,green]), green)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:green;4:green;4:green
'λx.apply(and[blue,iff[triangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[blue,size2],size3],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(x.s, rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[size2,yellow]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[size3,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[size3,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size3,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, nor[yellow,not[yellow]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:not[%s];4:yellow
'λx.apply(or[nand[triangle,size3],and[size3,and[size3,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, apply(same_shape,x.o)), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(and[yellow,implies[nand[not[size3],and[implies[size1,apply(size-gt,x.o)],triangle]],and[size1,apply(same_shape,iota(filter(x.s, size2)))]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:implies[%s,%s];4:nand[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:implies[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, nand[green,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size2
'λx.apply(not[apply(same_shape,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, size1), or[size1,size1]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size1;4:size1
'λx.contains(x.o, filter(filter(filter(filter(filter(filter(filter(filter(x.s, blue), or[size3,or[size3,rectangle]]), and[and[and[circle,size2],apply(same_color,x.o)],triangle]), and[and[not[blue],rectangle],rectangle]), size2), and[or[green,triangle],apply(same_color,x.o)]), not[and[blue,size2]]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:rectangle;4:rectangle;4:size2;4:and[%s,%s];4:or[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:blue;4:size2;4:size3
'λx.forall(and[not[blue],green],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(not[iff[and[or[or[or[and[size2,or[green,or[size3,rectangle]]],triangle],size2],rectangle],circle],or[and[rectangle,circle],circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:rectangle;4:triangle;4:size2;4:rectangle;4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:circle;1:%s.o;2:x
'λx.apply(nand[green,apply(size-lt,x.o)],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[circle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[circle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[size2,and[and[not[yellow],or[size1,size2]],not[rectangle]]],iota(filter(x.s, or[circle,apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:size1;4:size2;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, not[size2]), and[not[size1],size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:not[%s];4:size1;4:size3
'λx.apply(or[nor[size3,and[size2,yellow]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:size2;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(implies[circle,and[blue,apply(same_size,iota(x.s))]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[or[size3,and[not[green],or[apply(same_color,x.o),size3]]],not[and[size1,apply(same_color,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, green), triangle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:triangle
'λx.forall(or[not[yellow],apply(size-lt,iota(filter(x.s, circle)))],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, triangle), nand[blue,size2]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:blue;4:size2;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, not[size2]), and[blue,or[rectangle,size2]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(and[green,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(or[size2,and[apply(same_shape,iota(x.s)),circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[rectangle,size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[not[green],iff[rectangle,apply(size-geq,iota(x.s))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:iff[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, yellow), yellow), nor[rectangle,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:nor[%s,%s];4:rectangle;4:green
'λx.apply(or[iff[size1,size3],and[and[not[and[and[implies[not[yellow],size3],circle],circle]],yellow],size3]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size1;4:size3;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:yellow;4:size3;4:circle;4:circle;4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size3,filter(filter(filter(x.s, size2), rectangle), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, or[and[circle,green],triangle]), size1), rectangle), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:triangle;4:size1;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, iff[green,size2]), size2), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size2;4:size2;4:size1
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), nor[blue,or[size2,yellow]]), apply(same_color,iota(filter(filter(x.s, implies[implies[circle,green],and[and[blue,triangle],and[green,size3]]]), implies[yellow,triangle]))))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:blue;4:or[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:circle;4:green;4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:green;4:size3;4:implies[%s,%s];4:yellow;4:triangle
'λx.apply(nand[yellow,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nand[yellow,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[or[green,rectangle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(nor[size1,size1], filter(x.s, rectangle))'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(x.s, not[rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(nand[yellow,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(nor[blue,size3],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[blue,size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, and[iff[or[rectangle,not[rectangle]],circle],yellow]), nor[iff[rectangle,size2],circle]), size2), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:circle;4:yellow;4:nor[%s,%s];4:iff[%s,%s];4:rectangle;4:size2;4:circle;4:size2;4:green
'λx.contains(iota(filter(filter(filter(x.s, not[yellow]), size2), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(or[yellow,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(nand[green,and[blue,nand[blue,triangle]]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:green;4:and[%s,%s];4:blue;4:nand[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(and[and[size3,size1],apply(same_color,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[rectangle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[size2,not[green]],iota(filter(filter(filter(x.s, triangle), triangle), and[yellow,and[size2,green]])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:green
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size1), yellow), or[rectangle,circle]), not[or[size3,nor[or[circle,size1],size3]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:or[%s,%s];4:rectangle;4:circle;4:not[%s];4:or[%s,%s];4:size3;4:nor[%s,%s];4:or[%s,%s];4:circle;4:size1;4:size3
'λx.apply(size2,iota(filter(filter(x.s, not[blue]), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:blue
'λx.apply(blue,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, size2), size2), yellow), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:yellow;4:green
'λx.apply(and[and[rectangle,rectangle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, blue), apply(size-gt,x.o)), blue), and[apply(same_size,iota(filter(x.s, size3))),not[apply(same_shape,x.o)]]), or[triangle,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(nor[implies[triangle,and[not[not[triangle]],apply(same_color,iota(filter(x.s, size3)))]],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.forall(and[not[size1],green],filter(x.s, and[and[triangle,size1],blue]))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:blue
'λx.apply(and[and[yellow,not[or[triangle,rectangle]]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[iff[size3,and[not[size3],yellow]],not[size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:size3;4:yellow;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(or[not[triangle],yellow],filter(filter(x.s, green), and[size2,size1]))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size2;4:size1
'λx.exists(or[size2,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(x.s)),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(x.s)),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.exists(size3, filter(x.s, and[green,circle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(and[apply(size-geq,iota(filter(filter(x.s, size1), yellow))),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(filter(x.s, rectangle), not[size3]))),and[or[size1,green],and[size2,green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[size2,and[size2,nand[rectangle,apply(same_shape,iota(filter(filter(x.s, green), triangle)))]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.empty(filter(filter(x.s, green), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(triangle,iota(filter(x.s, or[implies[and[and[size3,size1],rectangle],circle],size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle;4:circle;4:size2
'λx.apply(not[apply(same_shape,iota(filter(x.s, and[size1,yellow])))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[iff[blue,not[triangle]],or[triangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:not[%s];4:triangle;4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[triangle,or[rectangle,and[blue,yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[not[apply(same_size,iota(x.s))],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,and[size1,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(nand[nor[and[yellow,yellow],triangle],implies[blue,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:triangle;4:implies[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[apply(same_shape,iota(filter(x.s, apply(same_shape,iota(filter(x.s, apply(size-leq,x.o))))))),rectangle]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;4:size1
'λx.apply(green,iota(filter(filter(filter(filter(x.s, size3), circle), size2), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:size2;4:triangle
'λx.empty(filter(filter(x.s, blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(triangle,iota(filter(x.s, and[or[blue,apply(same_color,x.o)],not[size2]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size2
'λx.apply(and[size2,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, or[blue,yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow
'λx.apply(not[apply(size-geq,iota(x.s))],iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(green,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), blue), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:triangle
'λx.apply(and[or[or[and[not[blue],not[triangle]],size2],circle],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:triangle;4:size2;4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(x.s, circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(circle, filter(x.s, or[size2,and[yellow,size1]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:size1
'λx.exists(size3, filter(filter(x.s, size1), green))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.exists(size3, filter(filter(x.s, size1), size1))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.exists(and[yellow,rectangle], filter(filter(filter(filter(x.s, size1), rectangle), blue), circle))'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:blue;4:circle
'λx.apply(iff[not[blue],or[yellow,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.exists(or[size3,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_size,iota(x.s))), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_size,iota(filter(x.s, nor[and[nor[size1,size2],size1],circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[blue,apply(same_color,iota(filter(x.s, or[apply(same_size,iota(x.s)),apply(same_shape,iota(x.s))])))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[yellow,implies[triangle,blue]]), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:triangle;4:blue;4:size3
'λx.apply(and[nand[blue,blue],apply(same_shape,iota(filter(filter(filter(x.s, size1), and[apply(size-geq,x.o),triangle]), nor[size2,size1])))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:triangle;4:nor[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, circle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[circle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(filter(filter(x.s, or[rectangle,not[apply(size-lt,iota(filter(x.s, rectangle)))]]), triangle), size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size3
'λx.apply(and[or[or[triangle,blue],yellow],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, size1), circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[size1,and[triangle,blue]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(filter(x.s, triangle), yellow), blue)), filter(filter(filter(x.s, circle), rectangle), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:green
'λx.apply(not[not[not[yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_color,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(x.s)),and[blue,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[or[circle,size2],size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:size2;4:size1
'λx.apply(or[and[nor[blue,blue],size1],size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:blue;4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size3,filter(x.s, nand[green,rectangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:rectangle
'λx.apply(and[blue,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[and[and[blue,not[triangle]],triangle],yellow],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(iff[size1,or[size1,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[blue,and[blue,not[and[and[green,yellow],circle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(implies[blue,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[not[not[rectangle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, not[or[size2,size1]]), rectangle), triangle), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:size1;4:rectangle;4:triangle;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(size2,iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.empty(filter(filter(filter(x.s, blue), nand[circle,circle]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:circle;4:circle;4:size1
'λx.apply(implies[and[green,size3],apply(same_shape,x.o)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(size-leq,iota(filter(filter(x.s, rectangle), or[blue,iff[size3,yellow]]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:blue;4:iff[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[triangle,green],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[iff[apply(same_size,iota(x.s)),size2],size3],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[rectangle,size3],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, and[rectangle,nor[apply(same_shape,iota(filter(x.s, not[triangle]))),or[and[yellow,or[yellow,rectangle]],triangle]]]), size3), yellow), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:rectangle;4:triangle;4:size3;4:yellow;4:triangle
'λx.exists(circle, filter(filter(filter(x.s, and[or[blue,or[and[size1,and[and[iff[yellow,size3],green],and[or[not[blue],circle],and[size2,and[or[yellow,circle],circle]]]]],not[size3]]],size3]), triangle), rectangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:size3;4:green;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:circle;4:not[%s];4:size3;4:size3;4:triangle;4:rectangle
'λx.contains(x.o, filter(filter(x.s, yellow), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, iff[size1,not[green]]), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:not[%s];4:green;4:size3
'λx.apply(not[implies[size3,and[size2,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(nand[circle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(size1,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(size2,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(and[iff[green,rectangle],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(size-gt,iota(x.s)),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(nor[size3,not[and[or[size2,triangle],blue]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(size1,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(size1,iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(and[or[green,apply(size-lt,x.o)],not[blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, rectangle), size1), circle), yellow), or[green,circle])), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:circle;4:yellow;4:or[%s,%s];4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[or[not[nor[triangle,not[size1]]],rectangle],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:triangle;4:not[%s];4:size1;4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[apply(size-gt,iota(filter(x.s, rectangle))),size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, yellow), yellow), and[circle,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(or[and[blue,circle],iff[and[not[green],size2],triangle]],filter(filter(filter(x.s, not[size1]), yellow), green))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:size2;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:yellow;4:green
'λx.apply(size2,iota(filter(filter(x.s, size3), and[blue,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:blue;4:triangle
'λx.exists(or[size2,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.apply(not[and[blue,and[blue,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.exists(or[size3,or[or[or[circle,and[or[blue,apply(same_size,x.o)],not[size2]]],apply(same_size,x.o)],blue]], filter(x.s, rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(blue,filter(filter(filter(x.s, rectangle), rectangle), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:size2
'λx.exists(yellow, filter(filter(filter(x.s, and[green,and[and[size3,circle],apply(size-geq,iota(filter(filter(x.s, not[triangle]), circle)))]]), and[iff[green,circle],size1]), or[size3,and[triangle,not[and[and[circle,yellow],size1]]]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:circle;4:and[%s,%s];4:iff[%s,%s];4:green;4:circle;4:size1;4:or[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), or[apply(same_shape,iota(x.s)),circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, and[blue,yellow]), apply(size-geq,iota(x.s))), and[apply(same_size,iota(x.s)),or[apply(size-leq,x.o),apply(same_shape,iota(x.s))]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, not[size2]), size1), green), rectangle), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size1;4:green;4:rectangle;4:size1
'λx.apply(or[size3,and[size3,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(nand[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, nand[triangle,and[or[blue,blue],green]]), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:green;4:size1
'λx.contains(iota(x.s), filter(x.s, and[rectangle,size2]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.contains(iota(filter(filter(filter(filter(filter(filter(x.s, or[rectangle,not[and[size2,blue]]]), rectangle), blue), size1), not[circle]), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:size2;4:blue;4:rectangle;4:blue;4:size1;4:not[%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(implies[circle,nor[and[size3,triangle],size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:nor[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:size1;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.empty(filter(x.s, and[size2,and[triangle,and[size3,blue]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:blue
'λx.exists(blue, filter(filter(x.s, yellow), yellow))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.forall(or[and[blue,green],triangle],filter(x.s, yellow))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[triangle,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.forall(size3,filter(x.s, or[apply(size-geq,iota(x.s)),and[size1,nor[rectangle,size1]]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nor[%s,%s];4:rectangle;4:size1
'λx.apply(and[nand[blue,rectangle],green],iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, rectangle), size3), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:blue
'λx.apply(nor[and[not[yellow],and[rectangle,green]],and[rectangle,not[size2]]],iota(filter(x.s, and[rectangle,size2])))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:rectangle;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(and[rectangle,circle],iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, triangle)))), rectangle), and[and[apply(same_color,iota(filter(x.s, triangle))),yellow],triangle]), green), rectangle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:triangle;4:green;4:rectangle;4:yellow
'λx.apply(nand[size1,or[size2,blue]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(x.s, circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[apply(same_size,x.o),triangle],iota(filter(x.s, or[apply(same_shape,x.o),yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.empty(filter(x.s, or[apply(same_size,x.o),rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), or[circle,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, and[and[blue,size2],not[yellow]]), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:not[%s];4:yellow;4:green
'λx.apply(or[triangle,and[triangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[size2,apply(same_size,x.o)],iota(filter(filter(filter(filter(filter(x.s, circle), yellow), and[circle,and[size3,apply(same_shape,iota(x.s))]]), or[size2,rectangle]), and[size3,apply(size-geq,x.o)])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(iff[size3,or[yellow,size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[green,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[size3,not[not[implies[and[or[not[size1],triangle],or[or[size1,or[rectangle,size3]],yellow]],apply(size-leq,iota(filter(x.s, triangle)))]]]],or[size3,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:triangle;4:or[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:size3;4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, or[rectangle,and[green,size3]]), blue), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size3;4:blue;4:circle
'λx.apply(rectangle,iota(filter(x.s, and[iff[or[blue,apply(same_color,iota(x.s))],nand[rectangle,size2]],size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:size2;4:size1
'λx.apply(nand[triangle,blue],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(size3, filter(filter(x.s, blue), size1))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.exists(size2, filter(filter(x.s, blue), green))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.exists(and[triangle,nor[or[circle,yellow],circle]], filter(x.s, nand[not[size2],size3]))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:nor[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:size2;4:size3
'λx.forall(rectangle,filter(filter(filter(x.s, apply(same_color,iota(x.s))), circle), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(and[size3,and[and[circle,size2],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),and[rectangle,size1]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nor[and[not[rectangle],triangle],size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(size1,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[not[size1],circle],iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_size,iota(filter(filter(x.s, size1), blue))),circle],filter(filter(x.s, and[circle,size2]), size3))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:size3
'λx.apply(green,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(iff[triangle,rectangle],iota(filter(x.s, and[iff[triangle,size3],or[not[blue],circle]])))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:not[%s];4:blue;4:circle
'λx.apply(or[yellow,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,x.o),size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(nor[size1,circle],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(filter(filter(filter(filter(x.s, triangle), and[and[and[not[and[green,and[green,size3]]],or[nor[size3,and[not[iff[green,nor[blue,rectangle]]],circle]],size3]],yellow],green]), size1), size1), size2))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:size3;4:or[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:nor[%s,%s];4:blue;4:rectangle;4:circle;4:size3;4:yellow;4:green;4:size1;4:size1;4:size2
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(blue,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(or[blue,nor[apply(size-geq,x.o),size2]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[not[circle],and[yellow,size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[triangle,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, green), and[size2,circle]), rectangle), apply(same_color,iota(x.s))), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size2;4:circle;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(x.s, blue), not[not[and[green,size2]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:size2;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(and[triangle,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(filter(x.s, yellow), nor[and[or[and[not[circle],green],and[and[circle,apply(same_color,iota(filter(filter(x.s, and[size3,apply(same_color,x.o)]), yellow)))],size2]],yellow],circle]), and[and[size1,size1],circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:size2;4:yellow;4:circle;4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:circle;3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(x.s)),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[nor[size3,size1],size2],iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size3;4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(nor[triangle,size3], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.forall(and[not[and[nor[size3,triangle],not[iff[and[apply(same_size,iota(filter(filter(x.s, size3), not[and[size1,circle]]))),not[circle]],blue]]]],yellow],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:triangle;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:and[%s,%s];4:size1;4:circle;4:not[%s];4:circle;4:blue;4:yellow;3:%s.s;2:x
'λx.apply(nand[blue,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, and[not[size3],apply(size-gt,x.o)]), implies[not[and[triangle,yellow]],or[yellow,size3]]), blue), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:yellow;4:size3;4:blue;4:size1
'λx.empty(filter(x.s, and[triangle,green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.exists(size2, filter(filter(x.s, green), size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.exists(apply(size-leq,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, not[size2]), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.apply(and[not[apply(size-leq,x.o)],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[size1,size3]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3;4:size1
'λx.contains(iota(filter(filter(filter(filter(x.s, rectangle), apply(size-geq,x.o)), size3), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;4:triangle;3:%s.s;2:x
'λx.apply(or[not[blue],triangle],iota(filter(x.s, and[size1,iff[blue,size2]])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:iff[%s,%s];4:blue;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[and[and[not[blue],blue],or[rectangle,and[triangle,rectangle]]],circle],iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:blue;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(not[size2],iota(filter(filter(filter(x.s, size1), circle), triangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:triangle
'λx.empty(filter(filter(x.s, and[size2,circle]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:blue
'λx.apply(and[size1,rectangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[and[rectangle,apply(same_color,x.o)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,nor[and[and[iff[and[or[apply(size-leq,iota(x.s)),nor[triangle,yellow]],nor[rectangle,yellow]],blue],not[size3]],or[size1,triangle]],yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:yellow;4:nor[%s,%s];4:rectangle;4:yellow;4:blue;4:not[%s];4:size3;4:or[%s,%s];4:size1;4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(not[yellow],x.s)'	0:forall(%s,%s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.exists(not[and[rectangle,implies[size1,size1]]], filter(filter(filter(filter(x.s, not[circle]), and[not[triangle],blue]), triangle), and[size2,triangle]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:triangle;4:blue;4:triangle;4:and[%s,%s];4:size2;4:triangle
'λx.apply(not[blue],iota(filter(x.s, and[circle,rectangle])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(and[triangle,yellow],iota(filter(filter(filter(filter(x.s, triangle), size2), not[not[circle]]), not[or[and[size1,triangle],yellow]])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:not[%s];4:not[%s];4:circle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:yellow
'λx.forall(and[not[and[yellow,rectangle]],not[size3]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(and[rectangle,and[triangle,apply(size-geq,iota(filter(x.s, and[yellow,rectangle])))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(filter(x.s, blue), triangle), size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:size2
'λx.contains(x.o, filter(filter(x.s, and[apply(same_color,iota(filter(filter(filter(x.s, yellow), green), and[or[or[rectangle,rectangle],size3],rectangle]))),rectangle]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:size3;4:rectangle;4:rectangle;4:rectangle
'λx.exists(blue, filter(filter(filter(x.s, apply(same_color,x.o)), yellow), triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:triangle
'λx.forall(iff[size1,and[size1,triangle]],filter(filter(x.s, or[size2,rectangle]), yellow))'	0:forall(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:size1;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:yellow
'λx.forall(and[not[nand[or[green,green],and[apply(same_size,iota(filter(filter(x.s, green), circle))),size2]]],green],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:green;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size2;4:green;3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, blue))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size1,nand[circle,not[size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nand[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[blue,triangle],iota(filter(filter(filter(filter(filter(x.s, blue), and[size1,size1]), rectangle), iff[circle,or[apply(same_size,iota(filter(x.s, and[circle,yellow]))),size1]]), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:size1;4:rectangle;4:iff[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,not[triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[size2],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[and[rectangle,and[and[or[rectangle,not[yellow]],apply(same_color,iota(filter(filter(filter(filter(filter(x.s, rectangle), yellow), blue), nor[blue,size1]), and[triangle,size1])))],size3]],not[apply(same_size,iota(x.s))]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue;4:nor[%s,%s];4:blue;4:size1;4:and[%s,%s];4:triangle;4:size1;4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[implies[or[size1,blue],size1],nor[not[nor[rectangle,yellow]],nand[and[circle,and[blue,apply(same_color,iota(filter(x.s, or[implies[apply(same_shape,iota(filter(filter(x.s, size3), or[triangle,or[blue,and[green,size3]]]))),green],size2])))]],rectangle]]],blue],iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size1;4:nor[%s,%s];4:not[%s];4:nor[%s,%s];4:rectangle;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:size3;4:green;4:size2;4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(or[and[rectangle,apply(same_shape,iota(filter(x.s, size1)))],apply(size-leq,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(or[circle,circle],filter(filter(x.s, size2), and[circle,yellow]))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:yellow
'λx.apply(not[size2],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, not[and[size2,green]]), iff[yellow,apply(same_color,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:green;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[or[or[apply(size-lt,iota(filter(x.s, green))),and[iff[green,size2],triangle]],size1],nor[blue,blue]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:iff[%s,%s];4:green;4:size2;4:triangle;4:size1;4:nor[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size3, filter(x.s, apply(size-leq,iota(filter(x.s, green)))))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[not[not[not[triangle]]],blue],iota(filter(filter(x.s, or[or[rectangle,triangle],circle]), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:circle;4:blue
'λx.apply(and[triangle,implies[iff[green,or[size2,or[apply(same_color,iota(filter(filter(filter(x.s, size3), size1), green))),and[not[size1],implies[nand[rectangle,apply(size-gt,iota(x.s))],size3]]]]],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:implies[%s,%s];4:iff[%s,%s];4:green;4:or[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:green;4:and[%s,%s];4:not[%s];4:size1;4:implies[%s,%s];4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, iff[yellow,and[or[size3,circle],size3]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:size3
'λx.contains(x.o, filter(filter(filter(filter(filter(filter(x.s, circle), triangle), triangle), yellow), not[blue]), and[circle,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:triangle;4:yellow;4:not[%s];4:blue;4:and[%s,%s];4:circle;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size2), and[size2,and[blue,size1]]), green), and[and[and[green,size1],size2],size3]), and[and[not[size3],rectangle],and[triangle,circle]]), yellow), not[nand[apply(same_shape,x.o),yellow]]), and[and[green,size2],circle]), not[not[and[circle,triangle]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size1;4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:size2;4:size3;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:rectangle;4:and[%s,%s];4:triangle;4:circle;4:yellow;4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:circle;4:not[%s];4:not[%s];4:and[%s,%s];4:circle;4:triangle
'λx.apply(and[implies[apply(size-leq,iota(x.s)),size3],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, not[triangle]), and[size3,and[apply(same_color,iota(x.s)),nor[nor[yellow,and[yellow,apply(same_color,iota(x.s))]],circle]]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(and[nor[and[yellow,rectangle],and[rectangle,not[green]]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:rectangle;4:not[%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[triangle,rectangle],iota(filter(filter(filter(x.s, yellow), size3), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:circle
'λx.apply(or[and[not[apply(size-leq,x.o)],implies[rectangle,rectangle]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.exists(not[and[rectangle,not[triangle]]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.exists(and[or[rectangle,size3],or[circle,size2]], filter(x.s, and[size2,triangle]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(nor[not[apply(size-gt,x.o)],green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[rectangle,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(x.s, and[and[rectangle,or[size3,size2]],size2]), or[iff[rectangle,and[or[not[size2],and[or[triangle,yellow],blue]],size3]],and[and[yellow,not[and[triangle,or[triangle,blue]]]],circle]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:size2;4:size2;4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:blue;4:size3;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:blue;4:circle
'λx.empty(filter(filter(x.s, blue), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.forall(green,filter(x.s, apply(same_color,iota(filter(x.s, and[green,size1])))))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1
'λx.apply(and[iff[yellow,yellow],size1],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[implies[blue,and[yellow,green]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:green;4:blue;1:%s.o;2:x
'λx.apply(and[blue,iff[triangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[circle,not[not[nor[circle,size2]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:nor[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, blue), size2))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(apply(size-lt,iota(x.s)),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(size-lt,iota(x.s)),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[blue,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[not[apply(same_color,iota(filter(x.s, apply(same_shape,iota(filter(filter(filter(x.s, circle), size1), yellow))))))],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[green,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle
'λx.apply(and[size3,or[triangle,size3]],iota(filter(x.s, and[size1,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, not[triangle]), or[rectangle,nand[and[green,size2],size1]]), blue), implies[size1,or[size1,green]]), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1;4:blue;4:implies[%s,%s];4:size1;4:or[%s,%s];4:size1;4:green;4:triangle
'λx.forall(and[circle,size1],filter(x.s, size1))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[size3,circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[rectangle],iota(filter(filter(filter(x.s, not[size1]), circle), or[blue,triangle])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:circle;4:or[%s,%s];4:blue;4:triangle
'λx.apply(yellow,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.forall(iff[circle,nor[and[rectangle,size2],or[implies[size3,or[not[iff[size3,and[green,implies[not[nand[size3,not[size3]]],triangle]]]],size3]],or[nand[iff[and[triangle,size1],and[size3,size1]],apply(size-lt,iota(filter(filter(x.s, triangle), size1)))],size2]]]],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:implies[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:size3;4:and[%s,%s];4:green;4:implies[%s,%s];4:not[%s];4:nand[%s,%s];4:size3;4:not[%s];4:size3;4:triangle;4:size3;4:or[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size2;3:%s.s;2:x
'λx.apply(and[size3,nor[triangle,circle]],iota(filter(x.s, or[size2,or[green,apply(same_color,iota(filter(filter(x.s, apply(same_color,x.o)), yellow)))]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nor[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_size,x.o)), rectangle), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size3
'λx.apply(and[and[green,apply(same_color,x.o)],apply(same_size,iota(filter(filter(x.s, not[implies[and[not[and[or[rectangle,rectangle],size1]],size2],not[size1]]]), circle)))],iota(filter(filter(filter(x.s, size1), or[not[nand[and[rectangle,yellow],circle]],and[circle,implies[size1,triangle]]]), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:size1;4:size2;4:not[%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:circle;4:and[%s,%s];4:circle;4:implies[%s,%s];4:size1;4:triangle;4:circle
'λx.exists(yellow, filter(filter(x.s, yellow), and[and[nand[green,and[and[green,apply(same_color,iota(x.s))],size1]],rectangle],yellow]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:rectangle;4:yellow
'λx.forall(yellow,filter(filter(x.s, apply(same_color,x.o)), not[triangle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:triangle
'λx.apply(or[size2,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, or[circle,size3]), yellow), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size3;4:yellow;4:circle
'λx.apply(and[green,apply(same_color,iota(filter(x.s, triangle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[nand[size1,blue],yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size1;4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.contains(x.o, filter(filter(x.s, not[size2]), nor[yellow,apply(same_color,iota(x.s))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,size3],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size3,size1],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[apply(size-lt,x.o),iff[and[apply(same_size,x.o),iff[size2,rectangle]],yellow]],iota(filter(x.s, and[triangle,or[green,green]])))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:size2;4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:green
'λx.apply(size3,iota(filter(filter(x.s, nor[size3,not[or[green,size1]]]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:green;4:size1;4:blue
'λx.exists(circle, filter(x.s, implies[green,or[and[size1,or[triangle,not[triangle]]],circle]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:not[%s];4:triangle;4:circle
'λx.apply(and[and[yellow,blue],size2],iota(filter(filter(x.s, and[size2,or[circle,green]]), implies[or[yellow,size3],size1])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:green;4:implies[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:size1
'λx.forall(and[and[rectangle,rectangle],and[and[and[blue,rectangle],triangle],yellow]],filter(filter(filter(x.s, size2), size2), or[size1,not[not[size1]]]))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:triangle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:or[%s,%s];4:size1;4:not[%s];4:not[%s];4:size1
'λx.contains(iota(filter(x.s, and[size3,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, triangle), triangle), green), circle), green), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:green;4:circle;4:green;4:size2
'λx.apply(and[blue,not[green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, implies[blue,not[rectangle]]), blue), blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:not[%s];4:rectangle;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size2,apply(same_shape,x.o)],size1],iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.forall(yellow,filter(x.s, triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_size,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, nand[size1,apply(same_color,iota(x.s))]), not[or[circle,not[and[circle,yellow]]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:circle;4:yellow
'λx.contains(iota(x.s), filter(x.s, implies[size3,apply(same_shape,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[and[green,nor[size2,and[yellow,or[rectangle,size1]]]],circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:size1;4:circle
'λx.apply(not[and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[rectangle,apply(same_color,iota(filter(filter(filter(filter(x.s, yellow), blue), triangle), size1)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[nor[blue,green],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,and[and[size1,rectangle],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, nor[triangle,rectangle]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:rectangle;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, size3), and[size1,green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:green
'λx.apply(iff[size3,apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[blue,apply(same_size,x.o)],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[blue,blue]), or[implies[and[apply(size-gt,iota(x.s)),and[apply(same_color,x.o),green]],and[size3,nand[blue,triangle]]],not[yellow]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:and[%s,%s];4:size3;4:nand[%s,%s];4:blue;4:triangle;4:not[%s];4:yellow
'λx.exists(triangle, filter(filter(x.s, size1), size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(iff[apply(same_size,iota(x.s)),blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, triangle), and[and[yellow,and[blue,and[or[and[and[or[blue,blue],or[triangle,implies[or[or[and[rectangle,and[size1,and[triangle,size1]]],circle],size3],rectangle]]],size3],size3],iff[rectangle,size3]]]],size3]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:or[%s,%s];4:triangle;4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size1;4:circle;4:size3;4:rectangle;4:size3;4:size3;4:iff[%s,%s];4:rectangle;4:size3;4:size3
'λx.apply(and[or[and[size2,green],blue],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:blue;4:green;1:%s.o;2:x
'λx.exists(size1, filter(x.s, and[yellow,and[iff[green,yellow],apply(same_size,iota(x.s))]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:iff[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[nor[size1,circle],green],circle],iota(filter(filter(filter(x.s, green), apply(same_size,x.o)), or[circle,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:size1;4:circle;4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:size2
'λx.apply(nor[circle,and[size3,not[triangle]]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:size3;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), and[rectangle,blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(implies[size2,or[blue,yellow]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, implies[not[rectangle],size1])), filter(filter(filter(x.s, or[or[green,apply(size-geq,iota(filter(filter(filter(x.s, or[size3,yellow]), green), not[triangle])))],yellow]), triangle), or[circle,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:rectangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:yellow;4:green;4:not[%s];4:triangle;4:yellow;4:triangle;4:or[%s,%s];4:circle;4:circle
'λx.exists(not[rectangle], filter(x.s, size3))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size2, filter(filter(x.s, and[size1,size2]), triangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:triangle
'λx.forall(size3,filter(filter(filter(x.s, and[blue,apply(same_shape,iota(filter(filter(x.s, circle), not[nand[yellow,apply(same_size,x.o)]])))]), triangle), and[not[and[size2,or[size1,iff[yellow,green]]]],size3]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:iff[%s,%s];4:yellow;4:green;4:size3
'λx.apply(and[nand[size2,size1],or[circle,yellow]],iota(filter(filter(x.s, iff[triangle,apply(same_color,x.o)]), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:size1;4:or[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_shape,iota(x.s))), apply(same_color,iota(x.s))), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(apply(size-leq,iota(filter(filter(filter(x.s, or[triangle,or[size2,size3]]), apply(same_size,x.o)), not[and[apply(same_color,iota(x.s)),size3]]))),iota(filter(filter(filter(filter(x.s, and[and[size1,not[circle]],or[triangle,not[rectangle]]]), and[triangle,blue]), size1), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:circle;4:or[%s,%s];4:triangle;4:not[%s];4:rectangle;4:and[%s,%s];4:triangle;4:blue;4:size1;4:blue
'λx.apply(and[rectangle,and[not[size2],apply(same_shape,x.o)]],iota(filter(x.s, and[and[not[blue],size2],apply(size-leq,x.o)])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[size1,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(or[yellow,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[yellow,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[yellow,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.empty(filter(filter(filter(filter(filter(x.s, size1), yellow), rectangle), or[rectangle,yellow]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:rectangle;4:or[%s,%s];4:rectangle;4:yellow;4:green
'λx.contains(iota(filter(filter(x.s, size3), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;3:%s.s;2:x
'λx.apply(implies[or[size2,or[yellow,size3]],size1],iota(filter(filter(filter(x.s, blue), triangle), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, or[yellow,size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[iff[blue,apply(same_size,iota(x.s))],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[iff[size1,not[triangle]],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size1;4:not[%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_color,iota(x.s)),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), and[and[and[not[blue],or[nor[size3,and[not[iff[green,nor[blue,rectangle]]],circle]],size3]],yellow],green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:nor[%s,%s];4:blue;4:rectangle;4:circle;4:size3;4:yellow;4:green
'λx.apply(and[or[not[circle],size3],implies[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:size3;4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.exists(and[implies[implies[yellow,circle],and[circle,apply(same_size,x.o)]],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[or[rectangle,or[size1,size3]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:size3;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, blue), size3), rectangle), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, and[size3,size1]), nor[implies[triangle,green],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1;4:nor[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:green
'λx.apply(or[circle,implies[or[or[green,apply(same_shape,x.o)],size3],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.apply(not[implies[and[rectangle,and[size3,size2]],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size2;4:triangle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, blue), and[triangle,size2]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:size2
'λx.apply(and[apply(same_size,iota(filter(filter(filter(x.s, not[size2]), circle), rectangle))),or[green,and[nor[blue,yellow],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle;4:rectangle;4:or[%s,%s];4:green;4:and[%s,%s];4:nor[%s,%s];4:blue;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(x.s)),iff[green,triangle]],iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(and[and[and[nor[yellow,triangle],rectangle],size1],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:yellow;4:triangle;4:rectangle;4:size1;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[green,circle]), iff[green,not[size2]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:iff[%s,%s];4:green;4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(and[and[yellow,triangle],and[size1,iff[blue,yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:size1;4:iff[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.exists(and[size1,blue], filter(filter(x.s, circle), circle))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[and[size1,not[rectangle]],apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[or[apply(size-leq,x.o),apply(same_shape,iota(x.s))]],iota(filter(filter(filter(x.s, triangle), blue), rectangle)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(apply(same_shape,iota(filter(x.s, and[size1,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[blue,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(nand[nand[circle,size3],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:circle;4:size3;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.forall(and[size3,circle],filter(filter(x.s, rectangle), blue))'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(not[triangle],iota(filter(filter(x.s, size2), or[apply(size-geq,iota(x.s)),blue])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(not[not[apply(same_color,iota(filter(x.s, size2)))]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[not[apply(same_size,x.o)],rectangle],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(and[apply(same_color,x.o),and[triangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.exists(blue, filter(x.s, nand[size3,size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size3
'λx.apply(not[size3],iota(filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), triangle), apply(same_color,x.o)), triangle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,x.o),blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(not[not[green]], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[apply(size-gt,iota(x.s)),and[triangle,apply(same_shape,x.o)]], filter(filter(x.s, blue), not[circle]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:circle
'λx.contains(iota(filter(filter(x.s, and[yellow,apply(same_size,x.o)]), and[size2,green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.apply(and[not[not[not[size1]]],rectangle],iota(filter(filter(x.s, triangle), apply(size-geq,iota(filter(filter(x.s, and[circle,iff[circle,and[rectangle,yellow]]]), or[rectangle,blue]))))))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:iff[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:rectangle;4:blue
'λx.apply(and[yellow,circle],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, or[not[nor[blue,and[yellow,size1]]],and[circle,apply(same_shape,iota(x.s))]]), blue), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:blue
'λx.forall(and[size3,apply(same_size,iota(x.s))],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[and[rectangle,blue],and[size3,nor[and[size1,apply(same_shape,x.o)],apply(same_color,iota(x.s))]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(or[triangle,yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, nor[not[size2],size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:size2;4:size2
'λx.empty(filter(x.s, blue))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[nor[blue,and[blue,nor[blue,yellow]]]],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:blue;4:nor[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(iff[nand[green,or[and[triangle,circle],and[yellow,size3]]],size1],iota(filter(filter(filter(filter(x.s, size2), triangle), apply(size-gt,iota(filter(filter(filter(x.s, implies[triangle,size1]), rectangle), not[size2])))), blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:yellow;4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size1;4:rectangle;4:not[%s];4:size2;4:blue
'λx.apply(and[yellow,yellow],iota(filter(filter(x.s, yellow), not[and[apply(same_shape,iota(filter(filter(x.s, yellow), or[or[size1,yellow],blue]))),size2]])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:blue;4:size2
'λx.apply(and[nand[nor[or[yellow,nor[blue,size1]],implies[not[size3],rectangle]],blue],implies[apply(same_color,iota(x.s)),triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:blue;4:size1;4:implies[%s,%s];4:not[%s];4:size3;4:rectangle;4:blue;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,and[green,size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(implies[blue,blue], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.forall(nor[not[blue],green],filter(filter(x.s, size2), and[circle,green]))'	0:forall(%s,%s);4:nor[%s,%s];4:not[%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:green
'λx.apply(green,iota(filter(filter(filter(x.s, size1), or[circle,blue]), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:blue;4:size1
'λx.apply(and[size2,and[circle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nand[not[blue],green],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[rectangle,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, yellow), rectangle), and[circle,rectangle]), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:rectangle;4:yellow
'λx.apply(and[rectangle,and[size2,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(x.s, not[and[size2,and[not[size3],size3]]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size3;4:size3
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(filter(x.s, green), circle), and[circle,apply(same_size,x.o)]), blue), rectangle), size1), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle;4:size1;4:blue
'λx.apply(and[blue,nand[rectangle,green]],iota(filter(x.s, nand[nor[rectangle,apply(same_shape,iota(x.s))],blue])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(filter(filter(x.s, triangle), blue), and[triangle,and[size2,size3]]), rectangle), or[yellow,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:size3;4:rectangle;4:or[%s,%s];4:yellow;4:yellow
'λx.apply(implies[size3,rectangle],iota(filter(x.s, and[apply(same_shape,iota(filter(x.s, triangle))),blue])))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(circle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(and[not[size3],apply(size-gt,x.o)],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(filter(filter(x.s, not[or[size2,size1]]), rectangle), triangle), yellow), not[blue]), blue), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:size1;4:rectangle;4:triangle;4:yellow;4:not[%s];4:blue;4:blue;4:yellow
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, or[size3,and[blue,size1]]), size1), and[size2,size1]), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size1;4:size1;4:and[%s,%s];4:size2;4:size1;4:rectangle
'λx.apply(apply(same_size,iota(filter(filter(x.s, size3), or[rectangle,apply(same_color,x.o)]))),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(apply(same_color,x.o),filter(filter(filter(filter(filter(x.s, triangle), size2), or[green,size1]), and[and[rectangle,size1],size1]), blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:or[%s,%s];4:green;4:size1;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:size1;4:blue
'λx.forall(blue,filter(filter(x.s, circle), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.exists(or[not[size3],not[or[size1,and[apply(same_shape,x.o),and[yellow,not[apply(size-gt,iota(x.s))]]]]]], filter(filter(filter(x.s, and[implies[size1,green],and[triangle,not[and[blue,yellow]]]]), green), yellow))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:size3;4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size1;4:green;4:and[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:blue;4:yellow;4:green;4:yellow
'λx.apply(or[not[and[blue,nor[nor[size3,rectangle],size3]]],size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:nor[%s,%s];4:size3;4:rectangle;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(and[triangle,apply(size-geq,iota(x.s))],filter(x.s, size2))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(x.s, circle), nor[and[size3,apply(same_shape,iota(x.s))],and[size1,size2]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.contains(x.o, filter(filter(filter(filter(x.s, triangle), triangle), triangle), or[size2,or[size3,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:triangle;4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:rectangle
'λx.apply(size3,iota(filter(filter(x.s, and[apply(same_size,iota(x.s)),rectangle]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(nand[apply(size-leq,x.o),size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[and[circle,blue],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, or[nand[blue,size3],size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:blue;4:size3;4:size2
'λx.empty(filter(x.s, and[size1,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.forall(yellow,filter(filter(filter(filter(filter(filter(x.s, triangle), and[circle,rectangle]), green), not[and[size2,and[and[circle,nor[rectangle,green]],apply(same_shape,iota(x.s))]]]), rectangle), not[or[circle,not[and[yellow,yellow]]]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:circle;4:rectangle;4:green;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:not[%s];4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:yellow;4:yellow
'λx.empty(filter(x.s, and[size3,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.forall(and[triangle,triangle],filter(filter(filter(x.s, size1), blue), and[yellow,apply(same_shape,iota(filter(filter(filter(x.s, apply(same_size,x.o)), rectangle), iff[triangle,size1])))]))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:iff[%s,%s];4:triangle;4:size1
'λx.empty(filter(filter(x.s, circle), and[triangle,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:triangle;4:green
'λx.apply(triangle,iota(filter(filter(filter(x.s, rectangle), size3), and[rectangle,or[rectangle,circle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(or[and[rectangle,green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:blue;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(filter(filter(x.s, triangle), circle), size3), size3))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:size3;4:size3
'λx.exists(size2, filter(filter(x.s, size1), yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.empty(filter(x.s, or[green,apply(same_color,iota(filter(filter(x.s, apply(same_color,x.o)), yellow)))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(or[implies[iff[circle,nor[iff[size1,nand[size1,apply(size-lt,iota(x.s))]],blue]],apply(size-leq,x.o)],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:circle;4:nor[%s,%s];4:iff[%s,%s];4:size1;4:nand[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[size1],and[triangle,and[size1,implies[green,size3]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:implies[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[yellow,green],iota(filter(filter(x.s, not[size2]), size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size3
'λx.forall(apply(size-lt,x.o),filter(x.s, green))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), rectangle), implies[size3,yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:implies[%s,%s];4:size3;4:yellow
'λx.apply(or[triangle,and[triangle,circle]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[size3,yellow]],iota(filter(filter(x.s, and[size1,size3]), and[and[size2,triangle],yellow])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:yellow
'λx.apply(or[circle,circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size3,filter(filter(filter(filter(x.s, rectangle), size2), or[not[not[size1]],or[rectangle,apply(size-lt,iota(filter(x.s, size2)))]]), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:or[%s,%s];4:not[%s];4:not[%s];4:size1;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(or[yellow,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[or[nand[rectangle,blue],apply(size-gt,x.o)],and[triangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[and[apply(size-lt,iota(filter(filter(x.s, not[and[yellow,or[circle,size3]]]), apply(same_shape,x.o)))),circle]],or[size1,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:or[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(nand[size1,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[apply(same_size,x.o),circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[not[size3],and[size3,rectangle]],or[size1,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:size3;4:rectangle;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, or[triangle,blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:blue
'λx.forall(and[circle,size2],filter(filter(x.s, size3), size3))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(and[triangle,triangle],iota(filter(filter(x.s, and[rectangle,and[triangle,green]]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:green;4:blue
'λx.exists(yellow, filter(x.s, circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(circle,iota(filter(filter(x.s, not[yellow]), and[green,and[triangle,rectangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(size3,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[rectangle,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(nor[or[not[apply(size-geq,x.o)],green],and[and[triangle,and[apply(same_shape,x.o),triangle]],circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(iff[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), nand[yellow,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:yellow;4:size2
'λx.forall(iff[or[green,circle],triangle],filter(x.s, circle))'	0:forall(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:green;4:circle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, circle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[not[and[not[and[size1,and[or[size1,green],size2]]],or[not[rectangle],nor[size2,and[circle,circle]]]]],rectangle],iota(filter(x.s, or[not[size2],or[yellow,or[rectangle,circle]]])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:size2;4:or[%s,%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:size2;4:and[%s,%s];4:circle;4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(and[nand[size2,blue],blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, or[rectangle,and[triangle,size1]]), yellow), or[blue,and[circle,size3]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:size1;4:yellow;4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size3
'λx.apply(nand[circle,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[blue,and[green,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(not[not[blue]],iota(filter(filter(filter(x.s, not[and[nand[or[yellow,apply(same_size,x.o)],yellow],size2]]), nor[size1,and[rectangle,not[nor[iff[size1,size3],triangle]]]]), nor[triangle,circle])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:size2;4:nor[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:not[%s];4:nor[%s,%s];4:iff[%s,%s];4:size1;4:size3;4:triangle;4:nor[%s,%s];4:triangle;4:circle
'λx.apply(and[size1,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), and[implies[rectangle,and[and[size2,not[size2]],circle]],iff[iff[and[nor[and[or[rectangle,rectangle],not[triangle]],nand[rectangle,size3]],apply(same_shape,iota(x.s))],yellow],circle]]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:size2;4:circle;4:iff[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:triangle;4:nand[%s,%s];4:rectangle;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:circle;4:triangle
'λx.apply(size1,iota(filter(x.s, not[and[yellow,not[yellow]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:yellow
'λx.forall(blue,filter(filter(filter(x.s, size2), size3), or[green,nand[and[and[or[and[size2,size2],size2],yellow],triangle],size2]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:or[%s,%s];4:green;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size2;4:yellow;4:triangle;4:size2
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, not[circle]), and[yellow,rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:rectangle
'λx.exists(size1, filter(filter(filter(x.s, circle), blue), or[yellow,and[and[apply(same_color,x.o),and[and[size3,triangle],size3]],circle]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:size3;4:circle
'λx.apply(size3,iota(filter(filter(x.s, apply(same_shape,iota(filter(x.s, and[not[and[nand[or[blue,rectangle],rectangle],size2]],green])))), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:rectangle;4:size2;4:green;4:size2
'λx.apply(rectangle,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.contains(iota(filter(filter(x.s, size3), triangle)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[and[circle,size2],triangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, triangle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(yellow,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[not[rectangle],green]],iota(filter(filter(filter(filter(filter(x.s, not[rectangle]), nor[not[and[iff[not[apply(same_color,iota(filter(x.s, green)))],or[not[rectangle],circle]],size1]],circle]), green), rectangle), and[green,nand[yellow,size2]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:not[%s];4:rectangle;4:circle;4:size1;4:circle;4:green;4:rectangle;4:and[%s,%s];4:green;4:nand[%s,%s];4:yellow;4:size2
'λx.apply(yellow,iota(filter(x.s, and[size3,size1])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(yellow,iota(filter(x.s, and[size1,size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.apply(and[not[rectangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[circle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[nor[and[triangle,size1],and[circle,not[size1]]],or[iff[triangle,size2],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:circle;4:not[%s];4:size1;4:or[%s,%s];4:iff[%s,%s];4:triangle;4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[apply(size-geq,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(x.s, blue)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nor[size3,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[apply(same_size,iota(x.s)),and[not[apply(same_color,x.o)],green]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.empty(filter(filter(filter(x.s, size3), size1), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:not[%s];4:size1
'λx.apply(and[nor[circle,not[circle]],size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:not[%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[circle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[not[size3],and[apply(size-lt,iota(filter(filter(x.s, yellow), size1))),blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:blue;1:%s.o;2:x
'λx.exists(not[green], filter(x.s, not[size1]))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.exists(size1, filter(filter(x.s, not[green]), apply(same_color,iota(filter(x.s, yellow)))))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[green,not[size1]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, nand[or[size3,and[green,size1]],green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:size1;4:green
'λx.apply(or[not[triangle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[not[triangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(iff[green,blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, and[rectangle,circle]), size3), apply(same_size,iota(filter(filter(filter(x.s, size2), triangle), yellow)))), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:yellow;4:triangle
'λx.apply(or[nor[apply(same_shape,iota(x.s)),rectangle],and[green,and[and[not[rectangle],size1],size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[blue,green],iota(filter(x.s, or[circle,not[size2]])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:size2
'λx.exists(and[blue,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), and[or[nor[and[triangle,rectangle],blue],and[size1,green]],size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:blue;4:and[%s,%s];4:size1;4:green;4:size3
'λx.contains(iota(filter(x.s, blue)), filter(x.s, and[size1,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.forall(green,filter(x.s, blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[not[and[size3,blue]],and[size1,circle]],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:size1;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, and[apply(same_size,x.o),size1]), implies[blue,and[rectangle,yellow]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:implies[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:yellow
'λx.apply(nor[triangle,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[green,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(iff[green,size1],iota(filter(x.s, implies[size3,size1])))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:size1
'λx.contains(iota(filter(filter(x.s, circle), yellow)), filter(filter(x.s, rectangle), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.exists(blue, filter(filter(x.s, yellow), blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(rectangle,x.o)'	0:apply(%s,%s);4:rectangle;1:%s.o;2:x
'λx.apply(and[green,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_color,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, blue), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.contains(x.o, filter(filter(x.s, blue), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.contains(x.o, filter(filter(x.s, blue), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(apply(size-gt,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(and[and[yellow,or[size1,triangle]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[size1,size2],iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(not[or[size3,size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[size3,or[size2,or[size1,not[apply(same_shape,x.o)]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[nand[and[size3,nand[size3,size1]],apply(size-leq,x.o)],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:nand[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[nand[size2,nor[yellow,size2]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:nor[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(x.s, not[circle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.forall(yellow,filter(x.s, yellow))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(apply(size-gt,iota(filter(filter(filter(x.s, triangle), size3), not[and[green,not[apply(same_shape,iota(filter(filter(x.s, blue), nor[rectangle,blue])))]]]))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[and[size2,apply(same_color,x.o)],nor[blue,size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, green), size2), blue), size3), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:blue;4:size3;4:rectangle
'λx.apply(apply(size-gt,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, rectangle), yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(not[rectangle],iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.contains(iota(filter(x.s, apply(size-geq,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[yellow,nand[size3,iff[blue,size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, triangle), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.forall(not[and[circle,yellow]],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size3), apply(same_size,iota(filter(x.s, size2)))), and[not[size1],not[not[size2]]]), and[size2,or[not[apply(size-leq,iota(x.s))],circle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:not[%s];4:size2;4:and[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:circle
'λx.forall(yellow,filter(filter(filter(x.s, nor[triangle,and[and[yellow,green],green]]), blue), circle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:green;4:blue;4:circle
'λx.forall(iff[yellow,green],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[green,triangle]), rectangle), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:rectangle;4:size2
'λx.forall(not[not[size3]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(and[size1,or[circle,green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[yellow,or[green,size1]],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:green;4:size1;4:size2;1:%s.o;2:x
'λx.apply(not[or[nand[green,blue],size2]],iota(filter(x.s, nand[not[and[circle,rectangle]],and[green,and[green,not[rectangle]]]])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:nand[%s,%s];4:green;4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:not[%s];4:rectangle
'λx.forall(or[blue,size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(and[green,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, size1), yellow), apply(same_color,iota(filter(filter(x.s, size3), green)))), size2), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:size2;4:blue
'λx.exists(and[and[size1,green],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:triangle;3:%s.s;2:x
'λx.apply(not[or[apply(same_color,iota(x.s)),size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[triangle,size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(nor[and[size1,yellow],size1], filter(x.s, or[not[not[yellow]],blue]))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:yellow;4:blue
'λx.apply(iff[and[green,and[circle,yellow]],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, or[size3,blue]), or[rectangle,not[size1]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:blue;4:or[%s,%s];4:rectangle;4:not[%s];4:size1
'λx.apply(or[triangle,implies[green,and[and[not[green],apply(same_shape,iota(x.s))],blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(not[size3],filter(filter(filter(filter(x.s, yellow), not[and[green,apply(same_color,iota(filter(filter(filter(filter(x.s, implies[circle,blue]), size1), green), not[size2])))]]), circle), yellow))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:blue;4:size1;4:green;4:not[%s];4:size2;4:circle;4:yellow
'λx.apply(and[and[implies[size3,and[yellow,rectangle]],rectangle],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:rectangle;4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[blue,apply(same_color,x.o)],size2],iota(filter(x.s, and[rectangle,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, not[blue]), iff[size3,size3]), and[nand[implies[triangle,yellow],not[size1]],triangle]), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:iff[%s,%s];4:size3;4:size3;4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:triangle;4:yellow;4:not[%s];4:size1;4:triangle;4:size1
'λx.apply(or[apply(same_color,x.o),size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, and[yellow,not[size1]]))),iota(filter(filter(x.s, not[yellow]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:blue
'λx.apply(iff[green,circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, or[size2,and[size1,and[blue,and[apply(size-lt,iota(x.s)),or[yellow,size3]]]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3
'λx.exists(green, filter(x.s, size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(green, filter(x.s, green))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[rectangle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, not[nor[yellow,and[size3,and[apply(same_shape,iota(filter(filter(x.s, rectangle), size3))),green]]]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:green
'λx.apply(apply(size-leq,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(size1, filter(x.s, green))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size3, filter(x.s, green))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size2, filter(x.s, green))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size1, filter(x.s, size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size3, filter(x.s, size1))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size2, filter(x.s, size3))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size2, filter(x.s, size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[circle,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(and[circle,and[and[size1,size3],nor[or[yellow,rectangle],size3]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:nor[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(nand[size1,apply(size-gt,iota(filter(filter(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, triangle)))), and[size2,size2]), green), blue), triangle)))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size2;4:size2;4:green;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nor[not[blue],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(filter(x.s, or[apply(same_shape,x.o),or[size2,iff[blue,or[or[green,size3],size2]]]]), or[rectangle,not[size1]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size2;4:iff[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:green;4:size3;4:size2;4:or[%s,%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(filter(x.s, circle), size2))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.empty(filter(filter(filter(x.s, not[circle]), and[yellow,circle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:circle;4:green
'λx.contains(iota(x.s), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(x.s), filter(filter(filter(x.s, triangle), rectangle), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:size2
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.forall(and[nor[size1,size2],blue],filter(x.s, or[size1,size3]))'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3
'λx.empty(filter(x.s, and[yellow,circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.apply(or[size2,circle],iota(filter(x.s, and[apply(size-leq,x.o),blue])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), circle), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:yellow
'λx.contains(iota(filter(filter(x.s, green), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;3:%s.s;2:x
'λx.apply(or[size2,iff[yellow,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:iff[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(or[and[not[size1],green],not[size1]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:green;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(and[and[implies[size2,iff[circle,or[yellow,size1]]],size2],size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size2;4:iff[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:size1;4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(apply(same_shape,iota(filter(filter(filter(filter(x.s, yellow), triangle), apply(size-lt,x.o)), and[nand[rectangle,green],not[green]]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:green;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(or[triangle,implies[green,and[and[circle,apply(same_shape,iota(x.s))],blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,implies[green,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[apply(size-lt,x.o),size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, circle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.forall(not[rectangle],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[circle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[circle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[circle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(implies[apply(same_shape,x.o),or[nor[yellow,green],and[size2,not[size2]]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:nor[%s,%s];4:yellow;4:green;4:and[%s,%s];4:size2;4:not[%s];4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, size2), size3), green), circle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:green;4:circle;4:size2
'λx.apply(apply(same_shape,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, size2), circle), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[green,size1],iota(filter(x.s, or[size2,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:triangle
'λx.apply(nand[circle,and[and[not[size1],size2],apply(size-gt,iota(x.s))]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nand[and[or[and[yellow,size1],size1],size2],and[size3,not[size2]]],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:size1;4:size2;4:and[%s,%s];4:size3;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(and[blue,apply(same_size,iota(filter(x.s, rectangle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[circle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.forall(apply(same_size,iota(filter(x.s, size1))),filter(filter(filter(filter(x.s, size2), size2), size2), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:size2;4:rectangle
'λx.forall(yellow,filter(x.s, and[triangle,circle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.apply(and[apply(same_size,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[size2,circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle
'λx.apply(and[circle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size2), circle), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:size3
'λx.apply(blue,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.contains(iota(filter(x.s, and[and[yellow,or[yellow,yellow]],blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:yellow;4:blue;3:%s.s;2:x
'λx.forall(and[green,size2],filter(x.s, not[implies[and[blue,apply(size-lt,iota(x.s))],not[size1]]]))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1
'λx.forall(size1,filter(filter(filter(filter(x.s, not[size2]), size1), green), size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size1;4:green;4:size2
'λx.apply(and[and[apply(same_shape,x.o),and[apply(same_shape,iota(filter(x.s, yellow))),circle]],implies[blue,yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:implies[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,iota(x.s)),and[size2,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size3,apply(size-geq,x.o)],iota(filter(x.s, and[size1,and[size3,triangle]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:triangle
'λx.apply(and[yellow,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size1, filter(x.s, triangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[not[and[size3,triangle]],or[circle,nor[circle,size2]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:or[%s,%s];4:circle;4:nor[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size1), and[not[triangle],size1]), and[yellow,yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:not[%s];4:triangle;4:size1;4:and[%s,%s];4:yellow;4:yellow
'λx.contains(iota(filter(x.s, not[size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, blue), size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:yellow
'λx.exists(green, filter(x.s, triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[apply(same_color,iota(filter(filter(x.s, triangle), triangle))),and[rectangle,not[triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:and[%s,%s];4:rectangle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.empty(filter(x.s, not[and[size2,triangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:triangle
'λx.apply(and[circle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[or[apply(same_shape,iota(x.s)),and[or[or[rectangle,or[nand[not[blue],blue],rectangle]],yellow],circle]],and[blue,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:blue;4:rectangle;4:yellow;4:circle;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[implies[or[rectangle,size1],apply(same_shape,iota(filter(x.s, yellow)))],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[apply(same_color,iota(filter(filter(filter(filter(filter(x.s, or[size3,circle]), circle), circle), size1), nor[or[size1,or[iff[implies[circle,apply(same_shape,iota(x.s))],size3],apply(same_size,x.o)]],and[circle,green]])))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:circle;4:circle;4:circle;4:size1;4:nor[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, not[or[size3,triangle]]), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size3;4:triangle;4:triangle
'λx.apply(or[not[circle],nor[or[size3,or[circle,rectangle]],not[nor[size3,and[circle,and[or[implies[apply(same_color,iota(filter(filter(x.s, triangle), and[apply(same_size,iota(filter(filter(x.s, green), blue))),iff[nand[or[triangle,size3],yellow],rectangle]]))),and[circle,size2]],size3],triangle]]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:nor[%s,%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:circle;4:rectangle;4:not[%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:iff[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:size2;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(nand[blue,and[green,size2]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[implies[triangle,triangle],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:triangle;4:size1
'λx.contains(iota(x.s), filter(x.s, or[size2,size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1
'λx.apply(blue,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.exists(blue, filter(x.s, and[size3,size2]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2
'λx.apply(circle,iota(filter(x.s, or[triangle,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle
'λx.apply(and[or[or[apply(same_color,iota(filter(filter(x.s, yellow), green))),and[or[size1,size3],implies[nor[rectangle,and[green,nor[size3,yellow]]],green]]],and[and[size3,blue],apply(same_shape,iota(x.s))]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:and[%s,%s];4:or[%s,%s];4:size1;4:size3;4:implies[%s,%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:nor[%s,%s];4:size3;4:yellow;4:green;4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[and[green,or[triangle,circle]],not[nor[apply(size-leq,x.o),circle]]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:triangle;4:circle;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[not[green],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[not[rectangle],size1],iota(filter(filter(x.s, or[and[and[and[triangle,and[apply(same_shape,x.o),size2]],or[yellow,and[blue,size3]]],size3],yellow]), triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:size3;4:size3;4:yellow;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), and[circle,yellow]), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(not[and[circle,blue]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, nand[rectangle,not[size2]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:size2
'λx.exists(triangle, filter(x.s, rectangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, rectangle), apply(same_color,x.o))), filter(x.s, and[or[not[and[blue,yellow]],yellow],triangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:yellow;4:yellow;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, apply(same_size,iota(filter(x.s, implies[size2,size1])))), and[or[and[and[blue,triangle],or[yellow,apply(size-leq,iota(x.s))]],yellow],or[size3,yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:size1;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size3;4:yellow
'λx.empty(filter(x.s, nand[size3,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:blue
'λx.apply(nand[yellow,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[yellow,size2],iota(filter(filter(x.s, and[or[or[triangle,size1],circle],apply(size-leq,x.o)]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1
'λx.forall(iff[not[or[blue,green]],and[triangle,rectangle]],filter(x.s, size1))'	0:forall(%s,%s);4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:green;4:and[%s,%s];4:triangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, green), blue), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:size2
'λx.apply(and[and[apply(same_size,x.o),size1],or[green,or[nand[blue,apply(same_size,x.o)],triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:or[%s,%s];4:green;4:or[%s,%s];4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, apply(size-gt,x.o)), size1))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, blue), size2), and[rectangle,green]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:and[%s,%s];4:rectangle;4:green;4:blue
'λx.forall(circle,filter(filter(filter(filter(filter(filter(filter(filter(x.s, size2), circle), nand[apply(same_shape,x.o),circle]), apply(same_color,x.o)), or[size1,triangle]), rectangle), or[apply(size-geq,x.o),and[blue,apply(size-gt,iota(x.s))]]), circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:triangle;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle
'λx.forall(and[rectangle,size1],filter(x.s, apply(same_color,iota(x.s))))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(filter(x.s, size3), and[triangle,green]), not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,circle],iota(filter(x.s, and[triangle,rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(or[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, circle), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.contains(x.o, filter(filter(x.s, circle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(not[circle],iota(filter(filter(filter(x.s, and[or[triangle,size1],blue]), green), blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:blue;4:green;4:blue
'λx.apply(and[triangle,circle],iota(filter(x.s, or[green,blue])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.exists(size3, filter(filter(x.s, blue), circle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(apply(same_size,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(filter(filter(x.s, green), yellow), size2), and[triangle,and[apply(size-gt,x.o),triangle]]), and[green,and[apply(size-geq,x.o),blue]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size2;4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue
'λx.apply(iff[circle,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size1,filter(filter(filter(filter(x.s, not[size3]), or[rectangle,nand[and[green,size2],size1]]), and[yellow,apply(same_shape,iota(x.s))]), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, size1), not[or[size2,rectangle]]), nand[blue,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:or[%s,%s];4:size2;4:rectangle;4:nand[%s,%s];4:blue;4:blue
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, and[triangle,apply(same_color,iota(filter(filter(x.s, apply(same_color,x.o)), apply(size-gt,iota(filter(x.s, yellow))))))]), rectangle), green), and[nand[blue,and[blue,blue]],rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:green;4:and[%s,%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:blue;4:blue;4:rectangle
'λx.apply(and[yellow,and[not[apply(size-leq,iota(x.s))],apply(same_shape,x.o)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,or[circle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nor[and[iff[rectangle,size3],yellow],not[apply(same_color,x.o)]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size1],iota(filter(filter(filter(x.s, size2), yellow), green)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:green
'λx.forall(nor[apply(same_color,x.o),blue],filter(filter(x.s, circle), size3))'	0:forall(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(size2,iota(filter(filter(x.s, and[size3,and[yellow,nand[circle,circle]]]), or[size2,nand[and[circle,and[apply(same_shape,iota(filter(x.s, triangle))),circle]],triangle]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:circle;4:or[%s,%s];4:size2;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, size2), apply(same_size,iota(x.s))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[size3,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3
'λx.apply(or[implies[triangle,triangle],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,or[implies[triangle,circle],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nor[and[and[not[rectangle],blue],circle],apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:blue;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(blue,filter(x.s, not[rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(iff[size2,or[not[or[size3,rectangle]],size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:rectangle;4:size1;1:%s.o;2:x
'λx.forall(or[not[apply(same_shape,x.o)],apply(same_color,iota(filter(filter(filter(x.s, green), rectangle), and[apply(same_size,x.o),circle])))],filter(x.s, blue))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[blue,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[not[rectangle],triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), apply(same_shape,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size2,apply(same_shape,x.o)],iota(filter(filter(x.s, and[size1,size2]), not[yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:not[%s];4:yellow
'λx.apply(size3,iota(filter(x.s, iff[blue,size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:size2
'λx.contains(x.o, filter(filter(x.s, size1), and[blue,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:blue
'λx.exists(blue, filter(x.s, nand[size3,yellow]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:yellow
'λx.empty(filter(filter(x.s, green), and[green,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:triangle
'λx.apply(green,iota(filter(filter(x.s, triangle), and[apply(same_color,iota(filter(filter(x.s, not[apply(size-lt,iota(filter(x.s, rectangle)))]), size3))),rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:rectangle
'λx.apply(iff[or[not[triangle],and[not[size2],green]],triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:not[%s];4:size2;4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,triangle],iota(filter(filter(x.s, and[nor[yellow,and[circle,and[size3,size2]]],apply(same_color,iota(x.s))]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(implies[not[size1],size1],iota(filter(x.s, or[or[nor[size3,and[triangle,circle]],and[implies[triangle,and[nand[size3,size2],size1]],not[circle]]],green])))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:and[%s,%s];4:nand[%s,%s];4:size3;4:size2;4:size1;4:not[%s];4:circle;4:green
'λx.apply(not[or[and[yellow,not[size1]],or[not[nor[blue,and[yellow,size1]]],and[circle,apply(same_shape,iota(x.s))]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:size1;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(implies[rectangle,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(implies[rectangle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(implies[rectangle,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, apply(size-leq,iota(filter(filter(x.s, size3), yellow)))))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, triangle), or[size2,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size2;4:yellow
'λx.apply(or[apply(size-leq,iota(x.s)),nor[and[and[nand[size2,size3],size2],apply(same_color,iota(filter(x.s, blue)))],implies[and[green,size3],triangle]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:size3;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:and[%s,%s];4:green;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nand[or[and[apply(size-gt,iota(x.s)),and[triangle,apply(same_shape,x.o)]],green],size2],apply(same_color,iota(x.s))],iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(apply(size-lt,iota(filter(filter(filter(filter(x.s, and[yellow,triangle]), blue), and[or[or[size3,size1],circle],and[blue,green]]), rectangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:blue;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:circle;4:and[%s,%s];4:blue;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[apply(same_size,iota(filter(filter(x.s, or[not[apply(same_size,x.o)],rectangle]), size1)))], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, blue), rectangle), and[not[blue],not[not[nand[yellow,iff[nor[or[blue,and[iff[circle,not[size1]],and[size2,green]]],yellow],circle]]]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:not[%s];4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:circle;4:not[%s];4:size1;4:and[%s,%s];4:size2;4:green;4:yellow;4:circle
'λx.apply(size2,iota(filter(filter(filter(x.s, rectangle), size1), apply(same_shape,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, yellow), nor[green,and[and[and[size3,circle],size1],blue]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size1;4:blue
'λx.apply(apply(size-leq,iota(filter(x.s, nor[size3,not[size1]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(filter(x.s, not[size3]), apply(same_size,x.o)), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.exists(apply(same_shape,x.o), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(apply(same_shape,x.o), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(apply(same_size,iota(filter(filter(filter(x.s, implies[and[iff[triangle,size3],or[and[size3,size1],circle]],and[not[and[triangle,size3]],blue]]), apply(same_size,x.o)), and[blue,rectangle]))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size3;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, and[blue,green]), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;4:size2
'λx.contains(iota(filter(filter(filter(filter(x.s, and[and[green,or[circle,triangle]],and[apply(same_size,iota(x.s)),triangle]]), size1), circle), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1;4:circle;4:size2;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, size3), triangle), size1), rectangle), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:size1;4:rectangle;4:size3
'λx.apply(circle,iota(filter(filter(x.s, or[yellow,and[apply(same_color,iota(x.s)),and[size2,not[size1]]]]), nor[blue,size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:size1;4:nor[%s,%s];4:blue;4:size2
'λx.apply(and[nor[circle,blue],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:size2;1:%s.o;2:x
'λx.apply(iff[size3,and[size3,or[circle,not[blue]]]],iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.empty(filter(filter(filter(x.s, yellow), green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:circle
'λx.contains(iota(x.s), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[size2,and[and[triangle,yellow],circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:circle;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[or[circle,yellow],blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:blue
'λx.apply(blue,iota(filter(filter(x.s, and[yellow,or[and[yellow,yellow],and[not[yellow],blue]]]), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:not[%s];4:yellow;4:blue;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, and[blue,green]), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;4:circle
'λx.apply(and[size1,and[apply(size-gt,iota(x.s)),iff[circle,size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),apply(same_color,x.o)],iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.exists(triangle, filter(filter(x.s, size3), apply(same_shape,iota(filter(x.s, apply(size-leq,x.o))))))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, nand[size1,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:green
'λx.exists(apply(same_color,x.o), filter(filter(x.s, size3), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(iff[and[or[and[size3,yellow],not[size3]],or[and[blue,and[and[circle,size3],size2]],size2]],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:size2;4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[and[apply(same_color,x.o),yellow],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, triangle), size1), yellow), green), yellow), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:yellow;4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,and[triangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, nand[apply(same_shape,iota(filter(filter(x.s, rectangle), blue))),iff[triangle,apply(same_color,x.o)]]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.contains(iota(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, triangle), green)))), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[circle,yellow],iota(filter(x.s, and[size1,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.empty(filter(x.s, implies[green,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:blue
'λx.apply(and[yellow,and[triangle,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[size2,apply(same_size,x.o)])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(not[and[triangle,rectangle]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[not[and[size1,size3]],circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:size3;4:circle
'λx.exists(circle, filter(filter(filter(filter(filter(filter(x.s, blue), blue), circle), nor[not[yellow],implies[yellow,blue]]), size1), or[green,triangle]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:circle;4:nor[%s,%s];4:not[%s];4:yellow;4:implies[%s,%s];4:yellow;4:blue;4:size1;4:or[%s,%s];4:green;4:triangle
'λx.apply(implies[and[size2,size3],not[blue]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:size3;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[size2,and[circle,size1]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, or[triangle,size3]), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:circle
'λx.apply(nor[rectangle,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(not[and[size1,yellow]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:yellow;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(and[circle,or[and[circle,size1],circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[size3,green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size3;4:green;4:size2;1:%s.o;2:x
'λx.exists(iff[or[yellow,size2],size1], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:size1;3:%s.s;2:x
'λx.apply(and[not[implies[and[size1,not[size3]],nand[green,and[apply(same_size,iota(x.s)),apply(same_size,x.o)]]]],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:size3;4:nand[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(filter(x.s, size1), implies[or[blue,not[and[apply(same_shape,x.o),size2]]],or[or[circle,not[and[size3,yellow]]],size2]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:implies[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:or[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size3;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[size1,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,iota(filter(filter(x.s, implies[circle,or[and[size2,rectangle],rectangle]]), not[not[and[yellow,circle]]]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:rectangle;4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(iff[triangle,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[and[triangle,yellow],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:green;1:%s.o;2:x
'λx.apply(nor[triangle,and[and[apply(same_shape,iota(x.s)),size3],blue]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-leq,iota(filter(filter(x.s, not[green]), and[circle,size2]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[and[rectangle,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,and[green,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[not[circle],nand[size2,yellow]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:nand[%s,%s];4:size2;4:yellow;4:blue;1:%s.o;2:x
'λx.exists(or[size1,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[triangle,nor[circle,circle]],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:nor[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.forall(triangle,filter(filter(filter(x.s, not[size3]), apply(same_shape,iota(x.s))), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(not[not[rectangle]],filter(filter(x.s, not[size1]), size3))'	0:forall(%s,%s);4:not[%s];4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size3
'λx.apply(and[rectangle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,x.o),size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size3,size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(or[and[size1,size2],implies[circle,green]], filter(filter(x.s, and[and[circle,triangle],size1]), size2))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size2;4:implies[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size1;4:size2
'λx.forall(size3,filter(filter(x.s, and[size1,size1]), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1;4:size1
'λx.apply(size3,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(implies[apply(same_color,iota(x.s)),and[or[and[iff[rectangle,and[blue,circle]],size2],or[triangle,size3]],green]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:circle;4:size2;4:or[%s,%s];4:triangle;4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[triangle,not[yellow]],iota(filter(filter(x.s, apply(same_shape,x.o)), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.exists(iff[and[and[and[blue,and[not[triangle],size3]],green],triangle],size3], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:triangle;4:size3;4:green;4:triangle;4:size3;3:%s.s;2:x
'λx.apply(and[triangle,not[yellow]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[blue,blue],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[green,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(and[and[size2,size2],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[triangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size3;1:%s.o;2:x
'λx.forall(implies[triangle,apply(size-gt,x.o)],filter(filter(x.s, blue), or[rectangle,circle]))'	0:forall(%s,%s);4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(filter(x.s, implies[not[blue],or[not[or[green,size2]],size2]]), yellow), size3), size1), iff[rectangle,not[or[green,rectangle]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:size2;4:size2;4:yellow;4:size3;4:size1;4:iff[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:green;4:rectangle
'λx.apply(green,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[yellow,rectangle]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[size3,blue],iota(filter(filter(x.s, and[and[green,or[circle,triangle]],and[apply(same_size,iota(x.s)),triangle]]), rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, and[green,blue]), circle), triangle), circle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue;4:circle;4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(size-geq,iota(x.s))), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1
'λx.exists(and[yellow,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, apply(same_color,iota(filter(x.s, apply(size-gt,iota(filter(filter(filter(filter(x.s, not[apply(same_color,x.o)]), rectangle), size2), apply(same_color,x.o))))))))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(blue,filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[size2,and[not[size1],apply(size-gt,iota(filter(x.s, green)))]], filter(filter(x.s, green), size3))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(and[circle,and[yellow,triangle]],iota(filter(filter(x.s, and[size2,nor[apply(same_size,iota(filter(filter(filter(filter(x.s, size2), size3), and[implies[triangle,green],blue]), blue))),yellow]]), nand[and[size3,iff[size2,or[and[size3,circle],not[and[and[or[circle,not[triangle]],rectangle],blue]]]]],implies[size2,yellow]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:blue;4:blue;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:size3;4:iff[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:triangle;4:rectangle;4:blue;4:implies[%s,%s];4:size2;4:yellow
'λx.empty(filter(filter(filter(x.s, rectangle), size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:size1
'λx.empty(filter(filter(filter(x.s, rectangle), size3), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size1
'λx.apply(and[circle,or[triangle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[iff[blue,triangle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[circle,and[apply(size-gt,x.o),size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, or[rectangle,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle
'λx.contains(iota(filter(filter(x.s, apply(same_shape,x.o)), and[size1,or[or[green,blue],size3]])), filter(filter(filter(x.s, circle), size3), triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:triangle
'λx.apply(not[and[blue,and[iff[rectangle,green],blue]]],iota(filter(filter(x.s, green), blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.empty(filter(x.s, apply(same_size,iota(filter(x.s, size2)))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, circle), and[nor[size1,or[green,yellow]],rectangle]), size3), and[triangle,green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:nor[%s,%s];4:size1;4:or[%s,%s];4:green;4:yellow;4:rectangle;4:size3;4:and[%s,%s];4:triangle;4:green
'λx.exists(nand[size1,size2], filter(x.s, size1))'	0:exists(%s, %s);4:nand[%s,%s];4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(filter(x.s, yellow), or[size1,triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size1;4:triangle
'λx.exists(or[yellow,nand[green,or[apply(size-gt,x.o),apply(same_shape,iota(filter(x.s, circle)))]]], filter(x.s, not[not[size3]]))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3
'λx.contains(iota(filter(filter(filter(filter(x.s, circle), triangle), and[green,triangle]), and[yellow,size2])), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:and[%s,%s];4:green;4:triangle;4:and[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size3,filter(filter(x.s, rectangle), iff[apply(same_color,x.o),size2]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(or[triangle,or[rectangle,circle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,nor[and[size2,triangle],size1]],iota(filter(filter(filter(x.s, rectangle), not[apply(same_shape,iota(filter(filter(x.s, size3), not[circle])))]), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:circle;4:size1
'λx.empty(filter(filter(x.s, triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(or[size2,size2],iota(filter(filter(filter(filter(x.s, green), or[blue,size3]), rectangle), apply(same_color,iota(filter(filter(filter(x.s, rectangle), blue), and[size1,and[green,or[or[green,size3],circle]]]))))))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:blue;4:size3;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:or[%s,%s];4:or[%s,%s];4:green;4:size3;4:circle
'λx.apply(and[not[and[rectangle,triangle]],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(x.s, or[size1,size2]), not[green]), yellow), iff[rectangle,blue]), size1), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2;4:not[%s];4:green;4:yellow;4:iff[%s,%s];4:rectangle;4:blue;4:size1;4:green
'λx.empty(filter(filter(filter(filter(filter(x.s, rectangle), not[green]), size2), circle), apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:green;4:size2;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(x.s, nor[yellow,rectangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:rectangle
'λx.exists(and[or[blue,size1],and[apply(same_size,iota(x.s)),rectangle]], filter(filter(filter(x.s, and[circle,not[circle]]), size2), rectangle))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:circle;4:size2;4:rectangle
'λx.empty(filter(filter(filter(x.s, size3), apply(same_shape,iota(x.s))), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(implies[triangle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, triangle), or[apply(size-lt,x.o),or[green,not[triangle]]]), green)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:green;4:not[%s];4:triangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(apply(same_color,iota(filter(filter(x.s, and[or[size2,green],size2]), green))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:green;4:size2;4:green;3:%s.s;2:x
'λx.apply(and[nor[size3,triangle],size1],iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size3;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.forall(apply(same_color,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(triangle, filter(x.s, green))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(triangle, filter(x.s, size2))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, or[and[triangle,yellow],blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:blue
'λx.apply(and[and[or[nand[or[not[size2],not[and[size1,apply(same_color,x.o)]]],yellow],and[apply(size-leq,iota(x.s)),green]],size3],implies[apply(same_size,x.o),green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:green;4:size3;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, and[and[nand[green,not[apply(same_size,iota(filter(filter(x.s, yellow), triangle)))]],size2],size1]), blue), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:size2;4:size1;4:blue;4:circle
'λx.apply(and[circle,size2],iota(filter(filter(filter(filter(filter(x.s, blue), yellow), or[circle,not[and[and[yellow,apply(same_size,x.o)],iff[yellow,size1]]]]), green), nand[yellow,size3])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:yellow;4:size1;4:green;4:nand[%s,%s];4:yellow;4:size3
'λx.empty(filter(filter(filter(filter(x.s, size2), and[not[not[and[rectangle,yellow]]],apply(same_shape,iota(filter(filter(filter(x.s, size2), size1), or[size3,rectangle])))]), and[blue,triangle]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:rectangle;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:or[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:blue;4:triangle;4:triangle
'λx.apply(not[not[yellow]],iota(filter(x.s, or[triangle,blue])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:blue
'λx.apply(not[or[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[and[size1,yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(filter(x.s, nand[or[apply(same_size,iota(filter(filter(filter(filter(filter(x.s, size1), not[or[yellow,blue]]), circle), size1), size1))),size1],and[size1,implies[green,size3]]]))),yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:or[%s,%s];4:yellow;4:blue;4:circle;4:size1;4:size1;4:size1;4:and[%s,%s];4:size1;4:implies[%s,%s];4:green;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[circle,nand[circle,rectangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nand[%s,%s];4:circle;4:rectangle
'λx.apply(and[size1,apply(size-leq,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), and[and[and[not[and[green,size1]],or[nor[size3,and[not[iff[green,nor[blue,rectangle]]],circle]],size3]],yellow],green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:size1;4:or[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:nor[%s,%s];4:blue;4:rectangle;4:circle;4:size3;4:yellow;4:green
'λx.apply(iff[and[triangle,and[apply(size-geq,iota(filter(x.s, nor[apply(same_shape,iota(x.s)),size3]))),yellow]],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(not[iff[and[or[or[or[and[size1,or[green,or[implies[blue,triangle],rectangle]]],triangle],size2],rectangle],circle],or[and[rectangle,circle],circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:green;4:or[%s,%s];4:implies[%s,%s];4:blue;4:triangle;4:rectangle;4:triangle;4:size2;4:rectangle;4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, green), size2), blue), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:blue;4:size2
'λx.apply(nor[apply(same_size,x.o),implies[and[not[triangle],and[and[size2,size1],and[apply(size-lt,iota(x.s)),yellow]]],and[not[or[nor[triangle,and[size1,blue]],apply(size-lt,x.o)]],not[apply(same_shape,iota(filter(x.s, not[and[blue,yellow]])))]]]],iota(filter(filter(filter(filter(x.s, not[rectangle]), and[yellow,implies[circle,blue]]), size3), green)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:nor[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:circle;4:blue;4:size3;4:green
'λx.apply(or[and[and[size2,rectangle],size1],and[size2,iff[and[blue,size1],green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:size1;4:and[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:blue;4:size1;4:green;1:%s.o;2:x
'λx.exists(nor[yellow,rectangle], filter(x.s, circle))'	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[circle,or[circle,apply(same_size,iota(filter(filter(x.s, blue), rectangle)))]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, rectangle), circle), and[triangle,and[yellow,size2]]), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:size2;4:rectangle
'λx.apply(triangle,iota(filter(x.s, apply(size-gt,iota(x.s)))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.forall(or[size1,or[and[implies[size2,apply(size-geq,iota(x.s))],implies[circle,not[and[yellow,triangle]]]],or[nor[or[size2,green],size3],rectangle]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size2;4:green;4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(nor[and[or[and[not[circle],green],and[and[circle,apply(same_color,iota(filter(filter(x.s, and[size3,apply(same_color,x.o)]), yellow)))],size2]],yellow],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:size2;4:yellow;4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,iota(x.s)),filter(filter(x.s, blue), apply(same_color,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[or[rectangle,circle],and[triangle,implies[and[size1,and[or[nor[not[yellow],apply(size-leq,x.o)],or[blue,or[implies[rectangle,apply(size-geq,x.o)],or[not[and[nand[and[blue,triangle],green],size3]],green]]]],yellow]],and[not[and[blue,size3]],circle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:green;4:size3;4:green;4:yellow;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), triangle), and[yellow,circle]), and[apply(same_shape,x.o),not[and[or[yellow,size2],apply(same_color,iota(x.s))]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(filter(x.s, nor[green,yellow]), blue), apply(size-geq,iota(x.s))))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:yellow;4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.exists(or[or[nand[rectangle,size2],size1],rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size2;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(iff[yellow,circle],iota(filter(filter(x.s, and[not[triangle],size3]), green)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:triangle;4:size3;4:green
'λx.apply(and[size3,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,iota(x.s)),or[size1,and[green,and[not[rectangle],rectangle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.exists(nor[or[yellow,yellow],or[implies[green,and[green,apply(size-lt,x.o)]],nor[or[triangle,size1],and[and[and[apply(size-gt,iota(x.s)),or[nor[not[green],blue],triangle]],blue],rectangle]]]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:green;4:blue;4:triangle;4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(filter(x.s, nand[size2,blue]), size2), and[circle,size3])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:blue;4:size2;4:and[%s,%s];4:circle;4:size3
'λx.exists(and[or[size2,rectangle],nand[size2,green]], filter(x.s, size1))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:nand[%s,%s];4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, not[or[size3,iff[size1,and[triangle,rectangle]]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size3;4:iff[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:rectangle
'λx.empty(filter(filter(filter(x.s, triangle), apply(same_shape,iota(x.s))), or[size3,not[circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:not[%s];4:circle
'λx.contains(iota(x.s), filter(filter(x.s, green), apply(size-leq,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[and[rectangle,circle],or[implies[rectangle,triangle],blue]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:triangle;4:blue
'λx.forall(or[green,not[nand[rectangle,yellow]]],filter(x.s, and[or[size3,circle],circle]))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:nand[%s,%s];4:rectangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:circle
'λx.apply(or[green,implies[implies[and[rectangle,apply(same_size,x.o)],and[and[yellow,size2],and[nor[size3,and[apply(same_shape,x.o),and[yellow,green]]],circle]]],and[circle,implies[circle,size2]]]],iota(filter(filter(x.s, or[circle,or[triangle,nand[or[blue,rectangle],apply(same_shape,iota(x.s))]]]), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:green;4:circle;4:and[%s,%s];4:circle;4:implies[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2
'λx.exists(green, x.s)'	0:exists(%s, %s);4:green;3:%s.s;2:x
'λx.apply(and[yellow,blue],iota(filter(filter(x.s, size3), apply(same_color,iota(filter(x.s, size1))))))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.exists(size1, x.s)'	0:exists(%s, %s);4:size1;3:%s.s;2:x
'λx.exists(size2, x.s)'	0:exists(%s, %s);4:size2;3:%s.s;2:x
'λx.exists(size3, x.s)'	0:exists(%s, %s);4:size3;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[apply(size-gt,x.o),circle]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;4:size2
'λx.apply(or[size2,and[green,and[size1,and[or[apply(size-geq,x.o),and[size3,nand[circle,yellow]]],apply(same_size,iota(filter(filter(filter(filter(filter(filter(x.s, size2), implies[and[circle,and[size3,rectangle]],triangle]), rectangle), rectangle), rectangle), implies[triangle,and[blue,size2]])))]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:size3;4:nand[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:rectangle;4:triangle;4:rectangle;4:rectangle;4:rectangle;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, blue), yellow))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(and[size2,not[not[or[size2,rectangle]]]],iota(filter(filter(x.s, circle), or[size1,size3])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:not[%s];4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size1;4:size3
'λx.apply(apply(size-geq,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(x.s)'	0:empty(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), implies[size2,triangle]), and[yellow,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:yellow;4:triangle
'λx.exists(rectangle, filter(x.s, not[yellow]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(and[rectangle,circle],iota(filter(filter(filter(x.s, triangle), blue), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle
'λx.apply(and[size1,triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(implies[not[size2],nand[circle,size2]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size2;4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[apply(same_size,x.o),size3],implies[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(and[implies[yellow,not[apply(size-lt,iota(x.s))]],circle],iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,and[size1,and[green,or[size2,size2]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(filter(filter(x.s, size1), size3), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:triangle
'λx.apply(or[rectangle,or[green,blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[apply(same_size,iota(x.s)),green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[rectangle,and[apply(size-geq,iota(filter(filter(filter(x.s, and[yellow,circle]), nand[and[or[yellow,or[size2,size1]],nand[green,size2]],yellow]), triangle))),apply(same_color,iota(x.s))]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:size1;4:nand[%s,%s];4:green;4:size2;4:yellow;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(x.s)),or[or[circle,rectangle],apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, and[size3,yellow]), triangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:triangle
'λx.forall(and[size2,apply(same_color,x.o)],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[triangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[apply(same_size,iota(filter(x.s, and[blue,rectangle]))),size3],iota(filter(filter(filter(x.s, size2), circle), and[and[yellow,green],and[not[blue],and[and[green,rectangle],or[rectangle,or[and[circle,size1],or[or[apply(size-leq,x.o),and[and[or[and[rectangle,and[not[rectangle],apply(same_color,x.o)]],size1],size1],rectangle]],size1]]]]]])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size1;4:rectangle;4:size1
'λx.contains(iota(filter(filter(x.s, size2), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;3:%s.s;2:x
'λx.exists(and[not[yellow],nor[not[size3],circle]], filter(x.s, nand[size3,size3]))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:yellow;4:nor[%s,%s];4:not[%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size3
'λx.exists(apply(same_size,iota(filter(filter(x.s, size1), rectangle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(blue,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(nand[size2,size3],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,green],iota(filter(filter(x.s, nor[triangle,and[and[apply(same_shape,iota(x.s)),size3],blue]]), not[size3])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:blue;4:not[%s];4:size3
'λx.forall(triangle,filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(filter(filter(x.s, blue), and[blue,and[and[or[size1,blue],iff[size1,size2]],size1]]), triangle), size2), or[implies[not[size1],triangle],apply(same_color,iota(x.s))]), or[triangle,rectangle]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:iff[%s,%s];4:size1;4:size2;4:size1;4:triangle;4:size2;4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:size1;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:rectangle;4:triangle
'λx.contains(iota(filter(x.s, or[apply(same_shape,x.o),rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[size1,size3], filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, blue)))), size1), and[size1,green]))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:and[%s,%s];4:size1;4:green
'λx.apply(iff[yellow,and[and[green,green],blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:blue;1:%s.o;2:x
'λx.forall(nand[nor[rectangle,size1],size1],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:rectangle;4:size1;4:size1;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[not[size3],and[triangle,yellow]]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:triangle;4:yellow;4:size2
'λx.apply(and[implies[and[size1,size2],green],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:size2;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[rectangle,apply(same_shape,iota(filter(x.s, blue)))]],iota(filter(x.s, and[size3,or[rectangle,not[yellow]]])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:not[%s];4:yellow
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(x.s, or[yellow,not[rectangle]]), size2), size3), or[circle,nor[rectangle,and[circle,green]]]), and[rectangle,size2]), size1), circle), and[and[size1,yellow],or[size2,and[and[size1,size1],iff[not[blue],yellow]]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:rectangle;4:size2;4:size3;4:or[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:rectangle;4:size2;4:size1;4:circle;4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:iff[%s,%s];4:not[%s];4:blue;4:yellow
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), yellow), and[circle,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:and[%s,%s];4:circle;4:size1
'λx.apply(not[and[apply(size-lt,x.o),size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.exists(or[and[blue,size1],apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, green), rectangle), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:size2
'λx.apply(size3,iota(filter(x.s, and[rectangle,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(or[and[apply(size-geq,iota(filter(x.s, circle))),implies[rectangle,green]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:rectangle;4:green;4:circle;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.forall(and[size1,rectangle],filter(filter(filter(x.s, triangle), green), blue))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:blue
'λx.apply(iff[blue,yellow],iota(filter(filter(filter(filter(filter(x.s, size3), green), size2), not[size1]), not[yellow])))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:size2;4:not[%s];4:size1;4:not[%s];4:yellow
'λx.forall(apply(same_color,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[and[not[iff[and[apply(same_shape,x.o),apply(same_size,iota(x.s))],size1]],circle],green],iota(filter(filter(x.s, nand[size1,yellow]), not[and[blue,and[green,size3]]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:yellow;4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:size3
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size1), and[or[size2,rectangle],and[and[triangle,apply(same_size,x.o)],not[and[yellow,rectangle]]]]), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;4:triangle
'λx.contains(iota(filter(filter(x.s, green), size3)), filter(filter(x.s, circle), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(and[rectangle,and[size3,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,and[size3,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(filter(x.s, and[circle,yellow]), not[and[size3,circle]]), apply(same_size,x.o)), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(circle,iota(x.s))'	0:apply(%s,%s);4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_color,iota(filter(filter(filter(x.s, rectangle), and[apply(same_shape,iota(x.s)),rectangle]), nor[and[circle,blue],circle]))),size3],iota(filter(filter(filter(x.s, size3), not[green]), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:circle;4:blue;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:green;4:triangle
'λx.forall(triangle,x.s)'	0:forall(%s,%s);4:triangle;3:%s.s;2:x
'λx.apply(and[not[yellow],apply(same_color,iota(x.s))],iota(filter(filter(filter(x.s, implies[circle,not[triangle]]), green), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:not[%s];4:triangle;4:green;4:size1
'λx.empty(filter(filter(filter(x.s, size1), apply(same_shape,x.o)), or[not[circle],implies[triangle,and[or[circle,green],and[iff[not[size1],triangle],implies[size2,rectangle]]]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:circle;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:size1;4:triangle;4:implies[%s,%s];4:size2;4:rectangle
'λx.apply(and[and[size3,size3],and[apply(size-lt,x.o),yellow]],iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(nor[nor[size2,size1],yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:size2;4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, implies[triangle,green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, rectangle), and[and[circle,size1],size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:size3
'λx.forall(apply(same_size,iota(x.s)),filter(filter(x.s, circle), not[and[size1,green]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:and[%s,%s];4:size1;4:green
'λx.apply(not[or[not[rectangle],size1]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[rectangle,blue],and[or[and[and[triangle,size3],triangle],apply(same_size,iota(filter(filter(x.s, rectangle), not[rectangle])))],or[and[and[circle,rectangle],apply(same_color,x.o)],not[not[size2]]]]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(circle,iota(filter(filter(x.s, not[rectangle]), apply(size-lt,iota(filter(filter(filter(filter(x.s, and[yellow,size1]), blue), and[or[or[size3,size1],circle],and[blue,green]]), rectangle))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:blue;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:circle;4:and[%s,%s];4:blue;4:green;4:rectangle
'λx.apply(and[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[circle,triangle],rectangle],iota(filter(filter(filter(x.s, rectangle), or[apply(same_shape,iota(x.s)),circle]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:blue
'λx.exists(triangle, filter(filter(filter(x.s, nor[yellow,yellow]), blue), or[size2,size1]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:yellow;4:blue;4:or[%s,%s];4:size2;4:size1
'λx.apply(nand[or[yellow,nor[size3,and[size1,circle]]],not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:size3;4:and[%s,%s];4:size1;4:circle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[blue,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(size2,iota(filter(x.s, and[blue,size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2
'λx.apply(and[green,and[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[not[and[and[size3,and[size2,and[or[apply(size-leq,x.o),and[circle,apply(same_color,x.o)]],blue]]],rectangle]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(or[blue,or[rectangle,size1]],filter(filter(filter(x.s, apply(size-gt,iota(filter(filter(filter(x.s, and[triangle,circle]), size3), and[and[nand[rectangle,not[not[apply(same_shape,iota(x.s))]]],triangle],or[or[nor[and[size1,or[blue,iff[or[not[circle],yellow],yellow]]],triangle],green],rectangle]])))), yellow), green))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:size3;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:yellow;4:yellow;4:triangle;4:green;4:rectangle;4:yellow;4:green
'λx.apply(or[and[blue,triangle],triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(size-leq,iota(filter(filter(x.s, and[not[rectangle],triangle]), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(implies[apply(same_color,iota(filter(filter(x.s, or[green,blue]), green))),size2],iota(filter(filter(x.s, and[and[circle,and[and[circle,green],not[not[size2]]]],circle]), or[not[not[and[or[blue,size1],and[yellow,triangle]]]],iff[size1,size2]])))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue;4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:not[%s];4:not[%s];4:size2;4:circle;4:or[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:and[%s,%s];4:yellow;4:triangle;4:iff[%s,%s];4:size1;4:size2
'λx.apply(size1,iota(filter(filter(filter(x.s, rectangle), yellow), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:green
'λx.apply(or[or[green,apply(size-gt,iota(x.s))],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_shape,x.o)), or[or[and[blue,and[iff[apply(same_shape,iota(filter(x.s, green))),or[not[apply(same_shape,iota(filter(filter(x.s, yellow), apply(same_color,iota(x.s)))))],and[size3,nand[circle,size2]]]],blue]],yellow],triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:nand[%s,%s];4:circle;4:size2;4:blue;4:yellow;4:triangle
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(x.s, not[circle]), or[nand[circle,blue],blue]), iff[size1,size1]), size3), green), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:or[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:blue;4:iff[%s,%s];4:size1;4:size1;4:size3;4:green;4:triangle
'λx.forall(iff[size2,and[and[rectangle,yellow],and[green,or[size3,rectangle]]]],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:green;4:or[%s,%s];4:size3;4:rectangle;3:%s.s;2:x
'λx.forall(and[blue,and[or[size3,not[rectangle]],apply(size-leq,iota(x.s))]],filter(x.s, triangle))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, triangle), yellow), nor[size3,or[yellow,apply(size-leq,iota(filter(x.s, size1)))]]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:nor[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.contains(x.o, filter(filter(filter(filter(x.s, blue), blue), apply(same_shape,iota(filter(filter(x.s, green), apply(same_shape,iota(x.s)))))), or[blue,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size2
'λx.apply(and[blue,circle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[apply(same_size,iota(x.s)),not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(nand[rectangle,size2],filter(x.s, size3))'	0:forall(%s,%s);4:nand[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(or[implies[apply(size-geq,x.o),size1],green], filter(filter(x.s, or[size2,rectangle]), and[size2,size3]))'	0:exists(%s, %s);4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:size2;4:size3
'λx.forall(green,filter(filter(filter(x.s, size1), triangle), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:size2
'λx.apply(and[green,size3],iota(filter(filter(x.s, size2), apply(same_shape,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[apply(same_shape,iota(x.s)),size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.apply(or[and[nor[size3,yellow],size3],or[green,or[circle,or[or[size2,triangle],size3]]]],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:yellow;4:size3;4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(iff[not[not[rectangle]],not[blue]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(nor[blue,yellow],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, nand[circle,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:circle
'λx.apply(and[size2,iff[and[size1,apply(size-geq,x.o)],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), and[circle,circle]), apply(size-leq,iota(filter(filter(x.s, size3), not[size1]))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size1
'λx.apply(iff[not[size3],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[green,and[and[blue,blue],size3]]), size1), blue), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3;4:size1;4:blue;4:size1
'λx.apply(or[not[yellow],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), implies[not[circle],yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:not[%s];4:circle;4:yellow
'λx.apply(or[or[blue,circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(blue, filter(x.s, not[blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), or[not[blue],circle]), and[triangle,yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:not[%s];4:blue;4:circle;4:and[%s,%s];4:triangle;4:yellow
'λx.forall(not[size1],filter(x.s, and[size2,rectangle]))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle
'λx.contains(iota(filter(filter(x.s, blue), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;3:%s.s;2:x
'λx.apply(not[and[circle,not[size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[and[blue,yellow],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[rectangle,apply(size-gt,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,nand[rectangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, and[and[and[triangle,size2],rectangle],size1]), size3), or[and[or[apply(same_color,x.o),not[blue]],rectangle],circle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:rectangle;4:size1;4:size3;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:rectangle;4:circle
'λx.apply(iff[nand[not[rectangle],or[triangle,and[and[or[rectangle,size1],size3],not[blue]]]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:size3;4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(filter(x.s, size1), apply(same_size,x.o)), iff[apply(size-geq,iota(filter(x.s, size3))),or[size2,circle]]), and[green,not[or[yellow,size3]]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:circle;4:and[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:yellow;4:size3
'λx.apply(and[rectangle,rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(filter(filter(x.s, not[and[and[and[rectangle,and[not[or[triangle,triangle]],not[yellow]]],implies[triangle,or[circle,yellow]]],circle]]), and[and[not[apply(same_shape,x.o)],green],apply(same_shape,iota(filter(x.s, apply(same_color,iota(x.s)))))]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:triangle;4:not[%s];4:yellow;4:implies[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:yellow;4:circle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(implies[green,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[size1,implies[green,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(rectangle,filter(filter(filter(x.s, and[apply(same_color,x.o),green]), size3), yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:size3;4:yellow
'λx.forall(size1,filter(filter(x.s, triangle), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(and[implies[size2,rectangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[and[yellow,apply(same_color,iota(x.s))],and[size1,nor[green,or[rectangle,size2]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nor[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, nand[size1,apply(size-gt,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size2,apply(same_shape,iota(filter(filter(filter(x.s, size2), green), apply(same_shape,x.o))))]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(and[triangle,triangle],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, size3), and[triangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:size1
'λx.empty(filter(filter(x.s, size1), and[triangle,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:triangle;4:size3
'λx.apply(apply(size-geq,iota(filter(filter(filter(x.s, size1), blue), size3))),iota(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, size3), and[and[not[and[size3,size1]],size2],not[circle]])))), nand[and[circle,and[not[green],triangle]],apply(same_size,iota(x.s))]), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size1;4:size2;4:not[%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-lt,iota(filter(x.s, triangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[or[rectangle,circle],not[size1]],iota(filter(filter(filter(x.s, rectangle), size3), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:blue
'λx.apply(and[triangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, yellow), size3), and[circle,blue]), not[blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:and[%s,%s];4:circle;4:blue;4:not[%s];4:blue
'λx.contains(iota(filter(x.s, apply(size-leq,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(apply(size-lt,iota(x.s)), filter(x.s, and[not[blue],or[size2,size1]]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:size2;4:size1
'λx.apply(nor[triangle,green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[implies[yellow,or[or[size2,apply(same_shape,iota(filter(x.s, circle)))],size1]],size1],iota(filter(x.s, apply(same_shape,iota(filter(x.s, green))))))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size1,iota(filter(filter(x.s, rectangle), and[size1,and[blue,nand[size2,size1]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:nand[%s,%s];4:size2;4:size1
'λx.apply(yellow,iota(filter(x.s, and[green,and[rectangle,nand[green,blue]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:green;4:blue
'λx.contains(iota(filter(filter(x.s, nor[yellow,apply(same_color,x.o)]), and[size1,nand[green,size2]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:nand[%s,%s];4:green;4:size2;3:%s.s;2:x
'λx.apply(or[iff[and[circle,nand[apply(same_shape,iota(filter(filter(x.s, and[size3,yellow]), and[rectangle,size1]))),nor[yellow,and[rectangle,triangle]]]],size2],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:rectangle;4:size1;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:triangle;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(or[size2,or[green,apply(same_color,iota(filter(filter(filter(filter(filter(x.s, implies[and[blue,green],yellow]), green), and[rectangle,triangle]), blue), triangle)))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:blue;4:green;4:yellow;4:green;4:and[%s,%s];4:rectangle;4:triangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, apply(same_size,x.o)), triangle), rectangle), triangle), or[or[circle,not[blue]],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:rectangle;4:triangle;4:or[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(filter(x.s, green), rectangle), triangle), and[apply(same_color,x.o),and[apply(same_color,x.o),circle]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(iff[apply(size-gt,iota(x.s)),rectangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:green
'λx.apply(iff[size3,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size2), size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(not[and[not[yellow],and[blue,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[or[size2,yellow],size3]), and[blue,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:size3;4:and[%s,%s];4:blue;4:yellow
'λx.apply(and[and[iff[rectangle,circle],and[nor[and[green,circle],nand[size1,size1]],not[green]]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:circle;4:nand[%s,%s];4:size1;4:size1;4:not[%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(nor[size1,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size3), or[size2,or[size1,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:blue
'λx.forall(size1,filter(x.s, not[blue]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(or[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,and[not[size2],and[apply(same_shape,iota(x.s)),blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size2), not[or[size3,yellow]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:or[%s,%s];4:size3;4:yellow
'λx.apply(or[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size3,not[nor[triangle,blue]]],not[blue]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:nor[%s,%s];4:triangle;4:blue;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[rectangle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,nand[size3,iff[blue,size3]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nand[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[green],or[or[green,green],blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:or[%s,%s];4:green;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,apply(same_size,iota(filter(x.s, triangle)))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_size,x.o), filter(filter(x.s, green), yellow))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.empty(filter(x.s, and[and[and[size2,size2],not[apply(size-lt,iota(x.s))]],green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(nand[iff[and[size3,triangle],and[circle,and[and[and[triangle,circle],and[size1,triangle]],and[green,size1]]]],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:green;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(x.s, blue), green), triangle), and[and[rectangle,size1],triangle]), green), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:triangle;4:green;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, green), triangle), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:rectangle
'λx.apply(nor[and[apply(size-geq,iota(filter(filter(filter(x.s, circle), circle), circle))),nor[not[size1],size1]],apply(same_shape,iota(filter(x.s, blue)))],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:circle;4:nor[%s,%s];4:not[%s];4:size1;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(iff[green,circle],iota(filter(x.s, or[blue,apply(same_color,iota(filter(x.s, not[and[and[triangle,and[apply(same_color,iota(filter(x.s, not[size2]))),and[size3,size3]]],iff[blue,blue]]])))])))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:size3;4:size3;4:iff[%s,%s];4:blue;4:blue
'λx.apply(and[circle,yellow],iota(filter(x.s, and[size1,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, size1), and[blue,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:size2
'λx.apply(not[apply(size-geq,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(implies[triangle,or[yellow,iff[and[apply(size-geq,x.o),and[and[circle,not[or[triangle,rectangle]]],size2]],rectangle]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_shape,x.o)), and[size1,or[or[green,blue],size3]])), filter(filter(filter(x.s, triangle), size3), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:yellow
'λx.apply(and[triangle,and[triangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[and[green,circle],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.empty(filter(filter(x.s, blue), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), green), nor[triangle,or[triangle,size3]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:nor[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, blue), or[rectangle,and[circle,triangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(size1,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(size3,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(and[triangle,size1],iota(filter(x.s, and[and[triangle,yellow],blue])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:blue
'λx.apply(and[and[green,triangle],nor[and[rectangle,triangle],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, nor[and[size1,triangle],yellow])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, and[size1,size2]), and[green,size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:green;4:size1
'λx.apply(not[not[circle]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[apply(same_color,iota(filter(x.s, size2))),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[and[blue,blue],size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2
'λx.contains(iota(filter(x.s, and[rectangle,green])), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, not[yellow]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, yellow), nand[and[not[and[not[yellow],and[rectangle,yellow]]],or[not[rectangle],yellow]],apply(same_color,iota(filter(filter(x.s, not[apply(size-geq,x.o)]), not[triangle])))])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:triangle
'λx.apply(not[green],iota(filter(filter(x.s, iff[size3,yellow]), and[and[circle,triangle],green])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:green
'λx.exists(not[and[and[apply(same_shape,x.o),size1],triangle]], filter(x.s, size2))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(yellow,filter(filter(x.s, circle), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, green), circle), not[green]), iff[green,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:not[%s];4:green;4:iff[%s,%s];4:green;4:blue
'λx.apply(and[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,or[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-leq,x.o),filter(filter(filter(x.s, size1), not[triangle]), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:triangle;4:rectangle
'λx.apply(not[and[circle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nor[not[and[apply(same_size,x.o),circle]],triangle]],iota(filter(x.s, or[or[yellow,or[not[and[triangle,size3]],and[triangle,triangle]]],blue])))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:triangle;4:triangle;4:blue
'λx.exists(green, filter(x.s, and[triangle,circle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.empty(filter(x.s, apply(size-geq,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[triangle,nor[circle,apply(same_color,iota(filter(x.s, blue)))]],or[blue,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, not[blue]), blue), implies[or[size1,circle],triangle])), filter(filter(filter(filter(x.s, not[or[implies[size2,yellow],and[rectangle,yellow]]]), circle), green), or[blue,and[apply(size-geq,x.o),nor[and[nand[circle,and[blue,circle]],yellow],size1]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:blue;4:implies[%s,%s];4:or[%s,%s];4:size1;4:circle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:rectangle;4:yellow;4:circle;4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;4:yellow;4:size1
'λx.apply(apply(same_size,iota(filter(x.s, not[rectangle]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, rectangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[green,size2],iota(filter(filter(filter(x.s, rectangle), yellow), green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:green
'λx.apply(not[rectangle],iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(and[size2,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,apply(same_shape,iota(x.s))]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[and[and[apply(same_color,iota(filter(x.s, yellow))),apply(same_size,iota(x.s))],not[yellow]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.empty(filter(filter(x.s, and[size1,and[and[implies[apply(size-geq,x.o),yellow],size3],circle]]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow;4:size3;4:circle;4:size1
'λx.apply(or[size1,and[triangle,size3]],iota(filter(x.s, apply(size-lt,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_size,iota(x.s)),size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[not[blue],yellow]), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:blue;4:yellow;4:blue
'λx.apply(and[and[apply(same_size,x.o),blue],or[size3,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size2,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(not[and[green,size2]], filter(filter(filter(filter(filter(filter(filter(filter(x.s, green), circle), and[circle,apply(same_size,x.o)]), blue), rectangle), size1), blue), circle))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:green;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle;4:size1;4:blue;4:circle
'λx.apply(blue,iota(filter(filter(x.s, size1), not[blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:blue
'λx.forall(rectangle,filter(x.s, and[nand[circle,blue],size2]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:size2
'λx.apply(iff[and[triangle,and[not[implies[and[size2,yellow],blue]],size2]],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:blue;4:size2;4:size3;1:%s.o;2:x
'λx.apply(nand[triangle,and[apply(same_color,iota(x.s)),green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(and[nor[size2,triangle],and[apply(same_shape,x.o),rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, not[and[not[rectangle],size3]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:size3
'λx.apply(and[not[size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, nand[apply(same_color,x.o),and[size3,size1]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(implies[or[and[green,rectangle],apply(same_color,iota(x.s))],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(and[or[or[and[nor[blue,size3],or[apply(same_color,x.o),blue]],blue],circle],and[circle,iff[or[not[size2],and[and[triangle,blue],and[apply(same_shape,iota(filter(filter(x.s, blue), size3))),triangle]]],green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue;4:circle;4:and[%s,%s];4:circle;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[rectangle,rectangle],iota(filter(x.s, nor[green,green])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:green
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), blue), size2), triangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size2;4:triangle;4:size1
'λx.forall(and[size3,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, circle), implies[triangle,triangle]), size2), not[green]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:triangle;4:triangle;4:size2;4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[blue,nor[size3,implies[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nor[%s,%s];4:size3;4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size2), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[not[size2],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[nand[circle,size3],nor[and[size3,and[yellow,apply(same_shape,x.o)]],circle]],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:circle;4:size3;4:nor[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(green,iota(filter(filter(x.s, or[blue,apply(same_shape,iota(x.s))]), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(and[circle,size2],iota(filter(filter(x.s, green), or[or[triangle,nand[yellow,size3]],rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:triangle;4:nand[%s,%s];4:yellow;4:size3;4:rectangle
'λx.apply(apply(same_color,iota(filter(x.s, size2))),iota(filter(x.s, or[circle,green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:green
'λx.apply(green,iota(filter(filter(filter(filter(x.s, green), nor[size3,triangle]), size2), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:size3;4:triangle;4:size2;4:circle
'λx.apply(iff[not[yellow],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(filter(x.s, size2), not[size3]), green), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size3;4:green;4:rectangle
'λx.exists(nor[triangle,green], filter(x.s, rectangle))'	0:exists(%s, %s);4:nor[%s,%s];4:triangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(nand[and[size2,and[circle,rectangle]],blue],filter(x.s, yellow))'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[or[yellow,or[not[triangle],apply(same_shape,x.o)]],implies[size1,nor[size3,yellow]]],and[size2,and[green,triangle]]],iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:size1;4:nor[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(and[or[apply(same_color,iota(filter(filter(filter(x.s, not[rectangle]), apply(same_size,iota(filter(x.s, green)))), size3))),or[circle,circle]],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:or[%s,%s];4:circle;4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), and[rectangle,or[size3,nand[or[or[green,not[size2]],green],size2]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:size2;4:green;4:size2
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(x.s, green), apply(same_shape,iota(filter(filter(filter(x.s, yellow), green), circle)))), circle), and[not[size3],size2]), and[or[size3,and[size3,nor[size2,not[circle]]]],not[circle]]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:circle;4:circle;4:and[%s,%s];4:not[%s];4:size3;4:size2;4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:nor[%s,%s];4:size2;4:not[%s];4:circle;4:not[%s];4:circle;4:green
'λx.apply(apply(size-gt,iota(filter(filter(x.s, nand[blue,rectangle]), triangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[size1],not[apply(same_color,iota(x.s))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nand[not[yellow],yellow],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,filter(x.s, or[circle,rectangle]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(or[size2,not[or[green,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(or[and[size1,iff[green,apply(size-lt,iota(x.s))]],apply(same_size,x.o)],iota(filter(x.s, apply(same_shape,iota(filter(x.s, size3))))))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:iff[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(x.s, size3)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[and[nand[circle,size1],green],circle],iota(filter(filter(filter(x.s, size2), and[yellow,apply(size-lt,iota(filter(filter(x.s, size1), nor[apply(same_color,x.o),rectangle])))]), implies[iff[nand[blue,not[size2]],and[yellow,not[rectangle]]],triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:size1;4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:implies[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:size2;4:and[%s,%s];4:yellow;4:not[%s];4:rectangle;4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, circle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[size2], x.s)'	0:exists(%s, %s);4:not[%s];4:size2;3:%s.s;2:x
'λx.exists(not[size1], x.s)'	0:exists(%s, %s);4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(not[size3], x.s)'	0:exists(%s, %s);4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, not[or[green,size2]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:green;4:size2
'λx.empty(filter(x.s, or[triangle,nand[or[blue,rectangle],apply(same_shape,iota(filter(x.s, size2)))]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(rectangle,filter(filter(x.s, size3), size3))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.exists(size2, filter(filter(x.s, implies[blue,size3]), apply(same_color,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(not[and[or[apply(same_size,iota(x.s)),triangle],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[size1,triangle],iota(filter(filter(filter(filter(filter(x.s, circle), size1), apply(same_shape,x.o)), iff[and[blue,nand[size1,or[size2,and[size1,green]]]],yellow]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:and[%s,%s];4:blue;4:nand[%s,%s];4:size1;4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:green;4:yellow;4:green
'λx.contains(iota(x.s), x.s)'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[triangle,or[yellow,and[blue,circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, size1), or[blue,size1]), yellow), and[size1,green]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:size1;4:yellow;4:and[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size3,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size2,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, or[yellow,blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.apply(and[circle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, or[rectangle,triangle]), apply(size-lt,iota(x.s))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(not[implies[nand[triangle,and[apply(same_size,x.o),and[size3,circle]]],rectangle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:nand[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(filter(filter(filter(x.s, rectangle), rectangle), yellow), not[blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:yellow;4:not[%s];4:blue
'λx.apply(and[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(or[size3,and[circle,rectangle]],filter(filter(filter(filter(filter(x.s, blue), apply(same_color,iota(filter(filter(filter(x.s, not[circle]), yellow), and[and[rectangle,size2],size1])))), blue), size3), apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size1;4:blue;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[green,or[nand[not[not[size3]],blue],rectangle]],iota(filter(filter(filter(x.s, size1), not[blue]), implies[triangle,green])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:not[%s];4:size3;4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:blue;4:implies[%s,%s];4:triangle;4:green
'λx.apply(nand[circle,apply(same_shape,x.o)],iota(filter(filter(filter(filter(x.s, size1), not[apply(same_color,x.o)]), triangle), or[rectangle,size2])))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:rectangle;4:size2
'λx.empty(filter(x.s, not[blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.contains(iota(filter(x.s, and[size2,apply(size-gt,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(or[and[blue,apply(same_size,iota(x.s))],circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, and[blue,size3]), circle)))), size2))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:circle;4:size2
'λx.apply(not[not[triangle]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[not[triangle]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_color,iota(filter(filter(x.s, size2), circle))),iota(filter(filter(x.s, green), implies[not[circle],blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:not[%s];4:circle;4:blue
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), blue), blue), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:blue;4:blue;4:rectangle
'λx.apply(implies[not[apply(same_color,iota(filter(filter(filter(x.s, size2), size3), and[size1,and[green,blue]])))],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:blue;4:size1;1:%s.o;2:x
'λx.forall(apply(size-gt,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[triangle,not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[rectangle,nand[size1,blue]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, and[not[yellow],size2]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:size2;4:triangle
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), and[size1,size3]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:size3;4:yellow
'λx.apply(yellow,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(yellow,filter(x.s, and[circle,apply(size-gt,x.o)]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[green,or[green,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[size1,size3]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[or[size3,size1],circle],iota(filter(filter(x.s, apply(same_size,x.o)), or[size2,rectangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size3;4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size2;4:rectangle
'λx.apply(nor[implies[circle,yellow],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:circle;4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[circle]), and[not[triangle],blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:triangle;4:blue
'λx.apply(and[circle,and[not[green],or[not[iff[yellow,size2]],circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:yellow;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[yellow,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(implies[yellow,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), not[not[apply(same_color,iota(filter(filter(filter(x.s, and[and[circle,size1],not[circle]]), not[size2]), circle)))]])), filter(filter(filter(x.s, size2), circle), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:not[%s];4:circle;4:not[%s];4:size2;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:yellow
'λx.apply(and[implies[green,and[circle,circle]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:circle;4:circle;4:green;1:%s.o;2:x
'λx.apply(or[implies[size2,size3],size2],iota(filter(filter(filter(filter(x.s, nand[size3,or[circle,blue]]), green), size3), not[apply(same_color,x.o)])))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size2;4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:or[%s,%s];4:circle;4:blue;4:green;4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[size1,size3],iota(filter(filter(x.s, not[triangle]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size2
'λx.apply(or[blue,or[green,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(filter(x.s, apply(size-geq,iota(filter(x.s, and[not[and[and[size1,rectangle],circle]],yellow])))), apply(size-geq,iota(filter(filter(x.s, and[green,size1]), and[not[size3],circle])))), apply(same_color,iota(filter(x.s, size2)))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:circle;4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1;4:and[%s,%s];4:not[%s];4:size3;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[nand[circle,apply(same_shape,x.o)],size1],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[rectangle,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, blue), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(circle,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[size2],iota(filter(filter(filter(x.s, and[circle,yellow]), apply(same_size,x.o)), triangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(nand[size1,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(and[or[size3,green],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:triangle;3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(x.s, rectangle), green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[circle,yellow], filter(filter(filter(filter(x.s, size1), blue), green), circle))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:green;4:circle
'λx.apply(blue,iota(filter(filter(x.s, or[circle,not[yellow]]), implies[blue,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:yellow;4:implies[%s,%s];4:blue;4:rectangle
'λx.apply(or[and[and[rectangle,nor[apply(same_shape,iota(filter(x.s, not[triangle]))),or[and[not[size3],or[yellow,rectangle]],triangle]]],size3],yellow],iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:yellow;4:rectangle;4:triangle;4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.forall(and[size2,and[circle,rectangle]],filter(filter(x.s, blue), green))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(green,iota(filter(filter(filter(x.s, size3), green), and[rectangle,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:and[%s,%s];4:rectangle;4:triangle
'λx.exists(apply(same_size,iota(filter(x.s, blue))), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, and[and[triangle,rectangle],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:size1
'λx.apply(size2,iota(filter(x.s, or[circle,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:green
'λx.apply(circle,iota(filter(filter(x.s, and[size1,yellow]), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow;4:size3
'λx.apply(and[not[size3],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.forall(and[triangle,size1],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[apply(same_shape,x.o),circle]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size2
'λx.apply(apply(same_size,iota(filter(x.s, blue))),iota(filter(filter(filter(x.s, rectangle), circle), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:size1
'λx.empty(filter(filter(x.s, rectangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(not[yellow],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[nor[rectangle,apply(size-lt,x.o)],implies[green,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:implies[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[size1,not[not[green]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,not[yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(or[not[not[triangle]],not[triangle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:triangle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(not[or[circle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size1,and[green,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[yellow,apply(same_size,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[rectangle,size1],iota(filter(filter(x.s, triangle), or[size2,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size2;4:yellow
'λx.apply(and[circle,and[not[green],or[not[iff[yellow,size2]],circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:yellow;4:size2;4:circle;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, apply(size-gt,iota(x.s))), green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, blue)), filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size1), triangle), rectangle), not[nor[rectangle,or[triangle,green]]]), yellow), not[blue]), rectangle), apply(same_size,x.o)), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:rectangle;4:not[%s];4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:green;4:yellow;4:not[%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(not[not[or[or[size3,not[apply(same_size,iota(x.s))]],apply(same_size,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[circle,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.exists(and[not[size1],not[rectangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, blue), green), not[blue]), implies[apply(same_shape,iota(x.s)),rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:not[%s];4:blue;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[or[triangle,and[size1,circle]],blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[yellow,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[green,or[nand[green,blue],rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:nand[%s,%s];4:green;4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[iff[nand[triangle,nor[yellow,apply(same_shape,iota(x.s))]],rectangle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:triangle;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(or[green,size2],filter(x.s, triangle))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[size1,implies[green,iff[green,size3]]],iota(filter(filter(x.s, not[nor[and[and[circle,size2],and[iff[blue,size1],circle]],or[and[triangle,triangle],and[size3,nor[apply(size-leq,x.o),nor[size3,not[or[green,and[size3,size2]]]]]]]]]), size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:implies[%s,%s];4:green;4:iff[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:and[%s,%s];4:iff[%s,%s];4:blue;4:size1;4:circle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:size3;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:nor[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;4:size1
'λx.contains(iota(x.s), filter(x.s, nand[size2,implies[rectangle,size1]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:implies[%s,%s];4:rectangle;4:size1
'λx.apply(implies[and[green,size3],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:size3;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, and[size1,nand[or[circle,yellow],or[and[yellow,circle],size1]]]), apply(same_color,x.o)), and[green,size3]), nor[apply(size-leq,x.o),green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nand[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:size3;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green
'λx.apply(or[size3,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[and[rectangle,size3],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, implies[not[iff[and[and[apply(size-gt,iota(filter(x.s, or[yellow,implies[triangle,triangle]]))),triangle],rectangle],or[implies[size3,size2],apply(size-leq,iota(filter(x.s, not[and[green,circle]])))]]],green]), apply(same_shape,x.o)), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:triangle;4:triangle;4:triangle;4:rectangle;4:or[%s,%s];4:implies[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(and[apply(same_color,iota(filter(x.s, size3))),or[blue,not[yellow]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:blue;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(and[circle,or[and[size1,and[circle,and[blue,not[and[green,size3]]]]],green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:green;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[and[size3,triangle],implies[size2,nor[size2,blue]]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:implies[%s,%s];4:size2;4:nor[%s,%s];4:size2;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), nor[and[yellow,circle],circle]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:circle;4:blue
'λx.apply(or[rectangle,implies[circle,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,not[apply(same_color,x.o)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,or[size2,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(iff[and[apply(same_shape,x.o),size3],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:size3;1:%s.o;2:x
'λx.apply(iff[or[circle,iff[apply(same_shape,iota(x.s)),triangle]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:circle;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[rectangle,nor[green,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, iff[not[implies[circle,and[apply(same_shape,iota(x.s)),green]]],apply(size-geq,iota(filter(x.s, not[nor[size2,and[not[not[blue]],nor[yellow,size2]]]])))]), yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:nor[%s,%s];4:yellow;4:size2;4:yellow;4:circle
'λx.apply(implies[triangle,yellow],iota(filter(filter(filter(x.s, or[rectangle,yellow]), size1), rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:yellow;4:size1;4:rectangle
'λx.exists(or[or[or[or[size2,and[green,or[green,and[triangle,blue]]]],circle],or[apply(size-geq,iota(filter(x.s, and[and[triangle,yellow],and[and[blue,or[and[or[circle,apply(same_color,iota(x.s))],and[or[rectangle,nand[size3,or[not[yellow],yellow]]],green]],and[rectangle,nor[size2,rectangle]]]],and[size1,triangle]]]))),blue]],rectangle], filter(filter(x.s, yellow), rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:and[%s,%s];4:triangle;4:blue;4:circle;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:yellow;4:yellow;4:green;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:size1;4:triangle;4:blue;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(nor[circle,size3],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), implies[size3,rectangle]), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:rectangle;4:size1
'λx.forall(nor[or[yellow,rectangle],size3],filter(x.s, size2))'	0:forall(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, blue), not[size1]), rectangle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1;4:rectangle;4:circle
'λx.forall(blue,filter(x.s, implies[size2,green]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:green
'λx.apply(or[apply(size-geq,iota(x.s)),not[not[apply(size-geq,x.o)]]],iota(filter(filter(filter(filter(filter(x.s, triangle), and[and[and[not[and[green,and[green,size3]]],or[nor[size3,and[not[iff[green,nor[blue,rectangle]]],circle]],size3]],yellow],green]), size1), size1), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:size3;4:or[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:nor[%s,%s];4:blue;4:rectangle;4:circle;4:size3;4:yellow;4:green;4:size1;4:size1;4:size2
'λx.exists(rectangle, filter(filter(x.s, green), circle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.exists(and[size3,apply(size-lt,x.o)], filter(x.s, not[green]))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.exists(or[yellow,not[triangle]], filter(x.s, apply(size-leq,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(filter(x.s, size3), size3), blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, triangle), apply(size-gt,iota(x.s)))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, size1), apply(same_shape,x.o)), and[and[and[apply(size-geq,iota(filter(x.s, rectangle))),circle],size2],green])), filter(x.s, nor[size2,and[and[yellow,size1],and[triangle,nor[size3,or[triangle,and[size3,yellow]]]]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:yellow
'λx.apply(green,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.exists(size2, filter(x.s, and[and[apply(same_color,x.o),or[not[yellow],triangle]],circle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:triangle;4:circle
'λx.apply(apply(same_size,iota(filter(filter(x.s, triangle), size1))),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[green,circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(x.s, green), size1)), filter(filter(x.s, iff[and[circle,blue],apply(same_color,x.o)]), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(iff[and[triangle,green],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,not[or[iff[yellow,size1],size2]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:yellow;4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[size2,and[size1,blue]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[or[rectangle,green],iff[circle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:iff[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[size2,circle]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:size2;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, green), apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(iff[and[and[yellow,size1],and[circle,size2]],circle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:circle;4:size2;4:circle;3:%s.s;2:x
'λx.exists(and[rectangle,nor[size2,rectangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[not[size3],green]), size3), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:green;4:size3;4:size2
'λx.apply(or[not[apply(same_shape,x.o)],size1],iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[nor[triangle,apply(same_color,x.o)],size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size3,filter(filter(filter(filter(x.s, yellow), yellow), green), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:green;4:rectangle
'λx.apply(and[not[triangle],and[and[and[not[iff[and[apply(same_shape,x.o),apply(same_size,iota(x.s))],size1]],circle],green],blue]],iota(filter(x.s, nand[size1,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:yellow
'λx.apply(and[apply(same_shape,iota(x.s)),iff[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[triangle,rectangle]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:rectangle;4:size3
'λx.exists(and[rectangle,and[size2,blue]], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.contains(iota(filter(filter(x.s, and[size2,blue]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue;4:size2;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, nand[apply(same_color,iota(filter(x.s, blue))),rectangle]), green), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:green;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, not[blue]), blue), apply(size-leq,iota(x.s)))), filter(filter(filter(filter(x.s, not[or[implies[size2,yellow],and[rectangle,rectangle]]]), circle), green), or[blue,and[apply(size-geq,x.o),nor[and[nand[circle,and[blue,circle]],yellow],size1]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:blue;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:rectangle;4:rectangle;4:circle;4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;4:yellow;4:size1
'λx.apply(size3,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(or[or[yellow,size2],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:green;1:%s.o;2:x
'λx.apply(or[triangle,or[rectangle,and[circle,yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(not[rectangle],x.o)'	0:apply(%s,%s);4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[and[apply(same_size,x.o),apply(same_shape,iota(filter(filter(x.s, iff[circle,size2]), yellow)))],size3],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size2;4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(not[rectangle], x.s)'	0:exists(%s, %s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, blue), rectangle)))), size3), triangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[circle],x.o)'	0:apply(%s,%s);4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[or[rectangle,circle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(implies[and[triangle,or[triangle,circle]],size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[apply(same_shape,iota(x.s)),and[size2,and[rectangle,triangle]]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[circle,yellow]), not[and[size3,circle]]), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[yellow,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, nor[size1,green]), circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:green;4:circle
'λx.apply(or[and[not[yellow],circle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,and[rectangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, nand[size3,or[size2,green]]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:or[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size2,not[and[or[or[or[circle,blue],triangle],nor[size3,size3]],and[rectangle,blue]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:triangle;4:nor[%s,%s];4:size3;4:size3;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), and[rectangle,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(size2,iota(filter(filter(x.s, and[blue,size3]), or[circle,apply(same_color,x.o)])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, blue), rectangle)))), or[circle,yellow]), rectangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:or[%s,%s];4:circle;4:yellow;4:rectangle
'λx.apply(or[rectangle,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, apply(size-geq,x.o)), size2), size3), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;4:size3;4:circle
'λx.apply(size3,iota(filter(filter(x.s, green), implies[rectangle,and[and[blue,blue],apply(same_shape,x.o)]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[nand[rectangle,green],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:green;4:circle
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(filter(x.s, and[blue,and[apply(same_size,x.o),triangle]]), nor[and[triangle,triangle],size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:size2
'λx.apply(or[size3,size3],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(apply(same_size,iota(filter(filter(x.s, nand[apply(same_color,x.o),rectangle]), rectangle))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(or[triangle,and[size3,or[circle,or[size1,yellow]]]],iota(filter(x.s, not[and[iff[size2,green],not[size3]]])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:green;4:not[%s];4:size3
'λx.apply(size3,iota(filter(filter(x.s, rectangle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(iff[yellow,circle],iota(filter(filter(x.s, rectangle), not[triangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle
'λx.apply(and[size1,circle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[triangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[rectangle]), apply(size-lt,iota(filter(filter(filter(x.s, blue), and[or[or[size3,size1],circle],and[blue,green]]), rectangle))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:circle;4:and[%s,%s];4:blue;4:green;4:rectangle
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(filter(filter(filter(x.s, size3), apply(same_color,iota(filter(filter(x.s, yellow), rectangle)))), nor[rectangle,green]), not[circle]), or[size3,and[blue,apply(same_shape,x.o)]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:nor[%s,%s];4:rectangle;4:green;4:not[%s];4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, or[blue,yellow]))),iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), nand[not[blue],size1]), green), yellow), circle), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:not[%s];4:blue;4:size1;4:green;4:yellow;4:circle;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.forall(apply(same_shape,iota(filter(x.s, and[rectangle,apply(same_size,iota(x.s))]))),filter(filter(filter(x.s, circle), circle), triangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:triangle
'λx.apply(or[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nor[not[and[size1,blue]],size3],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:blue;4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[and[and[blue,size3],iff[nand[green,rectangle],size3]],iff[size2,green]], filter(x.s, not[yellow]))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:iff[%s,%s];4:nand[%s,%s];4:green;4:rectangle;4:size3;4:iff[%s,%s];4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(or[green,and[yellow,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[or[yellow,apply(same_size,x.o)],size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(and[nand[size2,circle],apply(size-geq,iota(filter(filter(x.s, yellow), or[nand[blue,and[or[apply(size-lt,x.o),or[triangle,apply(size-leq,x.o)]],apply(same_size,iota(filter(filter(x.s, size2), size3)))]],size2])))],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(implies[size2,circle],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(and[circle,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, apply(same_color,x.o)), blue), not[triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(filter(x.s, circle), not[circle]), and[and[yellow,green],and[apply(same_shape,iota(filter(x.s, and[and[circle,or[yellow,blue]],triangle]))),apply(same_shape,x.o)]]), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:blue;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(triangle,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.empty(filter(filter(filter(x.s, green), circle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:circle
'λx.apply(nor[size2,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[size1,not[green]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:green
'λx.apply(size2,iota(filter(filter(x.s, and[green,circle]), iff[circle,size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:iff[%s,%s];4:circle;4:size3
'λx.apply(iff[blue,or[green,not[green]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:or[%s,%s];4:green;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, circle)), filter(filter(filter(x.s, nor[or[and[rectangle,and[green,and[green,size1]]],size3],blue]), or[circle,rectangle]), and[and[or[green,green],or[size1,size1]],blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:size1;4:size3;4:blue;4:or[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:or[%s,%s];4:size1;4:size1;4:blue
'λx.apply(or[and[size1,yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[circle,blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(or[and[blue,yellow],and[and[and[not[rectangle],nor[and[blue,or[not[size2],and[size2,blue]]],not[or[green,triangle]]]],or[triangle,size3]],and[size3,nor[or[green,size2],not[green]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size2;4:blue;4:not[%s];4:or[%s,%s];4:green;4:triangle;4:or[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:size3;4:nor[%s,%s];4:or[%s,%s];4:green;4:size2;4:not[%s];4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:blue
'λx.apply(not[nand[iff[and[triangle,size2],not[and[yellow,implies[not[apply(size-gt,x.o)],and[not[apply(same_shape,iota(x.s))],size3]]]]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:not[%s];4:and[%s,%s];4:yellow;4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.apply(implies[apply(size-gt,iota(filter(filter(filter(x.s, circle), size3), size1))),rectangle],iota(filter(filter(x.s, iff[rectangle,rectangle]), size1)))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:rectangle;4:size1
'λx.apply(not[nor[blue,or[size1,apply(size-leq,iota(filter(x.s, apply(same_color,x.o))))]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[yellow,triangle],iff[and[or[apply(same_size,x.o),yellow],apply(same_shape,iota(x.s))],blue]],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(circle,iota(filter(x.s, or[green,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size1
'λx.contains(iota(filter(filter(filter(filter(x.s, not[or[not[apply(same_size,x.o)],blue]]), and[circle,and[triangle,circle]]), size2), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:circle;4:size2;4:rectangle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(nor[blue,blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,size3],iota(filter(filter(filter(filter(x.s, rectangle), size3), size2), green)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size2;4:green
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_size,x.o)), rectangle), size2), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size2;4:size3;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, blue), or[size1,and[triangle,yellow]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:yellow
'λx.exists(blue, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[yellow,apply(same_size,x.o)],iota(filter(x.s, and[and[size2,and[not[and[blue,size1]],triangle]],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size1;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, blue), blue), and[circle,size3]), not[blue]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:and[%s,%s];4:circle;4:size3;4:not[%s];4:blue;4:blue
'λx.forall(size3,filter(x.s, apply(size-leq,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), implies[green,apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), size2), nand[triangle,triangle]), or[triangle,green]), implies[iff[not[circle],triangle],size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:nand[%s,%s];4:triangle;4:triangle;4:or[%s,%s];4:triangle;4:green;4:implies[%s,%s];4:iff[%s,%s];4:not[%s];4:circle;4:triangle;4:size3
'λx.exists(size2, filter(filter(filter(filter(x.s, not[not[not[size2]]]), rectangle), apply(same_size,x.o)), and[not[rectangle],size2]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:not[%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:size2
'λx.apply(or[triangle,and[green,green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size3), not[and[not[blue],size2]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size2
'λx.apply(and[green,or[green,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(nand[and[blue,iff[size2,or[and[rectangle,green],yellow]]],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:iff[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, size3), nor[and[size1,iff[apply(same_shape,x.o),size2]],or[apply(same_color,iota(x.s)),rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:and[%s,%s];4:size1;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(triangle,filter(x.s, apply(same_size,iota(x.s))))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, green), triangle), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size3
'λx.apply(and[or[blue,or[yellow,nand[yellow,and[and[rectangle,size3],green]]]],and[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:green;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(and[circle,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.exists(and[size1,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, implies[yellow,blue]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:blue
'λx.apply(and[and[apply(same_color,iota(x.s)),not[circle]],nor[size1,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:nor[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[triangle,not[or[triangle,circle]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[blue,size3],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size2), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(filter(x.s, size1), rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(nand[yellow,or[size2,apply(size-gt,iota(filter(x.s, and[triangle,or[rectangle,or[circle,yellow]]])))]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, apply(size-leq,iota(x.s))))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,and[rectangle,and[circle,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[size3,triangle],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), not[size2]), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size2;4:rectangle
'λx.apply(or[and[not[yellow],nor[size3,or[size1,not[and[size3,circle]]]]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:nor[%s,%s];4:size3;4:or[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:size3;4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[and[rectangle,size3],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(implies[size1,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,or[green,not[or[implies[and[rectangle,size2],size3],size1]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, triangle), and[green,rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(filter(filter(x.s, and[rectangle,size3]), yellow), triangle), and[rectangle,size3]), size3), circle), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;4:yellow;4:triangle;4:and[%s,%s];4:rectangle;4:size3;4:size3;4:circle;4:blue
'λx.apply(iff[size2,green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[and[and[size2,and[blue,triangle]],apply(same_shape,x.o)]], filter(x.s, rectangle))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, blue), apply(same_color,x.o)), triangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size1
'λx.exists(or[circle,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(and[and[blue,size3],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, or[circle,rectangle]), and[and[green,or[size1,size1]],blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:size1;4:blue
'λx.apply(or[implies[size3,triangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size3;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[not[size2],or[yellow,or[rectangle,circle]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(and[size2,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size2,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[size2,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, blue), or[apply(same_size,iota(x.s)),circle]), or[not[size3],nor[iff[size1,not[green]],size2]]), size1), and[triangle,circle]), not[size1]), or[size2,and[size1,apply(same_shape,iota(filter(x.s, not[nor[size2,yellow]])))]]), not[size1]), green))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:not[%s];4:size3;4:nor[%s,%s];4:iff[%s,%s];4:size1;4:not[%s];4:green;4:size2;4:size1;4:and[%s,%s];4:triangle;4:circle;4:not[%s];4:size1;4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:size2;4:yellow;4:not[%s];4:size1;4:green
'λx.apply(and[size1,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[size1,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[size1,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[size3,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(and[size3,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[size3,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(nor[green,triangle],iota(filter(filter(x.s, or[triangle,green]), and[size1,yellow])))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green;4:and[%s,%s];4:size1;4:yellow
'λx.apply(or[or[circle,size2],not[blue]],iota(filter(filter(x.s, and[blue,not[or[green,size3]]]), not[yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:size2;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:green;4:size3;4:not[%s];4:yellow
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, blue), size3), or[size1,and[size2,triangle]]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:or[%s,%s];4:size1;4:and[%s,%s];4:size2;4:triangle;4:size1
'λx.contains(x.o, filter(x.s, circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[yellow,apply(same_color,iota(x.s))],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(x.s, and[yellow,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.contains(iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), blue), and[yellow,size3]), circle), not[and[blue,or[yellow,yellow]]]), apply(same_color,x.o)), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:and[%s,%s];4:yellow;4:size3;4:circle;4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(and[size3,not[not[not[or[apply(same_size,x.o),rectangle]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, rectangle), apply(size-geq,x.o)), not[and[nor[size3,triangle],not[iff[and[apply(same_size,iota(x.s)),not[circle]],blue]]]]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:triangle;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:blue;4:yellow
'λx.contains(iota(filter(filter(x.s, not[yellow]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(and[size3,or[triangle,size3]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, blue), size1), blue), blue), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:blue;4:blue;4:rectangle
'λx.exists(or[blue,size2], filter(x.s, rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[circle,apply(same_size,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.forall(or[not[rectangle],green],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:green;3:%s.s;2:x
'λx.apply(and[size1,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size1,not[size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), and[and[and[and[and[triangle,apply(same_color,iota(x.s))],yellow],yellow],not[blue]],and[size1,size1]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:yellow;4:not[%s];4:blue;4:and[%s,%s];4:size1;4:size1
'λx.forall(rectangle,filter(filter(x.s, nor[yellow,apply(same_shape,iota(filter(x.s, size3)))]), apply(size-geq,iota(filter(x.s, and[blue,circle])))))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, green), apply(size-lt,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(and[and[apply(size-gt,x.o),and[size2,yellow]],and[triangle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, circle), yellow), size3), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:size3;4:green
'λx.apply(not[blue],iota(filter(filter(filter(x.s, blue), yellow), apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,and[size2,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[and[nand[size2,blue],blue],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(size3,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(size1,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(or[and[green,triangle],size2],iota(filter(filter(filter(x.s, green), circle), not[green])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:not[%s];4:green
'λx.apply(not[not[and[triangle,yellow]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[circle,yellow]), circle), size1), and[or[rectangle,size1],size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:circle;4:size1;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:size2
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.exists(size2, filter(x.s, rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(size1, filter(x.s, rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(x.s, implies[apply(same_color,iota(x.s)),triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.exists(blue, filter(filter(x.s, and[apply(same_size,x.o),yellow]), and[circle,triangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:circle;4:triangle
'λx.apply(and[green,and[not[blue],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(filter(x.s, yellow), and[rectangle,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(and[circle,size1],iota(filter(x.s, apply(size-lt,iota(filter(filter(filter(x.s, size3), size3), circle))))))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:circle
'λx.apply(not[and[circle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[nor[yellow,or[or[blue,size2],not[iff[implies[green,and[and[apply(same_color,x.o),size1],size2]],or[rectangle,and[size1,size3]]]]]],apply(same_shape,iota(filter(x.s, green)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:blue;4:size2;4:not[%s];4:iff[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(and[size2,apply(same_shape,iota(filter(x.s, size3)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(nand[triangle,and[yellow,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size3), size1), not[rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:not[%s];4:rectangle
'λx.apply(apply(same_size,iota(filter(x.s, and[triangle,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.forall(or[apply(same_shape,x.o),blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.exists(or[size1,iff[and[triangle,size1],size3]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:size3;3:%s.s;2:x
'λx.apply(and[size1,apply(same_shape,iota(filter(x.s, size3)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, implies[triangle,triangle])), filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, and[or[blue,size1],yellow]), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:yellow;4:green
'λx.contains(iota(filter(x.s, not[or[apply(size-geq,iota(x.s)),and[size2,and[and[blue,apply(same_size,x.o)],rectangle]]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(nor[circle,green],iota(filter(filter(filter(filter(filter(x.s, and[size1,apply(same_size,x.o)]), not[rectangle]), apply(same_color,x.o)), triangle), and[yellow,triangle])))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, and[circle,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.empty(filter(x.s, not[green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(triangle,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.empty(filter(x.s, not[size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(or[size3,blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(filter(filter(x.s, or[size2,size3]), apply(same_size,x.o)), or[triangle,and[blue,size2]]), not[size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:size2;4:not[%s];4:size2
'λx.apply(and[triangle,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[nor[nand[yellow,and[size3,and[size1,yellow]]],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[iff[or[yellow,or[or[size1,rectangle],blue]],size3],and[apply(same_size,iota(filter(x.s, not[triangle]))),green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:blue;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:green;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, circle), apply(same_size,x.o)), not[size2]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2
'λx.forall(size3,filter(x.s, or[rectangle,not[size2]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:size2
'λx.apply(or[yellow,and[yellow,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size2), rectangle), or[apply(size-gt,x.o),green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green
'λx.apply(implies[rectangle,apply(same_shape,iota(filter(x.s, not[triangle])))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(and[size3,green],filter(filter(x.s, or[and[not[green],rectangle],nor[apply(same_shape,iota(x.s)),circle]]), triangle))'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:rectangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), rectangle), not[size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:not[%s];4:size2
'λx.apply(and[green,apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[green]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size3
'λx.exists(or[and[blue,size2],yellow], filter(filter(x.s, green), size2))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size2;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.forall(rectangle,x.s)'	0:forall(%s,%s);4:rectangle;3:%s.s;2:x
'λx.apply(and[size3,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,implies[implies[and[rectangle,apply(same_size,x.o)],and[and[yellow,size2],and[nor[size3,and[apply(same_shape,x.o),and[yellow,green]]],circle]]],and[circle,implies[circle,size2]]]],iota(filter(filter(x.s, or[circle,or[triangle,nand[or[blue,rectangle],apply(same_color,iota(x.s))]]]), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:green;4:circle;4:and[%s,%s];4:circle;4:implies[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, size2), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(and[size1,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, rectangle), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[circle,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[circle]],iota(filter(filter(x.s, rectangle), triangle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(and[circle,and[and[size2,green],and[blue,and[implies[rectangle,and[size1,rectangle]],yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:and[%s,%s];4:blue;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, green), and[or[size1,and[size2,size2]],triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:size2;4:size2;4:triangle
'λx.contains(x.o, filter(x.s, iff[or[and[size1,not[and[and[triangle,size1],apply(size-geq,x.o)]]],yellow],nor[circle,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow;4:nor[%s,%s];4:circle;4:rectangle
'λx.apply(nor[yellow,and[size2,size2]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(and[and[not[size2],apply(same_size,x.o)],rectangle],filter(filter(x.s, rectangle), or[and[apply(same_shape,x.o),size2],size2]))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:size2
'λx.empty(filter(x.s, and[size1,iff[triangle,blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:iff[%s,%s];4:triangle;4:blue
'λx.apply(not[blue],iota(filter(filter(filter(filter(x.s, and[apply(size-geq,x.o),size3]), triangle), triangle), size1)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;4:triangle;4:triangle;4:size1
'λx.apply(not[apply(size-gt,iota(filter(filter(x.s, size3), size1)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;1:%s.o;2:x
'λx.forall(and[green,nor[and[nand[circle,and[blue,circle]],yellow],size1]],filter(x.s, apply(size-leq,iota(x.s))))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:nor[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, blue), not[yellow]), not[and[apply(same_color,x.o),blue]]), and[size2,apply(same_size,iota(filter(filter(x.s, circle), size1)))]), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size2
'λx.apply(or[or[size3,green],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[and[not[yellow],not[and[green,or[size1,rectangle]]]],apply(size-lt,x.o)],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(x.s)),or[blue,rectangle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(green, filter(x.s, blue))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(green,iota(filter(x.s, or[green,or[not[yellow],circle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:yellow;4:circle
'λx.contains(iota(filter(filter(x.s, triangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(and[size2,and[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(x.s, blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size3, filter(x.s, blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, and[not[triangle],size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:triangle;4:size3
'λx.forall(size1,filter(filter(filter(filter(x.s, not[triangle]), or[rectangle,nand[and[green,size2],size1]]), and[yellow,apply(same_shape,iota(x.s))]), implies[size1,or[size1,green]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:or[%s,%s];4:size1;4:green
'λx.empty(filter(filter(x.s, size1), or[and[size3,and[apply(same_size,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size3), not[size2]), green), blue), yellow), size3), iff[not[circle],rectangle]))),size1]],and[blue,rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2;4:green;4:blue;4:yellow;4:size3;4:iff[%s,%s];4:not[%s];4:circle;4:rectangle;4:size1;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(not[or[and[size1,nor[blue,size1]],iff[not[yellow],and[and[and[size2,triangle],circle],yellow]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:nor[%s,%s];4:blue;4:size1;4:iff[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, yellow), or[or[size2,apply(same_shape,iota(filter(x.s, circle)))],size1]), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size1
'λx.apply(and[rectangle,nor[triangle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(x.s, rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(size2,filter(x.s, rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[rectangle,or[not[rectangle],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(apply(size-lt,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.empty(filter(x.s, nand[yellow,apply(same_color,iota(x.s))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,and[not[or[triangle,triangle]],size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, triangle), circle), size2), size1), and[and[green,nor[green,size2]],apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:size2;4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:green;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(and[circle,blue],filter(filter(filter(filter(x.s, size1), blue), rectangle), and[triangle,and[apply(same_color,x.o),and[size3,apply(same_shape,x.o)]]]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[and[yellow,blue],size3],iota(filter(x.s, or[not[size3],green])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size3;4:green
'λx.apply(implies[and[green,yellow],and[not[rectangle],size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:yellow;4:and[%s,%s];4:not[%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(green, filter(x.s, rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(triangle, filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[blue,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, size3), triangle), rectangle), apply(size-geq,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[yellow,or[green,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,and[rectangle,size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,blue],iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), triangle), blue), green), green), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:blue;4:green;4:green;4:blue
'λx.apply(nand[nor[triangle,circle],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:triangle;4:circle;4:green;1:%s.o;2:x
'λx.forall(not[green],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[size2],iota(filter(filter(x.s, or[apply(same_color,iota(x.s)),yellow]), circle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:circle
'λx.exists(rectangle, filter(filter(x.s, yellow), triangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.forall(size2,filter(filter(x.s, blue), not[blue]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:blue
'λx.forall(implies[and[size2,size1],and[yellow,size3]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:yellow;4:size3;3:%s.s;2:x
'λx.forall(and[and[size1,size3],apply(same_color,iota(filter(filter(x.s, green), and[circle,apply(size-gt,iota(x.s))])))],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(not[and[size1,size1]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size1;3:%s.s;2:x
'λx.apply(not[not[apply(same_color,iota(filter(x.s, and[not[apply(same_shape,iota(filter(filter(filter(x.s, yellow), and[rectangle,or[rectangle,triangle]]), yellow)))],apply(size-lt,x.o)])))]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:triangle;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[size2,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:blue
'λx.exists(not[size1], filter(filter(filter(x.s, iff[circle,or[size2,yellow]]), size2), or[apply(size-geq,iota(x.s)),not[not[apply(size-geq,x.o)]]]))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:or[%s,%s];4:size2;4:yellow;4:size2;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(size1,iota(filter(x.s, and[size1,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.apply(or[apply(size-geq,iota(x.s)),blue],iota(filter(filter(filter(x.s, triangle), size2), or[circle,and[rectangle,size2]])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:or[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(nor[triangle,or[triangle,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, implies[iff[blue,and[rectangle,rectangle]],size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[size1,apply(size-lt,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(x.s, apply(same_size,iota(filter(x.s, size3)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(or[rectangle,size2], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(or[size1,blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[and[nor[yellow,yellow],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:yellow;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[nand[yellow,circle],triangle]), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:yellow;4:circle;4:triangle;4:size3
'λx.exists(green, filter(filter(x.s, size3), rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(apply(size-leq,iota(filter(filter(filter(filter(filter(filter(filter(x.s, or[green,size3]), not[blue]), circle), size1), circle), and[yellow,size3]), or[iff[green,circle],apply(size-geq,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3;4:not[%s];4:blue;4:circle;4:size1;4:circle;4:and[%s,%s];4:yellow;4:size3;4:or[%s,%s];4:iff[%s,%s];4:green;4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), not[green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:green
'λx.empty(filter(filter(x.s, size3), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2
'λx.apply(and[iff[not[triangle],size2],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:triangle;4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.exists(size3, filter(filter(filter(filter(x.s, size1), nand[size2,yellow]), or[size2,size2]), circle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:size2;4:size2;4:circle
'λx.apply(implies[size1,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, size1), and[size1,green]), size3), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:green;4:size3;4:size3;1:%s.o;2:x
'λx.exists(and[size3,and[apply(same_size,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size3), not[size2]), green), blue), yellow), size3), iff[not[circle],rectangle]))),size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2;4:green;4:blue;4:yellow;4:size3;4:iff[%s,%s];4:not[%s];4:circle;4:rectangle;4:size1;3:%s.s;2:x
'λx.forall(or[and[and[size1,not[apply(same_size,x.o)]],nor[yellow,and[apply(size-leq,x.o),apply(same_shape,x.o)]]],not[green]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, size3), green), rectangle), implies[green,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:rectangle;4:implies[%s,%s];4:green;4:green
'λx.apply(circle,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(nor[size2,size1],iota(filter(filter(x.s, apply(same_color,x.o)), size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(or[yellow,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[implies[blue,yellow],not[rectangle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:yellow;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size1,triangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(size-leq,iota(filter(x.s, blue))))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(not[rectangle],x.s)'	0:forall(%s,%s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.exists(iff[size3,size1], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:size1;3:%s.s;2:x
'λx.exists(or[iff[or[blue,size1],yellow],and[size3,blue]], filter(filter(x.s, size3), circle))'	0:exists(%s, %s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:size1;4:yellow;4:and[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(green,iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(or[not[circle],rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, or[not[apply(same_shape,x.o)],apply(same_color,iota(filter(x.s, blue)))]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[size2,and[apply(same_color,iota(x.s)),or[size1,and[green,and[not[rectangle],rectangle]]]]],iota(filter(filter(filter(x.s, nor[and[triangle,circle],circle]), rectangle), apply(same_shape,iota(filter(x.s, green))))))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:circle;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(circle, filter(filter(filter(filter(filter(filter(filter(x.s, yellow), not[size3]), and[and[size2,size1],or[triangle,yellow]]), circle), yellow), apply(same_shape,iota(x.s))), size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:triangle;4:yellow;4:circle;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(not[and[or[and[size2,size1],or[and[circle,triangle],yellow]],nand[circle,size2]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:yellow;4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(and[green,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:green;3:%s.s;2:x
'λx.exists(not[green], filter(filter(x.s, yellow), or[green,triangle]))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:green;4:triangle
'λx.apply(not[nand[apply(same_shape,x.o),apply(same_color,iota(x.s))]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[yellow,blue],iota(filter(filter(filter(x.s, size1), apply(same_shape,iota(filter(filter(x.s, green), triangle)))), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size1
'λx.exists(and[circle,triangle], filter(filter(filter(filter(x.s, size1), blue), rectangle), and[triangle,and[apply(same_color,x.o),and[size3,apply(same_color,x.o)]]]))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, size3), circle), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:green
'λx.apply(triangle,iota(filter(x.s, and[not[green],not[triangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:not[%s];4:triangle
'λx.apply(size3,iota(filter(x.s, not[nand[size2,yellow]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:size2;4:yellow
'λx.apply(iff[and[apply(same_shape,iota(x.s)),size3],or[size2,or[size1,and[and[size2,size2],apply(same_color,x.o)]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[green,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, nor[triangle,and[and[rectangle,green],green]]), blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, green), and[rectangle,size3]), rectangle), not[size3]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:rectangle;4:size3;4:rectangle;4:not[%s];4:size3;4:yellow
'λx.empty(filter(filter(filter(x.s, size1), triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:green
'λx.apply(and[or[and[size2,triangle],blue],and[circle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:blue;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, nor[yellow,yellow])), filter(filter(filter(x.s, size3), blue), and[yellow,and[yellow,rectangle]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(or[triangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[circle,and[yellow,or[yellow,circle]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:circle
'λx.apply(iff[or[apply(size-gt,x.o),or[or[triangle,size2],size2]],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:size2;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[circle,yellow]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:circle
'λx.apply(apply(size-lt,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size1,size3],filter(x.s, blue))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size2,iota(filter(filter(x.s, blue), or[triangle,circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:circle
'λx.forall(not[circle],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(yellow, filter(filter(x.s, rectangle), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.contains(iota(filter(filter(x.s, size1), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;3:%s.s;2:x
'λx.apply(or[or[implies[or[and[or[size2,rectangle],and[size2,size3]],yellow],size1],green],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:size2;4:size3;4:yellow;4:size1;4:green;4:yellow;1:%s.o;2:x
'λx.forall(implies[size2,size2],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(not[and[apply(size-leq,iota(filter(filter(filter(filter(x.s, and[not[and[or[and[circle,rectangle],yellow],green]],not[and[yellow,circle]]]), size3), or[not[yellow],yellow]), size3))),size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:yellow;4:green;4:not[%s];4:and[%s,%s];4:yellow;4:circle;4:size3;4:or[%s,%s];4:not[%s];4:yellow;4:yellow;4:size3;4:size1;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, triangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, size1), size2), yellow))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(filter(x.s, or[rectangle,rectangle]), size1), circle), circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle;4:size1;4:circle;4:circle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, circle), or[apply(same_shape,iota(filter(x.s, size3))),yellow]), blue), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:blue;4:blue
'λx.contains(x.o, filter(filter(x.s, rectangle), and[implies[circle,and[size3,apply(size-lt,iota(filter(x.s, not[yellow])))]],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:blue
'λx.apply(or[triangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[green,and[not[size3],triangle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, size2), iff[triangle,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:triangle;4:size1
'λx.forall(triangle,filter(filter(filter(filter(x.s, blue), apply(same_size,iota(filter(filter(x.s, triangle), not[circle])))), apply(same_color,x.o)), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.forall(size3,filter(filter(filter(x.s, green), circle), and[or[or[rectangle,or[size3,rectangle]],apply(same_size,x.o)],circle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, green), and[or[size3,nand[size2,size3]],size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:or[%s,%s];4:size3;4:nand[%s,%s];4:size2;4:size3;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), size2), or[and[and[and[yellow,apply(same_size,x.o)],blue],size2],and[rectangle,triangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size2;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(same_shape,iota(filter(x.s, size3))))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[triangle,and[size3,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[rectangle,or[yellow,green]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:green
'λx.exists(circle, filter(filter(filter(x.s, green), and[circle,blue]), and[size1,circle]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:size1;4:circle
'λx.forall(blue,filter(x.s, triangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[nand[blue,size2],and[not[rectangle],not[apply(same_size,iota(x.s))]]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(iff[blue,or[blue,not[triangle]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:or[%s,%s];4:blue;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[or[yellow,blue],yellow],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(not[and[size1,yellow]],iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(and[blue,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[circle], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[yellow,not[and[size3,size2]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size3), and[size1,yellow]), not[not[size1]]), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:yellow;4:not[%s];4:not[%s];4:size1;4:size2
'λx.apply(apply(same_size,iota(filter(filter(x.s, circle), not[iff[triangle,yellow]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:iff[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.forall(and[size2,circle],filter(filter(filter(filter(filter(filter(x.s, blue), or[size3,or[size3,rectangle]]), and[and[and[circle,size2],apply(same_color,x.o)],triangle]), and[and[not[blue],rectangle],or[yellow,apply(size-gt,x.o)]]), size2), and[or[green,triangle],apply(same_size,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:rectangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, and[size1,size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(not[and[blue,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, green), or[blue,not[blue]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:blue;4:not[%s];4:blue
'λx.exists(not[circle], filter(filter(x.s, not[green]), green))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:green
'λx.apply(or[apply(same_shape,x.o),not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[yellow,or[green,and[or[circle,size2],and[triangle,size1]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:circle;4:size2;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, yellow), blue), blue), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:blue;4:size2;3:%s.s;2:x
'λx.apply(or[yellow,and[and[blue,size2],size2]],iota(filter(filter(filter(x.s, and[not[size1],blue]), green), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:blue;4:green;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, and[apply(same_color,iota(filter(x.s, not[circle]))),circle]), or[circle,apply(size-leq,iota(filter(filter(x.s, or[or[and[yellow,not[circle]],and[yellow,circle]],size1]), size3)))]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:circle;4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:circle;4:size1;4:size3
'λx.apply(size1,iota(filter(x.s, nor[rectangle,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:blue
'λx.apply(or[triangle,size1],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(x.s, nand[apply(same_shape,iota(filter(filter(x.s, rectangle), blue))),iff[triangle,blue]]), blue), blue), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:iff[%s,%s];4:triangle;4:blue;4:blue;4:blue;4:size3;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[size1,size2]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.apply(size3,iota(filter(x.s, and[yellow,and[or[size1,and[yellow,not[or[triangle,rectangle]]]],and[apply(same_color,iota(x.s)),rectangle]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(implies[circle,and[apply(same_shape,iota(x.s)),green]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(nand[or[apply(same_size,x.o),size2],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, implies[circle,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size2
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,iota(x.s))), apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[circle,not[or[blue,triangle]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-lt,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[blue,not[rectangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:rectangle
'λx.forall(rectangle,filter(x.s, green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(rectangle,filter(x.s, size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(rectangle,filter(x.s, size2))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[size2,and[size1,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[implies[triangle,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(not[not[and[size1,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(and[and[size2,and[size1,green]],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(and[triangle,not[size2]], filter(filter(x.s, size1), green))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, iff[size2,apply(same_color,iota(x.s))]), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(not[iff[triangle,and[and[implies[yellow,blue],apply(same_color,x.o)],size3]]],iota(filter(filter(filter(x.s, or[apply(same_size,x.o),not[and[rectangle,rectangle]]]), not[rectangle]), not[iff[size1,apply(size-gt,x.o)]])))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, not[not[yellow]]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:yellow;4:size1
'λx.apply(and[size2,and[yellow,green]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(rectangle, filter(filter(filter(x.s, size1), and[not[and[size2,yellow]],yellow]), yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:yellow;4:yellow;4:yellow
'λx.exists(size2, filter(filter(x.s, circle), yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.empty(filter(filter(filter(x.s, size2), blue), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:size1
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(x.s, triangle), yellow), circle), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:circle;4:circle
'λx.forall(blue,filter(x.s, green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(x.s, size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(blue,filter(x.s, size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(x.s, size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[size3,size1]), nor[implies[triangle,green],green]), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1;4:nor[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:green;4:size3
'λx.exists(apply(size-leq,x.o), filter(filter(filter(filter(x.s, not[yellow]), size2), size2), and[size3,blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2;4:size2;4:and[%s,%s];4:size3;4:blue
'λx.apply(nand[size2,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(iff[blue,apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,nand[yellow,size2]],iota(filter(filter(x.s, and[rectangle,circle]), and[circle,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:circle;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, size2), apply(size-lt,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(or[or[triangle,and[size1,circle]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[blue,green],iota(filter(x.s, and[not[implies[implies[green,triangle],or[and[green,rectangle],blue]]],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:implies[%s,%s];4:green;4:triangle;4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[nand[size2,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[blue,nor[nor[size3,rectangle],size3]]), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nor[%s,%s];4:nor[%s,%s];4:size3;4:rectangle;4:size3;4:size3
'λx.apply(circle,iota(filter(filter(x.s, and[blue,nor[nor[size3,rectangle],size3]]), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nor[%s,%s];4:nor[%s,%s];4:size3;4:rectangle;4:size3;4:size2
'λx.apply(iff[apply(same_size,iota(x.s)),triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, circle), triangle), apply(same_color,x.o)), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[apply(same_color,iota(filter(x.s, and[apply(same_color,iota(filter(filter(x.s, rectangle), size2))),yellow]))),size3])), filter(x.s, not[size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(and[and[size3,or[yellow,blue]],green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[not[triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[not[not[triangle]],nor[or[circle,rectangle],circle]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:nor[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:circle;4:green;1:%s.o;2:x
'λx.exists(and[apply(size-geq,x.o),circle], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, size1), size1), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:circle
'λx.forall(triangle,filter(x.s, triangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(size3, filter(filter(filter(filter(x.s, circle), green), and[yellow,and[and[and[yellow,size2],and[and[or[and[yellow,green],blue],or[blue,apply(same_size,iota(x.s))]],apply(same_shape,iota(filter(x.s, blue)))]],green]]), or[size1,green]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:blue;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:or[%s,%s];4:size1;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size1), not[and[size2,blue]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:size2;4:blue
'λx.apply(implies[size2,rectangle],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[green,and[blue,rectangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,nor[size1,implies[and[circle,yellow],and[rectangle,circle]]]],iota(filter(filter(filter(x.s, apply(same_color,x.o)), yellow), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:nor[%s,%s];4:size1;4:implies[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:rectangle
'λx.forall(and[yellow,size3],filter(filter(x.s, nand[implies[rectangle,and[rectangle,size1]],rectangle]), green))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:size1;4:rectangle;4:green
'λx.apply(or[apply(size-gt,x.o),rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[or[or[and[apply(same_color,x.o),apply(same_shape,x.o)],circle],circle],blue],iota(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, size3)))), blue), size1), rectangle), or[size2,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size1;4:rectangle;4:or[%s,%s];4:size2;4:triangle
'λx.exists(apply(same_shape,iota(filter(x.s, triangle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(or[blue,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, implies[triangle,implies[size3,circle]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:implies[%s,%s];4:size3;4:circle
'λx.apply(not[triangle],iota(filter(filter(filter(filter(x.s, implies[and[triangle,or[circle,yellow]],nand[rectangle,blue]]), iff[and[size3,size1],implies[circle,apply(size-gt,iota(filter(x.s, or[yellow,or[size3,size1]])))]]), yellow), iff[not[yellow],triangle])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:yellow;4:nand[%s,%s];4:rectangle;4:blue;4:iff[%s,%s];4:and[%s,%s];4:size3;4:size1;4:implies[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:size1;4:yellow;4:iff[%s,%s];4:not[%s];4:yellow;4:triangle
'λx.contains(iota(filter(x.s, and[triangle,size1])), filter(filter(filter(x.s, or[and[yellow,and[nand[implies[rectangle,size3],blue],triangle]],not[not[or[or[circle,size2],size1]]]]), or[and[yellow,and[size1,size1]],circle]), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:blue;4:triangle;4:not[%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:size2;4:size1;4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:size1;4:circle;4:green
'λx.apply(triangle,iota(x.s))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(size-leq,iota(x.s)),and[circle,or[size1,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(filter(x.s, size1), blue))),filter(filter(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, size3), and[and[not[and[size3,size1]],size2],not[circle]])))), nand[and[circle,and[not[green],triangle]],apply(same_size,iota(x.s))]), triangle), and[size1,or[size3,size1]]), or[yellow,size1]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size1;4:size2;4:not[%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:size1;4:or[%s,%s];4:yellow;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(circle,iota(filter(filter(filter(x.s, triangle), size3), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size1
'λx.empty(filter(filter(filter(filter(filter(x.s, green), size1), size3), blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:size3;4:blue;4:circle
'λx.apply(size1,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.exists(rectangle, filter(filter(x.s, and[size1,circle]), yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:yellow
'λx.forall(apply(same_shape,iota(filter(filter(x.s, and[size2,not[and[size3,nand[rectangle,or[implies[rectangle,rectangle],apply(same_color,x.o)]]]]]), circle))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:size3;4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(implies[blue,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[rectangle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.exists(not[apply(same_color,x.o)], filter(filter(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, not[green])))), green), yellow), size2), blue))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:green;4:yellow;4:size2;4:blue
'λx.apply(and[size1,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[yellow,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.forall(and[rectangle,size3],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.forall(and[rectangle,size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, not[size1]), size1), not[not[circle]]), not[blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size1;4:not[%s];4:not[%s];4:circle;4:not[%s];4:blue
'λx.apply(or[not[blue],circle],iota(filter(filter(filter(filter(filter(x.s, circle), circle), apply(size-leq,x.o)), blue), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:yellow
'λx.apply(green,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(not[iff[circle,and[rectangle,size2]]],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, and[or[not[yellow],size1],triangle]), rectangle), nor[size3,rectangle]), rectangle), apply(same_size,iota(filter(filter(x.s, size2), or[and[size3,size2],blue])))), rectangle), blue), blue)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:size1;4:triangle;4:rectangle;4:nor[%s,%s];4:size3;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:size3;4:size2;4:blue;4:rectangle;4:blue;4:blue
'λx.apply(green,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.forall(green,filter(filter(filter(filter(filter(x.s, yellow), blue), size2), size2), blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size2;4:size2;4:blue
'λx.exists(and[not[triangle],apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), not[blue])))], filter(filter(x.s, size3), yellow))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.exists(and[green,green], filter(x.s, or[circle,size2]))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size2
'λx.apply(and[rectangle,apply(same_shape,iota(filter(filter(filter(filter(x.s, not[apply(same_shape,x.o)]), triangle), circle), nor[size1,triangle])))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:circle;4:nor[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, implies[triangle,yellow]), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:yellow;4:yellow
'λx.apply(implies[circle,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, green), triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(rectangle,iota(filter(x.s, apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[size1,not[or[size2,nand[size3,size3]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:size2;4:nand[%s,%s];4:size3;4:size3
'λx.apply(or[not[blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(iff[size3,not[green]],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:size3;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(and[green,apply(size-gt,iota(x.s))],iota(filter(filter(filter(filter(x.s, yellow), green), rectangle), nor[rectangle,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:rectangle;4:nor[%s,%s];4:rectangle;4:size2
'λx.apply(and[green,or[apply(same_size,x.o),not[and[rectangle,rectangle]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, size2), iff[and[apply(same_color,iota(x.s)),size2],apply(same_shape,iota(filter(x.s, triangle)))]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(nand[rectangle,and[yellow,blue]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:blue;3:%s.s;2:x
'λx.exists(not[not[or[blue,circle]]], filter(filter(filter(filter(filter(x.s, and[size3,rectangle]), not[not[blue]]), not[yellow]), iff[blue,rectangle]), or[triangle,not[or[circle,rectangle]]]))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;4:not[%s];4:not[%s];4:blue;4:not[%s];4:yellow;4:iff[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:circle;4:rectangle
'λx.apply(or[size1,and[not[and[rectangle,apply(same_size,iota(filter(filter(x.s, rectangle), not[blue])))]],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[implies[rectangle,apply(same_color,x.o)],circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(and[green,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[not[apply(same_shape,iota(x.s))]],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(apply(same_color,iota(filter(x.s, apply(same_color,iota(filter(x.s, apply(same_shape,iota(x.s)))))))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[blue,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[or[circle,rectangle],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[and[size1,triangle],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[and[apply(same_size,iota(filter(filter(filter(filter(filter(filter(x.s, size2), yellow), and[triangle,not[size3]]), apply(same_size,iota(filter(x.s, size1)))), apply(same_shape,iota(x.s))), apply(same_shape,x.o)))),circle],blue],or[blue,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:and[%s,%s];4:triangle;4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:blue;4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(and[and[yellow,yellow],size3],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:size3;3:%s.s;2:x
'λx.apply(implies[green,iff[green,size3]],iota(filter(filter(x.s, not[nor[and[and[circle,not[not[apply(size-geq,x.o)]]],and[iff[blue,size1],circle]],or[and[triangle,triangle],and[size3,nor[apply(size-leq,x.o),nor[size3,not[or[green,and[size3,size2]]]]]]]]]), size1)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:iff[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:blue;4:size1;4:circle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:size3;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:nor[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;4:size1
'λx.exists(circle, x.s)'	0:exists(%s, %s);4:circle;3:%s.s;2:x
'λx.apply(and[and[and[circle,apply(size-lt,iota(x.s))],and[and[rectangle,green],and[size1,and[yellow,green]]]],rectangle],iota(filter(filter(x.s, yellow), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), and[blue,yellow]), blue), or[or[blue,apply(same_size,x.o)],circle]), size1), size3), or[size1,not[and[and[size1,circle],size2]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:blue;4:yellow;4:blue;4:or[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size1;4:size3;4:or[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:size2
'λx.apply(green,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[size1,and[and[triangle,size1],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, iff[and[circle,blue],apply(same_color,x.o)]), green), triangle), or[or[circle,not[size3]],iff[and[and[yellow,and[circle,and[or[size1,not[or[implies[iff[iff[circle,nor[blue,iff[circle,blue]]],green],and[blue,apply(size-gt,iota(x.s))]],not[green]]]],rectangle]]],nor[size1,size1]],not[not[not[green]]]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:triangle;4:or[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:size3;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:iff[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:blue;4:green;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;4:rectangle;4:nor[%s,%s];4:size1;4:size1;4:not[%s];4:not[%s];4:not[%s];4:green;3:%s.s;2:x
'λx.forall(size1,filter(x.s, not[triangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.forall(size3,filter(x.s, not[triangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.contains(iota(x.s), filter(filter(filter(x.s, yellow), size3), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:yellow
'λx.contains(iota(filter(x.s, and[yellow,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size3), and[size1,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:green
'λx.apply(iff[not[not[and[and[triangle,yellow],and[and[and[triangle,size2],apply(same_color,x.o)],green]]]],not[size1]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[blue,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(nor[size2,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.exists(not[blue], x.s)'	0:exists(%s, %s);4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(and[yellow,not[circle]],iota(filter(filter(filter(x.s, size1), size1), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size2
'λx.apply(apply(same_color,x.o),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, size1), and[size2,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size2;4:size1
'λx.apply(and[and[blue,and[triangle,green]],nand[and[green,green],apply(same_shape,iota(filter(x.s, yellow)))]],iota(filter(filter(x.s, not[and[or[green,and[not[green],triangle]],triangle]]), apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green;4:nand[%s,%s];4:and[%s,%s];4:green;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:green;4:triangle;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, not[not[apply(same_shape,iota(filter(filter(filter(x.s, green), circle), green)))]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:green
'λx.apply(triangle,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(not[green],iota(filter(filter(filter(filter(filter(filter(x.s, or[size3,circle]), circle), circle), size1), nor[or[size1,or[iff[implies[circle,apply(same_shape,iota(x.s))],size3],apply(same_size,x.o)]],and[circle,green]]), and[and[yellow,size1],nor[circle,size2]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:circle;4:circle;4:circle;4:size1;4:nor[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:nor[%s,%s];4:circle;4:size2
'λx.apply(or[blue,not[yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[or[circle,yellow],blue]), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:blue;4:circle
'λx.apply(blue,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,nand[blue,green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(or[or[blue,size2],size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size2;4:size3;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(same_size,iota(x.s))), not[size1]), or[green,and[circle,not[not[rectangle]]]]), size1), and[rectangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:or[%s,%s];4:green;4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:rectangle;4:size1;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(or[size2,size1],iota(filter(filter(filter(filter(filter(filter(x.s, size3), blue), apply(size-lt,x.o)), yellow), rectangle), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:rectangle;4:size3
'λx.exists(green, filter(filter(x.s, yellow), rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.forall(size1,filter(filter(filter(x.s, blue), size3), or[green,yellow]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:or[%s,%s];4:green;4:yellow
'λx.apply(or[size3,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(or[triangle,size1],iota(filter(filter(filter(filter(x.s, apply(size-gt,x.o)), rectangle), green), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;4:green;4:triangle
'λx.apply(and[and[circle,not[size3]],apply(size-gt,x.o)],iota(filter(filter(filter(x.s, size3), size3), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(or[apply(same_shape,iota(x.s)),not[nor[size1,green]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, size3))),blue],iota(filter(filter(filter(filter(filter(x.s, and[and[apply(size-geq,x.o),circle],not[rectangle]]), and[blue,and[and[or[size1,blue],iff[size1,size3]],size1]]), triangle), size2), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;4:not[%s];4:rectangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:iff[%s,%s];4:size1;4:size3;4:size1;4:triangle;4:size2;4:triangle
'λx.exists(and[nor[and[and[nor[or[size1,not[circle]],blue],size2],or[or[nand[or[rectangle,or[rectangle,yellow]],blue],yellow],yellow]],apply(same_size,x.o)],and[yellow,size2]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:circle;4:blue;4:size2;4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:yellow;4:blue;4:yellow;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[size2,and[and[blue,apply(same_color,iota(filter(x.s, nand[apply(same_size,x.o),circle])))],yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:yellow
'λx.forall(and[blue,triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, not[apply(same_shape,x.o)]), and[and[and[or[and[and[apply(size-gt,x.o),size1],and[green,green]],rectangle],yellow],or[circle,yellow]],size3]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:and[%s,%s];4:green;4:green;4:rectangle;4:yellow;4:or[%s,%s];4:circle;4:yellow;4:size3;4:size2
'λx.exists(and[or[not[green],or[blue,yellow]],and[size1,size2]], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, apply(size-gt,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[apply(same_shape,x.o),iff[rectangle,and[size1,size3]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size3
'λx.apply(and[and[green,or[and[triangle,and[iff[circle,and[yellow,size3]],green]],size1]],and[green,yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:size3;4:green;4:size1;4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,or[circle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[not[and[triangle,circle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:circle;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, nand[size2,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:triangle
'λx.apply(circle,iota(filter(x.s, nand[green,rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:rectangle
'λx.apply(or[and[apply(same_color,x.o),green],not[green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, circle), green), apply(same_size,iota(x.s))), implies[circle,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, size2), and[size2,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:circle
'λx.apply(triangle,iota(filter(x.s, and[or[not[and[triangle,size3]],size3],yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size3;4:size3;4:yellow
'λx.forall(size1,filter(filter(filter(x.s, size3), rectangle), triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:triangle
'λx.apply(implies[and[green,and[circle,apply(size-geq,iota(x.s))]],not[not[and[yellow,size1]]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_shape,iota(filter(filter(filter(filter(x.s, size1), blue), rectangle), circle))),circle],filter(x.s, and[size3,and[or[blue,size1],and[and[iff[yellow,circle],size3],or[apply(same_shape,x.o),rectangle]]]]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:rectangle;4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, green), apply(same_shape,x.o)), circle), and[not[size3],size2]), and[or[size3,and[size3,nor[size2,not[circle]]]],not[circle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:not[%s];4:size3;4:size2;4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:nor[%s,%s];4:size2;4:not[%s];4:circle;4:not[%s];4:circle
'λx.apply(and[not[rectangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, iff[or[not[circle],not[circle]],apply(same_shape,iota(filter(x.s, nand[yellow,size2])))]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:size2;4:green
'λx.apply(green,iota(filter(filter(filter(filter(x.s, not[size2]), circle), size2), and[and[yellow,apply(same_shape,x.o)],circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle;4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(size1,iota(filter(filter(x.s, and[or[blue,and[nor[triangle,circle],circle]],yellow]), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:circle;4:circle;4:yellow;4:green
'λx.apply(circle,iota(filter(filter(x.s, rectangle), not[green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:green
'λx.apply(size1,iota(filter(x.s, nor[or[and[and[size2,implies[yellow,yellow]],and[and[apply(same_size,iota(x.s)),nand[rectangle,not[yellow]]],and[green,and[size2,size3]]]],or[blue,and[blue,or[green,implies[and[or[circle,size1],green],green]]]]],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:implies[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size3;4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:green;4:green;4:green
'λx.apply(and[or[and[rectangle,size1],yellow],circle],iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(iff[size1,or[and[blue,triangle],triangle]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size2, filter(filter(x.s, and[or[or[size3,yellow],circle],and[blue,green]]), rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:circle;4:and[%s,%s];4:blue;4:green;4:rectangle
'λx.apply(or[and[and[size1,triangle],and[apply(size-leq,x.o),not[blue]]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(size-leq,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size3,iff[size1,and[triangle,rectangle]]]],iota(filter(filter(filter(filter(filter(x.s, apply(same_size,x.o)), size2), circle), or[iff[nor[circle,and[and[triangle,iff[size3,circle]],green]],or[rectangle,or[triangle,and[yellow,apply(same_shape,iota(x.s))]]]],implies[blue,and[implies[rectangle,size3],circle]]]), not[triangle])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:iff[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:circle;4:or[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:size3;4:circle;4:green;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:circle;4:not[%s];4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, size3), size3), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:rectangle
'λx.apply(not[green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[iff[rectangle,or[nor[not[and[size1,apply(same_shape,x.o)]],size3],circle]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[circle],iota(filter(filter(x.s, triangle), not[size2])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size2
'λx.exists(and[and[implies[and[green,and[circle,apply(size-geq,iota(x.s))]],not[and[size1,and[and[apply(size-leq,iota(x.s)),green],green]]]],green],iff[green,triangle]], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:green;4:green;4:green;4:iff[%s,%s];4:green;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[iff[green,and[nor[size2,green],and[size2,circle]]],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:green;4:and[%s,%s];4:nor[%s,%s];4:size2;4:green;4:and[%s,%s];4:size2;4:circle;4:green;1:%s.o;2:x
'λx.apply(implies[or[size1,or[or[circle,blue],or[and[rectangle,and[circle,blue]],size2]]],size1],iota(filter(filter(filter(filter(x.s, and[not[not[triangle]],rectangle]), or[not[triangle],size3]), yellow), rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:blue;4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:rectangle;4:or[%s,%s];4:not[%s];4:triangle;4:size3;4:yellow;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(size1,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, not[not[circle]]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:circle;4:blue
'λx.apply(size3,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(and[green,nand[size2,or[implies[not[green],and[not[and[and[size2,not[not[or[circle,and[circle,not[apply(same_color,x.o)]]]]]],and[yellow,triangle]]],not[size2]]],size3]]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:nand[%s,%s];4:size2;4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size3,iota(filter(filter(x.s, circle), not[rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, size2)))), rectangle), circle), and[rectangle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:circle;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(and[green,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), and[apply(same_shape,iota(x.s)),not[size3]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3
'λx.exists(size2, filter(x.s, iff[apply(size-gt,iota(x.s)),rectangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(yellow,filter(filter(x.s, blue), and[or[blue,triangle],size2]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:size2
'λx.exists(iff[not[green],circle], filter(x.s, apply(same_shape,iota(x.s))))'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), and[not[yellow],apply(size-geq,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[green,size2],iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(not[iff[blue,size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, apply(same_color,iota(x.s))), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.forall(and[or[implies[triangle,blue],yellow],or[not[nand[green,size3]],not[size2]]],filter(filter(filter(filter(x.s, size1), not[size1]), green), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:yellow;4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:green;4:size3;4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size1;4:green;4:yellow
'λx.apply(triangle,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(not[rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[and[triangle,size3],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(and[iff[size1,and[green,size2]],size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:green;4:size2;4:size2;3:%s.s;2:x
'λx.apply(or[size1,or[apply(same_size,x.o),rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, and[and[triangle,green],apply(same_shape,iota(filter(x.s, circle)))]), not[yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[implies[rectangle,or[size2,green]],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, and[triangle,and[apply(same_color,iota(filter(filter(x.s, triangle), triangle))),and[rectangle,not[triangle]]]]), size2), rectangle), yellow), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:and[%s,%s];4:rectangle;4:not[%s];4:triangle;4:size2;4:rectangle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[rectangle,yellow]), size3)), filter(filter(filter(x.s, green), implies[not[triangle],and[blue,and[size3,nand[blue,nor[not[rectangle],yellow]]]]]), nor[not[size1],size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:nand[%s,%s];4:blue;4:nor[%s,%s];4:not[%s];4:rectangle;4:yellow;4:nor[%s,%s];4:not[%s];4:size1;4:size2
'λx.apply(not[size2],iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(apply(same_color,iota(filter(x.s, not[triangle]))),iota(filter(filter(x.s, and[circle,triangle]), nand[rectangle,and[nor[size3,apply(size-leq,x.o)],blue]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.apply(nor[triangle,apply(same_shape,iota(x.s))],iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(or[not[circle],or[rectangle,yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[blue,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, nor[triangle,blue]), apply(same_size,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[or[rectangle,not[and[triangle,yellow]]],size1],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:triangle;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[not[rectangle]],iota(filter(filter(filter(filter(x.s, green), nor[triangle,size1]), or[or[size1,or[triangle,circle]],triangle]), apply(size-gt,x.o))))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:circle;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[circle,green],iota(filter(x.s, nor[iff[green,size3],and[and[circle,and[triangle,size3]],size2]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:iff[%s,%s];4:green;4:size3;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:size3;4:size2
'λx.apply(or[size3,and[yellow,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.forall(or[circle,size2],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, and[blue,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, size3), blue), apply(same_size,x.o)))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[rectangle,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,iff[yellow,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, circle), and[rectangle,green]), not[not[size3]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:green;4:not[%s];4:not[%s];4:size3
'λx.apply(and[blue,size3],iota(filter(x.s, implies[circle,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, size1), circle), apply(same_shape,iota(x.s))), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[blue,apply(same_size,x.o)],iota(filter(x.s, apply(same_shape,iota(filter(x.s, size3))))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(size-lt,iota(filter(x.s, or[apply(same_shape,iota(x.s)),circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, nand[size1,or[implies[implies[rectangle,and[rectangle,and[rectangle,blue]]],rectangle],yellow]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:or[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:blue;4:rectangle;4:yellow
'λx.empty(filter(filter(x.s, not[and[size2,size1]]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:size1;4:size2
'λx.apply(not[and[not[circle],or[yellow,yellow]]],iota(filter(filter(x.s, rectangle), size3)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), size3), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size2
'λx.apply(and[yellow,yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[green,blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, size1), green), or[and[blue,circle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:blue
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), nand[not[blue],size1]), green), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:not[%s];4:blue;4:size1;4:green;4:yellow
'λx.apply(or[rectangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, not[or[apply(same_shape,iota(filter(x.s, circle))),circle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(and[size2,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(iff[triangle,and[implies[size3,yellow],rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:implies[%s,%s];4:size3;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, blue), size1), and[and[green,and[triangle,not[implies[triangle,and[green,and[size2,size1]]]]]],nand[size3,implies[implies[circle,not[or[size2,circle]]],apply(same_size,x.o)]]]), blue), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:not[%s];4:implies[%s,%s];4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size1;4:nand[%s,%s];4:size3;4:implies[%s,%s];4:implies[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:size2;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:blue
'λx.apply(nand[yellow,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), and[blue,and[or[iff[rectangle,triangle],size1],blue]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:triangle;4:size1;4:blue;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size1), size3), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:size1
'λx.apply(or[not[not[and[triangle,or[circle,triangle]]]],not[not[circle]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:triangle;4:not[%s];4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, and[rectangle,size1]), yellow)), filter(filter(filter(x.s, triangle), apply(same_shape,iota(x.s))), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(and[yellow,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[not[or[size3,not[and[rectangle,size1]]]],not[size1]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:rectangle;4:size1;4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[size1,triangle],iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(size2,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(not[nand[rectangle,yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[or[yellow,size1]],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(and[and[size2,and[and[yellow,size1],apply(same_color,iota(filter(filter(x.s, circle), triangle)))]],not[rectangle]],iota(filter(filter(x.s, not[and[rectangle,green]]), or[green,and[rectangle,blue]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(and[and[or[and[circle,triangle],not[not[implies[size2,yellow]]]],nand[size1,apply(same_color,iota(x.s))]],size1],iota(filter(filter(x.s, and[rectangle,not[green]]), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:not[%s];4:not[%s];4:implies[%s,%s];4:size2;4:yellow;4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:green;4:circle
'λx.exists(nand[or[and[apply(size-gt,iota(x.s)),and[triangle,apply(same_shape,x.o)]],green],size2], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:size2;3:%s.s;2:x
'λx.apply(or[or[triangle,blue],iff[and[size3,rectangle],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:iff[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(implies[size3,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(or[and[size3,rectangle],blue],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(triangle, filter(filter(filter(x.s, rectangle), size1), or[size3,size1]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:or[%s,%s];4:size3;4:size1
'λx.apply(and[not[and[triangle,green]],yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-lt,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(x.s, size2), triangle), size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:size1
'λx.apply(and[iff[not[blue],and[rectangle,size3]],and[and[not[blue],triangle],or[triangle,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:triangle;4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, and[and[blue,and[size3,green]],size1]), and[size3,circle]), and[circle,or[size3,blue]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:green;4:size1;4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:blue
'λx.forall(or[circle,circle],filter(x.s, green))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[green,nor[and[triangle,or[nand[size2,green],size1]],rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:nand[%s,%s];4:size2;4:green;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(x.s))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(and[not[circle],triangle],filter(filter(x.s, triangle), circle))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.exists(size3, filter(filter(filter(x.s, triangle), yellow), rectangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, rectangle), apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-leq,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size3,circle], filter(filter(filter(x.s, green), and[circle,size1]), size1))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:size1;4:size1
'λx.apply(nor[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[green,and[and[blue,blue],size3]],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, implies[yellow,circle]), green), size3), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:circle;4:green;4:size3;4:yellow
'λx.apply(green,iota(filter(filter(x.s, nand[size1,yellow]), not[and[blue,and[green,size3]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:yellow;4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:size3
'λx.apply(and[apply(same_size,iota(filter(filter(filter(filter(x.s, size1), or[blue,size1]), yellow), and[triangle,green]))),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:size1;4:yellow;4:and[%s,%s];4:triangle;4:green;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[circle,and[apply(size-gt,x.o),yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[apply(size-lt,iota(filter(x.s, triangle))),size2],iota(filter(filter(x.s, rectangle), and[size3,or[circle,circle]])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(filter(filter(filter(filter(x.s, or[yellow,not[rectangle]]), size2), circle), or[circle,nor[rectangle,and[size1,yellow]]]), and[rectangle,green]), size1), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:rectangle;4:size2;4:circle;4:or[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:rectangle;4:green;4:size1;4:circle
'λx.apply(blue,iota(filter(x.s, nor[yellow,not[and[size3,or[blue,and[or[triangle,not[blue]],and[and[apply(same_size,iota(filter(x.s, or[not[apply(same_size,x.o)],blue]))),rectangle],rectangle]]]]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle;4:rectangle
'λx.apply(nor[apply(same_shape,x.o),nand[circle,size1]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,circle],iota(filter(filter(filter(x.s, and[rectangle,and[or[circle,blue],triangle]]), or[blue,and[nand[rectangle,and[size2,iff[and[size1,apply(size-geq,iota(x.s))],size3]]],green]]), and[and[not[rectangle],and[size2,and[green,size3]]],not[and[size1,apply(same_color,x.o)]]])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:triangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:size3;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(filter(x.s, circle), yellow), or[yellow,size2]), size3))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:or[%s,%s];4:yellow;4:size2;4:size3
'λx.apply(rectangle,iota(filter(x.s, implies[and[yellow,circle],and[triangle,circle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:triangle;4:circle
'λx.empty(filter(filter(x.s, size2), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(and[not[rectangle],blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, and[and[apply(same_shape,x.o),rectangle],not[size2]]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:not[%s];4:size2;4:size2
'λx.exists(rectangle, filter(filter(x.s, size1), apply(same_color,iota(filter(x.s, rectangle)))))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[circle,and[yellow,not[not[or[iff[size2,green],or[blue,and[and[not[yellow],circle],green]]]]]]],not[or[green,triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:not[%s];4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:size2;4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:circle;4:green;4:not[%s];4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[triangle,rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle
'λx.contains(x.o, filter(filter(x.s, size3), and[and[circle,green],and[rectangle,apply(same_color,x.o)]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.contains(iota(filter(x.s, apply(size-leq,iota(x.s)))), filter(filter(filter(x.s, and[yellow,and[blue,and[green,size1]]]), green), or[implies[circle,size1],size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:size1;4:green;4:or[%s,%s];4:implies[%s,%s];4:circle;4:size1;4:size2
'λx.apply(iff[rectangle,circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[apply(same_color,x.o)], filter(filter(filter(x.s, yellow), yellow), blue))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:blue
'λx.forall(green,filter(filter(filter(filter(filter(x.s, size2), rectangle), apply(same_shape,iota(filter(x.s, blue)))), green), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:size1
'λx.contains(x.o, filter(filter(x.s, apply(same_color,iota(filter(x.s, not[nand[rectangle,triangle]])))), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:rectangle;4:triangle;4:green
'λx.apply(or[nor[green,size1],triangle],iota(filter(filter(x.s, or[green,rectangle]), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:green;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle;4:size1
'λx.apply(rectangle,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(nor[rectangle,circle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size3), and[triangle,green]), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:green;4:size1
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, yellow), size1), yellow), yellow), apply(size-leq,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:yellow;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, rectangle), yellow), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue
'λx.apply(and[or[circle,green],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(size1, filter(x.s, or[and[green,rectangle],not[apply(same_color,iota(x.s))]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(x.s, circle), not[rectangle]), size2), or[implies[size3,circle],size1]), and[blue,implies[rectangle,green]]), and[size3,or[size2,triangle]]), iff[triangle,not[and[green,rectangle]]]), apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle;4:size2;4:or[%s,%s];4:implies[%s,%s];4:size3;4:circle;4:size1;4:and[%s,%s];4:blue;4:implies[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:size3;4:or[%s,%s];4:size2;4:triangle;4:iff[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:green;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,green],iota(filter(filter(x.s, triangle), and[apply(same_color,iota(filter(filter(x.s, not[and[triangle,size3]]), size3))),rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:size3;4:size3;4:rectangle
'λx.apply(green,iota(filter(x.s, or[yellow,not[rectangle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:rectangle
'λx.forall(yellow,filter(filter(x.s, apply(same_color,iota(x.s))), circle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,circle],iota(filter(x.s, and[green,apply(size-gt,x.o)])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), nor[or[apply(same_color,iota(x.s)),implies[triangle,not[blue]]],size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:not[%s];4:blue;4:size1
'λx.apply(green,iota(filter(x.s, or[implies[size1,nor[and[or[not[circle],size1],size1],nand[not[yellow],size1]]],yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:size1;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:size1;4:size1;4:nand[%s,%s];4:not[%s];4:yellow;4:size1;4:yellow
'λx.apply(rectangle,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.exists(blue, filter(x.s, size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(blue, filter(x.s, size3))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(blue, filter(x.s, size1))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(blue, filter(x.s, green))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(implies[or[size3,and[size3,triangle]],and[circle,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[and[circle,size1],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(and[size1,and[not[size3],green]], filter(filter(x.s, and[not[or[or[blue,rectangle],size2]],apply(same_shape,x.o)]), apply(same_shape,iota(filter(x.s, iff[and[blue,circle],size1])))))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:size3;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:blue;4:circle;4:size1
'λx.apply(and[apply(same_size,iota(x.s)),or[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[triangle,and[and[not[size3],size3],apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(not[blue],filter(filter(filter(x.s, rectangle), apply(size-lt,iota(filter(x.s, blue)))), or[not[green],size3]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:not[%s];4:green;4:size3
'λx.apply(and[circle,and[rectangle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, not[and[implies[and[size1,and[yellow,triangle]],and[triangle,yellow]],size3]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:triangle;4:yellow;4:size3
'λx.empty(filter(filter(x.s, yellow), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[circle,green],iota(filter(filter(filter(filter(filter(x.s, size2), blue), green), size2), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:green;4:size2;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), or[blue,implies[yellow,size2]]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:size2;4:rectangle
'λx.apply(or[or[apply(size-geq,iota(filter(filter(x.s, and[blue,and[not[rectangle],and[rectangle,nor[and[size2,triangle],green]]]]), triangle))),size1],not[and[size3,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:green;4:triangle;4:size1;4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[apply(size-gt,x.o),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[and[and[triangle,green],or[yellow,and[and[circle,size3],and[not[triangle],size3]]]],or[size3,nand[nor[triangle,or[not[size3],blue]],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:and[%s,%s];4:not[%s];4:triangle;4:size3;4:or[%s,%s];4:size3;4:nand[%s,%s];4:nor[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:size3;4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, size1), nor[size2,not[and[size1,yellow]]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:size1;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, size3), apply(same_shape,iota(x.s))), iff[and[blue,and[size1,size3]],green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size3;4:green;3:%s.s;2:x
'λx.apply(or[green,nor[green,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nor[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[or[triangle,or[apply(same_shape,x.o),apply(size-lt,x.o)]],and[size1,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[implies[blue,and[size1,implies[or[blue,not[not[nand[apply(same_size,x.o),size2]]]],triangle]]],triangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:size1;4:implies[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[green,and[size3,circle]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, not[size3]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size3
'λx.exists(circle, filter(x.s, and[not[or[and[triangle,triangle],green]],green]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:green;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, apply(size-lt,x.o)), apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(x.s, yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(x.s), filter(filter(x.s, size3), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, size1), apply(same_shape,iota(x.s))), not[rectangle]), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(iff[yellow,yellow],iota(filter(filter(x.s, size3), apply(same_size,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[not[nor[circle,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nor[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.exists(size3, filter(x.s, and[and[size1,yellow],green]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:green
'λx.forall(not[not[apply(same_size,iota(x.s))]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[triangle,or[triangle,or[apply(same_size,iota(x.s)),and[and[triangle,yellow],triangle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(not[nor[circle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), size1), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size2
'λx.apply(circle,iota(filter(x.s, and[or[yellow,circle],apply(same_size,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[apply(same_shape,x.o),rectangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, nor[and[yellow,triangle],circle]), and[and[size3,yellow],size1]), or[size1,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:circle;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:size1;4:or[%s,%s];4:size1;4:yellow
'λx.apply(and[not[size2],size2],iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, iff[and[size3,and[size1,circle]],rectangle]), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:circle;4:rectangle;4:green
'λx.contains(iota(x.s), filter(x.s, not[size2]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[and[triangle,rectangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), yellow), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:triangle
'λx.apply(nand[rectangle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(not[and[size2,and[size3,or[nor[triangle,rectangle],circle]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:or[%s,%s];4:nor[%s,%s];4:triangle;4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(or[size3,rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[apply(same_size,x.o),apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,not[size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, rectangle))),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[apply(same_shape,iota(x.s)),rectangle],iota(filter(filter(filter(x.s, yellow), triangle), nand[size3,nand[nand[and[or[size3,or[rectangle,blue]],green],blue],yellow]])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:nand[%s,%s];4:size3;4:nand[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:blue;4:green;4:blue;4:yellow
'λx.apply(and[rectangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, size1), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.empty(filter(filter(x.s, size1), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.empty(filter(filter(x.s, size1), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.empty(filter(filter(x.s, size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.empty(filter(filter(x.s, size2), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.empty(filter(filter(x.s, size3), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(and[blue,yellow],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(blue,iota(filter(x.s, and[not[circle],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:rectangle
'λx.forall(or[implies[apply(size-geq,iota(x.s)),triangle],blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(and[and[yellow,size1],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[size1,size1],iota(filter(filter(filter(filter(x.s, circle), size2), circle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:circle;4:circle
'λx.apply(not[not[blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, circle), triangle)), filter(x.s, apply(same_size,iota(filter(filter(x.s, green), and[and[rectangle,apply(size-leq,iota(x.s))],nand[size1,yellow]])))))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:yellow
'λx.apply(or[blue,triangle],iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), size1), size2), triangle), circle), size1), green)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:size2;4:triangle;4:circle;4:size1;4:green
'λx.apply(not[not[size1]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, implies[green,iff[not[rectangle],triangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:iff[%s,%s];4:not[%s];4:rectangle;4:triangle
'λx.exists(green, filter(filter(filter(filter(filter(filter(filter(x.s, not[size1]), and[nor[rectangle,size1],size1]), and[and[size1,apply(same_shape,iota(filter(x.s, nand[apply(same_color,x.o),rectangle])))],or[circle,rectangle]]), or[apply(same_shape,x.o),green]), size1), or[rectangle,implies[circle,yellow]]), circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:size1;4:size1;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:or[%s,%s];4:circle;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:size1;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:circle;4:yellow;4:circle
'λx.forall(and[apply(same_shape,iota(x.s)),and[nand[circle,yellow],and[circle,size1]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), implies[size1,circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size1;4:circle
'λx.apply(not[size3],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(green,filter(filter(x.s, and[circle,size1]), not[not[apply(same_color,iota(filter(x.s, not[size2])))]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(or[apply(size-gt,iota(x.s)),rectangle],iota(filter(x.s, or[and[or[blue,nor[size2,not[blue]]],nor[blue,size1]],iff[not[yellow],and[and[and[size2,triangle],circle],yellow]]])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:size2;4:not[%s];4:blue;4:nor[%s,%s];4:blue;4:size1;4:iff[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:circle;4:yellow
'λx.apply(or[size2,circle],iota(filter(filter(x.s, rectangle), not[and[and[not[or[size2,circle]],yellow],blue]])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:circle;4:yellow;4:blue
'λx.empty(filter(filter(x.s, implies[rectangle,triangle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:triangle;4:yellow
'λx.apply(or[or[apply(size-geq,iota(x.s)),size3],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:size1;1:%s.o;2:x
'λx.apply(iff[green,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.exists(not[circle], x.s)'	0:exists(%s, %s);4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(iff[not[size2],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(or[rectangle,and[triangle,and[size3,and[size1,and[size1,not[yellow]]]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(x.s, or[triangle,not[or[size3,apply(same_size,x.o)]]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(size-lt,iota(filter(filter(x.s, and[rectangle,size3]), size2))),apply(size-leq,iota(filter(filter(x.s, and[triangle,nand[size3,apply(size-gt,x.o)]]), or[green,green])))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(or[size1,and[or[triangle,apply(same_color,iota(x.s))],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(circle,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size1), and[size1,green]), or[rectangle,circle]), not[or[size3,nor[or[circle,size1],size3]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:green;4:or[%s,%s];4:rectangle;4:circle;4:not[%s];4:or[%s,%s];4:size3;4:nor[%s,%s];4:or[%s,%s];4:circle;4:size1;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, not[rectangle]), blue), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:blue;4:rectangle
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, size3), yellow), blue), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:blue;4:green
'λx.empty(filter(x.s, and[triangle,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow
'λx.exists(size2, filter(filter(filter(x.s, green), apply(size-leq,x.o)), or[green,triangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:green;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, green), implies[iff[or[circle,size2],yellow],implies[triangle,apply(size-leq,iota(x.s))]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:circle;4:size2;4:yellow;4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[rectangle,or[blue,size3]],iota(filter(filter(x.s, apply(same_shape,x.o)), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(size1,iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(apply(same_color,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(or[apply(same_shape,iota(filter(x.s, apply(same_color,iota(x.s))))),size2],filter(filter(filter(filter(x.s, triangle), circle), circle), size1))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:circle;4:size1
'λx.apply(blue,iota(filter(x.s, and[green,and[rectangle,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:green
'λx.exists(nor[apply(same_shape,x.o),triangle], filter(filter(x.s, triangle), circle))'	0:exists(%s, %s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(not[or[yellow,apply(same_size,iota(x.s))]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[rectangle,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size1,and[and[size3,size2],not[size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:not[%s];4:size2;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, rectangle), circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, yellow), nand[blue,or[green,rectangle]]), and[yellow,triangle]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:blue;4:or[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:yellow;4:triangle;4:rectangle
'λx.exists(triangle, filter(filter(filter(x.s, and[blue,blue]), green), circle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:green;4:circle
'λx.forall(circle,filter(x.s, and[circle,size3]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3
'λx.exists(apply(same_color,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(not[apply(size-gt,x.o)],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, or[size3,size2]), and[size2,yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2;4:and[%s,%s];4:size2;4:yellow
'λx.apply(iff[implies[rectangle,yellow],implies[size1,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:yellow;4:implies[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(nand[circle,or[blue,size1]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_color,iota(x.s)),yellow],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(or[nand[or[not[size2],not[and[size1,apply(same_color,x.o)]]],yellow],and[apply(size-leq,iota(x.s)),green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[circle,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,and[and[or[not[triangle],size3],not[or[size1,not[apply(same_shape,iota(filter(filter(x.s, not[implies[size3,size1]]), not[triangle])))]]]],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:size3;4:not[%s];4:or[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:size3;4:size1;4:not[%s];4:triangle;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, and[triangle,size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1
'λx.apply(and[size1,apply(size-lt,iota(filter(x.s, size3)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.empty(filter(filter(x.s, triangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(green,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(nor[size1,yellow],iota(filter(filter(x.s, nand[nor[apply(same_size,x.o),apply(same_shape,iota(filter(x.s, or[rectangle,not[not[size2]]])))],apply(size-leq,iota(filter(x.s, not[and[not[blue],yellow]])))]), blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:yellow;4:blue
'λx.apply(blue,iota(filter(filter(x.s, and[and[green,or[circle,triangle]],and[apply(same_size,iota(x.s)),triangle]]), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(nand[size1,not[not[size1]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_color,x.o)), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(not[apply(same_shape,iota(filter(x.s, size3)))],iota(filter(filter(filter(filter(x.s, yellow), not[triangle]), implies[rectangle,green]), yellow)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:triangle;4:implies[%s,%s];4:rectangle;4:green;4:yellow
'λx.contains(iota(filter(filter(filter(filter(x.s, apply(same_color,x.o)), yellow), circle), circle)), filter(filter(filter(x.s, triangle), iff[size1,size1]), triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:circle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:iff[%s,%s];4:size1;4:size1;4:triangle
'λx.empty(filter(x.s, and[blue,and[green,size1]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:size1
'λx.apply(green,iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.forall(rectangle,filter(x.s, or[size2,blue]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:blue
'λx.apply(nand[size2,not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[and[implies[size2,apply(size-geq,iota(x.s))],implies[circle,not[and[yellow,triangle]]]],or[nor[or[size2,green],size3],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size2;4:green;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[triangle,not[or[and[or[apply(same_size,x.o),size3],and[apply(same_shape,iota(x.s)),triangle]],or[triangle,and[apply(size-leq,x.o),not[implies[size3,yellow]]]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:implies[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(implies[size3,and[size3,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, yellow), apply(same_size,iota(filter(x.s, circle))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[size2,triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, triangle), and[and[triangle,blue],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:green
'λx.apply(nor[size1,blue],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, or[or[and[triangle,not[and[triangle,not[blue]]]],circle],and[and[size2,yellow],nor[size2,and[green,yellow]]]]), green), not[blue]), circle), and[circle,or[green,green]]), triangle), size1), green)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;4:circle;4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:nor[%s,%s];4:size2;4:and[%s,%s];4:green;4:yellow;4:green;4:not[%s];4:blue;4:circle;4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:green;4:triangle;4:size1;4:green
'λx.apply(iff[size2,blue],iota(filter(filter(x.s, yellow), nand[size3,size2])))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:size3;4:size2
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, size3), apply(same_size,x.o)), blue), circle), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:circle;4:rectangle
'λx.apply(implies[and[rectangle,rectangle],apply(size-geq,iota(filter(filter(filter(filter(x.s, size2), and[apply(same_shape,iota(x.s)),not[size3]]), size3), blue)))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;4:size3;4:blue;1:%s.o;2:x
'λx.exists(nand[size2,circle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(and[or[not[green],yellow],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(implies[green,blue],filter(x.s, size1))'	0:forall(%s,%s);4:implies[%s,%s];4:green;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nor[or[size3,size1],not[and[yellow,rectangle]]],iota(filter(filter(x.s, size3), nand[yellow,and[and[size1,blue],not[circle]]])))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size3;4:size1;4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:not[%s];4:circle
'λx.apply(or[size3,and[size1,size3]],iota(filter(x.s, and[rectangle,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle
'λx.contains(iota(filter(filter(x.s, circle), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;3:%s.s;2:x
'λx.exists(not[or[size2,circle]], filter(x.s, or[rectangle,green]))'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green
'λx.apply(or[and[size1,or[not[triangle],size3]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:triangle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(filter(x.s, yellow), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(and[size1,triangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[or[apply(same_size,x.o),size1]],iota(filter(filter(x.s, not[size3]), blue)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), blue), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:yellow
'λx.apply(and[not[triangle],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,implies[green,yellow]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[and[apply(same_size,x.o),blue],or[size2,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[and[nor[or[or[size3,not[green]],or[nand[not[size1],and[and[apply(same_color,x.o),or[size2,implies[size2,and[size3,triangle]]]],blue]],circle]],triangle],iff[and[and[size1,size3],or[circle,or[blue,size3]]],or[green,size3]]],size3],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:green;4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size2;4:implies[%s,%s];4:size2;4:and[%s,%s];4:size3;4:triangle;4:blue;4:circle;4:triangle;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:size3;4:or[%s,%s];4:green;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[apply(same_shape,iota(x.s)),rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, nand[and[implies[size1,size1],implies[rectangle,circle]],apply(same_size,x.o)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size1;4:size1;4:implies[%s,%s];4:rectangle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[apply(size-leq,x.o),size1],iota(filter(filter(filter(x.s, size1), rectangle), size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:size1
'λx.apply(nor[triangle,apply(same_color,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size2,or[not[apply(size-leq,iota(x.s))],circle]],iota(filter(filter(filter(x.s, and[size3,rectangle]), blue), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;4:blue;4:rectangle
'λx.apply(and[green,apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[yellow,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, green), and[circle,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:yellow
'λx.empty(filter(filter(x.s, green), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(not[not[or[size2,triangle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[yellow,and[size1,apply(same_color,iota(filter(filter(filter(x.s, circle), blue), rectangle)))]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(and[and[rectangle,triangle],circle],iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(nor[apply(size-geq,iota(x.s)),or[size3,triangle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[not[size1],and[circle,apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, rectangle), green), blue), implies[and[yellow,yellow],triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:blue;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:triangle
'λx.forall(blue,x.s)'	0:forall(%s,%s);4:blue;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(blue,iota(filter(filter(x.s, and[not[size3],green]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:green;4:green
'λx.forall(apply(same_color,iota(x.s)),filter(x.s, or[nor[not[implies[not[size3],size1]],yellow],and[size3,nor[triangle,or[size1,rectangle]]]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:implies[%s,%s];4:not[%s];4:size3;4:size1;4:yellow;4:and[%s,%s];4:size3;4:nor[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:rectangle
'λx.empty(filter(filter(x.s, yellow), apply(same_size,iota(filter(filter(filter(x.s, size1), green), or[size3,circle])))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:or[%s,%s];4:size3;4:circle
'λx.contains(x.o, filter(filter(x.s, apply(size-leq,iota(x.s))), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, apply(size-gt,x.o)))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(nor[and[and[rectangle,circle],size1],blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[and[blue,size3],green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:green
'λx.apply(and[size3,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.exists(nand[yellow,and[green,triangle]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.apply(and[size1,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, circle), and[or[green,or[blue,circle]],size2]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:circle;4:size2
'λx.apply(nand[and[rectangle,not[and[green,or[size1,rectangle]]]],apply(size-lt,x.o)],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,nor[circle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:nor[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, size3), blue), apply(same_size,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[circle]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size3
'λx.empty(filter(x.s, and[rectangle,circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(implies[size2,circle],iota(filter(filter(x.s, circle), not[triangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:triangle
'λx.contains(iota(filter(x.s, green)), filter(filter(filter(x.s, blue), green), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:blue
'λx.forall(apply(same_color,iota(filter(filter(x.s, size2), and[size1,and[yellow,and[yellow,apply(size-leq,x.o)]]]))),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(circle,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.forall(blue,filter(filter(filter(x.s, rectangle), and[circle,blue]), implies[and[blue,apply(same_size,x.o)],not[green]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:circle;4:blue;4:implies[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:green
'λx.apply(circle,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, not[apply(same_shape,x.o)]), triangle), circle), nor[size1,triangle]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:circle;4:nor[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[or[and[yellow,and[nor[iff[nand[and[green,or[size2,triangle]],and[triangle,size3]],or[yellow,size3]],apply(same_color,iota(x.s))],triangle]],implies[blue,apply(same_color,x.o)]],triangle],iota(filter(filter(filter(x.s, yellow), iff[or[rectangle,size2],green]), or[size3,size3])))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:green;4:or[%s,%s];4:size3;4:size3
'λx.apply(and[and[size3,and[green,or[rectangle,size1]]],nand[blue,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:size1;4:nand[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[apply(same_color,iota(x.s))]],iota(filter(filter(x.s, green), nand[size1,or[implies[not[green],and[not[and[and[size2,not[not[or[circle,and[circle,not[apply(same_color,x.o)]]]]]],and[yellow,triangle]]],not[size2]]],size3]])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:size1;4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:size2;4:size3
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), apply(same_color,iota(filter(x.s, blue)))), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(and[size3,not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[or[rectangle,and[green,yellow]],and[yellow,blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:yellow;4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size3,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, not[size3]), or[size2,or[size2,yellow]]), and[rectangle,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:size2;4:or[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:rectangle;4:yellow
'λx.apply(and[not[apply(same_size,iota(x.s))],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[or[circle,not[triangle]],rectangle]), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:triangle;4:rectangle;4:blue
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(filter(x.s, and[circle,yellow]), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:rectangle
'λx.exists(iff[and[or[not[and[circle,nor[apply(same_size,x.o),or[green,and[size2,triangle]]]]],rectangle],circle],and[green,size1]], filter(x.s, apply(size-lt,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:size2;4:triangle;4:rectangle;4:circle;4:and[%s,%s];4:green;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), and[blue,and[or[iff[rectangle,triangle],green],blue]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:triangle;4:green;4:blue;3:%s.s;2:x
'λx.forall(or[blue,not[and[triangle,or[and[blue,green],rectangle]]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:rectangle;3:%s.s;2:x
'λx.apply(and[or[blue,yellow],yellow],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(apply(same_size,x.o),filter(x.s, size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(triangle, filter(filter(filter(filter(x.s, not[apply(same_size,iota(filter(x.s, yellow)))]), and[size3,blue]), size3), green))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size3;4:blue;4:size3;4:green
'λx.apply(and[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, or[size1,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:circle
'λx.forall(nor[and[iff[and[blue,size3],not[yellow]],or[or[not[not[size3]],blue],green]],circle],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:size3;4:not[%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:size3;4:blue;4:green;4:circle;3:%s.s;2:x
'λx.apply(not[and[apply(same_size,x.o),blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[green,and[not[size3],or[size2,nand[size1,size3]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:size2;4:nand[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[size2,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, triangle), size2), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, size1), and[apply(same_size,iota(x.s)),triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.empty(filter(x.s, and[rectangle,apply(same_size,iota(x.s))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, and[yellow,yellow]), yellow), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow;4:yellow;4:blue
'λx.apply(nor[implies[size3,triangle],and[or[size2,not[blue]],not[and[size1,iff[and[green,triangle],apply(same_shape,iota(x.s))]]]]],iota(filter(filter(filter(x.s, size1), size3), circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:blue;4:not[%s];4:and[%s,%s];4:size1;4:iff[%s,%s];4:and[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:circle
'λx.apply(implies[and[not[yellow],and[circle,circle]],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:circle;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nand[or[or[and[or[triangle,size1],size2],triangle],and[yellow,implies[yellow,blue]]],and[blue,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:size2;4:triangle;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, green), and[and[and[circle,apply(same_size,x.o)],triangle],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:blue
'λx.apply(nand[green,rectangle],iota(filter(x.s, and[size2,green])))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green
'λx.empty(filter(filter(filter(filter(x.s, rectangle), size3), triangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:triangle;4:triangle
'λx.apply(green,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size1), and[size2,or[and[or[and[or[rectangle,yellow],triangle],size3],circle],triangle]]), yellow), or[and[and[green,circle],size2],apply(same_size,x.o)]), and[size3,triangle]), rectangle), or[triangle,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:triangle;4:size3;4:circle;4:triangle;4:yellow;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:triangle;4:rectangle;4:or[%s,%s];4:triangle;4:size3
'λx.forall(size3,filter(filter(filter(x.s, or[rectangle,not[apply(same_shape,iota(filter(x.s, rectangle)))]]), triangle), size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size3
'λx.apply(and[and[yellow,circle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), rectangle), or[nor[green,apply(same_shape,iota(x.s))],triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(nand[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[and[size3,blue],size3],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:blue;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(size-lt,iota(filter(filter(filter(x.s, size3), size3), size1)))), and[circle,size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:size1;4:and[%s,%s];4:circle;4:size2
'λx.apply(or[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, and[not[blue],rectangle]), size2), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:rectangle;4:size2;4:rectangle
'λx.apply(or[blue,apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[circle,not[size2]]],iota(filter(filter(filter(x.s, size2), yellow), green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:green
'λx.apply(or[size2,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(nand[green,size3], filter(filter(x.s, triangle), and[blue,green]))'	0:exists(%s, %s);4:nand[%s,%s];4:green;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:blue;4:green
'λx.contains(iota(filter(filter(x.s, or[apply(same_shape,x.o),yellow]), not[apply(same_shape,iota(filter(x.s, size1)))])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(and[or[and[blue,or[triangle,green]],triangle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:green;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(or[and[size1,not[size3]],size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[rectangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.forall(and[or[blue,rectangle],and[and[size2,size3],circle]],filter(x.s, blue))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[or[circle,size3],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[and[triangle,green],green],iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(and[apply(size-gt,x.o),yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[implies[nor[rectangle,size3],yellow],green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:rectangle;4:size3;4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, or[size1,size3]), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3;4:triangle
'λx.contains(iota(filter(filter(x.s, size2), apply(same_size,iota(x.s)))), filter(x.s, and[yellow,apply(same_shape,iota(filter(x.s, yellow)))]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[and[and[green,size1],size2],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:size2;4:size3;1:%s.o;2:x
'λx.apply(nor[apply(size-lt,iota(x.s)),size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(filter(x.s, and[yellow,or[rectangle,apply(same_size,iota(x.s))]]), and[and[size2,or[yellow,apply(same_size,x.o)]],yellow]), not[implies[size3,blue]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:not[%s];4:implies[%s,%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(size1,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.empty(filter(filter(filter(filter(filter(x.s, green), yellow), size1), rectangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1;4:rectangle;4:circle
'λx.apply(and[and[and[apply(same_size,iota(x.s)),circle],green],rectangle],iota(filter(filter(x.s, apply(size-lt,x.o)), and[size2,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size2;4:size2
'λx.apply(size1,iota(filter(filter(x.s, green), nand[size2,or[implies[not[green],and[not[and[and[size2,not[not[or[circle,and[circle,not[apply(same_color,x.o)]]]]]],and[yellow,triangle]]],not[size2]]],size3]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:size2;4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:size2;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(not[triangle],iota(filter(x.s, implies[size3,iff[circle,and[green,size3]]])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:iff[%s,%s];4:circle;4:and[%s,%s];4:green;4:size3
'λx.apply(and[yellow,blue],iota(filter(filter(filter(x.s, blue), yellow), apply(same_color,iota(filter(filter(x.s, size3), green))))))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, triangle), and[circle,yellow]), apply(same_size,iota(x.s))), apply(same_shape,iota(x.s))), implies[green,size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:size1
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), yellow), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:blue
'λx.apply(not[blue],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(not[blue],iota(filter(filter(filter(filter(x.s, triangle), not[size2]), and[size3,green]), size3)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size2;4:and[%s,%s];4:size3;4:green;4:size3
'λx.apply(or[apply(same_shape,x.o),apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(iff[not[yellow],rectangle],filter(filter(x.s, green), size2))'	0:forall(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(and[size1,and[size3,and[and[blue,size2],or[size2,or[size3,triangle]]]]],iota(filter(filter(filter(filter(filter(x.s, or[triangle,size3]), yellow), yellow), green), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:yellow;4:yellow;4:green;4:size1
'λx.apply(not[green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), not[and[size1,blue]]), or[green,yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:and[%s,%s];4:size1;4:blue;4:or[%s,%s];4:green;4:yellow
'λx.apply(and[size1,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, iff[size1,rectangle]), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:rectangle;4:rectangle
'λx.apply(and[not[triangle],and[size2,and[and[rectangle,and[and[size1,size3],apply(same_shape,x.o)]],and[iff[circle,circle],size2]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:circle;4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, size2), size1), size2), and[yellow,iff[and[nand[size2,rectangle],yellow],apply(same_color,x.o)]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:size2;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:rectangle;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, rectangle), size2), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:green
'λx.apply(or[size1,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[size1,and[or[yellow,rectangle],or[or[circle,size2],or[and[and[blue,size3],green],size1]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:circle;4:size2;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:green;4:size1;1:%s.o;2:x
'λx.apply(and[and[and[triangle,green],apply(same_shape,iota(filter(x.s, circle)))],not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.forall(and[implies[and[circle,size2],triangle],blue],filter(filter(filter(x.s, and[triangle,circle]), yellow), triangle))'	0:forall(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:size2;4:triangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:yellow;4:triangle
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), triangle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:triangle
'λx.apply(not[and[not[apply(size-geq,x.o)],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size3), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.forall(blue,filter(filter(x.s, size2), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.forall(blue,filter(filter(x.s, size2), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.exists(circle, filter(x.s, yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[size3,rectangle], filter(filter(x.s, and[yellow,and[implies[and[circle,rectangle],apply(same_shape,iota(x.s))],blue]]), nor[triangle,and[size3,green]]))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:green
'λx.apply(apply(size-lt,x.o),iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.exists(or[circle,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), not[rectangle]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle;4:rectangle
'λx.apply(nor[nor[and[size3,triangle],green],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:green;4:circle;1:%s.o;2:x
'λx.apply(and[size3,or[triangle,blue]],iota(filter(x.s, or[triangle,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:triangle
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, circle), and[apply(size-leq,x.o),apply(same_size,x.o)]), blue), and[and[yellow,size3],size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:size3
'λx.exists(implies[size2,green], filter(x.s, size2))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size2,filter(filter(filter(x.s, triangle), circle), nor[rectangle,rectangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:nor[%s,%s];4:rectangle;4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), apply(size-geq,iota(x.s)))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[yellow,size3],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:green;1:%s.o;2:x
'λx.apply(and[triangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[nand[and[circle,blue],rectangle],green],iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:blue;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(iff[or[apply(same_color,iota(filter(x.s, rectangle))),and[size1,not[size1]]],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(not[apply(size-lt,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, apply(size-lt,x.o)), and[size2,size2]), not[apply(same_color,iota(filter(x.s, and[apply(same_size,iota(filter(filter(x.s, apply(same_color,iota(x.s))), circle))),circle])))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size2;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(green,iota(filter(filter(filter(x.s, yellow), not[rectangle]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:rectangle;4:triangle
'λx.apply(and[or[rectangle,blue],and[green,iff[green,or[blue,size3]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:green;4:iff[%s,%s];4:green;4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size2,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.exists(or[triangle,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.apply(or[triangle,not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[and[not[yellow],circle],or[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:circle;4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[green,yellow])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.apply(nor[circle,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(filter(filter(filter(filter(x.s, rectangle), blue), size1), triangle), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:size1;4:triangle;4:circle
'λx.exists(apply(same_size,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[rectangle,and[and[yellow,circle],implies[size3,size2]]],iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:implies[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(implies[size2,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(iff[circle,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[and[or[green,implies[implies[and[rectangle,apply(same_size,x.o)],and[and[yellow,size2],and[nor[size3,and[apply(same_shape,x.o),and[yellow,green]]],circle]]],and[circle,implies[circle,size2]]]],size2],size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:green;4:circle;4:and[%s,%s];4:circle;4:implies[%s,%s];4:circle;4:size2;4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[and[size3,and[green,or[green,green]]],size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:green;4:size3
'λx.apply(not[not[rectangle]],iota(filter(filter(filter(x.s, rectangle), iff[blue,not[rectangle]]), blue)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:blue;4:not[%s];4:rectangle;4:blue
'λx.apply(size1,iota(filter(x.s, and[not[size2],and[apply(size-leq,iota(x.s)),green]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(not[or[circle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, and[triangle,circle]), circle), not[size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:circle;4:not[%s];4:size3
'λx.apply(or[or[apply(size-lt,x.o),triangle],and[circle,nor[circle,apply(same_color,x.o)]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:circle;4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[size1,size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size1,size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[not[size1],size3]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(filter(filter(x.s, or[green,size3]), size3), rectangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3;4:size3;4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, green), triangle), circle), or[size3,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:circle;4:or[%s,%s];4:size3;4:rectangle
'λx.apply(and[and[size2,size1],or[triangle,yellow]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(filter(x.s, and[blue,and[iff[and[blue,yellow],not[circle]],triangle]]), not[triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:not[%s];4:circle;4:triangle;4:not[%s];4:triangle
'λx.apply(and[size2,green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[nor[or[green,nor[triangle,size2]],not[size2]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:green;4:nor[%s,%s];4:triangle;4:size2;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size2],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, and[or[not[yellow],size1],triangle]), size2), nor[rectangle,rectangle]), rectangle), apply(same_size,iota(filter(filter(x.s, size2), or[and[size3,size2],blue])))), rectangle), blue), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:size1;4:triangle;4:size2;4:nor[%s,%s];4:rectangle;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:size3;4:size2;4:blue;4:rectangle;4:blue;4:blue
'λx.apply(and[and[and[and[triangle,apply(same_color,iota(x.s))],yellow],yellow],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[circle,size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(rectangle,filter(filter(filter(x.s, nor[nand[yellow,triangle],apply(same_shape,iota(filter(x.s, or[rectangle,circle])))]), apply(same_size,x.o)), not[and[size2,green]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nand[%s,%s];4:yellow;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size2;4:green
'λx.exists(or[or[rectangle,triangle],green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:green;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(and[rectangle,nand[triangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.forall(nor[green,size3],filter(filter(filter(x.s, size2), and[rectangle,size2]), blue))'	0:forall(%s,%s);4:nor[%s,%s];4:green;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:size2;4:blue
'λx.apply(and[and[apply(same_size,x.o),size1],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[blue,and[green,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[triangle,and[rectangle,size3]], filter(filter(x.s, rectangle), or[size1,circle]))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size1;4:circle
'λx.apply(not[triangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[or[nand[yellow,triangle],and[or[size1,or[rectangle,blue]],size3]]],iota(filter(filter(filter(filter(filter(x.s, yellow), triangle), green), size3), triangle)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:nand[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:green;4:size3;4:triangle
'λx.empty(filter(filter(x.s, green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.exists(and[or[size1,circle],size1], filter(filter(x.s, triangle), and[not[triangle],circle]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:size1;4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:triangle;4:circle
'λx.apply(and[blue,not[or[size2,size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.exists(not[blue], filter(filter(filter(x.s, size2), apply(same_size,iota(x.s))), not[and[and[and[yellow,rectangle],triangle],circle]]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:triangle;4:circle
'λx.exists(not[implies[and[size1,and[yellow,size2]],and[and[size2,nand[circle,size2]],yellow]]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:and[%s,%s];4:size2;4:nand[%s,%s];4:circle;4:size2;4:yellow;3:%s.s;2:x
'λx.apply(iff[yellow,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,x.o),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(iff[size2,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(iff[or[yellow,circle],or[rectangle,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(or[and[yellow,size1],rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(iff[and[and[and[not[yellow],and[or[rectangle,apply(same_shape,iota(x.s))],apply(same_color,iota(x.s))]],blue],or[yellow,rectangle]],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:yellow;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[green,not[and[apply(same_size,iota(filter(filter(filter(filter(filter(x.s, not[rectangle]), size2), size3), and[yellow,rectangle]), or[yellow,green]))),and[and[blue,green],yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size2;4:size3;4:and[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:yellow;4:green;4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, implies[size1,circle]), circle), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:circle;4:circle;4:yellow
'λx.apply(nor[size1,iff[size2,and[size2,and[not[apply(size-leq,x.o)],green]]]],iota(filter(filter(filter(filter(x.s, not[size2]), rectangle), size1), circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:iff[%s,%s];4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle;4:size1;4:circle
'λx.apply(and[size1,green],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[and[and[circle,blue],or[size2,rectangle]],apply(same_shape,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:or[%s,%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[green,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.apply(and[and[size1,and[size1,triangle]],not[circle]],iota(filter(filter(filter(x.s, rectangle), circle), green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:triangle;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:green
'λx.apply(apply(same_color,x.o),iota(filter(x.s, nand[and[or[blue,size1],apply(same_shape,iota(x.s))],size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.exists(and[blue,or[not[yellow],or[and[yellow,or[apply(same_color,iota(filter(x.s, size3))),size2]],or[yellow,size2]]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:or[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, not[yellow]), yellow), and[green,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:yellow;4:and[%s,%s];4:green;4:triangle
'λx.apply(not[and[green,green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[triangle,circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(apply(same_size,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_size,iota(filter(filter(filter(filter(filter(x.s, size3), and[circle,rectangle]), circle), size2), green)))), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:circle;4:rectangle;4:circle;4:size2;4:green;4:size2
'λx.apply(and[apply(same_shape,iota(x.s)),not[size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, or[triangle,and[circle,not[size1]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:not[%s];4:size1
'λx.contains(iota(filter(x.s, blue)), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(x.s, apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), apply(same_size,iota(filter(filter(filter(x.s, not[and[triangle,triangle]]), size2), rectangle))))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:size2;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(x.s, nand[and[apply(same_size,x.o),apply(size-lt,iota(x.s))],circle]), triangle), or[not[triangle],nand[green,apply(same_shape,iota(filter(filter(x.s, nor[nand[size2,rectangle],blue]), yellow)))]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:circle;4:triangle;4:or[%s,%s];4:not[%s];4:triangle;4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nand[%s,%s];4:size2;4:rectangle;4:blue;4:yellow
'λx.apply(rectangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(size1,x.s)'	0:forall(%s,%s);4:size1;3:%s.s;2:x
'λx.forall(size2,x.s)'	0:forall(%s,%s);4:size2;3:%s.s;2:x
'λx.forall(size3,x.s)'	0:forall(%s,%s);4:size3;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, nor[rectangle,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:size3
'λx.exists(not[triangle], x.s)'	0:exists(%s, %s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[triangle]), and[triangle,and[green,and[yellow,green]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:green
'λx.apply(and[and[size1,rectangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[rectangle,nand[size1,apply(same_size,iota(filter(filter(x.s, size1), blue)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size3), size3), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:size1
'λx.apply(and[or[green,rectangle],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[circle,not[yellow]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(and[iff[blue,triangle],yellow],iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[size2,size3],iota(filter(filter(filter(x.s, rectangle), or[triangle,green]), implies[triangle,triangle])))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:green;4:implies[%s,%s];4:triangle;4:triangle
'λx.apply(nand[or[and[rectangle,size1],blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:blue;4:triangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, nor[not[circle],and[triangle,triangle]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(not[apply(size-lt,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), filter(filter(x.s, not[size3]), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_color,iota(filter(x.s, or[and[size1,size2],apply(same_size,x.o)])))), or[circle,apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(nand[or[size2,apply(same_shape,iota(filter(x.s, size3)))],triangle],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, apply(size-gt,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[green,triangle],circle],iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(size1,iota(filter(filter(filter(x.s, triangle), blue), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:size3
'λx.apply(and[circle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[or[apply(same_shape,iota(x.s)),or[rectangle,rectangle]],nor[size3,implies[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle;4:nor[%s,%s];4:size3;4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[circle,blue],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, or[green,apply(same_color,x.o)]), size1), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[triangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(implies[green,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,or[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, blue), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(and[green,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, yellow), blue), circle), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(or[yellow,or[or[yellow,size1],and[circle,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(filter(x.s, green), nand[size2,or[implies[not[green],and[not[and[and[size2,not[not[or[circle,and[green,not[apply(same_color,x.o)]]]]]],and[yellow,triangle]]],not[size2]]],size3]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:size2;4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:size2;4:size3
'λx.apply(or[size3,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(or[blue,not[apply(same_size,iota(x.s))]],filter(x.s, size1))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(iff[not[blue],size1],filter(x.s, size1))'	0:forall(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, yellow), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(nor[and[green,size1],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.exists(yellow, filter(filter(filter(x.s, rectangle), apply(same_shape,x.o)), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(and[blue,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, blue), size3), nand[triangle,triangle]), or[triangle,green]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:nand[%s,%s];4:triangle;4:triangle;4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(nor[yellow,blue],iota(filter(x.s, and[triangle,circle])))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.apply(rectangle,iota(filter(x.s, or[or[size2,size3],green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size2;4:size3;4:green
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(and[not[nand[iff[yellow,size2],blue]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:iff[%s,%s];4:yellow;4:size2;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[green,rectangle],iota(filter(filter(x.s, rectangle), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, size1), apply(same_size,x.o)), iff[apply(size-geq,iota(filter(x.s, size3))),or[size2,circle]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[blue,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[circle,rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[yellow,or[or[circle,blue],yellow]],iota(filter(filter(x.s, green), or[green,green])))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:green;4:green
'λx.contains(x.o, filter(x.s, not[or[and[circle,size3],not[blue]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:size3;4:not[%s];4:blue
'λx.apply(and[and[size3,or[green,rectangle]],apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:green;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,or[green,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(implies[triangle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[and[size3,and[implies[yellow,nand[blue,yellow]],and[not[green],yellow]]],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:nand[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:not[%s];4:green;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[yellow,not[not[triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[circle,or[size2,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[size2,not[and[circle,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[size2,or[and[size1,size1],size1]],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:size1;4:size1;4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.empty(filter(x.s, and[size2,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.empty(filter(x.s, and[size1,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.exists(and[and[size1,rectangle],or[size2,and[not[size3],size3]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size3;4:size3;3:%s.s;2:x
'λx.apply(and[blue,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), apply(same_color,x.o)), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.apply(and[and[or[blue,size1],and[blue,and[size2,blue]]],and[triangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:blue;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), apply(size-geq,x.o)), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.forall(and[triangle,blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.forall(green,filter(filter(filter(x.s, blue), size2), size3))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:size3
'λx.forall(size1,filter(x.s, or[size2,circle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle
'λx.empty(filter(x.s, and[not[apply(same_size,iota(x.s))],size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.exists(nor[not[size1],rectangle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:not[%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(nand[yellow,or[size2,apply(size-gt,x.o)]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(size2,iota(filter(filter(filter(x.s, or[triangle,size3]), and[blue,not[size3]]), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:blue;4:not[%s];4:size3;4:yellow
'λx.contains(x.o, filter(filter(filter(x.s, rectangle), size1), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:triangle
'λx.apply(or[iff[size3,not[nor[apply(same_size,x.o),or[blue,yellow]]]],implies[or[or[apply(size-gt,x.o),not[size2]],triangle],blue]],iota(filter(filter(x.s, and[and[and[nand[size2,not[rectangle]],iff[size2,yellow]],rectangle],circle]), nor[apply(same_size,x.o),blue])))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size3;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:blue;4:yellow;4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:size2;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:not[%s];4:rectangle;4:iff[%s,%s];4:size2;4:yellow;4:rectangle;4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(and[apply(same_color,x.o),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(nand[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size1,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[yellow,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), apply(size-leq,iota(filter(filter(filter(x.s, or[and[circle,circle],size3]), or[not[nor[rectangle,and[rectangle,size2]]],implies[or[apply(size-geq,x.o),implies[implies[blue,size1],blue]],blue]]), yellow)))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:size3;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:size2;4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:implies[%s,%s];4:implies[%s,%s];4:blue;4:size1;4:blue;4:blue;4:yellow
'λx.contains(iota(x.s), filter(x.s, and[triangle,nand[size1,yellow]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size1;4:yellow
'λx.apply(or[and[iff[and[iff[size3,apply(same_size,x.o)],and[iff[circle,and[circle,not[and[not[and[and[and[rectangle,size2],yellow],and[size3,rectangle]]],and[green,yellow]]]]],rectangle]],or[apply(same_color,x.o),green]],not[and[and[yellow,size1],not[circle]]]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:yellow;4:and[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:green;4:yellow;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(nor[rectangle,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[circle,triangle],iota(filter(filter(x.s, size3), nor[or[apply(same_color,iota(x.s)),implies[triangle,not[blue]]],size1])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:not[%s];4:blue;4:size1
'λx.apply(green,iota(filter(x.s, implies[rectangle,size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:size1
'λx.empty(filter(filter(filter(x.s, size3), size1), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:yellow
'λx.apply(or[green,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), yellow), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue
'λx.apply(not[and[triangle,size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[triangle,size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size3,rectangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[not[or[and[yellow,size2],triangle]]],iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, apply(same_size,x.o)), green), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:green
'λx.apply(triangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, apply(size-lt,x.o)), not[apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_color,x.o),blue],iota(filter(filter(filter(x.s, yellow), green), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:size1
'λx.exists(and[nand[size3,not[and[nand[implies[green,size1],circle],apply(same_size,iota(x.s))]]],or[blue,yellow]], filter(x.s, size3))'	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:green;4:size1;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(implies[and[and[yellow,size3],blue],nand[circle,green]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:blue;4:nand[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_shape,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(yellow,iota(filter(x.s, or[circle,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(size1,iota(filter(x.s, apply(size-lt,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size1],iota(filter(filter(x.s, apply(size-gt,x.o)), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3
'λx.apply(implies[circle,and[apply(same_size,x.o),triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[and[apply(same_shape,x.o),size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,and[and[size3,not[green]],size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:green;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_size,iota(x.s)))), filter(x.s, and[blue,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(or[circle,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, implies[implies[and[and[and[apply(same_shape,iota(filter(filter(x.s, nand[not[rectangle],not[triangle]]), size1))),green],apply(size-geq,x.o)],or[not[circle],and[not[yellow],apply(same_color,x.o)]]],blue],size1]), and[size2,circle]), blue), circle), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:triangle;4:size1;4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size1;4:and[%s,%s];4:size2;4:circle;4:blue;4:circle;4:yellow
'λx.apply(and[nor[yellow,or[or[blue,size2],not[iff[implies[green,and[and[apply(same_color,x.o),size1],size2]],or[rectangle,and[size1,size3]]]]]],apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, or[rectangle,yellow]), rectangle), apply(same_size,iota(filter(x.s, or[green,and[rectangle,or[or[size1,rectangle],size1]]])))), size3), rectangle), green)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:blue;4:size2;4:not[%s];4:iff[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:yellow;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:size1;4:size3;4:rectangle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), size2), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:size3
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;1:%s.o;2:x
'λx.exists(yellow, filter(filter(filter(x.s, size1), nor[green,green]), or[blue,rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:green;4:green;4:or[%s,%s];4:blue;4:rectangle
'λx.exists(or[blue,yellow], filter(x.s, not[yellow]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(and[triangle,and[and[and[apply(size-leq,x.o),green],yellow],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green;4:yellow;4:green;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[iff[rectangle,blue],not[and[not[yellow],size1]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:size1
'λx.apply(or[implies[circle,size1],size1],iota(filter(filter(filter(x.s, and[or[circle,not[or[not[apply(same_size,iota(filter(filter(x.s, size1), and[and[blue,and[rectangle,or[iff[yellow,size2],size1]]],or[triangle,and[rectangle,circle]]])))],not[green]]]],nand[yellow,and[blue,rectangle]]]), not[yellow]), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:size2;4:size1;4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:circle;4:not[%s];4:green;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:rectangle;4:not[%s];4:yellow;4:rectangle
'λx.apply(and[size1,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[apply(same_shape,iota(filter(x.s, and[green,green]))),apply(size-lt,iota(filter(filter(x.s, green), blue)))],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, or[yellow,blue]), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue;4:circle
'λx.apply(or[not[size3],and[blue,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[yellow,size3],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), triangle), and[apply(same_size,iota(filter(filter(x.s, yellow), green))),size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:size1
'λx.apply(or[size2,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(or[green,size3],filter(filter(filter(x.s, triangle), and[apply(same_shape,x.o),and[yellow,yellow]]), rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:yellow;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, yellow), blue), or[triangle,rectangle]), and[green,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:or[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[apply(same_shape,x.o),and[size1,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(implies[yellow,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, apply(size-lt,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_size,iota(filter(x.s, and[and[apply(same_color,iota(filter(filter(x.s, and[size2,size1]), yellow))),and[size2,and[blue,circle]]],not[triangle]]))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;4:yellow;4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:circle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(nor[size3,not[apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[rectangle,or[not[and[size1,triangle]],and[size3,or[size3,size3]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:size3;4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, and[circle,iff[or[not[circle],size3],blue]]), not[and[not[green],size3]]), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:size3;4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:size3;4:green;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), and[blue,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:blue;4:size2
'λx.forall(triangle,filter(x.s, and[green,not[triangle]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:triangle
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, size2), apply(same_color,x.o)), and[or[blue,and[and[apply(same_shape,iota(x.s)),and[yellow,not[yellow]]],blue]],not[apply(same_size,iota(x.s))]]), rectangle), nor[and[size2,size2],size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:yellow;4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size2
'λx.contains(x.o, filter(x.s, or[not[size3],not[blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size3;4:not[%s];4:blue
'λx.apply(blue,iota(filter(x.s, iff[circle,or[blue,yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:or[%s,%s];4:blue;4:yellow
'λx.apply(nand[not[and[not[implies[iff[and[apply(same_size,iota(filter(filter(filter(filter(x.s, yellow), apply(same_size,x.o)), green), nor[and[circle,green],green]))),nand[size3,rectangle]],circle],not[apply(same_color,x.o)]]],iff[and[size3,rectangle],triangle]]],and[implies[blue,not[blue]],rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:nor[%s,%s];4:and[%s,%s];4:circle;4:green;4:green;4:nand[%s,%s];4:size3;4:rectangle;4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:blue;4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(not[apply(same_shape,iota(filter(filter(x.s, and[rectangle,and[size2,rectangle]]), and[and[yellow,blue],size2])))], filter(x.s, rectangle))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(x.s, and[or[implies[and[and[size3,circle],circle],circle],and[circle,not[rectangle]]],green]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:circle;4:circle;4:and[%s,%s];4:circle;4:not[%s];4:rectangle;4:green;4:rectangle
'λx.apply(iff[not[blue],and[apply(size-lt,iota(x.s)),yellow]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[apply(same_color,iota(x.s)),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[or[blue,yellow],yellow]), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:yellow;4:circle
'λx.apply(or[green,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[apply(same_color,x.o),circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(implies[green,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[and[triangle,circle],green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:green
'λx.apply(nor[size1,size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[or[nand[or[not[size2],not[and[size1,apply(same_color,x.o)]]],yellow],not[rectangle]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:not[%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[size2,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(filter(filter(x.s, green), size2), size2)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:size2
'λx.empty(filter(x.s, and[apply(same_shape,x.o),triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(filter(x.s, size3)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[apply(same_size,iota(filter(filter(x.s, size1), blue)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, apply(same_shape,iota(x.s))), or[size3,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2
'λx.apply(and[yellow,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), not[blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue
'λx.apply(not[blue],x.o)'	0:apply(%s,%s);4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, nor[nor[size2,not[triangle]],size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nor[%s,%s];4:size2;4:not[%s];4:triangle;4:size3
'λx.contains(iota(filter(x.s, implies[not[rectangle],size1])), filter(filter(filter(x.s, or[or[green,apply(size-geq,iota(x.s))],yellow]), triangle), or[circle,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:rectangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:yellow;4:triangle;4:or[%s,%s];4:circle;4:circle
'λx.apply(and[iff[apply(same_size,iota(x.s)),apply(same_size,x.o)],iff[triangle,implies[rectangle,yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:triangle;4:implies[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, not[and[blue,rectangle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:rectangle
'λx.apply(or[apply(same_shape,x.o),size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(nor[size1,triangle],iota(filter(x.s, iff[yellow,and[size2,green]])))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:green
'λx.exists(iff[apply(same_size,iota(x.s)),apply(same_color,iota(filter(filter(x.s, rectangle), green)))], filter(x.s, triangle))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[apply(same_shape,x.o)],iota(filter(filter(x.s, yellow), or[and[yellow,apply(same_color,iota(x.s))],or[blue,or[triangle,size1]]])))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size1
'λx.forall(nand[iff[implies[green,yellow],circle],size2],filter(filter(filter(x.s, nand[and[triangle,size1],size3]), not[yellow]), nand[blue,not[rectangle]]))'	0:forall(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:green;4:yellow;4:circle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:size3;4:not[%s];4:yellow;4:nand[%s,%s];4:blue;4:not[%s];4:rectangle
'λx.apply(and[and[blue,and[size2,size3]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:size3;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, nand[size2,size3]), apply(same_color,iota(filter(x.s, and[circle,nand[and[not[size1],rectangle],blue]])))), size3), yellow), and[yellow,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:rectangle;4:blue;4:size3;4:yellow;4:and[%s,%s];4:yellow;4:size3
'λx.exists(nand[size1,blue], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.exists(size2, filter(filter(filter(filter(x.s, blue), yellow), or[not[blue],and[rectangle,green]]), circle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:or[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:rectangle;4:green;4:circle
'λx.apply(or[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(filter(filter(filter(filter(filter(x.s, apply(size-gt,x.o)), blue), and[or[size2,apply(same_color,iota(filter(x.s, green)))],apply(same_size,iota(x.s))]), blue), circle), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:circle;4:rectangle
'λx.apply(and[size2,and[size3,rectangle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[blue,and[iff[size3,blue],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:size3;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(implies[circle,and[apply(same_size,iota(x.s)),or[circle,implies[yellow,triangle]]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:implies[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(implies[and[and[size3,blue],green],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:green;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[blue,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(implies[rectangle,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(yellow,filter(x.s, and[yellow,rectangle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle
'λx.forall(or[yellow,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:blue;3:%s.s;2:x
'λx.forall(iff[size2,green],filter(filter(filter(x.s, size3), and[and[and[or[triangle,circle],blue],apply(same_size,iota(filter(filter(x.s, nor[not[size3],nand[blue,circle]]), not[circle])))],nor[iff[blue,yellow],not[green]]]), green))'	0:forall(%s,%s);4:iff[%s,%s];4:size2;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:size3;4:nand[%s,%s];4:blue;4:circle;4:not[%s];4:circle;4:nor[%s,%s];4:iff[%s,%s];4:blue;4:yellow;4:not[%s];4:green;4:green
'λx.apply(not[and[size2,and[and[nand[green,yellow],rectangle],yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:yellow;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(size-geq,x.o)), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), not[green]), nor[or[size3,not[and[rectangle,circle]]],green]), size1), and[apply(same_shape,iota(x.s)),triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:green;4:nor[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:rectangle;4:circle;4:green;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.exists(or[iff[or[blue,green],yellow],and[size3,blue]], filter(filter(x.s, size3), size2))'	0:exists(%s, %s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:green;4:yellow;4:and[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(not[size2],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[rectangle,implies[green,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.forall(and[blue,and[or[size3,not[rectangle]],apply(size-gt,iota(x.s))]],filter(x.s, rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[and[size3,rectangle],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(and[apply(same_shape,iota(x.s)),yellow], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-gt,iota(x.s)),iota(filter(filter(filter(filter(x.s, size3), rectangle), green), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:green;4:circle
'λx.apply(or[not[yellow],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size2;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, rectangle), blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(and[and[triangle,blue],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:green;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[not[circle],size3],iota(filter(x.s, not[not[size1]])))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size1
'λx.contains(iota(filter(filter(x.s, size1), apply(size-gt,iota(x.s)))), filter(filter(filter(filter(x.s, blue), or[triangle,and[rectangle,and[not[and[and[size3,and[size2,and[or[apply(size-leq,x.o),and[circle,apply(same_color,x.o)]],blue]]],rectangle]],yellow]]]), circle), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;4:yellow;4:circle;4:size2
'λx.apply(iff[size1,blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), size1), or[and[size1,rectangle],size3])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:or[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:size3
'λx.apply(not[and[size3,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(nor[not[triangle],nand[blue,size2]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:triangle;4:nand[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[size2],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, or[triangle,circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle
'λx.exists(nor[rectangle,not[size3]], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:rectangle;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x

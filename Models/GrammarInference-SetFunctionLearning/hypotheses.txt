'λx.apply(yellow,iota(filter(filter(x.s, blue), or[and[circle,or[rectangle,apply(same_size,iota(x.s))]],size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(and[yellow,or[or[not[and[yellow,size3]],size2],nor[size2,size3]]],iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size3;4:size2;4:nor[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[triangle,and[apply(same_size,x.o),apply(same_color,x.o)]],iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, apply(size-leq,x.o)), triangle), size1), triangle), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;4:size1;4:triangle;4:blue
'λx.apply(nand[size1,and[size1,not[size2]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:size1;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[and[size3,circle],or[and[rectangle,circle],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), size1), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:size2
'λx.apply(blue,iota(filter(x.s, or[not[rectangle],size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:size1
'λx.apply(circle,iota(filter(x.s, apply(same_size,iota(filter(filter(x.s, triangle), size1))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(nand[apply(same_shape,x.o),size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[size1,and[yellow,triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.true'	0:true
'λx.apply(not[and[circle,blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size2,circle],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size3), and[blue,circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:blue;4:circle
'λx.apply(and[triangle,or[blue,or[yellow,yellow]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, apply(same_size,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[blue,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[triangle,triangle],iota(filter(x.s, or[and[blue,green],yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:yellow
'λx.contains(iota(filter(filter(x.s, not[and[apply(same_size,iota(filter(x.s, rectangle))),yellow]]), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:rectangle;3:%s.s;2:x
'λx.forall(apply(same_size,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[and[rectangle,green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[implies[rectangle,size2],not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:size2;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, green))),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, green), and[circle,size3]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:size3
'λx.apply(not[iff[rectangle,not[blue]]],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:rectangle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(and[apply(same_color,x.o),not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[yellow,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[apply(size-lt,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, rectangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, and[green,size3]), and[size2,size3])), filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:size2;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.forall(and[or[not[blue],and[rectangle,size2]],circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:rectangle;4:size2;4:circle;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(or[or[circle,green],yellow],iota(filter(x.s, and[size1,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), triangle), not[apply(same_color,iota(filter(filter(filter(filter(x.s, size3), and[size3,green]), nor[yellow,and[circle,circle]]), or[size3,yellow])))])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size3;4:green;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:circle;4:or[%s,%s];4:size3;4:yellow
'λx.apply(not[and[nor[apply(size-geq,iota(filter(filter(x.s, size3), size1))),and[blue,blue]],nand[apply(same_color,iota(filter(filter(filter(x.s, size1), size1), not[circle]))),rectangle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:and[%s,%s];4:blue;4:blue;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:not[%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[triangle,not[size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(filter(x.s, iff[blue,circle]), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[triangle,blue],iota(filter(x.s, and[size2,or[iff[yellow,or[and[or[circle,blue],or[and[rectangle,green],yellow]],and[size1,size3]]],triangle]])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:yellow;4:and[%s,%s];4:size1;4:size3;4:triangle
'λx.contains(iota(filter(x.s, and[size1,triangle])), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[circle,triangle])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(filter(filter(x.s, blue), size1), green), size2), triangle), yellow), apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:green;4:size2;4:triangle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(and[and[size2,or[size1,size1]],size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[blue,and[size1,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[and[and[green,size2],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:circle;1:%s.o;2:x
'λx.apply(iff[size1,circle],iota(filter(filter(filter(filter(x.s, circle), size2), size1), circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size1;4:circle
'λx.forall(or[green,yellow],filter(filter(x.s, size2), apply(same_color,iota(x.s))))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, or[not[triangle],and[size2,apply(same_shape,x.o)]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, iff[size2,not[triangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:not[%s];4:triangle
'λx.apply(iff[and[circle,size2],nand[yellow,circle]],iota(filter(filter(filter(filter(x.s, and[circle,rectangle]), yellow), apply(same_shape,iota(x.s))), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:size2;4:nand[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(not[not[green]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), not[not[rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:not[%s];4:rectangle
'λx.apply(or[and[rectangle,or[yellow,size1]],or[size2,yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, or[and[rectangle,and[green,implies[size1,and[apply(same_color,x.o),apply(same_shape,x.o)]]]],triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:implies[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(not[triangle],iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, not[apply(same_shape,iota(x.s))]), and[or[triangle,rectangle],apply(same_size,iota(x.s))]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nor[size1,green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[and[nand[green,circle],or[yellow,green]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:circle;4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[blue,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[or[triangle,apply(same_shape,x.o)],and[yellow,and[size1,size2]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, not[not[triangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:triangle
'λx.apply(not[and[rectangle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(nand[and[circle,rectangle],size2],iota(filter(filter(x.s, blue), and[size2,not[rectangle]])))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:not[%s];4:rectangle
'λx.apply(not[triangle],iota(filter(filter(x.s, triangle), nand[circle,nand[not[and[triangle,blue]],green]])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:circle;4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:blue;4:green
'λx.apply(or[yellow,size1],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[and[and[and[apply(size-gt,x.o),and[apply(same_shape,iota(filter(x.s, and[apply(size-leq,x.o),blue]))),apply(same_size,x.o)]],size2],rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[rectangle,or[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size2,filter(x.s, size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size1,filter(x.s, size1))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size1,filter(x.s, size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size3,filter(x.s, green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size2,filter(x.s, green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size1,filter(x.s, green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[circle,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, circle), green), nor[yellow,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:nor[%s,%s];4:yellow;4:size2
'λx.apply(and[triangle,or[circle,green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(nor[not[or[or[blue,size3],apply(size-geq,x.o)]],and[size2,size1]],filter(x.s, green))'	0:forall(%s,%s);4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[and[blue,triangle],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size2;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, size3), circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(iff[size1,and[size3,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(or[green,apply(same_size,iota(filter(filter(filter(x.s, blue), size1), triangle)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(nor[apply(same_size,x.o),green],iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.exists(size2, filter(x.s, nor[size1,size1]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:size1
'λx.apply(apply(size-leq,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[apply(same_shape,iota(x.s)),and[blue,yellow]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(and[blue,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[apply(same_size,x.o),size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, blue), and[triangle,blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:blue
'λx.apply(implies[size2,nand[triangle,size2]],iota(filter(filter(filter(x.s, rectangle), size1), blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:nand[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:blue
'λx.empty(filter(filter(filter(filter(x.s, rectangle), iff[green,size3]), and[blue,yellow]), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:green;4:size3;4:and[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[and[blue,nor[and[rectangle,apply(size-gt,x.o)],apply(same_size,iota(x.s))]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(or[not[iff[or[and[circle,nor[rectangle,green]],apply(same_size,x.o)],triangle]],or[circle,circle]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(filter(x.s, apply(size-gt,iota(x.s)))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, green), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(not[and[or[size3,green],green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[size1,blue],size2],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[green,implies[or[green,apply(same_shape,iota(filter(x.s, triangle)))],yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:implies[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, yellow), apply(same_shape,iota(x.s))))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,not[triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.forall(iff[rectangle,size2],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(nand[and[apply(same_color,iota(filter(filter(x.s, circle), rectangle))),size3],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:size3;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[size2,size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(or[size3,not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[green,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(or[and[triangle,and[triangle,green]],and[triangle,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:green;4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[size1,not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(or[rectangle,not[rectangle]],iota(filter(filter(x.s, not[triangle]), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:triangle
'λx.apply(nand[or[size1,size2],green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size1;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size2,iota(filter(filter(filter(x.s, nor[yellow,size1]), green), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:size1;4:green;4:size2
'λx.apply(implies[size3,and[circle,nor[not[blue],implies[iff[size2,yellow],size2]]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:circle;4:nor[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:iff[%s,%s];4:size2;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[not[size3],not[and[or[circle,size3],iff[green,yellow]]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:iff[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(filter(x.s, blue), and[size2,size2]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(iff[size3,and[yellow,size2]],iota(filter(x.s, and[size2,rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(and[or[or[and[triangle,size2],yellow],green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:yellow;4:green;4:size2;1:%s.o;2:x
'λx.apply(and[blue,triangle],iota(filter(filter(filter(filter(filter(x.s, or[size1,size2]), rectangle), or[not[not[rectangle]],nand[rectangle,and[triangle,triangle]]]), yellow), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2;4:rectangle;4:or[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:triangle;4:yellow;4:circle
'λx.apply(blue,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[and[green,circle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[blue,nor[or[and[and[size1,size3],and[implies[rectangle,green],green]],implies[and[size3,yellow],apply(same_color,x.o)]],or[or[apply(same_color,iota(filter(x.s, and[triangle,size2]))),size3],or[not[green],apply(same_size,iota(filter(filter(x.s, implies[not[rectangle],green]), rectangle)))]]]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:green;4:green;4:implies[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;4:size3;4:or[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:rectangle;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[not[rectangle],rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[yellow,and[size3,triangle]],nand[or[blue,size3],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:triangle;4:nand[%s,%s];4:or[%s,%s];4:blue;4:size3;4:yellow;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, not[size3]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.forall(triangle,filter(x.s, not[green]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(and[green,and[circle,green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[triangle,triangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[or[size1,not[triangle]],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, triangle), yellow), apply(same_color,iota(filter(filter(x.s, rectangle), rectangle))))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(or[not[yellow],not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, circle), blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(iff[blue,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(x.s, size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(apply(same_color,x.o),filter(x.s, size2))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, blue), size2), iff[circle,size1]), green), nand[or[yellow,or[green,yellow]],implies[apply(same_shape,iota(filter(x.s, implies[size3,triangle]))),and[rectangle,rectangle]]]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:iff[%s,%s];4:circle;4:size1;4:green;4:nand[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:green;4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:rectangle;4:rectangle;4:size3
'λx.apply(or[and[circle,apply(same_size,iota(x.s))],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(implies[green,implies[size2,size2]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:implies[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(not[not[size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[green,nand[size2,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:nand[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[and[size3,blue]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[circle,implies[triangle,and[triangle,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(or[rectangle,or[yellow,apply(same_color,iota(x.s))]],iota(filter(filter(filter(x.s, blue), triangle), nand[apply(same_shape,iota(filter(x.s, circle))),blue])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(triangle,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[circle,and[apply(same_color,x.o),size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, implies[triangle,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size2
'λx.apply(not[or[green,green]],iota(filter(filter(filter(filter(filter(filter(x.s, size3), yellow), green), green), apply(size-leq,x.o)), and[triangle,not[size2]])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:green;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:size2
'λx.apply(and[nand[triangle,rectangle],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:triangle;4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, or[apply(size-geq,iota(x.s)),triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(and[size3,and[green,and[and[circle,yellow],yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[yellow,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_shape,x.o)), not[size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(or[and[circle,triangle],nand[size3,circle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:nand[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[circle],x.s)'	0:forall(%s,%s);4:not[%s];4:circle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, green), size2)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(x.s, or[rectangle,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:yellow
'λx.empty(filter(filter(x.s, triangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.exists(size3, filter(filter(x.s, circle), triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(and[blue,and[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(not[not[size2]],iota(filter(filter(x.s, blue), not[size3])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size3
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[and[size1,rectangle],triangle]), triangle), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:triangle;4:triangle;4:size3
'λx.apply(green,iota(filter(x.s, and[green,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.forall(blue,filter(filter(x.s, rectangle), blue))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.forall(circle,filter(filter(x.s, rectangle), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[size1,not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(or[size3,rectangle],iota(filter(filter(x.s, blue), and[blue,not[size3]])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:blue;4:not[%s];4:size3
'λx.empty(filter(x.s, and[yellow,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.apply(apply(size-geq,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[and[size2,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,implies[green,nand[not[nor[yellow,triangle]],and[size3,rectangle]]]],iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:green;4:nand[%s,%s];4:not[%s];4:nor[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[circle,and[and[or[yellow,size1],green],size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,and[not[triangle],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(filter(x.s, green), and[size3,size3]), apply(size-geq,x.o)))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size3;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, blue), triangle), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[size3,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(x.s, apply(size-leq,x.o)))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[and[apply(size-geq,iota(x.s)),not[apply(same_size,x.o)]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(implies[circle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(filter(filter(x.s, apply(same_size,x.o)), green), green), green))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:green;4:green
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, green), size1), triangle), yellow), size3), and[yellow,not[blue]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:triangle;4:yellow;4:size3;4:and[%s,%s];4:yellow;4:not[%s];4:blue
'λx.apply(green,iota(filter(filter(x.s, and[apply(same_size,x.o),circle]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:triangle
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), green), blue), rectangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:blue;4:rectangle;4:triangle
'λx.exists(and[triangle,not[blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(apply(size-geq,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[size2,and[apply(size-lt,x.o),rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(iff[and[not[rectangle],green],apply(size-gt,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, nor[or[yellow,blue],blue]), not[circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:blue;4:not[%s];4:circle
'λx.empty(filter(filter(x.s, yellow), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.forall(nor[circle,size2],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.apply(and[and[and[circle,size3],rectangle],apply(size-leq,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), not[triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:triangle
'λx.apply(apply(size-lt,iota(filter(filter(x.s, blue), apply(size-leq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,apply(same_shape,x.o)],iota(filter(x.s, and[triangle,and[nor[rectangle,size2],implies[and[triangle,and[or[rectangle,size1],and[green,circle]]],triangle]]])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:size2;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:green;4:circle;4:triangle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, blue), size2), circle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:circle;4:green
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), and[rectangle,rectangle]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:rectangle;4:blue
'λx.exists(iff[and[not[size3],triangle],rectangle], filter(filter(x.s, blue), size3))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:triangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(or[blue,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[size2],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(triangle, filter(filter(x.s, nor[size2,apply(same_shape,iota(filter(filter(x.s, circle), size1)))]), apply(same_size,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[and[and[circle,triangle],green],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,and[yellow,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, apply(size-lt,iota(filter(filter(filter(filter(filter(x.s, yellow), yellow), circle), rectangle), size2)))), blue), circle)), filter(x.s, and[size2,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:circle;4:rectangle;4:size2;4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(or[rectangle,iff[size2,yellow]],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[size3,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:size1;3:%s.s;2:x
'λx.exists(and[size3,size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:size3;3:%s.s;2:x
'λx.apply(not[and[apply(same_size,iota(filter(x.s, and[rectangle,green]))),green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:green;1:%s.o;2:x
'λx.apply(and[and[triangle,iff[and[triangle,not[size3]],rectangle]],circle],iota(filter(filter(x.s, and[rectangle,triangle]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:size3;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:size1
'λx.apply(blue,iota(filter(x.s, and[and[triangle,not[size3]],or[triangle,rectangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:size3;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, and[and[size1,triangle],and[size1,or[triangle,size3]]]), yellow), circle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:size3;4:yellow;4:circle;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, yellow), yellow), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:circle
'λx.exists(blue, filter(x.s, triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(filter(x.s, size3), apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, or[size2,size3]), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size3;4:circle
'λx.apply(and[green,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,and[rectangle,apply(size-gt,iota(filter(filter(filter(x.s, circle), triangle), nand[size1,size3])))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:nand[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[and[green,size3],not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:size3;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(and[yellow,not[yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:not[%s];4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(x.s, not[or[rectangle,triangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(iff[or[apply(same_size,x.o),rectangle],circle],iota(filter(filter(x.s, and[blue,apply(same_size,x.o)]), green)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, not[green]), circle), size3), size2), not[triangle])), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:circle;4:size3;4:size2;4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[and[not[blue],size2],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;4:yellow;1:%s.o;2:x
'λx.forall(and[triangle,size1],filter(x.s, blue))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[not[and[not[size2],or[not[and[blue,circle]],rectangle]]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[circle,and[and[size3,apply(same_color,iota(x.s))],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(not[apply(same_size,x.o)],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(nand[size2,and[apply(same_color,x.o),rectangle]], filter(filter(x.s, triangle), nand[size2,not[rectangle]]))'	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:size2;4:not[%s];4:rectangle
'λx.forall(green,x.s)'	0:forall(%s,%s);4:green;3:%s.s;2:x
'λx.apply(and[not[yellow],or[yellow,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,not[iff[yellow,and[yellow,circle]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size3,green]],iota(filter(filter(filter(x.s, rectangle), and[apply(same_shape,x.o),and[rectangle,nor[green,yellow]]]), apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), apply(size-lt,x.o)), size3), yellow), apply(size-geq,iota(filter(filter(x.s, blue), and[apply(same_size,iota(x.s)),rectangle])))), and[or[nand[and[and[blue,blue],size2],and[and[triangle,and[circle,green]],size1]],not[yellow]],and[size1,and[circle,and[triangle,yellow]]]]), yellow), yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3;4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2;4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:green;4:size1;4:not[%s];4:yellow;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:yellow;4:yellow;4:yellow
'λx.apply(iff[nor[not[not[blue]],apply(size-gt,x.o)],blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:not[%s];4:not[%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[yellow,nor[size3,size2]],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:nor[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.contains(iota(filter(filter(x.s, size1), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(or[circle,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(filter(filter(filter(x.s, size2), nor[or[triangle,or[rectangle,size3]],green]), triangle), blue), or[triangle,and[size1,blue]]), yellow)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:size3;4:green;4:triangle;4:blue;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:blue;4:yellow
'λx.apply(and[rectangle,or[or[not[and[yellow,rectangle]],and[size2,size2]],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size2;4:size2;4:size3;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, yellow), green), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:rectangle
'λx.contains(x.o, filter(x.s, or[triangle,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2
'λx.apply(size3,iota(filter(filter(filter(x.s, green), rectangle), not[size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:not[%s];4:size3
'λx.apply(and[or[circle,and[not[size2],blue]],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:size2;4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, apply(same_size,iota(filter(x.s, and[triangle,size3])))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3
'λx.apply(implies[or[rectangle,apply(same_shape,x.o)],blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[green,not[not[circle]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size3), nor[or[size2,and[green,not[green]]],triangle]), and[green,rectangle]), or[size3,and[apply(same_shape,iota(filter(x.s, nor[yellow,green]))),or[rectangle,and[size2,implies[size1,blue]]]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:not[%s];4:green;4:triangle;4:and[%s,%s];4:green;4:rectangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:green;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:implies[%s,%s];4:size1;4:blue
'λx.apply(nand[apply(same_size,x.o),size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(nand[apply(same_size,x.o),size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[and[size2,triangle],size1]), apply(size-lt,iota(filter(filter(filter(x.s, triangle), and[and[implies[and[triangle,or[and[blue,and[and[triangle,green],rectangle]],rectangle]],rectangle],iff[yellow,blue]],and[circle,not[size3]]]), green)))), and[iff[rectangle,or[blue,size1]],blue]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:rectangle;4:rectangle;4:rectangle;4:iff[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:circle;4:not[%s];4:size3;4:green;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size1;4:blue
'λx.exists(size2, filter(filter(filter(filter(filter(x.s, size1), circle), not[not[size3]]), iff[implies[green,yellow],nand[not[rectangle],size3]]), or[size3,size1]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:not[%s];4:not[%s];4:size3;4:iff[%s,%s];4:implies[%s,%s];4:green;4:yellow;4:nand[%s,%s];4:not[%s];4:rectangle;4:size3;4:or[%s,%s];4:size3;4:size1
'λx.contains(iota(filter(x.s, size2)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(x.s, size3)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[green,green],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size2,green],iota(filter(filter(x.s, not[size2]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2
'λx.apply(circle,iota(filter(x.s, apply(same_shape,iota(filter(x.s, apply(same_color,iota(filter(filter(filter(x.s, apply(size-gt,x.o)), triangle), or[not[or[green,and[blue,and[rectangle,size1]]]],and[size3,size2]])))))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:size3;4:size2
'λx.apply(and[rectangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(not[not[apply(same_size,iota(x.s))]], x.s)'	0:exists(%s, %s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(apply(size-lt,iota(x.s)), filter(x.s, and[and[size1,size3],apply(same_size,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(or[not[nor[size2,and[rectangle,rectangle]]],triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:rectangle;4:triangle;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, blue), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(or[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[and[green,size1],green],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:green;4:size1;1:%s.o;2:x
'λx.apply(implies[and[iff[green,green],rectangle],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:green;4:green;4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(or[blue,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(and[size3,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(size3,iota(filter(filter(x.s, yellow), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[circle,or[and[green,blue],green]]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:green;4:blue;4:green;4:size1
'λx.apply(green,iota(filter(x.s, apply(size-geq,iota(filter(filter(filter(x.s, yellow), nand[iff[size3,blue],apply(same_shape,x.o)]), rectangle))))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:iff[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.contains(iota(filter(filter(filter(x.s, blue), circle), and[and[yellow,size2],and[size1,green]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(and[green,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,apply(size-gt,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(implies[not[green],blue], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:green;4:blue;3:%s.s;2:x
'λx.apply(or[size1,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, blue), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(x.s, green), triangle), size1), rectangle), rectangle), or[size3,not[apply(same_color,iota(filter(x.s, and[blue,and[size1,size3]])))]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size1;4:rectangle;4:rectangle;4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size3
'λx.apply(triangle,iota(filter(filter(filter(x.s, apply(size-leq,x.o)), not[implies[and[size1,size3],blue]]), and[and[blue,not[implies[size1,or[blue,and[and[and[nand[circle,not[and[iff[rectangle,and[apply(size-geq,x.o),rectangle]],not[triangle]]]],circle],not[size3]],size1]]]]],blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:size3;4:blue;4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:implies[%s,%s];4:size1;4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;4:not[%s];4:triangle;4:circle;4:not[%s];4:size3;4:size1;4:blue
'λx.empty(filter(filter(x.s, size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(and[rectangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[size2,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(not[apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[yellow,circle],iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.empty(filter(filter(x.s, size3), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(implies[yellow,nand[apply(same_size,x.o),size2]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size2), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(nand[blue,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, size1))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(implies[implies[yellow,size1],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,or[nor[triangle,yellow],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:nor[%s,%s];4:triangle;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(not[apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, or[and[triangle,apply(size-lt,iota(filter(x.s, and[blue,triangle])))],blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:blue
'λx.apply(nand[yellow,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, green), size1), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:yellow
'λx.apply(and[size2,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, or[green,apply(size-gt,x.o)]), circle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;4:size3
'λx.apply(circle,iota(filter(filter(x.s, not[apply(size-gt,x.o)]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle
'λx.apply(and[size1,and[size1,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, circle), apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, green), green), green), yellow), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:green;4:yellow;4:size1
'λx.apply(or[blue,size3],iota(filter(filter(filter(filter(x.s, apply(same_size,iota(x.s))), size3), triangle), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:triangle;4:blue
'λx.forall(size3,filter(filter(x.s, size3), not[not[size1]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:not[%s];4:size1
'λx.apply(yellow,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(and[green,and[or[green,not[apply(same_size,iota(x.s))]],size3]], filter(filter(x.s, green), and[yellow,apply(same_color,iota(x.s))]))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, or[triangle,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:rectangle
'λx.forall(implies[size3,not[green]],filter(filter(x.s, not[apply(same_size,iota(filter(x.s, not[and[blue,triangle]])))]), size3))'	0:forall(%s,%s);4:implies[%s,%s];4:size3;4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:triangle;4:size3
'λx.apply(nor[and[size2,circle],size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size3;1:%s.o;2:x
'λx.forall(green,filter(x.s, size3))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(green,filter(x.s, green))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[and[green,size3],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), circle), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, not[or[or[apply(size-lt,x.o),rectangle],apply(size-gt,x.o)]]), not[green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:green
'λx.apply(and[or[or[size3,rectangle],size1],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(nand[blue,triangle], filter(filter(x.s, green), nand[size2,circle]))'	0:exists(%s, %s);4:nand[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:size2;4:circle
'λx.exists(and[iff[size2,implies[size3,size2]],or[yellow,green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:implies[%s,%s];4:size3;4:size2;4:or[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, apply(size-gt,iota(filter(filter(x.s, yellow), and[iff[nand[nand[circle,and[size3,size2]],apply(size-lt,iota(x.s))],blue],iff[apply(same_size,iota(x.s)),apply(same_color,iota(x.s))]]))))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, not[rectangle]), and[not[yellow],green]), and[green,apply(same_color,x.o)]), or[and[yellow,rectangle],size2]))),iota(filter(filter(filter(x.s, triangle), and[blue,yellow]), and[size3,and[green,circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:not[%s];4:yellow;4:green;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:circle
'λx.apply(triangle,iota(filter(x.s, apply(same_shape,iota(filter(x.s, circle))))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[and[triangle,green],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:green;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), and[size1,yellow]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:yellow;4:green
'λx.apply(size2,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(size3,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(size2,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(size1,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(size1,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.forall(yellow,filter(x.s, and[rectangle,or[size1,size1]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:size1
'λx.apply(and[and[rectangle,iff[blue,not[apply(same_size,iota(x.s))]]],rectangle],iota(filter(filter(filter(x.s, and[size1,and[or[size1,or[not[and[yellow,size2]],or[iff[size1,iff[or[size2,nand[size1,yellow]],triangle]],yellow]]],triangle]]), blue), and[rectangle,and[circle,and[size3,and[nor[size1,rectangle],yellow]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size2;4:or[%s,%s];4:iff[%s,%s];4:size1;4:iff[%s,%s];4:or[%s,%s];4:size2;4:nand[%s,%s];4:size1;4:yellow;4:triangle;4:yellow;4:triangle;4:blue;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:and[%s,%s];4:nor[%s,%s];4:size1;4:rectangle;4:yellow
'λx.forall(size1,filter(x.s, and[yellow,circle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.exists(size1, filter(filter(x.s, apply(same_color,x.o)), blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(and[and[blue,rectangle],size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:size1;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, green), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.empty(filter(x.s, not[circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.empty(filter(filter(x.s, triangle), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[and[size2,size3],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, size3), size2), yellow))),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, green), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(blue,iota(filter(x.s, or[triangle,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:rectangle
'λx.exists(apply(same_color,iota(filter(x.s, circle))), filter(filter(filter(x.s, yellow), size3), yellow))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(size3,iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(size2,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(size2,iota(filter(x.s, or[yellow,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(yellow,iota(filter(filter(x.s, and[rectangle,triangle]), not[nor[size3,apply(size-lt,x.o)]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:not[%s];4:nor[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, not[or[not[size1],not[triangle]]]), triangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:triangle;4:triangle
'λx.contains(x.o, filter(x.s, or[rectangle,and[or[green,yellow],blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:blue
'λx.apply(yellow,iota(x.s))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), nor[size1,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:size1;4:yellow
'λx.apply(or[yellow,size2],iota(filter(x.s, and[or[apply(same_size,iota(filter(filter(filter(filter(filter(x.s, and[green,size2]), yellow), size2), rectangle), nand[triangle,or[yellow,and[size3,rectangle]]]))),size1],blue])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:yellow;4:size2;4:rectangle;4:nand[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:rectangle;4:size1;4:blue
'λx.apply(and[apply(same_size,iota(filter(filter(filter(x.s, blue), size3), circle))),rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[iff[size2,and[size2,yellow]],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:size2;4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,circle],iota(filter(x.s, iff[circle,and[or[circle,circle],circle]])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:circle
'λx.apply(not[and[and[iff[or[triangle,green],triangle],circle],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:triangle;4:green;4:triangle;4:circle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(circle,x.o)'	0:apply(%s,%s);4:circle;1:%s.o;2:x
'λx.apply(and[and[yellow,or[apply(same_color,x.o),rectangle]],yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, blue), and[nand[triangle,apply(same_color,x.o)],not[yellow]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(or[green,not[and[triangle,and[not[apply(same_color,x.o)],or[rectangle,yellow]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, green), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(nor[yellow,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(implies[circle,circle],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),blue],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, not[green]), implies[and[size1,green],apply(size-geq,iota(x.s))]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:size1;4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[and[size2,size1]],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(and[size1,green],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.exists(not[and[blue,triangle]], filter(x.s, apply(size-geq,iota(filter(x.s, apply(same_shape,x.o))))))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[circle,green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green
'λx.exists(apply(size-lt,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[rectangle,size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(apply(same_size,x.o), filter(x.s, and[yellow,size2]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size2
'λx.apply(nand[triangle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_size,iota(x.s))), and[circle,apply(same_size,iota(x.s))]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, and[blue,or[blue,circle]]), not[green]), yellow), or[triangle,or[rectangle,and[green,circle]]]), size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:circle;4:not[%s];4:green;4:yellow;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:circle;4:size2
'λx.apply(nand[triangle,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(filter(filter(x.s, not[yellow]), and[triangle,not[rectangle]])))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:triangle;4:not[%s];4:rectangle
'λx.apply(and[size2,blue],iota(filter(filter(filter(filter(x.s, size3), size1), size1), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:size1;4:circle
'λx.apply(or[size3,triangle],iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.empty(filter(filter(x.s, rectangle), and[yellow,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:blue
'λx.apply(size1,iota(filter(filter(filter(x.s, blue), size1), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:yellow
'λx.forall(size3,filter(filter(x.s, circle), apply(same_size,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, and[size1,size3]), yellow), or[not[apply(same_color,iota(x.s))],green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;4:yellow;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(apply(same_shape,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[circle,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2
'λx.apply(or[and[not[rectangle],rectangle],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[yellow,green],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:green;1:%s.o;2:x
'λx.apply(and[size2,not[or[green,nor[yellow,blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, yellow), yellow), not[and[circle,rectangle]]), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:not[%s];4:and[%s,%s];4:circle;4:rectangle;4:rectangle
'λx.exists(rectangle, filter(filter(x.s, size1), size3))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.forall(rectangle,filter(filter(x.s, rectangle), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(nor[and[size1,size2],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:size2;4:green;1:%s.o;2:x
'λx.apply(and[not[apply(size-leq,iota(x.s))],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, size1), apply(same_shape,x.o)), apply(same_size,iota(filter(x.s, iff[green,circle])))))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, apply(same_size,x.o)), blue), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size3
'λx.apply(or[blue,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[blue,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[blue,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[and[circle,yellow],or[yellow,green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[size1,green],not[triangle]],and[circle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:not[%s];4:triangle;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(nand[size2,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(size-gt,iota(x.s))), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(apply(same_shape,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,and[circle,triangle]],iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_size,iota(x.s))), size3), apply(same_shape,x.o)), green), and[size3,size3]), nand[size3,or[yellow,circle]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:and[%s,%s];4:size3;4:size3;4:nand[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:circle
'λx.apply(rectangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[nor[or[size3,rectangle],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[yellow,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, circle), size3), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:green
'λx.forall(not[blue],filter(filter(x.s, not[nand[yellow,size2]]), or[and[blue,not[and[iff[and[rectangle,apply(same_size,iota(filter(filter(filter(filter(x.s, size2), size1), implies[blue,apply(same_size,x.o)]), not[blue])))],size2],size3]]],and[yellow,size3]]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:yellow;4:size2;4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue;4:size2;4:size3;4:and[%s,%s];4:yellow;4:size3
'λx.empty(filter(filter(x.s, triangle), nor[rectangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:rectangle;4:blue
'λx.contains(iota(x.s), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(x.s), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(x.s), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[circle],iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, size1), triangle), green), iff[triangle,apply(same_size,x.o)]), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:green;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(filter(filter(filter(x.s, iff[size3,green]), rectangle), size2), circle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:green;4:rectangle;4:size2;4:circle;4:green
'λx.exists(apply(same_size,x.o), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(x.s, or[size2,and[size2,blue]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:size2;4:blue
'λx.exists(green, filter(x.s, circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[apply(size-geq,x.o),and[yellow,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(nor[circle,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(implies[and[apply(same_color,x.o),and[and[and[not[size3],triangle],size1],not[triangle]]],not[and[and[circle,green],apply(size-leq,iota(x.s))]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:triangle;4:size1;4:not[%s];4:triangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, triangle), yellow))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, circle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size2, filter(x.s, circle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size1, filter(x.s, circle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, green))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[rectangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(filter(x.s, triangle), rectangle), size2))),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[nor[apply(same_color,iota(filter(x.s, blue))),rectangle],and[size2,size3]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[circle,not[yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, rectangle), size3), triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, rectangle), not[green]), nand[yellow,green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:green;4:nand[%s,%s];4:yellow;4:green
'λx.exists(rectangle, filter(x.s, triangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[iff[yellow,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[triangle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, size3), not[size2]), blue), nand[green,size3]), or[and[apply(same_shape,iota(filter(x.s, or[not[yellow],size2]))),size3],size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2;4:blue;4:nand[%s,%s];4:green;4:size3;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:size2;4:size3;4:size1;3:%s.s;2:x
'λx.apply(nand[iff[triangle,apply(same_size,iota(filter(x.s, size2)))],size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;1:%s.o;2:x
'λx.apply(not[and[size3,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(filter(x.s, blue), circle), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3
'λx.apply(implies[size3,size1],iota(filter(x.s, green)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(filter(x.s, and[green,apply(same_size,x.o)]), not[yellow])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(and[and[size1,green],rectangle],iota(filter(filter(x.s, or[green,rectangle]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle;4:size1
'λx.apply(implies[size3,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(filter(x.s, not[green]), size2), size2), triangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2;4:size2;4:triangle
'λx.empty(filter(x.s, iff[circle,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:triangle
'λx.forall(or[or[blue,yellow],size2],filter(filter(filter(filter(filter(filter(x.s, or[blue,green]), apply(same_color,iota(x.s))), and[rectangle,rectangle]), and[apply(same_color,iota(x.s)),and[triangle,size1]]), and[apply(same_shape,x.o),yellow]), apply(size-leq,iota(filter(filter(x.s, apply(same_color,x.o)), circle)))))'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nor[or[size1,size2],yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size1;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size2,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(nand[size2,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(nand[size3,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(iff[or[implies[size2,apply(same_size,x.o)],blue],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.exists(and[size1,apply(size-gt,iota(x.s))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, not[size2]), green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:green
'λx.apply(yellow,iota(filter(filter(filter(x.s, apply(same_size,x.o)), and[or[not[not[or[apply(same_shape,iota(x.s)),iff[size1,size2]]]],circle],and[size3,size3]]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size2;4:circle;4:and[%s,%s];4:size3;4:size3;4:triangle
'λx.apply(and[size3,apply(same_color,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[or[size1,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, nand[nor[yellow,triangle],size2]), size3), apply(same_size,iota(filter(x.s, size3))))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:yellow;4:triangle;4:size2;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[size1,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(nor[and[implies[size3,apply(same_size,iota(x.s))],green],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:triangle;1:%s.o;2:x
'λx.forall(not[not[size3]],filter(x.s, or[and[green,size1],triangle]))'	0:forall(%s,%s);4:not[%s];4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:triangle
'λx.forall(or[rectangle,circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, not[size3]), and[blue,and[green,and[green,and[triangle,and[circle,size1]]]]]))),iota(filter(filter(filter(x.s, not[size3]), size1), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size1;4:triangle
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,x.o)), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(rectangle,iota(filter(x.s, iff[or[rectangle,size2],size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:size3
'λx.contains(x.o, filter(filter(x.s, rectangle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.exists(or[not[nor[not[size1],green]],and[yellow,size2]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:not[%s];4:size1;4:green;4:and[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.forall(and[apply(size-leq,x.o),apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nor[size1,size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, size1), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(and[not[or[and[blue,not[size1]],and[yellow,size2]]],not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:size1;4:and[%s,%s];4:yellow;4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, circle), green))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(nand[rectangle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[or[not[and[and[and[and[green,size2],triangle],yellow],size2]],size2],and[or[triangle,and[size3,not[yellow]]],yellow]],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:triangle;4:yellow;4:size2;4:size2;4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:not[%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(apply(size-lt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, and[rectangle,or[blue,size1]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size1
'λx.contains(iota(filter(filter(x.s, blue), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;3:%s.s;2:x
'λx.apply(and[nand[green,size2],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size1],filter(x.s, not[size2]))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(or[size1,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[not[circle],circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[green,yellow],iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.empty(filter(filter(filter(filter(x.s, triangle), green), or[yellow,blue]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:or[%s,%s];4:yellow;4:blue;4:yellow
'λx.apply(and[size2,and[triangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.exists(and[and[size1,size1],and[triangle,and[size2,blue]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.apply(and[yellow,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(not[apply(size-gt,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[nand[or[green,nor[and[yellow,and[apply(same_size,x.o),blue]],or[and[iff[size3,triangle],rectangle],implies[and[and[or[yellow,size2],circle],apply(same_shape,iota(filter(filter(x.s, size2), size3)))],rectangle]]]],green]],iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:green;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_size,x.o)), and[rectangle,size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(iff[triangle,blue],iota(filter(x.s, green)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(filter(filter(x.s, triangle), size3), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:circle
'λx.contains(iota(filter(x.s, triangle)), filter(filter(filter(x.s, circle), size3), and[green,yellow]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:and[%s,%s];4:green;4:yellow
'λx.empty(filter(filter(x.s, rectangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, iff[yellow,yellow]), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:yellow;4:circle
'λx.apply(rectangle,iota(filter(x.s, or[size2,yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:yellow
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.exists(nor[and[or[triangle,triangle],green],size2], filter(filter(filter(x.s, rectangle), nand[green,and[green,nor[or[triangle,apply(same_shape,iota(x.s))],blue]]]), size2))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:green;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nand[%s,%s];4:green;4:and[%s,%s];4:green;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(size3,iota(filter(filter(x.s, circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[yellow,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size2
'λx.exists(and[size1,not[circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[iff[green,rectangle],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, rectangle), yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(x.s)),rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, iff[size1,size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size3
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, triangle), green), rectangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:rectangle;4:size1
'λx.empty(filter(x.s, not[or[yellow,not[size2]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:not[%s];4:size2
'λx.apply(iff[or[rectangle,size2],not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[green,not[and[and[blue,apply(same_shape,x.o)],not[size1]]]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.empty(filter(filter(x.s, rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(or[rectangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(and[nor[green,green],size1],filter(filter(filter(x.s, apply(same_shape,x.o)), size3), circle))'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:green;4:green;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle
'λx.forall(not[size1],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, and[rectangle,triangle]), yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, nor[and[not[green],implies[iff[circle,and[green,size3]],and[triangle,not[not[and[nor[size1,apply(same_shape,iota(filter(filter(filter(x.s, rectangle), yellow), and[size1,not[iff[rectangle,blue]]])))],implies[rectangle,size3]]]]]]],blue]), not[or[or[size1,triangle],size3]]), circle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:implies[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:and[%s,%s];4:size1;4:not[%s];4:iff[%s,%s];4:rectangle;4:blue;4:implies[%s,%s];4:rectangle;4:size3;4:blue;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:size3;4:circle;4:rectangle
'λx.apply(or[size2,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,or[not[circle],blue]],iota(filter(filter(x.s, and[not[green],and[nor[size1,or[apply(same_shape,iota(x.s)),green]],and[rectangle,and[green,size3]]]]), apply(size-leq,iota(filter(filter(filter(filter(x.s, circle), not[implies[and[yellow,apply(same_shape,x.o)],circle]]), and[blue,green]), green))))))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:nor[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:blue;4:green;4:green
'λx.apply(and[circle,iff[circle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(iff[iff[and[green,rectangle],rectangle],or[size2,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:rectangle;4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(and[or[blue,and[triangle,size2]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:size2;4:circle;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[rectangle,circle],iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.exists(and[blue,not[circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(x.s, rectangle), or[triangle,and[and[blue,rectangle],not[triangle]]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:not[%s];4:triangle
'λx.apply(implies[circle,or[size2,size1]],iota(filter(filter(filter(x.s, not[yellow]), size1), triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size1;4:triangle
'λx.apply(iff[triangle,size1],iota(filter(x.s, and[size1,or[circle,size3]])))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:size3
'λx.apply(or[iff[apply(same_color,x.o),green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:blue;1:%s.o;2:x
'λx.apply(or[not[yellow],circle],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size1), size3), and[apply(same_shape,x.o),yellow]), and[and[apply(same_shape,iota(x.s)),blue],blue]), nor[size1,apply(size-lt,x.o)]), size2), not[blue]), apply(same_size,x.o)), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:blue;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;4:not[%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(triangle,filter(filter(x.s, and[iff[green,not[nand[rectangle,size1]]],apply(same_shape,x.o)]), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:green;4:not[%s];4:nand[%s,%s];4:rectangle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(nand[blue,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[nor[iff[green,green],or[rectangle,and[nor[size2,apply(same_size,iota(filter(filter(filter(filter(x.s, or[size2,blue]), circle), size1), and[green,blue])))],size2]]],rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:green;4:green;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:blue;4:circle;4:size1;4:and[%s,%s];4:green;4:blue;4:size2;4:rectangle
'λx.exists(size3, filter(x.s, yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(or[green,circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.apply(or[blue,or[green,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size3), or[blue,rectangle]), triangle), apply(size-leq,x.o)), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:blue;4:rectangle;4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3
'λx.apply(or[apply(same_size,iota(x.s)),circle],iota(filter(x.s, or[triangle,apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[size2,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[size1,circle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, not[and[triangle,green]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:green
'λx.contains(iota(filter(x.s, and[circle,and[blue,size1]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(or[size2,blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(apply(same_shape,iota(filter(x.s, size3))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.apply(or[blue,and[nand[size1,not[size3]],not[triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:nand[%s,%s];4:size1;4:not[%s];4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.exists(and[green,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_shape,iota(filter(x.s, size3))))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(filter(x.s, iff[size3,not[and[rectangle,and[rectangle,implies[nor[circle,yellow],apply(size-geq,iota(x.s))]]]]]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(iff[apply(same_shape,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[circle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(x.s, nand[triangle,triangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, size1), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_color,x.o),triangle],filter(x.s, and[circle,not[size2]]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:size2
'λx.forall(size2,filter(filter(x.s, and[size1,green]), green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:green
'λx.apply(and[green,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, triangle), implies[yellow,size2]))),iota(filter(x.s, and[size2,size2])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2
'λx.contains(iota(filter(filter(filter(x.s, triangle), rectangle), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:size2;3:%s.s;2:x
'λx.exists(and[or[triangle,size1],circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:circle;3:%s.s;2:x
'λx.apply(or[nor[yellow,size3],and[circle,and[size2,and[circle,blue]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[circle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[circle,and[size2,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(and[triangle,and[apply(same_color,x.o),green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), triangle), and[rectangle,yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:and[%s,%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.exists(apply(same_color,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(iff[apply(same_color,x.o),circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(not[blue],x.s)'	0:forall(%s,%s);4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(and[size3,or[apply(size-leq,iota(x.s)),and[circle,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[blue,circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[not[yellow],and[or[not[and[size2,size3]],and[and[yellow,and[green,blue]],or[and[nand[size3,blue],rectangle],blue]]],iff[apply(size-gt,iota(filter(filter(filter(filter(x.s, size2), yellow), green), not[apply(same_size,iota(filter(filter(filter(x.s, circle), green), size3)))]))),rectangle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:blue;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:blue;4:rectangle;4:blue;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[size2,or[size2,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[green,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[green,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(or[blue,rectangle],iota(filter(filter(x.s, green), or[nor[triangle,size3],and[and[size1,yellow],rectangle]])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:nor[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:rectangle
'λx.apply(size2,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[size1,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3
'λx.exists(iff[iff[green,triangle],nor[and[circle,not[nor[size1,and[apply(same_shape,iota(x.s)),implies[size3,size1]]]]],apply(same_size,iota(filter(x.s, blue)))]], filter(x.s, or[size1,apply(same_color,iota(x.s))]))'	0:exists(%s, %s);4:iff[%s,%s];4:iff[%s,%s];4:green;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:nor[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[apply(same_size,iota(filter(x.s, triangle)))]), or[size1,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size1;4:size1
'λx.exists(size3, filter(filter(x.s, size1), apply(same_shape,iota(filter(x.s, circle)))))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(filter(filter(x.s, and[yellow,circle]), blue), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle;4:blue;4:green
'λx.forall(blue,filter(x.s, apply(same_color,iota(x.s))))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size1,apply(same_shape,iota(x.s))],not[not[yellow]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[blue,circle], filter(filter(x.s, blue), apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, and[triangle,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.forall(apply(same_size,iota(filter(filter(filter(filter(x.s, not[triangle]), size1), circle), size1))),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1;4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,iota(filter(filter(x.s, blue), or[nand[green,yellow],rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:nand[%s,%s];4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(filter(x.s, circle), and[size1,triangle]))),filter(x.s, size2))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(apply(same_size,iota(filter(filter(x.s, yellow), triangle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[green,or[apply(size-leq,x.o),yellow]]), apply(same_color,iota(filter(x.s, triangle)))), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[blue,not[green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(size3, filter(filter(filter(x.s, and[implies[and[rectangle,blue],triangle],circle]), not[green]), size2))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:triangle;4:circle;4:not[%s];4:green;4:size2
'λx.exists(and[triangle,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.forall(and[or[and[rectangle,apply(same_color,iota(filter(x.s, rectangle)))],apply(same_shape,iota(x.s))],blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, not[not[size2]]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size2;4:size3
'λx.apply(not[green],iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(size2,iota(filter(x.s, or[size3,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green
'λx.apply(not[blue],iota(filter(filter(filter(x.s, triangle), size3), triangle)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:triangle
'λx.apply(and[rectangle,size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[yellow,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(same_size,x.o)), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(x.s, and[apply(same_color,x.o),apply(same_color,x.o)]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(not[or[blue,and[not[or[size3,or[yellow,size2]]],size3]]],iota(filter(filter(filter(filter(x.s, and[circle,and[circle,and[not[size2],triangle]]]), not[and[circle,or[size2,size2]]]), not[nand[size1,and[triangle,and[rectangle,yellow]]]]), apply(same_size,x.o))))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:size2;4:triangle;4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:size2;4:not[%s];4:nand[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[and[size1,green],iff[size1,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:green;4:iff[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nor[or[size2,and[and[not[rectangle],not[apply(size-lt,x.o)]],blue]],or[triangle,blue]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.contains(x.o, filter(x.s, or[or[and[not[apply(same_size,x.o)],not[and[size3,triangle]]],circle],and[blue,and[green,or[triangle,size1]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:circle;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:or[%s,%s];4:triangle;4:size1
'λx.apply(nor[apply(same_color,iota(x.s)),size1],iota(filter(x.s, and[blue,and[yellow,apply(same_shape,iota(x.s))]])))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,apply(same_shape,x.o)],iota(filter(filter(filter(filter(filter(filter(x.s, size3), yellow), triangle), blue), size3), green)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:triangle;4:blue;4:size3;4:green
'λx.apply(size2,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, green), and[implies[nor[not[implies[and[and[apply(size-lt,x.o),triangle],circle],yellow]],not[not[circle]]],apply(same_color,x.o)],apply(size-lt,iota(filter(x.s, blue)))]), green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:triangle;4:circle;4:yellow;4:not[%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(not[and[rectangle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, not[rectangle]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(size2,iota(filter(x.s, and[iff[size3,triangle],circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:circle
'λx.contains(iota(filter(filter(x.s, blue), rectangle)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[circle,apply(same_size,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, rectangle), circle), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:yellow
'λx.apply(and[circle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[circle,size1],and[circle,not[yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:and[%s,%s];4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(or[or[size3,green],size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:size3;4:green;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, circle)), filter(filter(filter(x.s, yellow), blue), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:rectangle
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), rectangle), size2), size3), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:size2;4:size3;4:triangle
'λx.apply(green,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.empty(filter(x.s, or[apply(same_shape,iota(x.s)),yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(and[size3,or[and[apply(same_size,x.o),yellow],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:green;1:%s.o;2:x
'λx.forall(and[apply(same_shape,x.o),or[or[triangle,size3],size2]],filter(x.s, and[green,green]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(and[iff[size2,green],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(or[green,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(or[blue,not[triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(or[circle,apply(same_size,iota(filter(x.s, green)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, circle), size1), size3), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size3;4:green
'λx.contains(x.o, filter(x.s, and[not[rectangle],apply(same_size,iota(x.s))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), implies[size2,iff[yellow,rectangle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size2;4:iff[%s,%s];4:yellow;4:rectangle
'λx.empty(filter(filter(x.s, rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.empty(filter(filter(x.s, rectangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(x.s, rectangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.forall(and[size1,triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.apply(or[nor[implies[circle,yellow],blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:circle;4:yellow;4:blue;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), and[size1,not[circle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size1;4:not[%s];4:circle
'λx.empty(filter(filter(filter(filter(filter(x.s, and[and[blue,and[blue,green]],size3]), and[size1,green]), size3), and[size2,yellow]), or[apply(same_size,iota(x.s)),size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:green;4:size3;4:and[%s,%s];4:size1;4:green;4:size3;4:and[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.exists(size1, filter(filter(filter(x.s, blue), or[blue,rectangle]), apply(size-leq,iota(x.s))))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size3,and[or[size1,rectangle],size3]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[blue,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(and[iff[nand[apply(same_size,iota(filter(x.s, triangle))),yellow],or[yellow,not[not[rectangle]]]],apply(size-gt,x.o)], filter(x.s, or[not[size1],apply(same_shape,iota(filter(x.s, blue)))]))'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:or[%s,%s];4:yellow;4:not[%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size3,size2],iota(filter(x.s, and[and[or[not[green],implies[green,green]],triangle],circle])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:implies[%s,%s];4:green;4:green;4:triangle;4:circle
'λx.apply(and[and[and[blue,size1],rectangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[and[and[green,size3],and[circle,green]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, size1), nor[circle,green]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:circle;4:green;4:size2
'λx.apply(or[green,not[apply(size-leq,x.o)]],iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(implies[iff[and[and[size3,not[circle]],rectangle],size3],green],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:circle;4:rectangle;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),and[size2,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[size3,or[size3,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(x.s))), rectangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(and[not[not[green]],and[green,and[rectangle,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[circle,triangle]), apply(same_shape,iota(filter(filter(x.s, green), or[and[blue,size2],size3])))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size3
'λx.apply(or[rectangle,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.exists(not[and[blue,green]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(or[not[iff[not[circle],nand[and[circle,size1],apply(same_shape,x.o)]]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:not[%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[or[apply(same_size,x.o),size1],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[nand[blue,blue],blue],iota(filter(filter(x.s, apply(same_color,x.o)), not[and[or[size1,size1],and[size1,rectangle]]])))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:size1;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(apply(size-geq,iota(x.s)),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(size-leq,iota(filter(x.s, and[nor[size3,size3],size3]))),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:size3;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[yellow,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.exists(and[size3,yellow], filter(filter(filter(filter(filter(x.s, and[circle,size3]), blue), rectangle), and[not[not[blue]],apply(size-geq,iota(filter(filter(x.s, and[rectangle,size3]), circle)))]), nand[size1,not[yellow]]))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3;4:blue;4:rectangle;4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;4:circle;4:nand[%s,%s];4:size1;4:not[%s];4:yellow
'λx.apply(blue,iota(filter(filter(x.s, rectangle), or[apply(same_size,x.o),size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.forall(circle,filter(x.s, size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(circle,filter(x.s, green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(blue, filter(filter(x.s, blue), green))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.empty(filter(filter(x.s, size3), apply(same_shape,iota(filter(x.s, implies[size2,nand[and[size3,or[rectangle,and[size2,green]]],and[iff[and[blue,or[triangle,green]],blue],circle]]])))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:nand[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:green;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:green;4:blue;4:circle
'λx.forall(apply(same_shape,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[apply(size-gt,x.o)]), not[blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:blue
'λx.contains(x.o, filter(filter(x.s, blue), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(and[blue,nor[rectangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nor[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, apply(same_size,x.o)), and[not[size2],triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size2;4:triangle
'λx.apply(or[yellow,and[not[and[iff[size2,and[or[iff[circle,and[and[apply(same_size,iota(x.s)),not[triangle]],not[apply(same_color,x.o)]]],apply(size-lt,x.o)],triangle]],green]],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:triangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(yellow,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(x.s, and[blue,green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green
'λx.empty(filter(x.s, and[blue,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.empty(filter(x.s, and[blue,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2
'λx.apply(not[iff[size1,and[size2,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(implies[or[circle,triangle],rectangle],iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.false'	0:false
'λx.apply(implies[apply(same_shape,x.o),implies[green,triangle]],iota(filter(filter(filter(filter(x.s, size2), size3), size3), size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size3;4:size3
'λx.exists(or[size1,circle], filter(filter(filter(filter(x.s, green), and[circle,green]), or[not[iff[rectangle,not[size3]]],apply(size-geq,iota(x.s))]), and[implies[blue,size3],or[green,circle]]))'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:green;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:rectangle;4:not[%s];4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:or[%s,%s];4:green;4:circle
'λx.contains(iota(filter(filter(filter(x.s, yellow), not[blue]), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:blue;4:green;3:%s.s;2:x
'λx.empty(filter(x.s, not[not[green]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:green
'λx.apply(blue,iota(filter(filter(x.s, or[and[circle,triangle],yellow]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:yellow;4:circle
'λx.apply(size3,iota(filter(x.s, not[not[blue]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue
'λx.apply(not[iff[apply(same_size,x.o),and[rectangle,and[blue,and[size2,size1]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.forall(nor[yellow,iff[rectangle,or[rectangle,triangle]]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:yellow;4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.exists(apply(same_color,iota(filter(filter(x.s, size2), triangle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, size3), size2)), filter(filter(x.s, nor[triangle,yellow]), not[size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:yellow;4:not[%s];4:size1
'λx.contains(iota(filter(x.s, not[triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;3:%s.s;2:x
'λx.exists(blue, x.s)'	0:exists(%s, %s);4:blue;3:%s.s;2:x
'λx.exists(yellow, filter(filter(filter(filter(x.s, iff[not[size1],blue]), iff[apply(same_shape,iota(filter(x.s, yellow))),not[triangle]]), and[not[green],and[triangle,and[size2,green]]]), yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:size1;4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:triangle;4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:green;4:yellow
'λx.apply(triangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[circle],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.contains(iota(filter(x.s, and[green,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, or[size3,implies[green,green]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:implies[%s,%s];4:green;4:green
'λx.apply(rectangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[green],iota(filter(filter(x.s, green), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(or[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, yellow), or[blue,rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, not[apply(same_shape,x.o)]), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(circle,iota(filter(filter(x.s, or[size2,apply(same_shape,iota(x.s))]), nand[and[yellow,size3],nand[or[size1,nand[yellow,size3]],blue]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:nand[%s,%s];4:or[%s,%s];4:size1;4:nand[%s,%s];4:yellow;4:size3;4:blue
'λx.contains(iota(x.s), filter(filter(x.s, blue), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.exists(apply(same_size,iota(filter(filter(x.s, and[rectangle,triangle]), circle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:circle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, blue), implies[circle,size2]), yellow), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:circle;4:size2;4:yellow;4:size3
'λx.apply(size3,iota(filter(x.s, and[size1,rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle
'λx.contains(iota(filter(x.s, and[blue,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(or[and[triangle,or[not[size3],triangle]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:size3;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_size,iota(filter(filter(x.s, yellow), circle))))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.forall(size3,filter(filter(x.s, implies[size3,triangle]), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:triangle;4:green
'λx.apply(nor[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[size1,triangle],blue],iota(filter(x.s, or[blue,blue])))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue
'λx.apply(rectangle,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, not[and[circle,triangle]]), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:triangle;4:size1
'λx.forall(or[not[circle],size2],filter(x.s, triangle))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[apply(same_shape,x.o),green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, and[circle,apply(same_color,x.o)]), triangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(and[not[yellow],size1],iota(filter(filter(x.s, and[size1,iff[size3,or[rectangle,size2]]]), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:iff[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:size2;4:size3
'λx.exists(and[size3,blue], filter(filter(filter(filter(x.s, blue), not[size1]), rectangle), green))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1;4:rectangle;4:green
'λx.apply(or[and[size3,triangle],and[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,or[size2,triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,x.s)'	0:forall(%s,%s);4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, not[not[blue]]), nand[circle,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue;4:nand[%s,%s];4:circle;4:size2
'λx.apply(and[green,apply(same_shape,iota(filter(x.s, size1)))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[and[rectangle,and[circle,rectangle]],yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:rectangle;4:yellow;3:%s.s;2:x
'λx.apply(implies[green,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.forall(nand[size3,apply(same_color,x.o)],filter(x.s, size3))'	0:forall(%s,%s);4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(x.s), filter(filter(filter(x.s, apply(same_shape,x.o)), circle), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size1
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, implies[size1,green]), blue), not[size3]), nand[and[triangle,or[triangle,size3]],or[circle,size3]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:green;4:blue;4:not[%s];4:size3;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:circle;4:size3
'λx.apply(nand[not[not[size1]],nor[size3,and[circle,yellow]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:not[%s];4:size1;4:nor[%s,%s];4:size3;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(x.s, nand[apply(same_color,iota(x.s)),not[size3]]))),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[not[size1],not[circle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.empty(filter(x.s, apply(size-gt,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), and[blue,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:size2
'λx.apply(size2,iota(filter(filter(x.s, size3), apply(size-leq,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(or[size3,nand[nor[nand[size2,apply(same_shape,iota(x.s))],and[blue,size1]],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:nand[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(or[green,and[green,and[green,yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, triangle), and[rectangle,circle]), nand[circle,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:circle;4:nand[%s,%s];4:circle;4:size2
'λx.apply(apply(same_color,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, or[green,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), yellow), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:rectangle
'λx.apply(and[size1,size2],iota(filter(filter(x.s, nor[size2,yellow]), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, yellow), and[nor[size2,size1],circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:nor[%s,%s];4:size2;4:size1;4:circle
'λx.apply(blue,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[size2,and[not[size3],size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],x.o)'	0:apply(%s,%s);4:not[%s];4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, triangle), nor[and[green,apply(same_size,x.o)],apply(size-gt,iota(filter(filter(x.s, yellow), size2)))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.forall(or[apply(size-leq,iota(filter(x.s, and[blue,rectangle]))),apply(size-geq,iota(x.s))],filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[rectangle]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:green
'λx.apply(and[nor[and[size1,triangle],size1],yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[yellow,apply(same_color,iota(filter(x.s, size2)))],iota(filter(x.s, and[circle,rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, and[green,green]), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;4:size1
'λx.apply(size1,iota(filter(x.s, nor[apply(same_color,x.o),green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(blue,iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.contains(iota(filter(x.s, size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(implies[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[triangle,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nand[not[size1],rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:size1;4:rectangle
'λx.apply(not[iff[or[yellow,size1],green]],iota(filter(filter(filter(x.s, blue), blue), size2)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size2
'λx.apply(apply(same_color,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, blue))),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size2,size3],iota(filter(x.s, nor[or[yellow,size2],size1])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:size1
'λx.exists(not[size1], filter(x.s, and[apply(same_color,x.o),size3]))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(not[not[and[blue,or[blue,green]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, not[or[green,green]]), size3)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:green;4:green;4:size3
'λx.forall(apply(size-geq,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, circle), or[apply(same_color,x.o),triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.forall(or[not[rectangle],or[blue,or[triangle,size3]]],filter(filter(filter(x.s, triangle), size3), yellow))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:yellow
'λx.apply(yellow,iota(filter(x.s, and[yellow,or[blue,green]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:green
'λx.empty(filter(filter(filter(x.s, circle), size2), and[or[apply(same_color,x.o),or[and[size3,and[not[blue],size2]],circle]],green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:blue;4:size2;4:circle;4:green
'λx.apply(or[green,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[apply(size-leq,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(size-geq,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[and[size2,apply(same_shape,x.o)]],implies[circle,implies[size3,apply(same_color,iota(filter(x.s, and[and[nor[apply(size-geq,iota(filter(filter(filter(x.s, nand[rectangle,and[size3,triangle]]), yellow), size1))),apply(size-lt,iota(x.s))],circle],or[blue,triangle]])))]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:circle;4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:triangle;4:yellow;4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nand[green,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, rectangle), iff[size3,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:size3;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, rectangle), triangle), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:circle
'λx.exists(and[not[triangle],size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:triangle;4:size1;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[size1,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1
'λx.contains(x.o, filter(x.s, and[size1,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green
'λx.apply(implies[blue,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(or[yellow,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, nand[yellow,green]), apply(size-leq,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(iff[circle,blue],iota(filter(filter(x.s, size2), and[and[green,not[yellow]],and[circle,nor[apply(same_color,iota(x.s)),green]]])))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:yellow;4:and[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(implies[size3,size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_size,x.o), filter(filter(x.s, size2), size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(or[blue,not[apply(same_size,iota(filter(filter(filter(x.s, triangle), rectangle), rectangle)))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, and[or[circle,apply(same_color,x.o)],blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[size1,iff[size1,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:iff[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, apply(size-geq,x.o)), or[size2,size1]), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:size2;4:size1;4:size2
'λx.exists(circle, filter(x.s, rectangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, size1), apply(same_size,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(implies[circle,and[not[green],yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[nand[size3,yellow],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:size3;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(filter(filter(filter(x.s, triangle), size2), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:rectangle
'λx.apply(not[yellow],iota(filter(x.s, and[green,or[not[size2],triangle]])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:size2;4:triangle
'λx.forall(size1,filter(x.s, implies[and[or[yellow,rectangle],triangle],implies[nand[size2,size2],triangle]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:triangle;4:implies[%s,%s];4:nand[%s,%s];4:size2;4:size2;4:triangle
'λx.apply(implies[and[and[apply(same_color,x.o),blue],rectangle],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(iff[rectangle,not[and[or[apply(same_shape,iota(x.s)),not[apply(same_size,x.o)]],circle]]],iota(filter(filter(x.s, or[circle,apply(same_color,iota(filter(x.s, not[green])))]), green)))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:green
'λx.exists(size2, filter(x.s, apply(same_size,iota(x.s))))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, x.s)'	0:exists(%s, %s);4:triangle;3:%s.s;2:x
'λx.apply(nor[not[circle],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(x.s))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[green,size1],iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), or[apply(same_size,x.o),size3]), size1), green), yellow), green), size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size1;4:green;4:yellow;4:green;4:size3
'λx.apply(not[and[size3,size2]],iota(filter(filter(filter(filter(x.s, nor[size1,not[and[yellow,size1]]]), blue), not[iff[circle,rectangle]]), yellow)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:blue;4:not[%s];4:iff[%s,%s];4:circle;4:rectangle;4:yellow
'λx.forall(nor[apply(same_shape,x.o),apply(size-lt,x.o)],filter(filter(x.s, blue), apply(same_color,x.o)))'	0:forall(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size1), green), circle), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:circle;4:green
'λx.apply(yellow,iota(filter(x.s, and[apply(same_shape,iota(x.s)),implies[size2,size2]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:size2
'λx.apply(and[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[rectangle,and[not[green],size3]],iota(filter(filter(x.s, circle), not[size3])))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size3
'λx.apply(and[size1,not[nor[apply(size-gt,iota(filter(x.s, not[not[not[circle]]]))),triangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:not[%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, and[circle,and[blue,apply(same_color,x.o)]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, triangle), size1), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:blue
'λx.apply(and[size2,not[implies[size3,circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:implies[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(x.s, or[or[and[yellow,apply(same_size,iota(x.s))],apply(same_shape,x.o)],triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(green,iota(filter(filter(x.s, size2), and[triangle,size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:size1
'λx.apply(or[size1,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, apply(same_shape,iota(x.s))))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, apply(same_size,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, x.s)'	0:exists(%s, %s);4:yellow;3:%s.s;2:x
'λx.apply(or[size2,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size3,triangle]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[circle],iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.contains(iota(filter(filter(filter(filter(x.s, size3), rectangle), and[implies[not[and[circle,size1]],implies[and[or[blue,not[or[nor[triangle,blue],triangle]]],or[size1,and[not[green],size3]]],green]],size2]), size3)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:size1;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:triangle;4:or[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:green;4:size3;4:green;4:size2;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[blue,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, circle), nand[size2,triangle]))),iota(filter(x.s, and[or[rectangle,size2],apply(same_size,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[yellow,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.apply(and[size1,size2],iota(filter(filter(filter(filter(filter(x.s, triangle), blue), blue), size3), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:blue;4:size3;4:blue
'λx.exists(iff[size2,and[circle,size1]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.contains(x.o, filter(filter(x.s, rectangle), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.exists(yellow, filter(x.s, or[size3,triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.forall(or[blue,rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(or[green,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[triangle],and[green,and[green,and[size1,size3]]]],iota(filter(filter(filter(x.s, and[and[apply(same_size,iota(filter(x.s, and[triangle,size3]))),and[size3,size1]],apply(same_size,x.o)]), yellow), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:blue
'λx.apply(and[circle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[green,and[yellow,blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:blue
'λx.forall(circle,filter(x.s, triangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, nand[nor[circle,or[or[yellow,size2],or[yellow,apply(same_size,iota(x.s))]]],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(or[and[and[size2,rectangle],nand[and[triangle,yellow],or[apply(size-lt,iota(x.s)),or[apply(size-gt,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, circle), size1), triangle), yellow), and[size2,or[size3,size1]]), green), green), blue), circle))),and[triangle,and[rectangle,not[rectangle]]]]]]],rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:triangle;4:yellow;4:and[%s,%s];4:size2;4:or[%s,%s];4:size3;4:size1;4:green;4:green;4:blue;4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, and[apply(same_color,iota(filter(filter(filter(filter(filter(filter(x.s, or[not[and[yellow,size3]],size2]), size3), not[circle]), circle), and[size2,size1]), triangle))),or[circle,size1]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size3;4:size2;4:size3;4:not[%s];4:circle;4:circle;4:and[%s,%s];4:size2;4:size1;4:triangle;4:or[%s,%s];4:circle;4:size1
'λx.exists(iff[size1,circle], filter(filter(x.s, yellow), or[or[size3,size1],not[or[size2,size1]]]))'	0:exists(%s, %s);4:iff[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:not[%s];4:or[%s,%s];4:size2;4:size1
'λx.apply(or[blue,or[blue,size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,and[implies[apply(same_color,iota(x.s)),rectangle],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), not[green]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:green;4:circle
'λx.apply(or[not[circle],or[size2,not[yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(nand[circle,or[circle,size3]],iota(filter(filter(x.s, and[blue,not[or[circle,apply(same_size,iota(filter(filter(x.s, or[blue,not[or[green,apply(same_shape,x.o)]]]), size3)))]]]), and[and[triangle,apply(same_size,x.o)],apply(same_size,iota(filter(x.s, and[not[apply(same_color,x.o)],yellow])))])))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, or[size3,and[size3,apply(same_shape,iota(x.s))]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,and[triangle,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[implies[green,rectangle],and[rectangle,and[and[size3,or[size3,size3]],blue]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:size3;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[yellow,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, yellow), not[size1]), not[size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size1;4:not[%s];4:size1
'λx.exists(or[triangle,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.apply(iff[nor[blue,green],size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:blue;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(x.s, triangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(size1,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(nand[size2,and[circle,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), nor[blue,and[blue,blue]]), iff[blue,yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:blue;4:and[%s,%s];4:blue;4:blue;4:iff[%s,%s];4:blue;4:yellow
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), blue), and[blue,size3]), triangle), not[and[not[size2],or[circle,not[and[rectangle,size2]]]]]), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:blue;4:size3;4:triangle;4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:rectangle;4:size2;4:green
'λx.empty(filter(filter(filter(filter(x.s, yellow), circle), size2), or[size2,not[iff[size1,blue]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:size2;4:or[%s,%s];4:size2;4:not[%s];4:iff[%s,%s];4:size1;4:blue
'λx.apply(not[yellow],x.o)'	0:apply(%s,%s);4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[implies[circle,apply(same_shape,iota(filter(x.s, implies[size2,blue])))],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[nand[circle,apply(same_size,x.o)],or[not[size3],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(or[yellow,and[and[triangle,or[green,blue]],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:blue;4:green;1:%s.o;2:x
'λx.apply(or[or[size2,not[and[or[green,not[size1]],apply(size-lt,x.o)]]],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[size2,size2]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size2;4:size3
'λx.apply(blue,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[yellow,and[or[rectangle,size1],size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:size1;1:%s.o;2:x
'λx.exists(and[green,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.apply(or[size3,or[not[blue],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[rectangle,blue],iota(filter(filter(filter(x.s, size2), rectangle), nand[not[size2],and[circle,circle]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:nand[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:circle;4:circle
'λx.apply(and[triangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[and[size1,nor[yellow,green]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:nor[%s,%s];4:yellow;4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[and[not[size1],not[yellow]],or[not[size2],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:yellow;4:or[%s,%s];4:not[%s];4:size2;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, triangle), apply(size-leq,iota(filter(x.s, rectangle)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(x.s), filter(filter(x.s, size2), or[yellow,nand[iff[not[triangle],nor[and[size3,triangle],triangle]],or[blue,green]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:yellow;4:nand[%s,%s];4:iff[%s,%s];4:not[%s];4:triangle;4:nor[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:triangle;4:or[%s,%s];4:blue;4:green
'λx.apply(not[and[yellow,and[apply(same_shape,iota(x.s)),not[yellow]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[circle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),and[iff[and[apply(same_size,iota(filter(filter(filter(x.s, nor[implies[yellow,and[yellow,size3]],yellow]), triangle), not[size3]))),not[or[and[apply(size-leq,x.o),rectangle],blue]]],size2],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:implies[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size3;4:yellow;4:triangle;4:not[%s];4:size3;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;4:blue;4:size2;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(filter(x.s, and[and[size3,or[apply(same_color,x.o),or[yellow,apply(same_shape,x.o)]]],blue])))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, triangle), blue), size1), apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, and[or[not[size2],size2],triangle]), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:size2;4:triangle;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, and[yellow,not[yellow]]), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:yellow;4:rectangle
'λx.exists(size2, filter(filter(filter(x.s, nor[or[size2,size3],and[iff[size1,green],triangle]]), rectangle), not[size1]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:size2;4:size3;4:and[%s,%s];4:iff[%s,%s];4:size1;4:green;4:triangle;4:rectangle;4:not[%s];4:size1
'λx.apply(apply(same_color,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,rectangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[size2,apply(same_color,iota(filter(filter(filter(filter(x.s, triangle), size2), apply(same_color,x.o)), apply(same_size,x.o))))],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, not[circle]), and[rectangle,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(and[or[blue,yellow],not[not[and[not[green],apply(same_size,iota(filter(filter(x.s, and[circle,blue]), size1)))]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:not[%s];4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue;4:size1;1:%s.o;2:x
'λx.exists(rectangle, x.s)'	0:exists(%s, %s);4:rectangle;3:%s.s;2:x
'λx.apply(not[and[circle,blue]],iota(filter(filter(x.s, size1), or[circle,size2])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:size2
'λx.forall(green,filter(x.s, rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, or[size3,size2]), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2;4:yellow;3:%s.s;2:x
'λx.forall(apply(size-leq,x.o),filter(filter(x.s, implies[not[and[rectangle,triangle]],green]), apply(same_shape,iota(x.s))))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, or[size3,apply(same_color,iota(filter(x.s, or[size2,circle])))]), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, or[size3,or[rectangle,size2]]), yellow), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:size2;4:yellow;4:size1
'λx.apply(and[size3,and[rectangle,rectangle]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[apply(same_shape,x.o),not[and[blue,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, and[or[iff[green,yellow],size2],circle]), size2), size1), and[implies[or[apply(size-lt,iota(x.s)),not[triangle]],green],yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:green;4:yellow;4:size2;4:circle;4:size2;4:size1;4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;4:green;4:yellow
'λx.apply(and[blue,green],iota(filter(filter(filter(x.s, nor[circle,size2]), and[size3,circle]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:size2;4:and[%s,%s];4:size3;4:circle;4:blue
'λx.apply(size1,iota(filter(filter(x.s, not[not[rectangle]]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle;4:yellow
'λx.apply(or[implies[circle,green],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:green;4:size2;1:%s.o;2:x
'λx.apply(and[blue,not[green]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[blue,size2],iota(filter(x.s, and[circle,rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(filter(x.s, triangle), size1), or[size1,size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:or[%s,%s];4:size1;4:size1
'λx.forall(apply(same_size,iota(filter(filter(x.s, and[apply(same_shape,x.o),or[not[apply(same_shape,x.o)],green]]), circle))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nor[or[blue,apply(size-geq,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))],not[triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:triangle
'λx.contains(iota(filter(filter(x.s, apply(same_size,iota(x.s))), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.forall(not[size3],x.s)'	0:forall(%s,%s);4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(not[size1],x.s)'	0:forall(%s,%s);4:not[%s];4:size1;3:%s.s;2:x
'λx.forall(not[size2],x.s)'	0:forall(%s,%s);4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(nand[size3,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[or[rectangle,or[blue,triangle]],nand[triangle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:triangle;4:nand[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[blue,and[and[size1,apply(same_size,x.o)],green]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.contains(iota(filter(filter(x.s, blue), or[not[size2],not[size3]])), filter(x.s, apply(same_size,iota(filter(x.s, blue)))))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:not[%s];4:size2;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, size3), not[yellow]), rectangle), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow;4:rectangle;4:size1
'λx.forall(or[blue,or[size2,not[yellow]]],filter(x.s, not[apply(size-lt,x.o)]))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size2;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(size2, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(x.s, not[size3]), circle), size3), size2), not[triangle]), and[blue,nand[triangle,size2]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:circle;4:size3;4:size2;4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:nand[%s,%s];4:triangle;4:size2
'λx.empty(filter(x.s, and[and[and[size2,and[blue,yellow]],circle],and[not[yellow],rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:yellow;4:circle;4:and[%s,%s];4:not[%s];4:yellow;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, and[circle,rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(or[or[size1,size2],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, and[size2,apply(same_color,iota(x.s))]), and[and[iff[size2,not[green]],apply(same_color,x.o)],or[size3,triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.apply(and[and[size3,blue],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:size3;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, triangle), yellow))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(or[and[not[and[yellow,size1]],not[blue]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[size3,apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nand[circle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, not[size1]), blue), green), implies[or[implies[circle,blue],circle],size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue;4:green;4:implies[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:circle;4:blue;4:circle;4:size1;3:%s.s;2:x
'λx.apply(apply(size-gt,iota(filter(filter(x.s, implies[implies[circle,green],yellow]), apply(size-leq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:circle;4:green;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[green,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size3],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[not[size3],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:size1;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[size3,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, green), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.exists(and[and[and[size2,green],size1],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:size1;4:blue;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, or[size2,not[circle]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, nand[and[implies[rectangle,size2],blue],not[size3]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size2;4:blue;4:not[%s];4:size3
'λx.apply(apply(same_color,iota(filter(filter(x.s, apply(same_size,iota(x.s))), rectangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[not[triangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(and[circle,blue],iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(not[not[yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,triangle],iota(filter(x.s, and[or[blue,rectangle],triangle])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:triangle
'λx.exists(nand[circle,not[green]], filter(x.s, size1))'	0:exists(%s, %s);4:nand[%s,%s];4:circle;4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[apply(same_size,x.o),triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[blue,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,green],iota(filter(filter(filter(x.s, nor[circle,size2]), yellow), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:size2;4:yellow;4:blue
'λx.apply(size2,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), or[and[apply(same_shape,iota(x.s)),yellow],size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(blue,iota(x.s))'	0:apply(%s,%s);4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(or[not[size1],size3],filter(filter(x.s, size2), green))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(nand[size3,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(implies[size3,green],iota(filter(x.s, or[circle,apply(same_size,iota(filter(x.s, yellow)))])))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[size1,rectangle],iota(filter(filter(x.s, and[yellow,or[and[blue,green],size2]]), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, or[size3,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size3
'λx.empty(filter(filter(filter(x.s, or[nor[circle,and[size2,circle]],size1]), triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:size2;4:circle;4:size1;4:triangle;4:blue
'λx.exists(not[rectangle], filter(filter(filter(filter(x.s, circle), not[blue]), rectangle), not[apply(same_shape,x.o)]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue;4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[green,size3],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(not[apply(same_size,iota(filter(x.s, triangle)))], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[apply(same_size,iota(x.s)),green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(or[not[blue],or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[blue,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.exists(circle, filter(filter(filter(filter(filter(filter(x.s, yellow), rectangle), size3), nand[size2,not[size3]]), blue), blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:size3;4:nand[%s,%s];4:size2;4:not[%s];4:size3;4:blue;4:blue
'λx.apply(and[and[not[green],not[size2]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-gt,iota(filter(filter(filter(x.s, green), size2), and[triangle,blue]))),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[not[and[yellow,circle]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:circle;4:blue;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, size2), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.forall(size2,filter(filter(x.s, size2), size3))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, triangle), nor[size3,apply(same_shape,x.o)]), size1), nand[green,and[and[nor[apply(same_color,x.o),size3],rectangle],not[green]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:nand[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:rectangle;4:not[%s];4:green
'λx.contains(iota(x.s), filter(filter(x.s, yellow), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(and[green,implies[size1,circle]],iota(filter(x.s, apply(size-lt,iota(filter(x.s, yellow))))))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:implies[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(x.s, nor[size2,or[size1,triangle]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:or[%s,%s];4:size1;4:triangle
'λx.apply(yellow,iota(filter(filter(x.s, green), apply(same_size,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[yellow,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, blue), size1), apply(same_size,iota(filter(x.s, apply(same_size,x.o)))))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, size2), iff[size2,size3]), apply(size-gt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[or[size3,iff[apply(same_color,iota(x.s)),yellow]]]), size1)), filter(filter(filter(x.s, yellow), and[blue,iff[and[nand[size2,rectangle],size2],rectangle]]), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size3;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:blue;4:iff[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:rectangle;4:size2;4:rectangle;4:size3
'λx.apply(nor[and[size1,triangle],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[apply(size-gt,iota(filter(filter(x.s, rectangle), apply(same_size,x.o)))),green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, green), or[apply(same_shape,iota(x.s)),size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(iff[size2,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(x.s, size1)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[size1,size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(yellow,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(blue,iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.forall(circle,filter(filter(x.s, size2), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.contains(x.o, filter(filter(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, not[apply(size-lt,iota(filter(filter(x.s, apply(same_size,iota(x.s))), and[and[or[blue,circle],rectangle],blue])))]), yellow)))), blue), size2), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:rectangle;4:blue;4:yellow;4:blue;4:size2;4:size2
'λx.apply(or[and[size3,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[not[circle],not[circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[apply(size-leq,x.o),or[nand[size2,not[yellow]],size2]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:nand[%s,%s];4:size2;4:not[%s];4:yellow;4:size2
'λx.apply(or[and[size2,and[rectangle,blue]],not[not[or[size2,and[size3,circle]]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:blue;4:not[%s];4:not[%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(not[implies[size3,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, size1), and[apply(same_color,iota(filter(x.s, iff[nor[implies[rectangle,size3],and[circle,yellow]],blue]))),size2]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:circle;4:yellow;4:blue;4:size2
'λx.empty(filter(filter(filter(x.s, yellow), rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(green,iota(filter(x.s, and[yellow,blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.contains(iota(filter(x.s, green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.exists(size2, filter(filter(x.s, blue), or[triangle,or[apply(size-leq,iota(x.s)),size2]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, and[blue,nand[rectangle,blue]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:rectangle;4:blue
'λx.apply(triangle,iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, size1), triangle), green), iff[triangle,apply(same_size,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:green;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, nand[or[apply(same_color,iota(x.s)),green],size2]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:size2;4:size3
'λx.apply(yellow,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, not[triangle]), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:circle
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, size2), size3), and[size2,yellow]), rectangle), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:and[%s,%s];4:size2;4:yellow;4:rectangle;4:rectangle
'λx.apply(and[rectangle,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[and[not[rectangle],size1],apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), size1), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:circle
'λx.apply(yellow,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, yellow))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[or[apply(same_color,iota(x.s)),blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[yellow,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(filter(filter(filter(filter(x.s, and[or[size3,triangle],size2]), size3), triangle), triangle), blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:size2;4:size3;4:triangle;4:triangle;4:blue
'λx.apply(or[size1,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:green
'λx.forall(not[green],x.s)'	0:forall(%s,%s);4:not[%s];4:green;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, and[nand[not[blue],green],nand[size2,and[and[or[triangle,yellow],and[and[triangle,implies[rectangle,yellow]],size1]],not[size3]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:green;4:nand[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:implies[%s,%s];4:rectangle;4:yellow;4:size1;4:not[%s];4:size3
'λx.apply(rectangle,iota(filter(x.s, nor[triangle,size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:size3
'λx.apply(not[and[yellow,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(not[and[yellow,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[circle,size2],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[size1,size3],iota(filter(x.s, and[and[size1,apply(size-lt,x.o)],size1])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(x.s, not[or[rectangle,green]]), iff[size2,and[and[not[size2],triangle],apply(same_size,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:green;4:iff[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(apply(same_size,iota(x.s)),filter(x.s, not[triangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[and[rectangle,and[size3,size2]],not[green]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size2;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(circle,filter(x.s, and[or[and[iff[size3,or[or[blue,size1],not[not[and[apply(size-gt,iota(x.s)),size1]]]]],or[and[nand[size2,and[or[size1,and[or[nor[not[size3],not[green]],size3],nand[and[yellow,and[circle,yellow]],rectangle]]],yellow]],size2],circle]],circle],blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:blue;4:size1;4:not[%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:size3;4:not[%s];4:green;4:size3;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:yellow;4:rectangle;4:yellow;4:size2;4:circle;4:circle;4:blue
'λx.apply(iff[nand[and[green,blue],apply(same_size,iota(filter(filter(filter(x.s, and[triangle,rectangle]), green), nand[rectangle,circle])))],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:green;4:nand[%s,%s];4:rectangle;4:circle;4:green;1:%s.o;2:x
'λx.apply(not[and[blue,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[or[size2,size2],nor[apply(size-gt,iota(x.s)),and[or[and[rectangle,not[triangle]],circle],size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:size2;4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:triangle;4:circle;4:size3;1:%s.o;2:x
'λx.forall(or[or[apply(same_color,x.o),not[green]],apply(same_color,iota(filter(filter(filter(x.s, size3), nand[and[blue,or[blue,size3]],apply(same_shape,x.o)]), implies[size3,size2])))],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:size2;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size2))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(nand[or[circle,green],and[yellow,and[yellow,size2]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size3), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.contains(iota(x.s), filter(filter(x.s, size2), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(and[apply(same_size,x.o),not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[or[size3,green],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[and[triangle,size3],circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:circle
'λx.apply(or[circle,size2],iota(filter(x.s, apply(same_size,iota(filter(x.s, yellow))))))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[and[size1,size1],size3],iota(filter(filter(x.s, and[blue,or[size1,circle]]), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:circle;4:yellow
'λx.apply(size3,iota(filter(filter(filter(x.s, size2), and[or[triangle,green],iff[circle,blue]]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:triangle;4:green;4:iff[%s,%s];4:circle;4:blue;4:blue
'λx.apply(and[blue,implies[rectangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(apply(size-geq,iota(x.s)), filter(filter(filter(x.s, blue), triangle), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), rectangle), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:triangle
'λx.apply(not[not[apply(same_shape,x.o)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-geq,iota(filter(x.s, apply(size-gt,iota(x.s))))), filter(filter(filter(x.s, and[triangle,iff[yellow,rectangle]]), and[blue,and[size3,blue]]), green))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:iff[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:blue;4:green
'λx.apply(and[and[rectangle,size3],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[implies[and[triangle,yellow],not[or[size1,rectangle]]],triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:not[%s];4:or[%s,%s];4:size1;4:rectangle;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), and[triangle,and[green,iff[size2,and[size2,and[blue,green]]]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:iff[%s,%s];4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:green
'λx.apply(and[rectangle,and[or[not[triangle],yellow],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[size3,and[and[size1,or[rectangle,green]],and[blue,yellow]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:blue;4:yellow
'λx.apply(and[blue,and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, or[apply(same_size,iota(x.s)),size3]), yellow), size3), and[apply(same_size,iota(filter(x.s, size1))),size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:yellow;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.empty(filter(filter(x.s, size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(yellow,iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, triangle), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(and[and[and[blue,and[green,circle]],green],or[blue,yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:circle;4:green;4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), blue), not[blue]), triangle), yellow), size1), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:not[%s];4:blue;4:triangle;4:yellow;4:size1;4:blue
'λx.apply(nor[or[circle,green],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.forall(and[size1,iff[yellow,size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:iff[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(and[blue,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[green,and[size1,iff[size2,green]]],and[not[rectangle],and[apply(size-gt,x.o),blue]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:iff[%s,%s];4:size2;4:green;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[yellow,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[and[iff[rectangle,circle],blue],size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:circle;4:blue;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(iff[or[nand[size3,circle],circle],or[green,size2]],iota(filter(filter(x.s, or[or[and[yellow,yellow],implies[not[size1],size1]],apply(size-gt,x.o)]), size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:size3;4:circle;4:circle;4:or[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:implies[%s,%s];4:not[%s];4:size1;4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2
'λx.forall(circle,filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(and[or[yellow,blue],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(iff[rectangle,and[size3,and[green,size1]]], filter(filter(x.s, rectangle), green))'	0:exists(%s, %s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[nor[rectangle,size2],yellow],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(filter(x.s, triangle), and[and[green,size2],and[and[blue,green],not[size2]]]), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:not[%s];4:size2;4:size1
'λx.apply(or[triangle,green],iota(filter(x.s, and[and[blue,size2],size2])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size2
'λx.apply(and[iff[size1,apply(same_color,x.o)],blue],iota(filter(x.s, not[not[size2]])))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size2
'λx.exists(blue, filter(filter(filter(x.s, and[size3,triangle]), size1), circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle;4:size1;4:circle
'λx.contains(iota(filter(filter(x.s, size1), triangle)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[not[not[size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, circle), size3), or[yellow,rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:or[%s,%s];4:yellow;4:rectangle
'λx.apply(and[apply(same_size,x.o),triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, nor[apply(same_color,iota(filter(filter(x.s, size3), blue))),size1]), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size1;4:triangle
'λx.apply(and[nor[size2,size1],apply(same_size,iota(x.s))],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size2;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[and[size3,rectangle],not[size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[size2,size3],not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[or[or[blue,blue],rectangle],not[yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:rectangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[yellow,yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(not[yellow],iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(not[apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[size1,nand[circle,not[circle]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nand[%s,%s];4:circle;4:not[%s];4:circle
'λx.apply(iff[size1,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), rectangle), and[green,and[green,yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:yellow
'λx.apply(or[size1,or[size2,and[apply(size-geq,x.o),triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, yellow), not[size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size2
'λx.apply(not[triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[triangle,or[implies[and[or[yellow,and[blue,rectangle]],iff[apply(same_shape,x.o),triangle]],rectangle],size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:rectangle;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(iff[not[apply(same_shape,x.o)],yellow], filter(x.s, implies[size1,nor[yellow,size2]]))'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:nor[%s,%s];4:yellow;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, size1), size3), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:blue
'λx.forall(blue,filter(x.s, and[size2,and[size3,size1]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:size1
'λx.apply(or[apply(same_color,x.o),size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[or[size3,rectangle],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,or[nor[not[and[and[circle,blue],apply(same_color,x.o)]],and[triangle,blue]],rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(nor[apply(same_shape,x.o),circle],iota(filter(filter(x.s, and[and[and[rectangle,size2],apply(size-leq,iota(x.s))],not[blue]]), size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;4:size1
'λx.apply(and[or[rectangle,triangle],triangle],iota(filter(filter(x.s, iff[green,yellow]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:yellow;4:blue
'λx.apply(or[yellow,circle],iota(filter(filter(filter(filter(filter(x.s, size3), not[blue]), size3), and[yellow,and[triangle,blue]]), and[green,blue])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue;4:size3;4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:green;4:blue
'λx.apply(and[blue,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(x.s))'	0:apply(%s,%s);4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(x.s))'	0:apply(%s,%s);4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(x.s))'	0:apply(%s,%s);4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, apply(size-geq,iota(filter(x.s, rectangle))))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[rectangle,or[size2,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), not[rectangle]), implies[size2,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:rectangle;4:implies[%s,%s];4:size2;4:size3
'λx.apply(size2,iota(filter(filter(x.s, not[size2]), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(size-geq,iota(x.s))), size3), size2), size2), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:size2;4:size2;4:size2
'λx.forall(rectangle,filter(filter(filter(x.s, and[triangle,not[implies[and[size3,green],triangle]]]), triangle), nand[yellow,and[and[triangle,size3],yellow]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size3;4:green;4:triangle;4:triangle;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:yellow
'λx.apply(circle,iota(filter(x.s, nor[circle,apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(and[green,apply(size-gt,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, and[size2,size3]), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:yellow
'λx.apply(and[triangle,and[size3,iff[and[and[size3,blue],apply(same_color,x.o)],not[and[not[not[yellow]],nand[not[nand[or[size3,not[apply(same_color,iota(x.s))]],or[size2,and[yellow,size1]]]],and[not[blue],triangle]]]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:not[%s];4:yellow;4:nand[%s,%s];4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:not[%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, rectangle), iff[green,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:green;4:rectangle
'λx.apply(green,iota(x.s))'	0:apply(%s,%s);4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[nand[apply(same_size,iota(x.s)),apply(same_shape,x.o)],size1],iota(filter(filter(filter(x.s, nor[and[yellow,and[and[yellow,circle],and[size3,yellow]]],size1]), apply(same_color,iota(x.s))), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:size3;4:yellow;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(filter(x.s, not[green]), size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size1
'λx.apply(or[green,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[not[size1]],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(not[size2],filter(x.s, apply(same_shape,iota(filter(x.s, triangle)))))'	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, size3), triangle), size3), apply(size-lt,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[and[size1,triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, and[blue,size1]), apply(same_color,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, blue), rectangle)), filter(x.s, apply(same_color,iota(filter(filter(filter(filter(x.s, size3), not[nor[apply(same_color,iota(x.s)),apply(same_shape,x.o)]]), and[implies[yellow,green],iff[green,rectangle]]), size1)))))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:green;4:iff[%s,%s];4:green;4:rectangle;4:size1
'λx.apply(implies[yellow,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[nor[not[and[or[rectangle,green],and[and[rectangle,not[or[yellow,size1]]],and[apply(same_color,x.o),size2]]]],size3]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:size3
'λx.exists(circle, filter(x.s, size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(circle, filter(x.s, size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(circle, filter(x.s, size2))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(circle, filter(x.s, green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(filter(filter(x.s, not[apply(same_size,x.o)]), yellow), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:yellow
'λx.apply(or[yellow,not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, blue))),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, triangle), circle), size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:size2;4:green
'λx.exists(not[apply(same_color,iota(x.s))], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, implies[yellow,size3]), and[triangle,size2]), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:triangle;4:size2;4:yellow
'λx.apply(not[and[and[size3,yellow],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nor[or[circle,or[size1,size1]],green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:size1;4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[blue,rectangle]), circle), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:circle;4:triangle
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), green), not[green]), and[iff[blue,apply(same_shape,iota(x.s))],size3]), size3), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:not[%s];4:green;4:and[%s,%s];4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:size3;4:size2
'λx.apply(not[implies[apply(size-leq,iota(x.s)),blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[not[and[yellow,green]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[and[blue,blue],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(nand[rectangle,circle],filter(filter(x.s, size3), rectangle))'	0:forall(%s,%s);4:nand[%s,%s];4:rectangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(and[not[triangle],rectangle],iota(filter(filter(x.s, and[blue,size2]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[implies[apply(same_size,x.o),yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(and[triangle,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(size2,filter(x.s, blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, circle), not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue
'λx.apply(or[triangle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(implies[size3,nor[size3,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:nor[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(nand[size2,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(iff[green,triangle], filter(x.s, circle))'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_color,iota(filter(x.s, green))),iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(blue,iota(filter(x.s, apply(same_color,iota(filter(filter(x.s, and[blue,nor[yellow,and[circle,blue]]]), nand[not[size2],circle]))))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:blue;4:nand[%s,%s];4:not[%s];4:size2;4:circle
'λx.apply(size1,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.forall(circle,filter(x.s, circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[circle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, not[green]), rectangle), size1), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:rectangle;4:size1;4:rectangle
'λx.apply(and[and[apply(same_shape,iota(filter(x.s, size3))),green],apply(same_shape,iota(filter(filter(filter(filter(x.s, nand[size3,implies[size2,and[not[circle],apply(same_shape,x.o)]]]), blue), not[yellow]), triangle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:implies[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[size3,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[not[triangle],apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(implies[apply(same_size,iota(x.s)),yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(filter(filter(filter(filter(filter(filter(x.s, or[blue,rectangle]), triangle), apply(same_size,x.o)), size3), and[yellow,rectangle]), green), implies[triangle,not[size3]])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:and[%s,%s];4:yellow;4:rectangle;4:green;4:implies[%s,%s];4:triangle;4:not[%s];4:size3
'λx.apply(yellow,iota(filter(filter(x.s, and[blue,size2]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:size1
'λx.apply(and[not[or[rectangle,or[size1,green]]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:green;4:triangle;1:%s.o;2:x
'λx.apply(nand[rectangle,triangle],iota(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, size2)))), not[size1]), apply(same_color,iota(filter(x.s, rectangle))))))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(x.s, iff[yellow,nand[circle,size3]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:size3
'λx.apply(nor[rectangle,green],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(triangle,iota(filter(x.s, nor[rectangle,apply(same_size,iota(x.s))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, blue), size3), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:circle
'λx.forall(triangle,filter(filter(x.s, triangle), size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(nor[apply(same_color,x.o),size2],iota(filter(filter(filter(filter(filter(x.s, rectangle), and[yellow,and[and[or[circle,size2],triangle],size3]]), blue), iff[size3,and[and[blue,size3],circle]]), triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size2;4:triangle;4:size3;4:blue;4:iff[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:circle;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, not[rectangle]), apply(same_size,iota(x.s))), not[triangle]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;4:size2
'λx.apply(nand[not[circle],size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nand[or[blue,yellow],triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(blue,filter(filter(filter(filter(x.s, green), triangle), apply(same_size,x.o)), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.exists(and[size2,rectangle], filter(x.s, green))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[and[green,nor[nand[green,green],yellow]],apply(size-geq,x.o)],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:nand[%s,%s];4:green;4:green;4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(implies[circle,yellow],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.apply(iff[circle,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, and[rectangle,size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.empty(filter(filter(x.s, size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.empty(filter(filter(x.s, size2), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.empty(filter(filter(x.s, size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.forall(circle,filter(x.s, iff[size1,or[yellow,and[size2,or[size2,triangle]]]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:triangle
'λx.apply(and[size3,size3],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, or[triangle,iff[apply(same_size,iota(x.s)),size2]]), apply(same_shape,iota(filter(filter(filter(x.s, not[green]), yellow), apply(size-lt,x.o))))), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue
'λx.contains(iota(x.s), filter(x.s, apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size2), triangle), rectangle), and[green,implies[or[rectangle,circle],blue]]), not[yellow]), size3), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:rectangle;4:and[%s,%s];4:green;4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:blue;4:not[%s];4:yellow;4:size3;4:size1
'λx.apply(or[triangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,apply(same_shape,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.forall(apply(same_size,iota(filter(x.s, green))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(nand[green,not[not[circle]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:not[%s];4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size3,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[yellow,nand[blue,apply(same_size,iota(x.s))]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(implies[apply(same_shape,x.o),size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(or[circle,green],iota(filter(filter(filter(x.s, green), yellow), and[circle,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:and[%s,%s];4:circle;4:rectangle
'λx.forall(and[blue,blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, iff[rectangle,triangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:triangle
'λx.empty(filter(x.s, and[blue,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(and[and[or[rectangle,size2],not[apply(size-gt,x.o)]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nand[nand[blue,not[circle]],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(x.s, triangle), and[not[apply(same_color,x.o)],not[blue]]), apply(same_color,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[and[triangle,triangle],blue],iota(filter(filter(filter(x.s, yellow), and[triangle,yellow]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:triangle;4:yellow;4:size2
'λx.apply(and[or[and[size3,apply(same_color,iota(filter(filter(x.s, size1), not[green])))],size3],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:green;4:size3;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, circle), iff[size2,size2]), size3), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:size2;4:size2;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[and[apply(same_size,iota(x.s)),size2],circle],iota(filter(filter(filter(filter(filter(filter(x.s, green), apply(size-geq,iota(x.s))), nand[and[and[nand[green,rectangle],circle],size3],not[yellow]]), or[green,size3]), size2), and[triangle,rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:rectangle;4:circle;4:size3;4:not[%s];4:yellow;4:or[%s,%s];4:green;4:size3;4:size2;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(nor[or[and[or[size1,yellow],blue],size1],triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:blue;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, yellow), apply(same_color,x.o)), apply(same_size,x.o)), blue), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle
'λx.empty(filter(filter(filter(x.s, size3), rectangle), or[and[or[rectangle,green],size1],and[size2,triangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:size1;4:and[%s,%s];4:size2;4:triangle
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_size,x.o)), blue), not[green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:not[%s];4:green
'λx.exists(yellow, filter(x.s, yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(x.s, apply(size-gt,iota(x.s))))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[blue,and[or[blue,apply(size-gt,x.o)],or[or[and[and[rectangle,rectangle],yellow],blue],blue]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:yellow;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[implies[triangle,size1]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, and[green,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(iff[yellow,and[and[apply(same_shape,iota(filter(filter(x.s, circle), or[blue,or[apply(same_size,iota(x.s)),yellow]]))),size1],size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:size1;4:size2;1:%s.o;2:x
'λx.forall(iff[yellow,yellow],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, and[blue,rectangle]), triangle), and[or[triangle,yellow],triangle]), apply(same_size,iota(filter(filter(filter(filter(filter(x.s, yellow), size1), triangle), and[size3,size2]), size1))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:triangle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:triangle;4:and[%s,%s];4:size3;4:size2;4:size1
'λx.apply(iff[and[size1,implies[apply(same_size,iota(x.s)),and[circle,rectangle]]],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(implies[not[or[size2,triangle]],size1],iota(filter(x.s, and[size3,apply(same_shape,iota(x.s))])))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,iff[not[size3],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:iff[%s,%s];4:not[%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(iff[or[yellow,rectangle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.forall(not[not[apply(same_color,x.o)]],filter(filter(filter(filter(filter(x.s, blue), not[size2]), apply(same_shape,iota(filter(filter(x.s, size3), or[or[yellow,and[blue,rectangle]],circle])))), circle), nand[implies[size2,and[circle,size1]],blue]))'	0:forall(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:rectangle;4:circle;4:circle;4:nand[%s,%s];4:implies[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size1;4:blue
'λx.apply(rectangle,iota(filter(x.s, and[rectangle,not[rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle
'λx.exists(nor[or[yellow,apply(same_color,x.o)],rectangle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(or[or[or[or[rectangle,rectangle],and[green,apply(same_color,iota(x.s))]],triangle],size1],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(x.s, or[green,blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.forall(yellow,filter(filter(filter(x.s, green), blue), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:triangle
'λx.contains(iota(x.s), filter(x.s, or[rectangle,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle
'λx.forall(iff[rectangle,rectangle],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(iff[green,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,yellow],iota(filter(filter(x.s, triangle), or[and[and[size2,not[apply(same_color,iota(x.s))]],green],size1])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:size1
'λx.apply(and[not[green],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_color,x.o)), and[circle,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(and[apply(size-lt,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, and[size3,size2]), size1), green), rectangle), circle), size2), triangle), or[and[apply(same_color,iota(x.s)),circle],iff[and[nor[circle,nor[size2,green]],green],yellow]]), not[or[green,and[blue,apply(size-lt,x.o)]]]), and[size1,rectangle]))),triangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2;4:size1;4:green;4:rectangle;4:circle;4:size2;4:triangle;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:nor[%s,%s];4:size2;4:green;4:green;4:yellow;4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size1;4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, green), blue), or[not[and[nor[blue,not[triangle]],and[green,rectangle]]],iff[apply(size-lt,x.o),or[size2,size1]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:not[%s];4:triangle;4:and[%s,%s];4:green;4:rectangle;4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:size2;4:size1
'λx.forall(yellow,filter(filter(x.s, implies[size3,yellow]), nor[or[and[blue,rectangle],or[size3,circle]],blue]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:yellow;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:size3;4:circle;4:blue
'λx.apply(nor[size2,size1],iota(filter(filter(x.s, apply(size-geq,x.o)), size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(filter(filter(x.s, size1), nand[nand[and[size2,size1],green],or[and[or[apply(same_shape,iota(filter(filter(filter(x.s, size2), size3), apply(same_size,iota(filter(x.s, blue)))))),green],size2],yellow]]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:size1;4:green;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:size2;4:yellow;4:size2
'λx.apply(size1,iota(filter(filter(x.s, size3), apply(same_size,iota(filter(x.s, rectangle))))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, not[size1]), not[not[triangle]])), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:not[%s];4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[not[and[green,triangle]]], x.s)'	0:exists(%s, %s);4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.exists(iff[or[apply(size-lt,iota(filter(x.s, and[yellow,blue]))),or[blue,not[rectangle]]],yellow], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:blue;4:not[%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.exists(not[yellow], x.s)'	0:exists(%s, %s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(and[rectangle,size2],iota(filter(x.s, or[apply(same_size,x.o),rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(nor[and[triangle,blue],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:green;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, blue))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[not[blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, implies[or[circle,size2],and[blue,blue]]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:circle;4:size2;4:and[%s,%s];4:blue;4:blue;4:size3;3:%s.s;2:x
'λx.apply(not[circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(filter(x.s, triangle), apply(size-geq,iota(x.s))), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[size3,apply(same_size,iota(filter(x.s, and[size3,blue])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(and[apply(same_size,x.o),not[size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size2), triangle), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, green), or[and[size3,size1],triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:triangle
'λx.apply(and[or[size1,size1],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(nor[or[size2,size1],yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size2;4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.exists(green, filter(filter(x.s, blue), rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(not[or[and[triangle,yellow],not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[rectangle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, and[circle,not[yellow]]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:yellow
'λx.apply(or[and[size1,size2],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[blue,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_size,x.o)), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, blue), nand[circle,or[green,apply(same_shape,x.o)]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:circle;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.forall(size3,filter(filter(filter(filter(x.s, green), or[size1,size1]), apply(same_shape,x.o)), size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size1;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, size1), and[size2,or[green,rectangle]]), triangle), blue), not[size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size2;4:or[%s,%s];4:green;4:rectangle;4:triangle;4:blue;4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, size3), and[green,rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:rectangle
'λx.forall(blue,filter(x.s, or[size2,green]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:green
'λx.apply(iff[not[circle],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, yellow))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[or[and[and[not[blue],or[triangle,apply(size-geq,iota(x.s))]],triangle],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(implies[or[circle,and[size2,not[triangle]]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:size2;4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(not[size3],x.o)'	0:apply(%s,%s);4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[size1],x.o)'	0:apply(%s,%s);4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[size2],x.o)'	0:apply(%s,%s);4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, size3), apply(same_shape,x.o)), not[size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size2
'λx.contains(iota(x.s), filter(x.s, apply(same_size,iota(x.s))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[green,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, circle), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.forall(size3,filter(filter(x.s, apply(size-geq,x.o)), size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3
'λx.apply(or[or[yellow,size1],not[triangle]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(yellow,x.o)'	0:apply(%s,%s);4:yellow;1:%s.o;2:x
'λx.apply(nor[yellow,rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(rectangle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[or[iff[rectangle,rectangle],yellow],blue], filter(filter(x.s, size1), and[apply(same_size,iota(x.s)),or[or[and[triangle,size1],and[not[size1],yellow]],size1]]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:rectangle;4:yellow;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:not[%s];4:size1;4:yellow;4:size1
'λx.apply(not[nor[rectangle,size2]],iota(filter(filter(filter(x.s, rectangle), and[and[size2,circle],nand[rectangle,apply(same_shape,x.o)]]), green)))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.forall(or[yellow,yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size3), apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[circle,not[apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[not[nor[or[not[blue],blue],size2]],yellow],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:blue;4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(x.s), filter(filter(x.s, size1), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, size2), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(and[rectangle,size3],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[blue,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, rectangle))),iota(filter(filter(filter(filter(x.s, not[and[apply(same_size,iota(filter(x.s, size1))),triangle]]), and[and[apply(same_shape,x.o),circle],size2]), triangle), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size2;4:triangle;4:blue
'λx.apply(not[green],iota(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, rectangle), apply(same_shape,x.o))))), apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(rectangle,iota(filter(x.s, and[iff[rectangle,rectangle],triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:rectangle;4:triangle
'λx.apply(and[iff[green,green],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:green;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[apply(same_color,x.o),nand[not[apply(same_shape,x.o)],size3]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.exists(blue, filter(x.s, yellow))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[circle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,green],iota(filter(x.s, or[and[green,size2],rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:size2;4:rectangle
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, iff[apply(same_shape,x.o),apply(same_shape,iota(x.s))]), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(or[yellow,apply(same_color,iota(filter(x.s, apply(same_color,iota(x.s)))))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[not[green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, circle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[yellow,or[or[size3,size1],rectangle]],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(implies[implies[rectangle,green],implies[rectangle,implies[blue,circle]]],iota(filter(x.s, and[circle,apply(same_color,x.o)])))'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:rectangle;4:green;4:implies[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[yellow,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:green
'λx.apply(implies[apply(same_color,x.o),blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(nand[size3,apply(same_color,x.o)],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[rectangle,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(size3,iota(filter(filter(x.s, rectangle), or[green,blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:green;4:blue
'λx.apply(yellow,iota(filter(filter(x.s, and[green,size2]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:size1
'λx.apply(size3,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(size1,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.exists(and[size2,apply(same_shape,iota(x.s))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[apply(size-lt,iota(x.s))],iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(green,iota(filter(filter(x.s, yellow), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size2,triangle], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[not[blue],green],iota(filter(filter(filter(x.s, implies[or[size3,and[yellow,and[circle,yellow]]],yellow]), green), and[apply(size-lt,x.o),circle])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:yellow;4:yellow;4:green;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle
'λx.apply(and[iff[triangle,or[yellow,circle]],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, circle), not[size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size3;3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, size3), and[green,triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:triangle
'λx.exists(nor[and[size1,size3],circle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:size3;4:circle;3:%s.s;2:x
'λx.apply(not[and[rectangle,and[apply(same_color,x.o),not[not[size2]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(nand[yellow,yellow],iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(and[circle,size2],iota(filter(x.s, nand[size3,blue])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:blue
'λx.apply(and[rectangle,or[yellow,and[yellow,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(or[green,nor[yellow,size1]],iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(or[blue,and[size1,and[and[size1,nor[size3,size1]],and[rectangle,implies[circle,and[size3,triangle]]]]]],iota(filter(filter(filter(x.s, circle), size1), green)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size1;4:nor[%s,%s];4:size3;4:size1;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:circle;4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:green
'λx.empty(filter(filter(x.s, size2), iff[triangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:triangle;4:blue
'λx.apply(and[implies[yellow,apply(size-leq,x.o)],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[not[or[triangle,green]],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:green;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), blue), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:yellow
'λx.apply(not[nand[and[circle,circle],rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,iff[blue,and[apply(size-geq,x.o),nor[iff[blue,not[or[circle,size3]]],size1]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:iff[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nor[%s,%s];4:iff[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:circle;4:size3;4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, not[size1]), blue), blue), and[apply(same_color,x.o),rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,size1],iota(filter(filter(x.s, and[and[circle,blue],or[implies[iff[triangle,circle],size3],circle]]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:or[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:triangle;4:circle;4:size3;4:circle;4:size2
'λx.empty(filter(x.s, or[not[size3],size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size3;4:size2
'λx.exists(green, filter(x.s, and[size3,blue]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.forall(yellow,filter(filter(x.s, rectangle), circle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, not[circle]), circle), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:circle;4:yellow
'λx.apply(and[blue,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[blue,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[blue,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(blue,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(blue,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.exists(circle, filter(x.s, apply(size-lt,iota(x.s))))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, green), green), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:rectangle
'λx.apply(iff[and[circle,rectangle],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[and[blue,not[or[not[not[size2]],size2]]],rectangle],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:not[%s];4:not[%s];4:size2;4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.contains(iota(filter(filter(x.s, triangle), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, not[or[size1,blue]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size1;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), not[size2]), not[and[not[blue],size1]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size2;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size1
'λx.apply(and[yellow,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[rectangle,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green
'λx.empty(filter(filter(x.s, not[blue]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:blue
'λx.apply(triangle,iota(filter(x.s, iff[size1,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:blue
'λx.apply(and[apply(same_color,x.o),iff[circle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.exists(iff[nand[size1,size1],triangle], filter(x.s, circle))'	0:exists(%s, %s);4:iff[%s,%s];4:nand[%s,%s];4:size1;4:size1;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(nor[and[triangle,not[triangle]],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.exists(iff[or[and[rectangle,yellow],circle],yellow], filter(x.s, triangle))'	0:exists(%s, %s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(x.s, size3), rectangle)), filter(x.s, not[not[and[and[green,size3],triangle]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:triangle
'λx.contains(iota(filter(filter(x.s, green), apply(size-lt,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(apply(same_color,iota(x.s)),filter(filter(filter(filter(x.s, circle), or[and[blue,size1],size2]), and[triangle,not[circle]]), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size2;4:and[%s,%s];4:triangle;4:not[%s];4:circle;4:circle
'λx.apply(circle,iota(filter(filter(x.s, apply(same_size,iota(filter(x.s, not[green])))), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:circle
'λx.apply(not[apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size3,apply(same_color,iota(filter(x.s, size3)))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.forall(size1,filter(x.s, apply(size-leq,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, size2), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.contains(x.o, filter(filter(x.s, size3), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.contains(x.o, filter(filter(x.s, size3), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.contains(x.o, filter(filter(x.s, size1), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(and[size3,size3],iota(filter(filter(x.s, and[apply(same_size,x.o),size3]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size2
'λx.apply(and[triangle,and[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(filter(filter(filter(x.s, circle), blue), size3), triangle)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[or[circle,blue],not[or[rectangle,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:not[%s];4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[green,green],iota(filter(filter(filter(filter(filter(filter(x.s, nor[size2,green]), size3), size1), circle), not[apply(same_shape,x.o)]), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:green;4:size3;4:size1;4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(filter(x.s, apply(size-lt,iota(x.s))), apply(same_color,x.o)), rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(apply(same_color,iota(filter(x.s, size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(nor[size1,size3],iota(filter(filter(filter(x.s, not[and[green,apply(size-gt,x.o)]]), nor[apply(same_shape,x.o),triangle]), size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size3
'λx.apply(or[circle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(not[or[size2,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[green], x.s)'	0:exists(%s, %s);4:not[%s];4:green;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), nor[triangle,circle]), implies[not[circle],apply(same_size,x.o)]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:circle;4:implies[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(not[and[and[green,circle],or[size3,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(nand[blue,blue],iota(filter(filter(filter(filter(filter(filter(x.s, and[circle,size1]), not[triangle]), rectangle), triangle), rectangle), green)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1;4:not[%s];4:triangle;4:rectangle;4:triangle;4:rectangle;4:green
'λx.forall(yellow,filter(filter(x.s, size2), size1))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.forall(yellow,filter(filter(x.s, size1), size2))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(not[not[circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, blue), size1), green), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:green;4:size2
'λx.exists(circle, filter(x.s, blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[and[size1,implies[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),circle]],yellow],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[and[rectangle,rectangle],apply(same_shape,iota(x.s))]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(nand[apply(size-lt,x.o),and[apply(same_color,x.o),green]],iota(filter(filter(filter(x.s, iff[not[rectangle],green]), or[and[size2,size3],and[not[size2],and[or[apply(same_size,iota(filter(filter(x.s, nor[size3,size3]), circle))),circle],and[size1,rectangle]]]]), triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:rectangle;4:green;4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:size3;4:circle;4:circle;4:and[%s,%s];4:size1;4:rectangle;4:triangle
'λx.exists(iff[not[apply(size-lt,iota(filter(filter(x.s, triangle), rectangle)))],size2], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:size2;3:%s.s;2:x
'λx.contains(x.o, x.s)'	0:contains(%s, %s);1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[not[size1],not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, nor[apply(size-gt,x.o),and[apply(same_size,iota(x.s)),and[triangle,size2]]]), apply(size-gt,iota(x.s))), and[rectangle,and[triangle,and[apply(same_shape,x.o),and[or[triangle,yellow],not[blue]]]]])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(or[size1,triangle],filter(filter(x.s, yellow), triangle))'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(and[not[green],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, and[circle,apply(same_shape,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[triangle,green]), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green;4:triangle
'λx.contains(x.o, filter(x.s, apply(size-leq,iota(x.s))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.forall(or[and[size2,yellow],and[green,circle]],filter(x.s, triangle))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, size1), not[green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:green
'λx.apply(implies[yellow,nor[or[rectangle,rectangle],triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:nor[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, triangle), green), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:circle
'λx.empty(filter(x.s, and[and[apply(size-gt,x.o),nand[not[triangle],size3]],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:nand[%s,%s];4:not[%s];4:triangle;4:size3;4:size1
'λx.apply(not[and[yellow,and[nand[rectangle,apply(same_color,iota(x.s))],iff[not[circle],not[or[size3,or[or[not[green],triangle],circle]]]]]]],iota(filter(filter(x.s, iff[yellow,size3]), circle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:circle;4:not[%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:size3;4:circle
'λx.contains(iota(filter(filter(x.s, triangle), not[not[rectangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:not[%s];4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.empty(filter(filter(x.s, circle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(yellow,iota(filter(x.s, and[blue,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle
'λx.forall(apply(same_color,iota(filter(x.s, yellow))),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,or[triangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(and[implies[size2,nand[and[apply(same_color,iota(filter(filter(filter(x.s, blue), circle), rectangle))),size3],yellow]],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:rectangle;4:size3;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[blue,rectangle]), circle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:circle;4:circle
'λx.exists(and[blue,size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), and[size1,size3]), apply(size-gt,iota(filter(x.s, rectangle)))), yellow), or[or[circle,size3],apply(same_shape,iota(x.s))]), circle), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:or[%s,%s];4:or[%s,%s];4:circle;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[size1,or[size1,triangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, blue), size2))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[apply(same_color,iota(x.s)),green],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[blue,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[blue,and[or[size2,size1],blue]],iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size2;4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.empty(filter(x.s, not[not[and[apply(same_shape,x.o),size3]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(size2,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[circle,blue],iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(not[and[rectangle,nor[and[and[size1,size1],circle],not[circle]]]],iota(filter(x.s, or[rectangle,and[and[or[and[and[and[size2,and[yellow,implies[blue,rectangle]]],size1],or[blue,circle]],circle],nor[green,triangle]],circle]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:circle;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:blue;4:rectangle;4:size1;4:or[%s,%s];4:blue;4:circle;4:circle;4:nor[%s,%s];4:green;4:triangle;4:circle
'λx.apply(and[iff[nor[circle,size3],circle],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:circle;4:size3;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[green,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(or[yellow,yellow],iota(filter(filter(x.s, apply(same_size,iota(x.s))), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(green,iota(filter(filter(filter(x.s, not[yellow]), size2), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2;4:green
'λx.apply(not[triangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, or[blue,blue]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue
'λx.exists(and[yellow,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:rectangle;3:%s.s;2:x
'λx.empty(filter(x.s, implies[size1,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:blue
'λx.forall(and[nand[apply(same_size,x.o),circle],yellow],filter(filter(filter(x.s, blue), or[triangle,triangle]), not[and[circle,green]]))'	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:triangle;4:not[%s];4:and[%s,%s];4:circle;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, triangle), size3), or[size1,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:or[%s,%s];4:size1;4:size2
'λx.apply(and[size3,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, nand[circle,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, green), and[rectangle,blue]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:rectangle;4:blue;4:triangle
'λx.apply(size1,iota(filter(x.s, and[circle,apply(size-geq,iota(x.s))])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[green,not[and[or[apply(size-leq,x.o),and[not[and[apply(same_size,x.o),size1]],size2]],size3]]], filter(filter(x.s, nand[rectangle,and[size1,blue]]), or[apply(same_color,x.o),and[apply(same_color,iota(filter(filter(filter(filter(x.s, circle), apply(size-leq,x.o)), blue), size3))),or[size3,triangle]]]))'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:size2;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:size3;4:or[%s,%s];4:size3;4:triangle
'λx.apply(yellow,iota(filter(x.s, and[and[rectangle,triangle],triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:triangle
'λx.apply(nand[circle,or[blue,yellow]],iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(or[apply(same_color,iota(filter(x.s, yellow))),size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;1:%s.o;2:x
'λx.forall(yellow,filter(filter(filter(filter(filter(x.s, size1), rectangle), apply(same_shape,x.o)), implies[size3,apply(size-geq,iota(filter(x.s, triangle)))]), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(implies[implies[circle,or[green,not[yellow]]],and[rectangle,triangle]],iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:circle;4:or[%s,%s];4:green;4:not[%s];4:yellow;4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[size1,triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size2,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[size3,and[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(nor[yellow,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(filter(x.s, triangle), size3), apply(same_size,x.o)), apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(blue,filter(x.s, circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(circle,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size3;4:blue
'λx.apply(apply(same_size,iota(filter(filter(x.s, blue), size2))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size3,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size3), apply(same_color,iota(filter(x.s, and[apply(same_color,x.o),blue])))), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size1
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, rectangle), not[size3]), size3), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size3;4:size3;4:circle
'λx.apply(blue,iota(filter(filter(x.s, not[size2]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle
'λx.apply(iff[size1,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(not[size3],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size1, filter(x.s, or[rectangle,apply(same_color,iota(x.s))]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-geq,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[triangle,size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, implies[blue,rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:rectangle
'λx.apply(and[size3,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[not[triangle],size3],filter(x.s, size1))'	0:forall(%s,%s);4:iff[%s,%s];4:not[%s];4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[yellow,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(nor[or[blue,yellow],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, triangle), apply(size-geq,x.o)), and[blue,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:blue;4:blue
'λx.apply(and[nand[size1,and[and[green,size3],iff[or[size3,and[or[and[rectangle,rectangle],not[triangle]],nor[circle,triangle]]],size3]]],iff[triangle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:iff[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:triangle;4:nor[%s,%s];4:circle;4:triangle;4:size3;4:iff[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[green,or[circle,blue]]), not[apply(same_size,iota(filter(filter(filter(x.s, apply(same_color,iota(x.s))), apply(same_size,x.o)), and[yellow,apply(same_shape,iota(filter(x.s, size3)))])))])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(x.s, size3), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.empty(filter(filter(x.s, size1), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.empty(filter(filter(x.s, size2), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(and[nand[and[apply(same_shape,x.o),green],not[or[triangle,apply(same_color,x.o)]]],and[size3,and[yellow,size2]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:not[%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, or[apply(same_color,iota(x.s)),blue]), implies[size2,yellow]), apply(same_color,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size3), blue), blue), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:blue;4:blue
'λx.apply(not[green],iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(not[green],iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(not[blue],iota(filter(filter(x.s, or[nand[triangle,apply(size-gt,iota(filter(x.s, circle)))],size2]), and[size3,size2])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:and[%s,%s];4:size3;4:size2
'λx.apply(green,iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(iff[yellow,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), nand[rectangle,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:rectangle;4:blue
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), green), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:triangle
'λx.empty(filter(filter(filter(x.s, green), iff[green,size3]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:green;4:size3;4:size1
'λx.forall(size3,filter(x.s, and[or[nand[rectangle,triangle],apply(same_color,iota(x.s))],size3]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(implies[rectangle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[not[blue],or[apply(same_size,x.o),or[size3,size3]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(filter(x.s, not[green]), green), not[size3]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:green;4:not[%s];4:size3
'λx.apply(or[size2,implies[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:implies[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,size3]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;4:size3
'λx.apply(not[not[and[nand[size1,size1],or[or[apply(same_color,x.o),not[yellow]],yellow]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:size1;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[size1,or[and[yellow,size2],triangle]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, rectangle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(implies[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[and[green,yellow],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, and[apply(size-geq,x.o),size3]), nor[blue,not[yellow]])), filter(filter(x.s, circle), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;4:nor[%s,%s];4:blue;4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(and[not[apply(same_color,iota(x.s))],or[and[yellow,size2],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[or[triangle,size2],or[size2,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.exists(and[and[green,not[not[and[size3,yellow]]]],green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:yellow;4:green;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, not[or[triangle,size3]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:size3
'λx.forall(not[size3],filter(x.s, and[blue,yellow]))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(triangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[or[size3,or[triangle,size3]],and[yellow,blue]],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(or[green,size1], filter(filter(x.s, and[circle,size1]), triangle))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1;4:triangle
'λx.forall(blue,filter(x.s, yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[green,or[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(and[triangle,or[rectangle,rectangle]],filter(filter(filter(x.s, size3), and[not[size1],size1]), nor[rectangle,and[not[nor[or[not[circle],size2],apply(same_color,iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), blue), rectangle), rectangle), or[blue,or[circle,nor[rectangle,and[implies[size3,rectangle],green]]]]), green)))]],or[size3,size1]]]))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:not[%s];4:size1;4:size1;4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:rectangle;4:rectangle;4:or[%s,%s];4:blue;4:or[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:size3;4:rectangle;4:green;4:green;4:or[%s,%s];4:size3;4:size1
'λx.exists(not[size3], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[and[or[circle,green],and[blue,or[rectangle,green]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.forall(and[rectangle,rectangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, yellow), green), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:triangle
'λx.apply(and[and[size3,circle],or[rectangle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,size2],filter(x.s, size2))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(x.s, circle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(iff[circle,or[apply(size-gt,x.o),not[and[circle,green]]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, and[rectangle,not[or[or[size1,blue],blue]]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[yellow,or[size3,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[size2,and[circle,green]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:green
'λx.apply(or[size3,size1],iota(filter(x.s, nor[rectangle,and[triangle,size2]])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:size2
'λx.apply(and[nand[circle,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),or[yellow,and[size1,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[size2,and[blue,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, or[green,or[or[yellow,size1],rectangle]]), yellow), size2), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:rectangle;4:yellow;4:size2;4:green
'λx.contains(x.o, filter(x.s, size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(x.s, green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(size-leq,iota(filter(x.s, or[size3,green]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(and[not[triangle],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,x.o),not[green]],iota(filter(filter(filter(x.s, yellow), green), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:size3
'λx.apply(and[apply(same_color,iota(filter(filter(x.s, or[green,size3]), and[and[size2,green],size3]))),size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size3), or[size1,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size3), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.exists(blue, filter(x.s, apply(same_color,iota(filter(filter(x.s, green), triangle)))))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(nand[size1,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[size2,blue],iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size3,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(filter(filter(x.s, or[triangle,size1]), yellow), triangle), size2), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1;4:yellow;4:triangle;4:size2;4:triangle
'λx.apply(iff[blue,blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), size3), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:rectangle
'λx.apply(triangle,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size3
'λx.apply(or[size3,or[size2,size3]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size3,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, yellow), size2), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:size2;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, or[size3,blue]), circle), yellow), circle))),iota(filter(filter(x.s, green), and[apply(same_shape,x.o),circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:blue;4:circle;4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(nor[circle,and[triangle,triangle]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, or[apply(same_size,iota(x.s)),rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[triangle,triangle],iota(filter(filter(filter(filter(x.s, not[size1]), and[and[size2,not[and[rectangle,and[size1,triangle]]]],size2]), nand[and[size2,size1],or[yellow,not[yellow]]]), yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:triangle;4:size2;4:nand[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:yellow;4:not[%s];4:yellow;4:yellow
'λx.apply(nand[size2,triangle],iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(triangle,iota(filter(x.s, and[not[or[or[size2,green],circle]],size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:green;4:circle;4:size3
'λx.forall(size2,filter(filter(x.s, blue), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.forall(size3,filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.forall(yellow,filter(x.s, rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[iff[apply(same_color,x.o),size2]],iota(filter(x.s, or[blue,rectangle])))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.forall(green,filter(x.s, not[triangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(apply(size-leq,iota(filter(filter(x.s, nor[size2,size2]), circle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,implies[or[blue,green],iff[blue,and[apply(same_shape,iota(x.s)),or[and[blue,apply(same_color,iota(x.s))],size1]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:or[%s,%s];4:blue;4:green;4:iff[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(or[size3,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(x.s, rectangle), size2), yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:yellow
'λx.contains(iota(filter(x.s, blue)), filter(filter(x.s, size1), not[circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:circle
'λx.apply(or[or[blue,circle],or[size3,and[circle,yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(nor[circle,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, triangle), not[or[green,size1]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:or[%s,%s];4:green;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, apply(same_size,x.o)), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.contains(iota(filter(x.s, triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(iff[size1,blue],iota(filter(filter(filter(filter(filter(filter(x.s, triangle), or[green,yellow]), rectangle), circle), size2), circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:green;4:yellow;4:rectangle;4:circle;4:size2;4:circle
'λx.apply(size1,iota(filter(filter(filter(x.s, or[triangle,rectangle]), nand[apply(same_shape,iota(x.s)),or[and[size1,or[and[and[green,apply(same_size,x.o)],apply(same_shape,x.o)],size2]],blue]]), not[or[implies[yellow,circle],size2]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:rectangle;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:blue;4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:yellow;4:circle;4:size2
'λx.empty(filter(filter(filter(filter(filter(x.s, triangle), size2), or[and[and[and[apply(same_shape,iota(filter(filter(filter(filter(x.s, not[and[blue,size2]]), green), triangle), rectangle))),apply(same_color,iota(x.s))],size1],not[green]],blue]), and[rectangle,size1]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:size2;4:green;4:triangle;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:not[%s];4:green;4:blue;4:and[%s,%s];4:rectangle;4:size1;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, and[and[size3,and[and[triangle,apply(same_color,x.o)],size3]],circle]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:circle;4:blue
'λx.apply(blue,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(x.s, or[size1,size1]), size1), and[blue,apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size1;4:size1;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(size-gt,iota(filter(filter(filter(filter(x.s, iff[apply(size-leq,x.o),and[or[size1,not[yellow]],nor[rectangle,size1]]]), rectangle), iff[triangle,blue]), blue)))), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:yellow;4:nor[%s,%s];4:rectangle;4:size1;4:rectangle;4:iff[%s,%s];4:triangle;4:blue;4:blue;4:rectangle
'λx.apply(not[not[and[size1,or[and[size1,triangle],circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[size1]), and[circle,and[rectangle,yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:yellow
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(filter(x.s, circle), and[rectangle,and[apply(same_size,x.o),circle]]), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size1
'λx.apply(and[and[and[triangle,triangle],green],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(and[green,blue],filter(x.s, not[triangle]))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(not[nand[blue,or[not[triangle],nand[apply(size-gt,x.o),size1]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:triangle;4:nand[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(implies[and[size3,triangle],green],iota(filter(x.s, and[yellow,blue])))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.apply(green,iota(filter(filter(x.s, size2), and[blue,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:blue;4:circle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_size,iota(x.s))), size3), size3), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:size3;4:circle
'λx.apply(and[not[triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[triangle,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3
'λx.apply(nor[not[rectangle],rectangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[blue,or[or[nor[or[size2,size2],triangle],not[not[triangle]]],iff[and[and[not[blue],or[triangle,blue]],apply(same_size,x.o)],circle]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size2;4:size2;4:triangle;4:not[%s];4:not[%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(circle,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(yellow,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(or[green,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, or[rectangle,triangle]), triangle), size2), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:triangle;4:size2;4:size2
'λx.apply(and[not[yellow],and[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[yellow,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size3), apply(same_size,iota(x.s))), size2), size1), size3), iff[circle,yellow]), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:size1;4:size3;4:iff[%s,%s];4:circle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(nor[nand[size2,yellow],yellow], filter(x.s, rectangle))'	0:exists(%s, %s);4:nor[%s,%s];4:nand[%s,%s];4:size2;4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(x.s, nor[size3,and[iff[circle,circle],circle]])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:and[%s,%s];4:iff[%s,%s];4:circle;4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(and[rectangle,or[yellow,size2]],iota(filter(x.s, iff[green,blue])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:blue
'λx.contains(x.o, filter(x.s, not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(not[apply(same_size,x.o)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[apply(same_size,iota(filter(filter(x.s, blue), size3))),triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,x.o),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[not[size3],rectangle],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(apply(size-lt,iota(filter(filter(x.s, size2), size1))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[green,blue],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, green), yellow), yellow), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:yellow;4:size3
'λx.apply(not[or[and[rectangle,rectangle],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,apply(same_color,iota(filter(filter(x.s, size1), size3)))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(x.s)),triangle],iota(filter(filter(filter(x.s, not[blue]), size1), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size1;4:circle
'λx.empty(filter(filter(x.s, nor[size3,apply(size-geq,iota(x.s))]), or[size1,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3
'λx.apply(nand[and[nor[not[blue],triangle],size3],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:blue;4:triangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[or[not[rectangle],blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, blue))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[circle,apply(same_shape,iota(filter(filter(x.s, and[blue,or[and[iff[and[yellow,triangle],size3],blue],blue]]), apply(size-lt,x.o))))],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:size3;4:blue;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[and[or[not[circle],green],not[or[size1,yellow]]],and[circle,apply(size-gt,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:green;4:not[%s];4:or[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[rectangle,or[not[triangle],and[blue,yellow]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.apply(and[triangle,size2],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(not[yellow],iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(not[green],iota(filter(x.s, and[size2,size1])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(or[and[size3,size3],yellow],iota(filter(filter(filter(x.s, size2), triangle), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:circle
'λx.apply(circle,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(nor[size1,nor[green,apply(same_size,iota(filter(x.s, green)))]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.exists(implies[size2,triangle], filter(filter(filter(x.s, size1), apply(same_size,x.o)), rectangle))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(nand[blue,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(nand[blue,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.forall(triangle,filter(filter(x.s, rectangle), nand[triangle,yellow]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nand[%s,%s];4:triangle;4:yellow
'λx.contains(iota(filter(x.s, apply(size-leq,iota(filter(x.s, circle))))), filter(x.s, not[and[triangle,and[yellow,and[circle,not[implies[and[blue,or[not[green],yellow]],yellow]]]]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:green;4:yellow;4:yellow
'λx.apply(implies[and[green,nor[yellow,circle]],not[size1]],iota(filter(x.s, and[implies[and[yellow,nor[rectangle,apply(same_shape,x.o)]],yellow],size3])))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:circle;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size3
'λx.apply(size3,iota(filter(filter(x.s, size1), and[and[circle,green],or[size2,or[or[or[nand[or[not[apply(same_color,x.o)],yellow],not[blue]],triangle],size3],apply(same_shape,x.o)]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:or[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:not[%s];4:blue;4:triangle;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, or[size2,circle]), and[apply(same_size,iota(filter(x.s, or[circle,and[circle,and[circle,blue]]]))),size2]), not[nor[apply(same_shape,iota(filter(x.s, triangle))),and[triangle,and[or[or[circle,triangle],size2],not[triangle]]]]]), triangle), triangle)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:blue;4:size2;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:size2;4:not[%s];4:triangle;4:triangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[iff[yellow,and[rectangle,yellow]]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(blue,filter(filter(filter(x.s, rectangle), size2), triangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:triangle
'λx.apply(or[not[yellow],not[circle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[circle,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[rectangle,and[blue,apply(same_size,x.o)]],iota(filter(filter(x.s, not[and[green,and[green,green]]]), and[circle,circle])))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:circle;4:circle
'λx.apply(or[rectangle,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,and[size1,circle]],iota(filter(filter(filter(x.s, blue), size1), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:blue
'λx.forall(and[green,triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.apply(or[and[or[apply(same_size,iota(filter(filter(filter(x.s, rectangle), rectangle), apply(same_shape,iota(x.s))))),size3],blue],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[size3,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_color,iota(x.s)), filter(filter(x.s, not[blue]), and[blue,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:circle
'λx.apply(nand[triangle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, or[yellow,and[size3,not[not[circle]]]]), apply(same_color,iota(filter(x.s, circle)))), implies[apply(size-leq,x.o),circle]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:not[%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:rectangle
'λx.exists(rectangle, filter(x.s, or[and[size2,circle],triangle]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:circle;4:triangle
'λx.apply(or[and[apply(same_color,x.o),size2],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[not[circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, circle), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[blue,and[blue,and[or[or[size3,green],or[not[size1],nor[not[and[blue,circle]],iff[triangle,size1]]]],size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:green;4:or[%s,%s];4:not[%s];4:size1;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;4:iff[%s,%s];4:triangle;4:size1;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), circle), yellow), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:yellow;4:size3
'λx.exists(and[triangle,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(and[nand[green,yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:yellow;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[yellow,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:rectangle
'λx.apply(apply(size-leq,iota(filter(filter(x.s, green), green))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[and[and[rectangle,rectangle],implies[not[or[or[triangle,not[size3]],blue]],green]],rectangle],size1],iota(filter(filter(filter(filter(filter(x.s, circle), green), size2), nand[apply(same_color,x.o),yellow]), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:size3;4:blue;4:green;4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:size2;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:triangle
'λx.empty(filter(filter(filter(filter(x.s, size2), rectangle), triangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:triangle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, green), yellow), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:green
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, rectangle), circle), green), apply(size-lt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, rectangle), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, nor[not[green],iff[size3,circle]]), apply(size-geq,x.o)), size2), green), and[circle,and[rectangle,size1]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:green;4:iff[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(or[circle,and[and[green,triangle],size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,blue],iota(filter(filter(x.s, and[size1,not[circle]]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:circle;4:size2
'λx.apply(size3,iota(filter(filter(filter(x.s, and[and[rectangle,or[and[blue,not[triangle]],apply(same_shape,x.o)]],iff[or[apply(size-lt,iota(x.s)),blue],green]]), yellow), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;4:green;4:yellow;4:green
'λx.forall(rectangle,filter(filter(filter(x.s, size3), triangle), or[not[size2],circle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:or[%s,%s];4:not[%s];4:size2;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, apply(same_size,x.o)), size2), apply(same_color,iota(filter(x.s, circle)))), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(size2,iota(filter(filter(filter(x.s, triangle), not[triangle]), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:triangle;4:size1
'λx.apply(iff[yellow,size1],iota(filter(filter(x.s, circle), or[green,size2])))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:green;4:size2
'λx.apply(or[rectangle,and[blue,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[not[not[and[yellow,blue]]],size3]), or[triangle,or[circle,size2]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:blue;4:size3;4:or[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:size2
'λx.apply(or[rectangle,and[blue,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, iff[not[and[green,or[green,not[apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, iff[circle,size1]), green), nor[nand[and[green,size1],size3],size2]), not[triangle]), nand[yellow,triangle])))]]]],or[size3,size1]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size1;4:green;4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:size1;4:size3;4:size2;4:not[%s];4:triangle;4:nand[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:size3;4:size1
'λx.exists(or[yellow,or[rectangle,apply(same_color,x.o)]], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(or[and[or[blue,size3],size2],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:size3;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[or[and[yellow,green],and[size2,triangle]],size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:and[%s,%s];4:size2;4:triangle;4:size2;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(filter(x.s, rectangle), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(implies[green,apply(same_size,iota(filter(x.s, size2)))],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, and[circle,and[size3,implies[and[size2,or[not[nor[rectangle,and[circle,apply(same_shape,x.o)]]],apply(same_color,iota(x.s))]],size2]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:implies[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(implies[blue,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, implies[nand[or[apply(same_shape,iota(x.s)),size1],green],or[or[triangle,rectangle],not[blue]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:green;4:or[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:not[%s];4:blue
'λx.apply(and[or[size1,not[size2]],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,implies[and[nor[green,size1],blue],nand[nand[and[size2,blue],triangle],and[and[circle,rectangle],green]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:size1;4:blue;4:nand[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:blue;4:triangle;4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:green;1:%s.o;2:x
'λx.forall(not[not[or[not[green],not[apply(size-gt,x.o)]]]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:green;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[not[and[size3,size1]],size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(filter(x.s, apply(size-leq,x.o)), not[nor[circle,not[and[nand[size1,yellow],not[not[green]]]]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:nor[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:yellow;4:not[%s];4:not[%s];4:green
'λx.apply(and[triangle,apply(same_size,x.o)],iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.forall(circle,filter(x.s, apply(size-leq,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(and[triangle,apply(same_shape,iota(filter(filter(filter(x.s, or[triangle,nand[green,and[circle,and[or[apply(size-leq,iota(filter(x.s, and[circle,size2]))),size2],circle]]]]), rectangle), size1)))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:size2;4:circle;4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(nand[rectangle,circle],iota(filter(x.s, and[yellow,nor[triangle,yellow]])))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:triangle;4:yellow
'λx.apply(or[yellow,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, nor[or[not[size3],and[blue,size2]],yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:blue;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, triangle), size2), rectangle), apply(same_size,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[and[nor[and[yellow,and[not[blue],yellow]],implies[size2,green]],green],size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:blue;4:yellow;4:implies[%s,%s];4:size2;4:green;4:green;4:size1
'λx.apply(not[and[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(and[circle,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.forall(and[blue,circle],filter(filter(x.s, nor[size3,or[nor[yellow,rectangle],circle]]), triangle))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:or[%s,%s];4:nor[%s,%s];4:yellow;4:rectangle;4:circle;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_size,iota(x.s))), rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:blue
'λx.contains(x.o, filter(filter(x.s, or[size1,circle]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:circle;4:circle
'λx.apply(not[and[apply(size-gt,iota(x.s)),yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(implies[size3,or[and[and[yellow,yellow],circle],apply(same_size,x.o)]],iota(filter(filter(filter(x.s, and[circle,and[not[size3],or[size1,implies[and[green,or[apply(same_shape,iota(filter(x.s, rectangle))),green]],triangle]]]]), size2), size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:size1;4:implies[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:triangle;4:size2;4:size3
'λx.apply(not[or[size1,yellow]],iota(filter(filter(x.s, apply(same_shape,iota(x.s))), size3)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(and[and[yellow,apply(same_color,x.o)],and[and[yellow,apply(size-gt,iota(x.s))],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[green,implies[and[not[triangle],apply(same_size,iota(x.s))],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, iff[iff[size2,nand[size1,triangle]],and[size1,size3]]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:iff[%s,%s];4:size2;4:nand[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:size1;4:size3;4:circle
'λx.apply(not[and[size1,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(nor[nor[size2,size3],rectangle],iota(filter(filter(x.s, size3), or[implies[apply(same_color,x.o),size1],green])))'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:size2;4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:green
'λx.apply(iff[triangle,size3],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(filter(filter(x.s, circle), green), and[not[apply(same_shape,x.o)],apply(same_size,iota(filter(x.s, rectangle)))]), or[not[apply(same_shape,iota(x.s))],rectangle]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(iff[blue,yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[circle,apply(size-geq,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[nand[green,circle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:green;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[iff[rectangle,green],or[yellow,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, triangle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.forall(and[rectangle,apply(same_size,x.o)],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(x.s, triangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size2],iota(filter(filter(x.s, and[circle,size1]), blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1;4:blue
'λx.apply(nand[or[triangle,size1],not[not[yellow]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.forall(not[blue],filter(x.s, or[yellow,triangle]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(or[blue,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, blue), size2), iff[size2,apply(size-gt,iota(filter(filter(filter(filter(filter(x.s, size1), size3), apply(size-leq,iota(filter(filter(x.s, not[rectangle]), and[green,circle])))), blue), rectangle)))]), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:green;4:circle;4:blue;4:rectangle;4:rectangle
'λx.apply(implies[blue,size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[and[or[or[or[circle,implies[not[nand[rectangle,triangle]],size3]],green],circle],apply(size-geq,iota(x.s))]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:implies[%s,%s];4:not[%s];4:nand[%s,%s];4:rectangle;4:triangle;4:size3;4:green;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[and[size3,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:green
'λx.apply(and[and[not[and[size2,size1]],yellow],not[size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size1;4:yellow;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, circle), size3), yellow), green), nor[yellow,blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:yellow;4:green;4:nor[%s,%s];4:yellow;4:blue
'λx.apply(or[size1,implies[size2,triangle]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[apply(same_shape,x.o),yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size3,and[yellow,iff[and[apply(same_size,iota(filter(filter(x.s, green), blue))),or[size3,rectangle]],size3]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:or[%s,%s];4:size3;4:rectangle;4:size3;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[triangle,circle]), yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:yellow;4:circle
'λx.apply(rectangle,iota(filter(x.s, or[green,triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:triangle
'λx.forall(circle,filter(filter(x.s, apply(size-leq,iota(x.s))), iff[apply(same_shape,x.o),nor[size1,size3]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:size3
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, circle), size1), green))),iota(filter(filter(filter(x.s, size1), circle), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:rectangle
'λx.forall(apply(same_shape,iota(filter(filter(filter(filter(x.s, yellow), or[blue,yellow]), size2), size1))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:yellow;4:size2;4:size1;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), and[and[circle,size1],nand[and[apply(size-leq,x.o),apply(same_color,iota(filter(x.s, yellow)))],rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(and[apply(same_size,iota(x.s)),triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[green,yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.contains(iota(x.s), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[circle,and[size3,or[size3,size1]]],iota(filter(filter(x.s, not[size3]), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:or[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, triangle), green), green), circle), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:green;4:circle;4:yellow
'λx.forall(green,filter(x.s, triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[triangle,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, not[iff[size1,apply(same_shape,x.o)]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[size2,yellow],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[or[rectangle,apply(size-lt,iota(x.s))],yellow],blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.contains(iota(filter(filter(filter(filter(x.s, blue), triangle), size1), circle)), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nor[apply(same_size,iota(x.s)),size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.forall(and[not[triangle],size1],filter(filter(x.s, triangle), rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.exists(blue, filter(x.s, circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[rectangle,rectangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[and[apply(same_color,iota(filter(x.s, rectangle))),rectangle],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, triangle), and[and[rectangle,green],size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:size1
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, apply(same_size,iota(x.s))), and[yellow,blue]), rectangle), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:rectangle;4:triangle
'λx.apply(nand[rectangle,and[green,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(size3, filter(x.s, apply(same_size,iota(filter(x.s, size2)))))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[and[yellow,green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,apply(same_size,iota(x.s))],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(or[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[not[size2]]],iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(nor[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), or[iff[triangle,size3],green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:green
'λx.apply(and[not[rectangle],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(filter(x.s, and[and[blue,size2],rectangle]), blue), size1), rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:rectangle;4:blue;4:size1;4:rectangle
'λx.apply(nor[size1,yellow],iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(not[not[rectangle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(or[rectangle,and[rectangle,blue]],filter(filter(filter(filter(x.s, and[circle,circle]), and[yellow,size1]), apply(size-leq,x.o)), size1))'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:and[%s,%s];4:yellow;4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1
'λx.apply(and[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_size,iota(filter(x.s, rectangle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(not[and[green,size2]],iota(filter(x.s, and[not[rectangle],and[blue,circle]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:blue;4:circle
'λx.exists(not[triangle], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(x.s, or[blue,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(blue,iota(filter(filter(x.s, nor[triangle,triangle]), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:triangle;4:rectangle
'λx.apply(or[circle,green],iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.forall(blue,filter(filter(x.s, size2), or[size2,size2]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size2;4:size2
'λx.apply(and[and[and[apply(same_color,x.o),triangle],apply(same_shape,iota(x.s))],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, not[blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size1), apply(same_size,x.o)), implies[rectangle,size1])), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), green), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:size1
'λx.apply(and[size1,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[apply(same_size,iota(x.s)),and[iff[and[size2,size3],triangle],not[blue]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size2;4:size3;4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size1],iota(filter(filter(filter(x.s, size1), and[or[blue,or[rectangle,blue]],size2]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:blue;4:size2;4:size1
'λx.exists(nor[yellow,size3], filter(filter(filter(x.s, size3), yellow), apply(same_color,iota(filter(filter(filter(x.s, blue), and[blue,iff[circle,circle]]), triangle)))))'	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:circle;4:triangle
'λx.contains(iota(filter(filter(x.s, size2), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;3:%s.s;2:x
'λx.apply(apply(size-leq,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[circle,blue],iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(and[and[rectangle,green],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[yellow],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[yellow],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[circle,triangle]), not[rectangle]), not[size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:not[%s];4:rectangle;4:not[%s];4:size3
'λx.apply(yellow,iota(filter(x.s, apply(size-geq,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, nor[size3,yellow]), or[yellow,green]), or[or[yellow,green],blue]), size3), size3), and[and[and[size2,and[size2,and[green,triangle]]],not[blue]],size1]), blue), not[rectangle]))))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:yellow;4:or[%s,%s];4:yellow;4:green;4:or[%s,%s];4:or[%s,%s];4:yellow;4:green;4:blue;4:size3;4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:triangle;4:not[%s];4:blue;4:size1;4:blue;4:not[%s];4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, or[rectangle,blue]), size1), circle), implies[blue,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:blue;4:size1;4:circle;4:implies[%s,%s];4:blue;4:green
'λx.forall(nand[and[green,or[blue,and[circle,size3]]],size1],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size3;4:size1;3:%s.s;2:x
'λx.apply(and[blue,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(and[triangle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), blue), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size2
'λx.exists(and[blue,yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, or[triangle,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3
'λx.forall(or[size1,green],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, blue), and[blue,size2]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size1), apply(same_shape,iota(filter(x.s, size1)))), rectangle), rectangle), and[green,and[and[size1,size1],size3]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:rectangle;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:size3
'λx.contains(x.o, filter(filter(x.s, size2), apply(same_color,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[triangle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[size1,apply(same_size,iota(filter(x.s, size1)))]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(not[and[triangle,yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(iff[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nor[and[circle,size2],size2],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:circle;4:size2;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, blue), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(or[green,size2],iota(filter(filter(x.s, and[size3,yellow]), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, or[size3,and[yellow,green]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:green
'λx.apply(and[blue,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, not[triangle]), apply(same_shape,iota(x.s))), and[size1,blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.apply(iff[and[size2,circle],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:circle;4:circle;1:%s.o;2:x
'λx.exists(green, filter(x.s, not[size2]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[and[blue,rectangle],or[triangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(implies[blue,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size3), apply(same_color,x.o)), nand[size3,rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(x.s, nand[rectangle,implies[blue,triangle]]), iff[rectangle,and[implies[or[triangle,rectangle],nor[size2,triangle]],size2]]), or[yellow,circle]), yellow)), filter(filter(filter(x.s, green), nor[or[yellow,size1],or[not[not[rectangle]],yellow]]), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:triangle;4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:nor[%s,%s];4:size2;4:triangle;4:size2;4:or[%s,%s];4:yellow;4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:yellow;4:blue
'λx.apply(nand[green,size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, nor[or[blue,apply(size-geq,iota(filter(x.s, rectangle)))],not[triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle
'λx.apply(nor[and[size3,not[and[size1,size2]]],size2],iota(filter(filter(x.s, triangle), and[iff[yellow,size2],size1])))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:size1;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:size2;4:size1
'λx.apply(and[rectangle,and[yellow,yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[circle,not[not[circle]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, size1), apply(size-leq,iota(filter(filter(x.s, not[green]), and[yellow,yellow]))))))), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:yellow;4:yellow;4:size1
'λx.exists(and[and[triangle,rectangle],size1], filter(x.s, yellow))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, size3), size2), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:size2
'λx.apply(and[nor[not[rectangle],size1],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:rectangle;4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), or[yellow,size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:yellow;4:size2
'λx.apply(and[and[and[rectangle,size2],and[size3,yellow]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:size3;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(filter(filter(x.s, size1), and[or[not[apply(same_size,x.o)],yellow],green]), size3), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:green;4:size3;4:green
'λx.apply(nor[green,and[blue,size1]],iota(filter(x.s, or[size3,size3])))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size3
'λx.apply(nand[iff[size3,size2],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:size3;4:size2;4:green;1:%s.o;2:x
'λx.apply(and[triangle,not[blue]],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(apply(size-geq,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(or[green,or[size3,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[or[triangle,and[not[size3],and[rectangle,green]]],or[nand[size3,triangle],size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:nand[%s,%s];4:size3;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[and[triangle,size2],nand[and[size1,size3],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:nand[%s,%s];4:and[%s,%s];4:size1;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[green,or[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(and[triangle,iff[yellow,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size2,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(implies[size2,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(implies[size2,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.exists(and[apply(same_size,iota(x.s)),blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(and[and[yellow,and[apply(same_color,iota(x.s)),apply(same_shape,x.o)]],apply(same_color,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(apply(same_shape,iota(filter(filter(x.s, blue), size1))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:%s.s;2:x
'λx.apply(implies[size3,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, green), apply(same_color,x.o)), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, size2), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, not[nand[size1,size1]]), green)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:size1;4:size1;4:green
'λx.apply(or[or[triangle,not[size1]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, apply(size-lt,iota(x.s))), apply(same_shape,x.o)), green), size2), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:size2;4:triangle
'λx.apply(and[circle,triangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[size3,yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[and[or[circle,and[apply(same_color,iota(x.s)),size1]],and[yellow,circle]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:yellow;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[and[size1,yellow],and[iff[green,rectangle],size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, triangle), size3), rectangle)), filter(x.s, apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(implies[rectangle,yellow], filter(x.s, triangle))'	0:exists(%s, %s);4:implies[%s,%s];4:rectangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[green,circle],iota(filter(x.s, nand[blue,size2])))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:size2
'λx.exists(size2, filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), triangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.forall(green,filter(filter(x.s, size2), apply(same_shape,iota(x.s))))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[size1,and[size3,size3]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:size3
'λx.apply(green,iota(filter(x.s, and[blue,rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(and[circle,size2],iota(filter(x.s, nand[or[size3,circle],yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:size3;4:circle;4:yellow
'λx.apply(nand[blue,size1],iota(filter(filter(filter(x.s, triangle), size2), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:yellow
'λx.apply(size3,iota(filter(filter(filter(x.s, not[circle]), size1), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size1;4:yellow
'λx.exists(green, filter(x.s, apply(same_shape,iota(x.s))))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, green), implies[size2,not[and[size2,size1]]]), triangle), triangle), circle))),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:size2;4:size1;4:triangle;4:triangle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[size1,not[and[circle,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[and[yellow,size3],size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[size1,yellow],iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.empty(filter(filter(filter(filter(filter(x.s, green), circle), and[yellow,triangle]), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:yellow;4:triangle;4:blue;4:rectangle
'λx.exists(triangle, filter(x.s, yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size3,filter(x.s, triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size1,filter(x.s, triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(triangle,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[circle],size2],iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, and[circle,rectangle]), green), size3), and[rectangle,size3]), apply(same_size,iota(x.s))))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:green;4:size3;4:and[%s,%s];4:rectangle;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,x.o)'	0:apply(%s,%s);4:triangle;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[circle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[and[triangle,iff[size1,rectangle]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:size1;4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[or[size2,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, and[yellow,circle]), and[rectangle,and[rectangle,and[apply(same_color,x.o),size2]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(iff[apply(same_size,iota(filter(filter(filter(x.s, size2), or[size3,and[nand[and[and[circle,triangle],nor[apply(same_size,iota(filter(filter(filter(x.s, not[triangle]), iff[circle,green]), apply(size-leq,x.o)))),blue]],not[circle]],and[size3,rectangle]]]), apply(size-gt,x.o)))),apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size3;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:iff[%s,%s];4:circle;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:not[%s];4:circle;4:and[%s,%s];4:size3;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), size2), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:yellow
'λx.forall(blue,filter(x.s, and[circle,blue]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(and[circle,implies[or[not[and[triangle,circle]],and[yellow,implies[triangle,yellow]]],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:triangle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, or[or[triangle,blue],yellow]), and[triangle,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:yellow;4:and[%s,%s];4:triangle;4:circle
'λx.forall(rectangle,filter(x.s, not[not[size3]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[green,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), size3), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size1
'λx.apply(nor[implies[apply(size-gt,x.o),size2],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(or[and[or[size1,size3],triangle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:size3;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[blue,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(nor[circle,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[apply(size-leq,x.o),apply(same_size,x.o)]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(or[or[not[not[size3]],green],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:size3;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[yellow,size1], filter(filter(x.s, green), size3))'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.forall(triangle,filter(x.s, and[yellow,apply(same_shape,iota(filter(filter(x.s, and[size3,size3]), and[rectangle,apply(same_color,x.o)])))]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[not[size1],or[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[or[nand[rectangle,triangle],circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[circle,yellow],circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(and[rectangle,or[apply(size-geq,x.o),green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.forall(and[nand[and[nand[not[blue],size2],yellow],size1],or[size2,rectangle]],filter(filter(x.s, apply(same_shape,x.o)), implies[nand[yellow,nor[circle,triangle]],triangle]))'	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:size2;4:yellow;4:size1;4:or[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:nand[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:triangle;4:triangle
'λx.exists(size3, filter(filter(x.s, not[green]), yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:yellow
'λx.apply(nand[yellow,and[iff[and[size1,triangle],circle],size3]],iota(filter(filter(filter(x.s, and[rectangle,iff[green,green]]), yellow), rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:green;4:green;4:yellow;4:rectangle
'λx.contains(x.o, filter(x.s, rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(apply(same_size,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[and[triangle,size3],or[size3,apply(same_shape,iota(filter(filter(filter(x.s, circle), yellow), and[blue,and[size3,rectangle]])))]],nand[implies[green,iff[green,green]],and[circle,and[circle,size1]]]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:rectangle;4:nand[%s,%s];4:implies[%s,%s];4:green;4:iff[%s,%s];4:green;4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(yellow,iota(filter(x.s, and[and[circle,size2],green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:green
'λx.apply(and[and[or[size3,size2],and[triangle,circle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:and[%s,%s];4:triangle;4:circle;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(or[not[green],implies[green,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:implies[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(and[not[circle],apply(same_size,x.o)],iota(filter(filter(x.s, green), implies[triangle,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:triangle;4:triangle
'λx.apply(yellow,iota(filter(x.s, and[rectangle,circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(apply(same_shape,iota(filter(x.s, apply(same_size,iota(filter(x.s, rectangle)))))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, iff[blue,rectangle]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:rectangle
'λx.apply(or[circle,and[yellow,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,and[and[and[rectangle,and[triangle,or[circle,rectangle]]],green],and[apply(size-leq,x.o),blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:rectangle;4:green;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[size3,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, and[nand[not[triangle],apply(size-leq,x.o)],and[apply(size-geq,x.o),size2]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2
'λx.apply(and[apply(same_shape,iota(x.s)),blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size2), size1), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:circle
'λx.exists(circle, filter(filter(x.s, and[blue,not[triangle]]), or[blue,green]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:or[%s,%s];4:blue;4:green
'λx.empty(filter(filter(x.s, rectangle), iff[and[size1,not[and[green,not[size2]]]],size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:size2;4:size3
'λx.forall(not[yellow],filter(x.s, nand[and[circle,triangle],triangle]))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:triangle
'λx.contains(x.o, filter(x.s, and[triangle,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.apply(or[and[apply(same_shape,iota(x.s)),triangle],and[nand[yellow,size1],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:nand[%s,%s];4:yellow;4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, or[not[circle],yellow]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:yellow
'λx.apply(implies[triangle,size1],iota(filter(x.s, implies[green,size2])))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:size2
'λx.apply(and[nand[and[size2,rectangle],not[blue]],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:not[%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(iff[apply(same_size,iota(filter(filter(x.s, green), and[and[size1,yellow],circle]))),and[apply(size-leq,iota(filter(filter(x.s, and[or[or[nor[circle,and[size3,or[and[blue,rectangle],triangle]]],and[nor[size1,green],triangle]],rectangle],size2]), circle))),iff[and[size1,rectangle],apply(size-gt,x.o)]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:triangle;4:and[%s,%s];4:nor[%s,%s];4:size1;4:green;4:triangle;4:rectangle;4:size2;4:circle;4:iff[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[green,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size3,or[and[triangle,apply(same_color,x.o)],not[blue]]],filter(filter(x.s, triangle), rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, and[apply(same_shape,x.o),iff[size2,not[size2]]]), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size2;4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, blue), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[not[yellow],or[blue,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[yellow,blue],iota(filter(filter(x.s, yellow), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.exists(apply(size-gt,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(not[implies[blue,yellow]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;3:%s.s;2:x
'λx.apply(nand[rectangle,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, apply(same_color,iota(filter(filter(filter(filter(x.s, circle), not[apply(size-lt,x.o)]), green), rectangle)))), nand[circle,rectangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:rectangle;4:nand[%s,%s];4:circle;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, and[size3,apply(same_color,iota(x.s))]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(nand[size1,and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[green,and[size2,not[yellow]]],or[size1,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:not[%s];4:yellow;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.forall(apply(same_size,x.o),filter(x.s, and[and[blue,triangle],size2]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size2
'λx.apply(size1,iota(filter(filter(filter(x.s, iff[green,not[and[yellow,not[or[apply(size-gt,x.o),size3]]]]]), and[size1,not[size3]]), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;4:and[%s,%s];4:size1;4:not[%s];4:size3;4:size3
'λx.apply(apply(same_shape,iota(filter(x.s, or[green,and[circle,or[rectangle,size1]]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[green,not[circle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, not[green]), size2), size2), iff[and[and[apply(same_color,iota(x.s)),apply(same_shape,x.o)],circle],apply(size-gt,x.o)]), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2;4:size2;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2
'λx.forall(and[nor[or[not[circle],apply(same_color,iota(x.s))],size1],circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;3:%s.s;2:x
'λx.apply(not[green],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[or[implies[triangle,not[yellow]],blue],rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:triangle;4:not[%s];4:yellow;4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[implies[blue,size1],yellow],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size1), not[and[triangle,size1]]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:triangle;4:size1;4:green
'λx.apply(or[size2,apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(filter(filter(x.s, blue), nor[apply(same_color,iota(x.s)),or[green,or[size1,and[size3,size3]]]]), size3), apply(same_shape,iota(x.s))))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:size3;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,apply(same_shape,iota(filter(filter(x.s, apply(same_color,iota(x.s))), and[yellow,yellow])))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(and[circle,size1],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.forall(and[circle,size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(x.s, or[triangle,size3]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:size1
'λx.apply(yellow,iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(and[circle,and[not[blue],and[size1,green]]],iota(filter(filter(x.s, nand[green,apply(size-lt,iota(filter(filter(x.s, not[and[and[and[circle,apply(size-geq,x.o)],apply(size-geq,iota(filter(filter(x.s, or[size2,and[rectangle,blue]]), and[apply(same_shape,iota(x.s)),not[green]])))],circle]]), rectangle)))]), not[rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;4:circle;4:rectangle;4:not[%s];4:rectangle
'λx.apply(or[and[size2,size2],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:blue;1:%s.o;2:x
'λx.apply(nand[yellow,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.forall(not[and[green,blue]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.exists(triangle, filter(x.s, blue))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(blue, filter(filter(x.s, triangle), nor[and[apply(same_shape,iota(x.s)),size3],blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:blue
'λx.forall(not[iff[blue,green]],filter(filter(filter(x.s, size2), yellow), or[blue,rectangle]))'	0:forall(%s,%s);4:not[%s];4:iff[%s,%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(and[apply(same_color,x.o),apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(or[triangle,size1],filter(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, and[yellow,and[apply(same_shape,iota(x.s)),rectangle]]), size3)))), and[not[triangle],or[triangle,blue]]), size3))'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size3;4:and[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:triangle;4:blue;4:size3
'λx.apply(implies[green,nand[size1,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:nand[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,apply(same_shape,x.o)],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(green,filter(x.s, and[triangle,rectangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(size3,iota(filter(x.s, and[size2,yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow
'λx.forall(not[size1],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, triangle), apply(size-gt,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle
'λx.apply(and[iff[rectangle,size3],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size1,green]],iota(filter(x.s, and[and[apply(same_color,x.o),triangle],triangle])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:triangle
'λx.apply(not[blue],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, and[implies[size2,apply(same_color,iota(x.s))],nand[blue,yellow]]), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:yellow;4:green
'λx.contains(iota(filter(x.s, green)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size2,iota(filter(x.s, and[apply(size-geq,x.o),or[and[rectangle,size3],size3]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:size3
'λx.exists(green, filter(x.s, and[or[blue,green],rectangle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:rectangle
'λx.apply(apply(same_size,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size1,size2]],iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.contains(iota(filter(filter(filter(x.s, size3), yellow), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:size2;3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, or[size1,green]), not[apply(same_color,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[green,and[apply(same_color,iota(filter(x.s, triangle))),and[rectangle,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[apply(same_size,iota(x.s)),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(filter(x.s, rectangle), iff[size1,apply(same_shape,iota(filter(filter(filter(x.s, apply(size-geq,iota(x.s))), yellow), triangle)))]), apply(same_color,x.o)), not[size2]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:yellow;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size2
'λx.apply(and[apply(same_size,x.o),nand[yellow,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.forall(not[and[blue,green]],filter(filter(filter(x.s, size3), size2), or[apply(same_size,iota(x.s)),yellow]))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(not[circle],iota(filter(filter(filter(x.s, not[green]), size3), yellow)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size3;4:yellow
'λx.apply(and[and[iff[and[rectangle,size3],not[and[yellow,and[and[green,green],and[and[green,yellow],size2]]]]],nand[or[and[and[and[and[or[size2,and[green,circle]],and[yellow,triangle]],blue],rectangle],or[yellow,blue]],size3],blue]],blue],iota(filter(x.s, and[rectangle,green])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size2;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:circle;4:and[%s,%s];4:yellow;4:triangle;4:blue;4:rectangle;4:or[%s,%s];4:yellow;4:blue;4:size3;4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green
'λx.apply(nor[iff[rectangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size3), or[rectangle,and[circle,size1]]), circle), nor[and[size1,size1],blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:size1;4:circle;4:nor[%s,%s];4:and[%s,%s];4:size1;4:size1;4:blue
'λx.apply(not[and[and[yellow,size2],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.empty(filter(filter(x.s, yellow), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.empty(filter(filter(x.s, yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.empty(filter(filter(x.s, yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(blue,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[size1,and[triangle,or[yellow,not[apply(same_color,iota(x.s))]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, yellow), not[circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:circle
'λx.apply(and[size1,and[green,size1]],iota(filter(filter(filter(x.s, rectangle), apply(same_size,x.o)), green)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(and[apply(same_shape,x.o),circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size3,size3],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[size3,and[circle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, triangle), size2), triangle), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:triangle;4:circle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, and[blue,iff[triangle,rectangle]]), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:iff[%s,%s];4:triangle;4:rectangle;4:triangle
'λx.apply(implies[size2,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[or[size2,triangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[size2,not[triangle]]), implies[rectangle,and[size3,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:triangle;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:green
'λx.apply(not[yellow],iota(filter(filter(x.s, or[or[blue,blue],size3]), green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:size3;4:green
'λx.apply(iff[and[implies[not[and[circle,rectangle]],green],size2],not[apply(size-lt,iota(x.s))]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:rectangle;4:green;4:size2;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[apply(size-gt,iota(filter(filter(x.s, iff[or[not[and[green,size3]],blue],and[green,blue]]), size3)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:size3;4:blue;4:and[%s,%s];4:green;4:blue;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,iota(x.s))), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.exists(or[nand[and[nor[blue,size1],and[and[triangle,blue],yellow]],size3],apply(same_shape,x.o)], filter(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), rectangle), and[or[rectangle,green],or[size2,circle]]), green), yellow), or[and[not[apply(size-gt,iota(filter(x.s, size3)))],circle],yellow]), rectangle), size1))'	0:exists(%s, %s);4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:size1;4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:size2;4:circle;4:green;4:yellow;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:yellow;4:rectangle;4:size1
'λx.forall(yellow,x.s)'	0:forall(%s,%s);4:yellow;3:%s.s;2:x
'λx.apply(and[circle,size2],iota(filter(filter(x.s, implies[size3,or[and[size1,size1],and[circle,size1]]]), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:circle;4:size1;4:circle
'λx.apply(and[circle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(not[apply(same_size,x.o)],iota(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, rectangle), apply(same_shape,x.o))))), apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.exists(or[and[implies[and[triangle,green],green],size3],green], filter(x.s, and[size1,and[yellow,triangle]]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:triangle;4:green;4:green;4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), yellow), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:yellow
'λx.exists(and[and[size3,blue],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(or[size3,nor[not[blue],rectangle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:nor[%s,%s];4:not[%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.exists(and[rectangle,size2], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[apply(same_size,iota(filter(x.s, and[not[size3],green]))),not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:green;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(not[triangle],x.o)'	0:apply(%s,%s);4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),implies[iff[implies[rectangle,rectangle],triangle],and[yellow,implies[apply(same_size,x.o),or[not[size2],and[rectangle,yellow]]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:triangle;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, not[implies[yellow,or[circle,not[green]]]])))), triangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:not[%s];4:green;4:triangle;4:green
'λx.forall(nand[circle,circle],filter(x.s, size3))'	0:forall(%s,%s);4:nand[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[and[triangle,yellow],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(and[circle,green],filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(or[and[or[circle,size1],circle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:circle;4:size1;1:%s.o;2:x
'λx.apply(implies[not[apply(size-leq,iota(filter(filter(filter(x.s, triangle), and[not[and[blue,apply(same_color,iota(filter(x.s, nand[yellow,or[triangle,or[blue,green]]])))]],triangle]), nand[size3,circle])))],and[yellow,implies[iff[size3,triangle],or[yellow,or[green,not[blue]]]]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:green;4:triangle;4:nand[%s,%s];4:size3;4:circle;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:or[%s,%s];4:yellow;4:or[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(apply(same_color,iota(x.s)), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(green,filter(filter(x.s, and[or[size1,apply(same_size,x.o)],not[yellow]]), and[and[apply(same_shape,x.o),apply(same_color,iota(x.s))],and[rectangle,green]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green
'λx.apply(not[triangle],iota(filter(x.s, nor[not[rectangle],size1])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:rectangle;4:size1
'λx.exists(nor[apply(same_size,x.o),apply(same_shape,x.o)], filter(filter(filter(x.s, or[green,rectangle]), yellow), and[not[rectangle],triangle]))'	0:exists(%s, %s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle;4:yellow;4:and[%s,%s];4:not[%s];4:rectangle;4:triangle
'λx.exists(size3, filter(filter(filter(x.s, rectangle), green), apply(size-lt,iota(x.s))))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,blue],iota(filter(x.s, and[blue,apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, not[size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[and[or[apply(size-leq,iota(filter(filter(x.s, yellow), size1))),not[implies[rectangle,yellow]]],size3],apply(same_size,iota(filter(filter(x.s, circle), and[nand[and[size2,and[and[green,size2],size2]],size3],green])))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:not[%s];4:implies[%s,%s];4:rectangle;4:yellow;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:size2;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[and[not[blue],and[or[nand[size2,green],size2],size3]],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:size2;4:green;4:size2;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[or[apply(size-leq,x.o),rectangle],and[rectangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[triangle,rectangle]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:blue
'λx.apply(and[size2,and[rectangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[not[implies[size3,circle]],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:size3;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(or[apply(same_shape,x.o),yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(or[and[yellow,green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:blue;1:%s.o;2:x
'λx.apply(nor[green,circle],iota(filter(filter(x.s, nor[circle,yellow]), not[apply(same_color,x.o)])))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size3), apply(same_shape,iota(x.s))), apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[size2,size2]), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2;4:size3
'λx.apply(iff[and[nor[nand[blue,size2],size1],circle],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:size1;4:circle;4:size2;1:%s.o;2:x
'λx.apply(implies[not[triangle],size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,size2],iota(filter(filter(x.s, implies[triangle,apply(same_shape,x.o)]), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(and[blue,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[not[blue],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[size1,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), not[green]), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:green;4:size3
'λx.apply(or[size1,yellow],iota(filter(filter(filter(filter(x.s, size3), triangle), yellow), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:yellow;4:blue
'λx.exists(size1, filter(filter(x.s, and[and[and[not[not[not[green]]],not[size3]],rectangle],blue]), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:green;4:not[%s];4:size3;4:rectangle;4:blue;4:size1
'λx.apply(implies[and[and[circle,yellow],implies[apply(same_color,x.o),or[nor[blue,and[apply(size-leq,iota(x.s)),and[green,yellow]]],apply(size-gt,x.o)]]],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[apply(size-leq,iota(filter(x.s, green))),circle],apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[and[rectangle,size3],circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(yellow,filter(filter(x.s, not[size3]), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size3
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(not[triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, and[rectangle,rectangle]), size3), nor[rectangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:size3;4:nor[%s,%s];4:rectangle;4:blue
'λx.apply(and[blue,triangle],iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, rectangle), and[rectangle,yellow]), and[nand[and[size1,size1],not[and[circle,and[apply(size-geq,x.o),and[size1,yellow]]]]],triangle]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size1;4:size1;4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow;4:triangle;4:green
'λx.apply(or[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size3), and[or[size1,not[size2]],circle]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:size2;4:circle;4:blue
'λx.apply(apply(same_color,iota(filter(x.s, and[size3,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, green), and[and[not[apply(same_shape,iota(x.s))],blue],size1]), size2), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:size1;4:size2;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(and[green,and[size2,and[triangle,blue]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, and[green,yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.exists(or[apply(same_shape,x.o),circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(or[and[circle,yellow],not[blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[implies[nand[not[triangle],green],size1]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:nand[%s,%s];4:not[%s];4:triangle;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, size2))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(yellow,filter(x.s, size1))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(yellow,filter(x.s, green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[not[size2],and[or[size3,size1],and[size1,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:size3;4:size1;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(not[not[yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[size1,apply(same_size,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-leq,iota(x.s)), filter(filter(filter(x.s, green), iff[or[triangle,apply(same_color,x.o)],triangle]), apply(size-lt,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(and[and[triangle,size3],implies[size2,rectangle]],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:implies[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(triangle, filter(x.s, and[size3,rectangle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.forall(not[triangle],x.s)'	0:forall(%s,%s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, size1), rectangle), and[green,not[rectangle]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:and[%s,%s];4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, and[rectangle,and[circle,or[rectangle,blue]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:blue
'λx.apply(or[blue,or[not[green],blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[not[yellow]],not[and[green,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), size1), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:yellow
'λx.apply(size2,iota(filter(filter(filter(x.s, circle), size3), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:yellow
'λx.exists(and[size1,apply(same_color,iota(x.s))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(green,iota(filter(filter(x.s, and[size1,circle]), not[blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:not[%s];4:blue
'λx.forall(iff[blue,blue],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.apply(and[yellow,and[blue,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,and[blue,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[circle,and[blue,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, or[size1,and[apply(same_shape,iota(x.s)),implies[and[size2,size3],or[rectangle,triangle]]]]), size1), rectangle)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size2;4:size3;4:or[%s,%s];4:rectangle;4:triangle;4:size1;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, green))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, size1))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, size2))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, size3))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(filter(filter(x.s, size2), size2), and[size1,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:and[%s,%s];4:size1;4:size3
'λx.apply(size2,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size3,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(filter(x.s, size1), and[circle,or[triangle,nor[not[circle],circle]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:nor[%s,%s];4:not[%s];4:circle;4:circle
'λx.apply(or[green,size1],iota(filter(filter(x.s, rectangle), or[yellow,green])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:yellow;4:green
'λx.forall(triangle,filter(x.s, yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[yellow,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(blue, filter(x.s, blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[or[apply(size-geq,x.o),size1],iff[rectangle,size1]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;4:iff[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(nand[apply(same_size,iota(filter(filter(filter(x.s, nand[circle,and[yellow,blue]]), triangle), apply(same_color,x.o)))),and[and[size3,and[rectangle,triangle]],nor[circle,green]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:blue;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:triangle;4:nor[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(filter(x.s, not[and[rectangle,circle]]), circle), apply(size-leq,x.o)), rectangle), apply(same_shape,iota(x.s))), apply(same_size,x.o)), and[blue,and[triangle,size3]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:circle;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:size3
'λx.forall(or[and[size1,green],yellow],filter(x.s, rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:green;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[apply(same_color,iota(x.s)),iff[circle,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), and[green,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:size1
'λx.apply(or[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[circle,not[yellow]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:not[%s];4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, iff[triangle,apply(same_size,iota(filter(filter(x.s, nor[or[rectangle,blue],circle]), size2)))]), yellow), or[size1,or[triangle,and[size1,nand[size2,size3]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:circle;4:size2;4:yellow;4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:nand[%s,%s];4:size2;4:size3
'λx.forall(size2,filter(x.s, nand[and[apply(same_color,iota(x.s)),size1],and[circle,circle]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:circle
'λx.apply(green,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(x.s, green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, yellow), and[size2,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size2;4:yellow
'λx.apply(or[rectangle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[rectangle,size2],or[size2,and[triangle,yellow]]],iota(filter(x.s, and[nand[rectangle,size1],not[circle]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:size1;4:not[%s];4:circle
'λx.apply(yellow,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.forall(triangle,filter(x.s, blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[not[apply(size-geq,x.o)],blue],iota(filter(x.s, and[rectangle,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3
'λx.apply(and[or[circle,circle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(or[implies[rectangle,circle],size2],filter(x.s, not[yellow]))'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(or[or[size1,green],blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:size1;4:green;4:blue;3:%s.s;2:x
'λx.apply(green,x.o)'	0:apply(%s,%s);4:green;1:%s.o;2:x
'λx.apply(and[size1,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), and[rectangle,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:rectangle;4:yellow
'λx.exists(and[size3,apply(same_size,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(filter(x.s, yellow), green), circle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:circle
'λx.apply(green,iota(filter(filter(x.s, apply(same_color,iota(x.s))), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[size1,rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, green), and[implies[size1,size3],rectangle]), triangle), circle), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:implies[%s,%s];4:size1;4:size3;4:rectangle;4:triangle;4:circle;4:yellow
'λx.empty(filter(filter(x.s, and[iff[not[blue],and[triangle,size2]],rectangle]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:triangle;4:size2;4:rectangle;4:circle
'λx.apply(and[circle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, green), iff[and[triangle,blue],not[circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:not[%s];4:circle
'λx.empty(filter(filter(x.s, yellow), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(nor[size1,circle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size2,x.o)'	0:apply(%s,%s);4:size2;1:%s.o;2:x
'λx.apply(size3,x.o)'	0:apply(%s,%s);4:size3;1:%s.o;2:x
'λx.apply(size1,x.o)'	0:apply(%s,%s);4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(filter(x.s, rectangle), rectangle), size3), not[size1]), nor[apply(same_size,x.o),size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:size3;4:not[%s];4:size1;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.empty(filter(x.s, apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[or[or[size3,rectangle],apply(size-gt,x.o)]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(x.s, triangle))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[apply(same_color,x.o),and[or[size2,size2],rectangle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:size2;4:rectangle
'λx.apply(and[apply(same_shape,iota(x.s)),yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[iff[yellow,size2],size1]), apply(same_color,iota(filter(filter(filter(filter(filter(x.s, triangle), and[size3,rectangle]), circle), rectangle), green)))), rectangle), apply(same_shape,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:size2;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size3;4:rectangle;4:circle;4:rectangle;4:green;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,or[not[green],not[or[size1,and[green,not[not[yellow]]]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:green;4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[triangle,rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(circle,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, size1))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(yellow, filter(x.s, green))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, and[circle,not[size2]])), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[and[green,size2],size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(filter(x.s, triangle), nand[circle,iff[triangle,circle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:circle;4:iff[%s,%s];4:triangle;4:circle
'λx.forall(size1,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(or[rectangle,circle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(apply(same_size,iota(filter(x.s, yellow))),filter(x.s, and[yellow,size3]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(and[size1,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,blue],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[nand[triangle,triangle],not[apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:triangle;4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size2,iff[rectangle,circle]],iota(filter(filter(filter(x.s, or[blue,blue]), and[blue,rectangle]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue;4:and[%s,%s];4:blue;4:rectangle;4:green
'λx.apply(nand[not[yellow],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size1,implies[circle,apply(same_color,iota(x.s))]]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[green,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(nor[size2,green],iota(filter(filter(x.s, and[iff[or[yellow,apply(same_size,x.o)],and[size1,and[and[yellow,not[size1]],size2]]],or[triangle,size2]]), iff[blue,yellow])))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:size1;4:size2;4:or[%s,%s];4:triangle;4:size2;4:iff[%s,%s];4:blue;4:yellow
'λx.exists(and[not[green],yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, green), blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[size2,and[size2,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, or[rectangle,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size3
'λx.apply(and[size3,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, nor[blue,apply(same_size,iota(x.s))]), yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[size1,not[apply(same_color,iota(x.s))]],triangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[and[yellow,rectangle],or[or[and[and[size3,not[and[green,and[not[and[not[blue],size2]],and[iff[not[not[rectangle]],size1],green]]]]],not[size1]],triangle],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:size1;4:green;4:not[%s];4:size1;4:triangle;4:green;1:%s.o;2:x
'λx.apply(and[green,not[triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, yellow), rectangle), nand[rectangle,yellow]), or[circle,size3]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:nand[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:circle;4:size3
'λx.apply(or[blue,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, blue), size3), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size1
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), iff[not[size2],and[rectangle,size2]]), nand[implies[size2,size2],yellow]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:iff[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:rectangle;4:size2;4:nand[%s,%s];4:implies[%s,%s];4:size2;4:size2;4:yellow
'λx.forall(or[not[and[circle,green]],rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:green;4:rectangle;3:%s.s;2:x
'λx.apply(and[blue,or[rectangle,not[iff[and[yellow,triangle],triangle]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[apply(same_size,iota(filter(x.s, blue))),size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[size3,rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.empty(filter(filter(x.s, yellow), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), and[yellow,and[and[circle,and[size3,size3]],rectangle]]), and[rectangle,nand[size3,and[or[iff[and[rectangle,size1],nand[green,apply(same_color,x.o)]],size1],apply(size-gt,x.o)]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:size3;4:rectangle;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(nand[blue,implies[and[apply(same_shape,iota(x.s)),circle],circle]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:blue;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:circle;3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(x.s, and[rectangle,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(not[and[rectangle,circle]],iota(filter(filter(filter(filter(x.s, size2), yellow), not[size1]), green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:not[%s];4:size1;4:green
'λx.apply(or[green,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(implies[size1,implies[blue,implies[yellow,rectangle]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:implies[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[nand[and[size2,not[rectangle]],triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:rectangle;4:triangle;4:green;1:%s.o;2:x
'λx.apply(iff[rectangle,and[green,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, apply(same_size,iota(filter(filter(x.s, size2), green))))))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(not[green],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(green,filter(filter(filter(x.s, triangle), nand[size3,rectangle]), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:size3;4:rectangle;4:yellow
'λx.apply(size2,iota(filter(filter(filter(x.s, and[yellow,triangle]), size1), and[and[green,yellow],and[yellow,yellow]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(or[size2,and[apply(same_shape,iota(x.s)),size3]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[apply(same_shape,x.o),size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, not[and[blue,size3]]), apply(size-lt,iota(filter(filter(filter(filter(filter(filter(x.s, green), size3), yellow), size2), and[size2,rectangle]), apply(same_size,iota(x.s)))))), and[size1,and[green,yellow]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:yellow;4:size2;4:and[%s,%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(and[and[size2,nor[size1,size2]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:nor[%s,%s];4:size1;4:size2;4:green;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, triangle), not[green]), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:green;4:size1
'λx.apply(not[and[rectangle,triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size3), green), apply(same_size,x.o)), size3), green), rectangle), or[apply(same_size,x.o),yellow])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:green;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(and[not[and[size3,rectangle]],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[yellow,yellow],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, size2), apply(same_shape,x.o)), rectangle), green), not[and[size3,size3]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:green;4:not[%s];4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[circle,implies[size2,circle]]), triangle), and[and[size2,yellow],and[and[rectangle,size3],and[or[size2,and[and[circle,triangle],and[rectangle,and[green,implies[rectangle,triangle]]]]],size1]]]), and[triangle,and[nand[blue,green],circle]]), yellow), apply(same_shape,iota(x.s))), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:implies[%s,%s];4:size2;4:circle;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:implies[%s,%s];4:rectangle;4:triangle;4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:nand[%s,%s];4:blue;4:green;4:circle;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.forall(or[size3,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), and[implies[apply(size-lt,x.o),nand[apply(same_size,x.o),size3]],not[not[blue]]]), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:not[%s];4:not[%s];4:blue;4:blue
'λx.contains(x.o, filter(x.s, and[circle,nor[size3,size3]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nor[%s,%s];4:size3;4:size3
'λx.apply(or[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[blue,green],iota(filter(filter(x.s, not[not[nor[apply(size-lt,x.o),blue]]]), green)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:green
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), size2), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(x.s, nor[triangle,green]), green), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:green;4:green;4:blue
'λx.apply(or[circle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, blue), not[size2]), size2), not[size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size2;4:size2;4:not[%s];4:size1
'λx.forall(not[size2],filter(filter(x.s, green), size1))'	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(size1,iota(filter(filter(x.s, size2), and[circle,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:size3
'λx.apply(size1,iota(filter(filter(x.s, size3), and[circle,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:circle;4:size3
'λx.apply(and[apply(same_shape,iota(filter(x.s, size3))),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;1:%s.o;2:x
'λx.exists(not[not[and[rectangle,size3]]], x.s)'	0:exists(%s, %s);4:not[%s];4:not[%s];4:and[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(or[nand[yellow,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:yellow;4:circle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, and[blue,rectangle]), apply(same_color,x.o)), and[size3,and[and[size1,and[size3,yellow]],size1]]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:yellow;4:size1;4:triangle;3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(x.s)),apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_size,iota(x.s))), and[and[and[green,green],and[and[and[blue,not[yellow]],green],blue]],or[triangle,or[triangle,green]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:yellow;4:green;4:blue;4:or[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:green
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), rectangle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:triangle
'λx.exists(and[and[size3,circle],circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:circle;3:%s.s;2:x
'λx.exists(triangle, filter(x.s, not[blue]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, green), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(x.s, size3), blue), rectangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:rectangle
'λx.apply(or[and[yellow,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), yellow), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:size3
'λx.apply(not[and[size2,or[implies[blue,and[size3,green]],size2]]],iota(filter(x.s, not[apply(same_size,iota(filter(x.s, blue)))])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:size3;4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, circle), green), apply(same_color,iota(filter(filter(filter(filter(x.s, size1), blue), size1), and[rectangle,blue])))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:size1;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(or[size2,circle],iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(apply(same_shape,iota(filter(x.s, yellow))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[circle,and[rectangle,implies[or[green,not[triangle]],circle]]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:triangle;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[nand[yellow,apply(same_color,x.o)],size2],iota(filter(filter(filter(x.s, yellow), green), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:circle
'λx.forall(nor[and[size3,size1],blue],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:size1;4:blue;3:%s.s;2:x
'λx.apply(or[size1,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[size1,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[size2,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[size2,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[size2,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, not[not[size2]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size2
'λx.empty(filter(filter(filter(x.s, circle), triangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:rectangle
'λx.apply(and[size2,and[apply(same_size,iota(x.s)),rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(iff[or[size1,size1],size1], filter(x.s, and[size2,size3]))'	0:exists(%s, %s);4:iff[%s,%s];4:or[%s,%s];4:size1;4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3
'λx.apply(apply(same_color,iota(filter(x.s, implies[yellow,rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, triangle), triangle), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[green,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(or[not[triangle],triangle],iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(apply(same_shape,iota(filter(x.s, apply(same_size,iota(filter(x.s, not[nor[triangle,blue]])))))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,and[rectangle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), blue), and[size3,apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, circle), apply(same_color,iota(x.s))), implies[circle,circle]), size2), not[triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:circle;4:size2;4:not[%s];4:triangle
'λx.forall(size1,filter(filter(x.s, yellow), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.forall(size2,filter(filter(x.s, blue), yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.forall(size3,filter(filter(x.s, blue), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.forall(yellow,filter(x.s, and[triangle,and[or[size2,and[size1,not[apply(size-geq,iota(filter(filter(filter(filter(x.s, circle), rectangle), apply(same_size,iota(filter(x.s, blue)))), and[and[iff[blue,size3],rectangle],circle])))]]],circle]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:size3;4:rectangle;4:circle;4:circle
'λx.forall(apply(same_color,x.o),filter(x.s, rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(and[apply(same_size,x.o),blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(x.s, implies[blue,size1])), filter(filter(filter(x.s, size2), and[and[size1,apply(same_size,iota(filter(x.s, yellow)))],size2]), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:circle
'λx.contains(iota(filter(filter(filter(x.s, circle), yellow), or[rectangle,size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:or[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(filter(filter(filter(x.s, blue), blue), iff[not[size2],and[rectangle,size2]]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:iff[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:rectangle;4:size2;4:size2
'λx.apply(apply(size-gt,x.o),iota(filter(filter(filter(x.s, and[blue,triangle]), size1), nor[iff[triangle,circle],triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:size1;4:nor[%s,%s];4:iff[%s,%s];4:triangle;4:circle;4:triangle
'λx.forall(not[apply(same_size,iota(filter(x.s, yellow)))],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, size1), circle), triangle), and[and[and[apply(same_size,x.o),rectangle],triangle],size1]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:triangle;4:size1;4:circle
'λx.apply(and[green,and[size3,nor[yellow,implies[size2,triangle]]]],iota(filter(filter(filter(x.s, rectangle), blue), apply(size-gt,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:nor[%s,%s];4:yellow;4:implies[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(and[and[triangle,iff[blue,rectangle]],apply(same_shape,x.o)], filter(filter(x.s, green), or[size2,apply(size-leq,iota(x.s))]))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(green,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(nand[size1,size2],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(size-lt,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(nand[and[size1,size3],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:size3;4:circle;1:%s.o;2:x
'λx.apply(implies[nand[size1,or[size1,size2]],not[rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:size1;4:or[%s,%s];4:size1;4:size2;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, circle), and[green,green]), and[and[circle,yellow],and[circle,size2]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:circle;4:size2
'λx.contains(iota(x.s), filter(x.s, iff[rectangle,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:rectangle
'λx.exists(rectangle, filter(filter(x.s, and[size3,triangle]), size2))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle;4:size2
'λx.empty(filter(filter(x.s, implies[circle,implies[green,apply(same_shape,x.o)]]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.forall(size3,filter(x.s, yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size1,filter(x.s, yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, and[circle,apply(same_color,x.o)]), iff[size3,apply(same_color,x.o)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, blue), or[green,and[size1,rectangle]]), blue), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:green;4:and[%s,%s];4:size1;4:rectangle;4:blue;4:size3
'λx.exists(yellow, filter(filter(filter(filter(filter(x.s, triangle), green), green), size3), rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:green;4:size3;4:rectangle
'λx.exists(yellow, filter(filter(x.s, apply(same_shape,x.o)), or[not[nor[rectangle,blue]],rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:rectangle;4:blue;4:rectangle
'λx.apply(and[rectangle,and[green,rectangle]],iota(filter(x.s, implies[yellow,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:size2
'λx.apply(apply(size-gt,iota(x.s)),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(blue,x.o)'	0:apply(%s,%s);4:blue;1:%s.o;2:x
'λx.apply(nand[blue,size3],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(not[nand[rectangle,or[blue,nand[size3,circle]]]],filter(filter(x.s, rectangle), yellow))'	0:forall(%s,%s);4:not[%s];4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:nand[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, size2), blue), yellow), iff[blue,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:yellow;4:iff[%s,%s];4:blue;4:size3
'λx.apply(apply(size-gt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[size3,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size3,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, nor[green,size3]), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:size3;4:size1
'λx.apply(size3,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(not[apply(same_shape,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,rectangle],iota(filter(x.s, not[implies[size3,circle]])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:size3;4:circle
'λx.apply(not[triangle],iota(filter(filter(x.s, not[apply(same_shape,iota(x.s))]), triangle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.forall(and[circle,size3],filter(filter(filter(filter(filter(x.s, yellow), size3), size2), apply(size-geq,iota(x.s))), not[size2]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(apply(same_color,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, not[apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, or[yellow,yellow]), size3), and[size1,apply(same_color,iota(x.s))]), size2), and[size3,circle])))]), circle), implies[yellow,or[or[size1,green],triangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:yellow;4:size3;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size3;4:circle;4:circle;4:implies[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size1;4:green;4:triangle
'λx.empty(filter(filter(filter(x.s, size3), and[green,and[yellow,blue]]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:blue;4:yellow
'λx.contains(iota(filter(filter(x.s, triangle), size1)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[circle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[circle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[apply(size-leq,x.o)]), not[not[blue]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:not[%s];4:blue
'λx.forall(yellow,filter(filter(filter(filter(x.s, green), blue), size3), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:size3;4:blue
'λx.empty(filter(x.s, iff[rectangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:blue
'λx.apply(or[green,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(nand[or[size3,triangle],apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(x.s, and[blue,and[apply(same_color,x.o),size3]])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(and[and[circle,triangle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nand[and[yellow,green],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:yellow;4:green;4:yellow;1:%s.o;2:x
'λx.forall(size1,filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size3))),iota(filter(filter(filter(filter(x.s, circle), green), or[size3,blue]), and[size2,or[implies[triangle,nor[not[and[and[blue,or[rectangle,size1]],size1]],blue]],circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:or[%s,%s];4:size3;4:blue;4:and[%s,%s];4:size2;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size1;4:size1;4:blue;4:circle
'λx.apply(not[and[apply(same_size,x.o),and[size1,and[size2,size3]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[and[circle,triangle],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,not[size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, or[apply(same_color,iota(x.s)),size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(filter(filter(x.s, size3), nor[blue,size1]), triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:blue;4:size1;4:triangle
'λx.apply(not[and[size3,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[circle,blue]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue;4:blue
'λx.apply(or[blue,and[blue,rectangle]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, or[and[blue,rectangle],rectangle]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:rectangle;4:size3
'λx.apply(size1,iota(filter(filter(x.s, or[size2,and[and[blue,yellow],circle]]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), or[blue,green])), filter(filter(x.s, circle), or[size1,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(nand[yellow,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[size1,and[yellow,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, filter(x.s, or[size2,circle]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle
'λx.forall(nor[yellow,green],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(nand[yellow,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(nor[blue,size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[and[nand[size3,size1],circle]],and[size2,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:size1;4:circle;4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(or[or[or[yellow,circle],size1],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[rectangle,and[and[size3,circle],blue]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:blue;3:%s.s;2:x
'λx.exists(blue, filter(x.s, implies[and[triangle,triangle],apply(same_shape,iota(x.s))]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, triangle), and[rectangle,or[size2,and[yellow,green]]]), green), yellow), iff[size2,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:green;4:green;4:yellow;4:iff[%s,%s];4:size2;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(or[yellow,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, not[blue]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.contains(x.o, filter(filter(x.s, green), not[green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:green
'λx.apply(not[and[yellow,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, size1), green), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size3
'λx.exists(not[and[and[yellow,circle],blue]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:blue;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,iota(filter(x.s, yellow)))), or[blue,size1]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:size1
'λx.forall(or[nand[blue,blue],blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:blue;3:%s.s;2:x
'λx.empty(filter(x.s, and[rectangle,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow
'λx.exists(triangle, filter(x.s, implies[green,or[yellow,yellow]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:or[%s,%s];4:yellow;4:yellow
'λx.exists(and[size1,and[implies[rectangle,blue],size3]], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:blue;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(yellow, filter(filter(filter(x.s, blue), or[yellow,size3]), and[or[or[and[circle,blue],yellow],apply(same_color,iota(filter(filter(x.s, implies[or[blue,and[and[apply(size-geq,iota(x.s)),triangle],size1]],circle]), blue)))],circle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1;4:circle;4:blue;4:circle
'λx.contains(iota(filter(x.s, circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, size3), size1), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:yellow
'λx.apply(and[iff[yellow,rectangle],size2],iota(filter(filter(filter(x.s, not[and[iff[size2,size3],green]]), and[circle,blue]), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:size3;4:green;4:and[%s,%s];4:circle;4:blue;4:circle
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size1), not[apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[size1,size1])), filter(filter(x.s, yellow), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(or[and[size1,or[circle,not[circle]]],triangle],iota(filter(x.s, not[or[blue,or[apply(same_shape,iota(x.s)),circle]]])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:not[%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(not[size3],iota(filter(x.s, and[not[size2],rectangle])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:rectangle
'λx.apply(and[triangle,triangle],iota(filter(filter(x.s, or[green,blue]), implies[blue,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue;4:implies[%s,%s];4:blue;4:triangle
'λx.exists(or[and[triangle,circle],and[and[blue,apply(same_color,x.o)],apply(same_size,x.o)]], filter(x.s, size3))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(x.s, green), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.empty(filter(filter(x.s, green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(rectangle,iota(filter(x.s, and[nor[size3,yellow],not[blue]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:size3;4:yellow;4:not[%s];4:blue
'λx.apply(apply(same_color,iota(filter(filter(x.s, yellow), size3))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, not[size2]), size1), green), apply(same_size,x.o)), or[size2,apply(size-lt,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size1;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[green,implies[rectangle,green]],iota(filter(filter(filter(x.s, rectangle), circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:implies[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(not[apply(size-geq,x.o)], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[triangle,size3],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[size3,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[rectangle,size2],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size3;1:%s.o;2:x
'λx.apply(implies[and[not[rectangle],or[green,rectangle]],size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:green;4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[triangle,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, size2), size2), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:green
'λx.empty(filter(filter(x.s, blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(not[rectangle],iota(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), apply(same_shape,iota(filter(filter(filter(x.s, and[size1,or[apply(same_shape,x.o),apply(size-geq,iota(x.s))]]), and[triangle,not[not[triangle]]]), blue)))), iff[triangle,not[apply(same_shape,x.o)]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:triangle;4:blue;4:iff[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[and[circle,yellow],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[green,yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[or[blue,or[circle,circle]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:circle;4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[circle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), and[blue,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:circle
'λx.exists(circle, filter(filter(filter(x.s, size3), blue), and[size2,size3]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:and[%s,%s];4:size2;4:size3
'λx.apply(or[and[triangle,size3],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[yellow,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size2
'λx.apply(or[yellow,circle],iota(filter(filter(x.s, nor[triangle,size3]), apply(same_size,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[blue,or[not[apply(same_color,iota(x.s))],size2]])), filter(x.s, and[circle,size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1
'λx.forall(size2,filter(x.s, circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size3,filter(x.s, circle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size3,and[and[yellow,not[and[size1,circle]]],apply(size-geq,iota(filter(x.s, green)))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size1;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(and[blue,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.apply(or[apply(same_color,x.o),apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(and[size1,circle], filter(filter(x.s, not[nor[circle,not[and[nand[size1,yellow],not[not[green]]]]]]), and[and[apply(same_shape,x.o),size1],and[rectangle,green]]))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:yellow;4:not[%s];4:not[%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:and[%s,%s];4:rectangle;4:green
'λx.apply(not[apply(same_color,iota(filter(filter(x.s, triangle), rectangle)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size1), and[and[yellow,triangle],rectangle]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:rectangle;4:triangle
'λx.exists(size3, filter(filter(x.s, size2), size1))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.exists(size1, filter(filter(x.s, size1), size2))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(and[and[triangle,blue],or[blue,or[yellow,blue]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:or[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, apply(same_color,x.o)))),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(yellow, filter(filter(x.s, yellow), yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.contains(iota(filter(x.s, size2)), filter(filter(x.s, rectangle), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(or[nand[circle,apply(same_size,x.o)],green],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(or[or[blue,yellow],implies[triangle,yellow]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:implies[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[apply(same_size,iota(filter(x.s, size3))),green],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,or[green,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,and[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, implies[rectangle,yellow]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:yellow;4:green
'λx.contains(iota(filter(x.s, size3)), filter(filter(filter(x.s, blue), rectangle), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(or[circle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, size3), or[size3,size3]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size3;4:size3
'λx.apply(and[circle,and[circle,and[blue,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(nor[not[nor[not[blue],green]],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:nor[%s,%s];4:not[%s];4:blue;4:green;4:green;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size2,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, apply(same_color,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[not[and[and[rectangle,and[triangle,green]],or[blue,size2]]],size1],iota(filter(x.s, and[rectangle,rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:green;4:or[%s,%s];4:blue;4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle
'λx.apply(or[rectangle,apply(same_shape,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(filter(x.s, iff[yellow,apply(size-gt,x.o)])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(iff[triangle,and[size3,triangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[nand[triangle,apply(same_size,iota(x.s))],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[size3,and[size3,size3]]), and[blue,rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:size3;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, not[and[size3,triangle]]), circle), blue), apply(size-gt,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:circle;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(filter(x.s, not[green]), or[rectangle,rectangle]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[circle],iota(filter(filter(filter(x.s, or[triangle,green]), and[green,or[blue,and[circle,iff[not[circle],and[size2,size3]]]]]), size3)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green;4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:iff[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:size2;4:size3;4:size3
'λx.contains(iota(filter(filter(filter(filter(x.s, or[not[yellow],not[or[rectangle,triangle]]]), green), size2), yellow)), filter(filter(filter(filter(x.s, yellow), size3), and[size1,nor[rectangle,yellow]]), and[not[triangle],apply(same_shape,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:or[%s,%s];4:rectangle;4:triangle;4:green;4:size2;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:and[%s,%s];4:size1;4:nor[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,and[yellow,not[green]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size2,size2],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(and[circle,or[yellow,triangle]],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[circle,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[not[size1],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(implies[or[circle,not[green]],size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, and[size1,green]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:rectangle
'λx.contains(x.o, filter(x.s, triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size2,filter(filter(filter(x.s, size1), size1), implies[and[green,size2],size2]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:implies[%s,%s];4:and[%s,%s];4:green;4:size2;4:size2
'λx.apply(not[and[green,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(implies[implies[size3,or[green,apply(size-leq,iota(filter(x.s, size1)))]],yellow],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:size3;4:or[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[yellow,rectangle],and[size3,and[green,or[size2,rectangle]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), and[not[size2],and[size2,and[green,nor[not[and[blue,or[triangle,green]]],size2]]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:green;4:size2
'λx.apply(size1,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(green,iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(green,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(iff[blue,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, green), green), apply(same_size,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[size1,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size1
'λx.apply(nand[green,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(nor[rectangle,or[and[size3,size3],blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[size3,or[yellow,or[or[size2,not[size2]],and[size3,yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:size2;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(green,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(and[not[green],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size3,green], filter(x.s, and[or[size1,nand[and[green,and[apply(size-geq,iota(x.s)),not[circle]]],rectangle]],triangle]))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:rectangle;4:triangle
'λx.exists(and[and[and[and[and[iff[size3,blue],and[triangle,size2]],and[or[or[not[yellow],triangle],green],size1]],and[blue,green]],rectangle],apply(same_color,iota(x.s))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size3;4:blue;4:and[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:triangle;4:green;4:size1;4:and[%s,%s];4:blue;4:green;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[not[or[green,and[and[and[and[yellow,triangle],size2],apply(same_shape,x.o)],size3]]],not[circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, yellow), or[blue,and[size3,and[not[and[apply(size-leq,x.o),iff[triangle,size2]]],yellow]]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:and[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:iff[%s,%s];4:triangle;4:size2;4:yellow
'λx.empty(filter(filter(x.s, rectangle), iff[apply(same_size,x.o),circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(filter(filter(x.s, blue), not[size1]), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1;4:rectangle
'λx.apply(and[apply(same_shape,iota(filter(x.s, size3))),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(x.s, size2), rectangle), size1), not[and[green,size1]]), size1), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size1;4:not[%s];4:and[%s,%s];4:green;4:size1;4:size1;4:green
'λx.apply(nand[circle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(size3,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(size1,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(and[and[circle,apply(size-lt,x.o)],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(size3,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(size3,iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(size1,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(size3,iota(filter(filter(x.s, size3), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(size1,iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(size2,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(size3,iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(size3,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(size1,iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(nand[implies[rectangle,yellow],or[implies[blue,yellow],and[size3,size2]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:implies[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[iff[and[size2,or[and[circle,not[size3]],nor[apply(same_shape,iota(filter(x.s, or[apply(same_shape,x.o),green]))),rectangle]]],size2],size2]), or[circle,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size3;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:rectangle;4:size2;4:size2;4:or[%s,%s];4:circle;4:size2
'λx.empty(filter(x.s, and[size3,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.apply(and[green,size3],iota(filter(filter(x.s, rectangle), or[circle,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:circle;4:yellow
'λx.contains(iota(filter(x.s, size2)), filter(filter(x.s, rectangle), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.forall(or[blue,nor[blue,size1]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(or[and[blue,apply(same_shape,iota(filter(x.s, green)))],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(green,iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.exists(or[size2,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nand[yellow,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:blue
'λx.apply(circle,iota(filter(x.s, or[green,yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow
'λx.exists(and[and[circle,size2],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:triangle;3:%s.s;2:x
'λx.empty(filter(x.s, not[and[yellow,blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:blue
'λx.empty(filter(filter(filter(x.s, size2), yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:size1
'λx.apply(triangle,iota(filter(x.s, and[blue,not[size1]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:size1
'λx.apply(and[yellow,rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(implies[rectangle,iff[yellow,size2]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:rectangle;4:iff[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(and[and[apply(same_shape,x.o),blue],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[rectangle,iff[and[or[rectangle,or[apply(same_color,iota(x.s)),yellow]],size3],size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:size3;4:size3;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(nor[and[or[apply(same_color,iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[size1,and[yellow,size3]]), size1), and[or[and[yellow,and[size1,yellow]],blue],not[nand[or[size3,and[size2,nor[apply(same_shape,x.o),circle]]],circle]]]), green), triangle), or[size1,circle]), size1))),and[yellow,and[size3,yellow]]],blue],or[circle,circle]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size3;4:size1;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:yellow;4:blue;4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;4:green;4:triangle;4:or[%s,%s];4:size1;4:circle;4:size1;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:yellow;4:blue;4:or[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.exists(and[apply(size-leq,x.o),triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(and[apply(size-lt,x.o),blue],iota(filter(filter(filter(x.s, triangle), size1), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size3
'λx.apply(nand[blue,size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(implies[rectangle,iff[size2,iff[rectangle,rectangle]]], filter(x.s, green))'	0:exists(%s, %s);4:implies[%s,%s];4:rectangle;4:iff[%s,%s];4:size2;4:iff[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, nand[blue,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:size2
'λx.exists(or[or[not[yellow],and[triangle,not[not[blue]]]],size2], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(and[nor[nor[green,circle],rectangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:nor[%s,%s];4:green;4:circle;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[implies[nor[blue,implies[not[blue],size3]],apply(size-lt,iota(filter(x.s, size2)))],or[triangle,size1]],iota(filter(filter(filter(x.s, not[or[blue,or[size3,circle]]]), and[size1,or[circle,not[circle]]]), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:blue;4:implies[%s,%s];4:not[%s];4:blue;4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:circle;4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:not[%s];4:circle;4:triangle
'λx.forall(not[green],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(yellow,filter(filter(x.s, blue), apply(size-geq,iota(filter(filter(filter(x.s, and[yellow,and[size1,green]]), yellow), size1)))))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:green;4:yellow;4:size1
'λx.apply(apply(same_color,iota(filter(x.s, implies[or[size2,circle],not[iff[yellow,or[or[size1,size2],blue]]]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size2;4:circle;4:not[%s];4:iff[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size1;4:size2;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, not[yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(x.s, circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(triangle,filter(filter(filter(x.s, yellow), size2), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:rectangle
'λx.apply(and[blue,not[blue]],iota(filter(x.s, implies[triangle,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:yellow
'λx.apply(or[apply(same_color,iota(filter(filter(filter(x.s, triangle), green), nand[blue,not[rectangle]]))),and[and[and[and[and[size3,rectangle],nand[apply(same_size,x.o),yellow]],size2],size3],size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:nand[%s,%s];4:blue;4:not[%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:size2;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[blue,not[yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[nor[rectangle,apply(size-lt,iota(x.s))],or[nor[and[blue,rectangle],blue],not[not[not[triangle]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:blue;4:not[%s];4:not[%s];4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[circle,green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, rectangle), rectangle), circle), size1), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:circle;4:size1;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, size1), apply(same_shape,iota(filter(x.s, and[yellow,and[triangle,and[and[size3,green],rectangle]]]))))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:rectangle
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, and[not[triangle],rectangle]), and[green,rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:triangle;4:rectangle;4:and[%s,%s];4:green;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, or[apply(size-lt,x.o),yellow]), blue)))), yellow), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:blue;4:yellow;4:size2
'λx.apply(and[green,or[blue,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, rectangle), size1), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:circle
'λx.exists(circle, filter(filter(filter(x.s, blue), size2), size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:size1
'λx.contains(iota(filter(filter(filter(x.s, blue), size3), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:blue;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(or[yellow,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, and[circle,or[apply(same_color,iota(x.s)),size1]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(nand[or[or[nor[green,circle],circle],not[rectangle]],apply(same_shape,iota(filter(x.s, not[blue])))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:green;4:circle;4:circle;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[or[size1,not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:not[%s];4:size1;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, rectangle), green), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:green
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, green), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.contains(iota(filter(filter(x.s, or[and[size2,size1],or[triangle,apply(same_size,x.o)]]), apply(same_size,iota(x.s)))), filter(filter(x.s, size2), apply(same_size,iota(x.s))))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(filter(x.s, size1), apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[implies[green,rectangle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:green;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,and[green,nor[rectangle,or[size2,apply(same_color,iota(filter(filter(x.s, size2), size3)))]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(filter(filter(x.s, size3), rectangle), circle), rectangle), size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:circle;4:rectangle;4:size1
'λx.empty(filter(x.s, apply(size-gt,iota(filter(filter(filter(x.s, size3), size1), circle)))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:circle
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[not[and[and[yellow,rectangle],yellow]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.exists(or[not[apply(same_size,iota(x.s))],rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(not[nor[or[nand[and[green,and[not[rectangle],yellow]],blue],size1],green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:rectangle;4:yellow;4:blue;4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(blue,iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.empty(filter(x.s, and[triangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1
'λx.forall(apply(same_size,x.o),filter(filter(x.s, and[apply(same_shape,iota(x.s)),size1]), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(nand[circle,nor[green,nor[and[iff[not[not[not[size1]]],and[and[triangle,not[implies[yellow,yellow]]],circle]],and[triangle,and[size3,rectangle]]],triangle]]],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:nor[%s,%s];4:green;4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:implies[%s,%s];4:yellow;4:yellow;4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, nor[iff[triangle,size2],or[and[green,size1],size2]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:iff[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:size2
'λx.apply(or[and[and[triangle,green],apply(same_size,x.o)],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.forall(or[and[size3,triangle],rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(or[nor[yellow,rectangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:yellow;4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(filter(x.s, apply(size-geq,iota(x.s))), rectangle), circle), nand[rectangle,and[rectangle,circle]]), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle;4:circle;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:circle;4:circle
'λx.apply(apply(same_shape,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, rectangle), blue), blue), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:blue;4:size3
'λx.apply(size3,iota(filter(filter(x.s, triangle), not[and[not[circle],triangle]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:triangle
'λx.apply(apply(same_size,iota(filter(filter(x.s, and[rectangle,green]), green))),iota(filter(filter(x.s, size2), not[size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size3
'λx.apply(and[size1,and[rectangle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,apply(same_shape,x.o)],iota(filter(x.s, and[not[size3],or[size1,size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:size1;4:size3
'λx.contains(iota(filter(filter(filter(filter(x.s, apply(same_color,iota(x.s))), blue), and[circle,or[size3,and[and[yellow,not[and[size1,circle]]],apply(size-geq,iota(x.s))]]]), and[and[implies[rectangle,and[green,circle]],and[size3,implies[not[size2],size3]]],green])), filter(x.s, and[not[and[circle,rectangle]],blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size1;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:circle;4:and[%s,%s];4:size3;4:implies[%s,%s];4:not[%s];4:size2;4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:rectangle;4:blue
'λx.apply(circle,iota(filter(x.s, nand[triangle,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:size1
'λx.apply(and[implies[not[or[rectangle,and[not[size3],and[rectangle,size2]]]],nor[and[size2,yellow],or[circle,size1]]],nor[green,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:rectangle;4:size2;4:nor[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:circle;4:size1;4:nor[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(nand[blue,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.exists(apply(size-leq,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(triangle,filter(x.s, and[size2,size3]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3
'λx.apply(blue,iota(filter(x.s, and[blue,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue
'λx.exists(green, filter(filter(x.s, green), size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(not[and[or[rectangle,size1],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:blue;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, and[triangle,triangle]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle
'λx.contains(iota(filter(filter(x.s, yellow), or[size2,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, green), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;3:%s.s;2:x
'λx.apply(or[and[and[rectangle,size1],apply(same_shape,x.o)],rectangle],iota(filter(filter(x.s, size2), and[yellow,not[size3]])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:yellow;4:not[%s];4:size3
'λx.apply(apply(same_size,iota(filter(x.s, yellow))),iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.exists(blue, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.forall(not[yellow],x.s)'	0:forall(%s,%s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(nand[blue,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[size1,iff[apply(same_color,iota(filter(x.s, triangle))),size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[and[and[triangle,rectangle],blue],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:blue;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, nand[size3,or[size2,size2]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:or[%s,%s];4:size2;4:size2
'λx.apply(or[apply(same_size,x.o),iff[yellow,apply(same_shape,iota(x.s))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, blue), green), size2), apply(same_shape,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[iff[green,green],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:green;4:green;1:%s.o;2:x
'λx.apply(nand[yellow,not[or[size1,size1]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, implies[size3,apply(same_color,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[and[green,size1],size1],iota(filter(filter(filter(filter(x.s, and[blue,circle]), apply(same_size,x.o)), size3), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:triangle
'λx.exists(triangle, filter(x.s, circle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(rectangle, filter(x.s, blue))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(green, filter(filter(filter(x.s, green), yellow), and[triangle,apply(same_color,iota(filter(x.s, circle)))]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(or[green,green], filter(x.s, and[yellow,circle]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.exists(apply(same_size,x.o), filter(x.s, circle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_size,iota(filter(filter(x.s, size1), size1))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, nor[not[rectangle],size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:rectangle;4:size3
'λx.apply(and[apply(same_shape,x.o),or[circle,and[size3,blue]]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, rectangle), green), not[size3]), not[triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:not[%s];4:size3;4:not[%s];4:triangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, nor[triangle,circle]), yellow), size2), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:circle;4:yellow;4:size2;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, not[and[size2,and[size3,yellow]]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[apply(size-geq,x.o)]), size3)), filter(filter(filter(x.s, yellow), size2), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, yellow), or[green,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:green;4:green
'λx.apply(not[size2],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, or[size2,rectangle]), size2), apply(same_color,iota(x.s))), iff[apply(same_color,x.o),apply(same_size,iota(filter(x.s, size1)))]), size2), blue), iff[iff[green,size3],nand[size1,green]]), and[size3,green]), and[apply(same_size,iota(filter(filter(x.s, blue), circle))),or[not[blue],blue]])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:blue;4:iff[%s,%s];4:iff[%s,%s];4:green;4:size3;4:nand[%s,%s];4:size1;4:green;4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:or[%s,%s];4:not[%s];4:blue;4:blue
'λx.apply(implies[size2,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(yellow,iota(filter(x.s, nor[apply(same_shape,x.o),yellow])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(or[triangle,or[circle,implies[size3,circle]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:implies[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[not[and[triangle,size1]],implies[green,rectangle]],and[size3,and[and[not[size2],size2],apply(size-gt,iota(x.s))]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size1;4:implies[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(and[not[yellow],size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:yellow;4:size3;3:%s.s;2:x
'λx.apply(iff[and[yellow,and[yellow,yellow]],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[triangle,not[size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nor[green,or[rectangle,blue]],not[size2]],iota(filter(filter(filter(x.s, blue), yellow), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:blue;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, apply(size-gt,x.o)), and[and[yellow,size1],yellow]), size2), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:yellow;4:size2;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, circle), triangle), and[yellow,or[blue,or[nand[and[apply(same_size,x.o),circle],size3],size3]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size3;4:size3
'λx.apply(apply(size-geq,x.o),iota(filter(filter(filter(filter(x.s, blue), not[not[green]]), apply(size-geq,x.o)), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:not[%s];4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green
'λx.apply(and[and[not[yellow],circle],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[not[or[size3,size2]],or[not[and[size1,size1]],yellow]],not[yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:size2;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:size1;4:yellow;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size1))),iota(filter(x.s, or[not[circle],or[and[implies[blue,circle],yellow],and[and[circle,size1],nand[and[apply(size-leq,x.o),apply(same_color,iota(filter(x.s, yellow)))],rectangle]]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, not[yellow]), green), apply(same_size,x.o)), size3), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size1
'λx.exists(circle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, implies[size2,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, not[and[circle,circle]]), triangle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:circle;4:triangle;4:blue
'λx.contains(iota(filter(x.s, or[and[blue,yellow],iff[circle,circle]])), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:iff[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(yellow, filter(filter(filter(x.s, triangle), green), blue))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:blue
'λx.exists(apply(size-gt,iota(filter(filter(filter(x.s, rectangle), not[blue]), and[size1,size3]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:blue;4:and[%s,%s];4:size1;4:size3;3:%s.s;2:x
'λx.apply(nor[green,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size3), yellow), green), not[rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:green;4:not[%s];4:rectangle
'λx.apply(or[size2,apply(same_size,iota(filter(x.s, or[not[circle],circle])))],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(yellow, filter(filter(x.s, blue), size1))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, blue), circle)))), not[size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:not[%s];4:size2
'λx.apply(apply(size-lt,iota(x.s)),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nand[size1,rectangle],iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.exists(and[size3,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[blue,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(and[yellow,apply(size-leq,x.o)],filter(x.s, size2))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[circle,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, or[yellow,triangle])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(nand[triangle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nand[triangle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[or[apply(size-lt,x.o),blue],and[blue,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[apply(size-leq,iota(filter(filter(x.s, size2), size1))),not[implies[rectangle,iff[green,and[rectangle,size3]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:not[%s];4:implies[%s,%s];4:rectangle;4:iff[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, circle), yellow), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, not[circle]), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.apply(or[nor[blue,and[circle,not[triangle]]],implies[yellow,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:circle;4:not[%s];4:triangle;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(and[green,yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[and[circle,size2],size1]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:size1
'λx.apply(nor[and[size2,nand[size2,nor[green,green]]],and[implies[blue,not[not[green]]],not[size3]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:nand[%s,%s];4:size2;4:nor[%s,%s];4:green;4:green;4:and[%s,%s];4:implies[%s,%s];4:blue;4:not[%s];4:not[%s];4:green;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[size2,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[or[green,and[or[and[and[green,yellow],not[green]],not[not[rectangle]]],and[or[implies[size1,apply(same_shape,x.o)],size3],and[apply(same_color,iota(filter(filter(filter(filter(x.s, yellow), apply(same_shape,iota(filter(x.s, and[green,blue])))), size2), apply(same_size,x.o)))),rectangle]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:not[%s];4:green;4:not[%s];4:not[%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, blue), green), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(x.s, rectangle), yellow), blue), yellow)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[triangle,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(or[not[and[or[green,apply(same_shape,iota(x.s))],nor[nand[size3,circle],size2]]],rectangle],iota(filter(filter(x.s, or[and[green,size1],size2]), green)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:nand[%s,%s];4:size3;4:circle;4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:size2;4:green
'λx.forall(or[and[and[triangle,rectangle],blue],green],filter(filter(filter(filter(filter(filter(filter(filter(x.s, not[circle]), and[triangle,apply(size-geq,iota(x.s))]), size1), and[apply(same_color,x.o),yellow]), triangle), size1), triangle), rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:triangle;4:size1;4:triangle;4:rectangle
'λx.apply(and[size3,size3],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size3, filter(x.s, or[apply(same_size,iota(filter(x.s, size3))),triangle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, or[size3,or[triangle,size1]]), or[and[and[size3,size3],size2],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:size2;4:blue
'λx.apply(iff[yellow,not[blue]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,apply(same_size,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[iff[or[and[rectangle,size3],and[nor[implies[circle,circle],nor[apply(size-leq,iota(filter(x.s, size3))),size3]],yellow]],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:circle;4:circle;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:yellow;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(size-gt,iota(x.s))), and[apply(same_size,iota(filter(x.s, size2))),not[yellow]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:yellow;3:%s.s;2:x
'λx.forall(or[size2,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.apply(and[rectangle,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, green), or[size1,size2]), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size1;4:size2;4:size1
'λx.apply(or[blue,size3],iota(filter(x.s, apply(size-lt,iota(filter(filter(x.s, and[yellow,blue]), not[apply(same_size,iota(x.s))]))))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[nor[triangle,or[size2,not[size2]]],blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:not[%s];4:size2;4:blue
'λx.forall(or[apply(same_shape,iota(filter(x.s, size2))),not[size3]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(yellow,filter(x.s, triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(iff[green,apply(same_color,iota(filter(filter(filter(x.s, circle), size1), circle)))],iota(filter(filter(filter(filter(filter(x.s, blue), triangle), apply(same_size,iota(filter(filter(x.s, not[circle]), size1)))), and[size3,apply(same_color,iota(x.s))]), rectangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size1;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[and[rectangle,size3],or[triangle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, yellow), not[circle]), not[size3]), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:circle;4:not[%s];4:size3;4:yellow
'λx.apply(not[and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(not[nand[size2,apply(same_color,iota(filter(x.s, and[green,not[size1]])))]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size3,rectangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[circle,not[and[not[and[nand[rectangle,not[size2]],size1]],apply(same_shape,iota(x.s))]]],iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:not[%s];4:size2;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.empty(filter(filter(filter(x.s, circle), blue), and[size2,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:and[%s,%s];4:size2;4:size3
'λx.apply(iff[apply(same_shape,iota(x.s)),not[triangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, iff[size3,and[and[triangle,size3],not[blue]]]), and[blue,circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:circle
'λx.forall(size3,filter(filter(filter(filter(x.s, nor[yellow,or[apply(same_color,x.o),yellow]]), apply(same_color,iota(filter(filter(x.s, size2), or[size1,green])))), triangle), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size1;4:green;4:triangle;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_shape,x.o)), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(and[not[circle],implies[not[size3],implies[nor[apply(same_shape,iota(x.s)),green],green]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:implies[%s,%s];4:not[%s];4:size3;4:implies[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[rectangle,apply(same_shape,x.o)],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.exists(not[rectangle], filter(x.s, size1))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(not[rectangle], filter(x.s, green))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, or[implies[triangle,apply(same_shape,x.o)],or[green,and[size1,circle]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:size1;4:circle
'λx.exists(nor[yellow,or[size2,apply(size-geq,iota(x.s))]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, triangle), or[and[or[and[apply(same_shape,x.o),circle],and[blue,apply(size-geq,iota(x.s))]],not[yellow]],size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2
'λx.forall(iff[or[triangle,size3],and[or[or[iff[blue,apply(same_shape,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, and[blue,size1]), size2), apply(same_size,x.o)), size3), yellow), size3), rectangle), not[blue])))],implies[and[and[size3,green],implies[circle,not[circle]]],yellow]],apply(same_shape,x.o)],size1]],filter(filter(filter(x.s, rectangle), yellow), rectangle))'	0:forall(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:yellow;4:size3;4:rectangle;4:not[%s];4:blue;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:implies[%s,%s];4:circle;4:not[%s];4:circle;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:rectangle
'λx.apply(and[or[size3,yellow],nand[not[blue],triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:nand[%s,%s];4:not[%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[apply(same_size,iota(x.s)),and[apply(same_size,x.o),blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(or[size1,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(or[rectangle,triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, size3), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size3), green), circle), implies[size1,size1]), or[not[not[and[not[green],not[yellow]]]],and[size1,not[rectangle]]]), circle), yellow), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:circle;4:implies[%s,%s];4:size1;4:size1;4:or[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:not[%s];4:yellow;4:and[%s,%s];4:size1;4:not[%s];4:rectangle;4:circle;4:yellow;4:circle
'λx.apply(or[yellow,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[yellow,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[yellow,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(not[not[apply(same_color,x.o)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[apply(size-gt,iota(x.s)),size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[and[green,and[blue,size3]],and[size3,and[blue,and[green,circle]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:size3;4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[green,or[size1,or[circle,size1]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:or[%s,%s];4:size1;4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.exists(green, filter(x.s, and[apply(same_shape,x.o),yellow]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(implies[size1,green],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, rectangle), or[not[rectangle],rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:not[%s];4:rectangle;4:rectangle
'λx.apply(or[or[yellow,and[not[rectangle],circle]],iff[implies[apply(same_color,x.o),and[rectangle,and[green,or[green,not[size3]]]]],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:rectangle;4:circle;4:iff[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:not[%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(and[yellow,or[circle,size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[apply(same_shape,x.o),circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, and[and[nand[not[size3],size1],or[size2,yellow]],size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:size3;4:size1;4:or[%s,%s];4:size2;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, size2), rectangle), size2), and[and[green,and[size1,size2]],apply(size-leq,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(filter(x.s, size1))),or[blue,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[not[and[and[blue,triangle],nand[rectangle,or[not[implies[yellow,nor[nand[nor[not[not[and[size3,yellow]]],triangle],and[implies[size1,yellow],apply(same_size,iota(filter(x.s, yellow)))]],size1]]],or[apply(same_shape,iota(x.s)),not[size3]]]]]],rectangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:yellow;4:nor[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:yellow;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(implies[and[circle,triangle],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, apply(same_size,iota(x.s))), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(filter(x.s, yellow), blue), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:rectangle
'λx.apply(or[nand[apply(same_size,x.o),apply(size-gt,iota(filter(x.s, rectangle)))],and[or[size3,circle],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, and[nand[yellow,rectangle],and[triangle,size1]]), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:triangle;4:size1;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(same_size,iota(filter(x.s, blue))))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[green,not[size2]],iota(filter(x.s, and[nor[implies[size3,blue],size2],triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:size2;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(filter(filter(x.s, blue), and[size3,blue]), or[green,triangle]), blue), triangle), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size3;4:blue;4:or[%s,%s];4:green;4:triangle;4:blue;4:triangle;4:yellow
'λx.apply(nand[size1,size2],iota(filter(filter(filter(filter(filter(x.s, size2), size2), yellow), yellow), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:yellow;4:yellow;4:blue
'λx.exists(iff[green,apply(same_size,iota(filter(filter(x.s, and[blue,size2]), triangle)))], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:triangle;3:%s.s;2:x
'λx.apply(and[or[green,circle],rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(iff[and[and[green,and[and[circle,green],circle]],size1],circle],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:circle;4:size1;4:circle;3:%s.s;2:x
'λx.apply(nand[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[and[and[apply(same_color,iota(x.s)),triangle],size2],implies[blue,size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:size2;4:implies[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(or[circle,green],iota(filter(filter(x.s, apply(same_color,x.o)), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(or[not[and[triangle,green]],apply(same_size,iota(filter(filter(filter(x.s, rectangle), triangle), rectangle)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, nor[apply(same_shape,x.o),size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.exists(not[circle], filter(x.s, nand[and[not[size1],size1],and[triangle,blue]]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:size1;4:and[%s,%s];4:triangle;4:blue
'λx.apply(iff[size3,circle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_shape,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, size2), and[yellow,yellow])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(and[apply(same_shape,x.o),blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[blue,and[rectangle,blue]],iff[size3,nand[or[apply(size-leq,iota(filter(x.s, or[circle,and[blue,yellow]]))),blue],blue]]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:blue;4:iff[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:yellow;4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size3,yellow],iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.forall(yellow,filter(filter(filter(x.s, size2), not[apply(same_color,iota(x.s))]), green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(and[yellow,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[and[and[nor[apply(same_size,iota(x.s)),rectangle],size1],size1],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size1;4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[or[yellow,or[not[implies[blue,triangle]],green]],size1]],iota(filter(x.s, and[blue,and[and[iff[yellow,size2],yellow],not[rectangle]]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:blue;4:triangle;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:size2;4:yellow;4:not[%s];4:rectangle
'λx.apply(and[triangle,green],iota(filter(filter(filter(x.s, size1), circle), and[blue,blue])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:and[%s,%s];4:blue;4:blue
'λx.apply(apply(size-leq,iota(filter(filter(filter(x.s, blue), and[triangle,size2]), size1))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), filter(x.s, apply(same_size,iota(x.s))))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[green,green],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,or[and[triangle,triangle],or[blue,rectangle]]],iota(filter(filter(filter(filter(filter(filter(x.s, or[or[circle,triangle],triangle]), rectangle), or[yellow,rectangle]), not[green]), yellow), not[and[rectangle,green]])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:triangle;4:rectangle;4:or[%s,%s];4:yellow;4:rectangle;4:not[%s];4:green;4:yellow;4:not[%s];4:and[%s,%s];4:rectangle;4:green
'λx.exists(apply(size-leq,iota(filter(filter(x.s, iff[apply(size-lt,iota(filter(x.s, rectangle))),or[iff[size3,nand[or[yellow,yellow],implies[triangle,size3]]],rectangle]]), green))), filter(filter(x.s, and[or[rectangle,yellow],and[size2,yellow]]), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:implies[%s,%s];4:triangle;4:size3;4:rectangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:size2;4:yellow;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, triangle), iff[not[size1],size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:iff[%s,%s];4:not[%s];4:size1;4:size3
'λx.empty(filter(x.s, blue))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-lt,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(not[circle], filter(x.s, and[implies[triangle,apply(same_shape,x.o)],triangle]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(not[size2],iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.forall(not[blue],filter(filter(x.s, circle), circle))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.contains(iota(filter(x.s, apply(same_color,iota(x.s)))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size3), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(and[apply(same_size,x.o),blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(size-gt,x.o),circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, not[apply(same_color,iota(x.s))]), nand[green,not[rectangle]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:not[%s];4:rectangle
'λx.forall(size2,filter(filter(filter(filter(filter(x.s, apply(size-geq,x.o)), size2), yellow), circle), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;4:yellow;4:circle;4:circle
'λx.contains(iota(filter(filter(x.s, yellow), apply(same_color,iota(x.s)))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(and[rectangle,and[blue,yellow]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.forall(green,filter(filter(filter(x.s, circle), size3), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size2
'λx.forall(green,filter(filter(filter(x.s, circle), size2), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size1
'λx.apply(or[green,not[implies[blue,and[and[rectangle,not[blue]],circle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, yellow), not[apply(same_size,iota(x.s))]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[blue,apply(same_shape,iota(x.s))],apply(same_color,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[iff[blue,apply(size-lt,iota(filter(filter(x.s, yellow), size1)))],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), nor[yellow,iff[blue,iff[or[blue,implies[not[and[blue,size2]],rectangle]],or[circle,or[yellow,triangle]]]]]), not[or[yellow,or[rectangle,green]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:yellow;4:iff[%s,%s];4:blue;4:iff[%s,%s];4:or[%s,%s];4:blue;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size2;4:rectangle;4:or[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:triangle;4:not[%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:green
'λx.apply(green,iota(filter(x.s, and[blue,size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(not[green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[nor[and[size1,and[and[nor[green,size2],green],implies[triangle,green]]],or[yellow,size3]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:size2;4:green;4:implies[%s,%s];4:triangle;4:green;4:or[%s,%s];4:yellow;4:size3;4:rectangle;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(filter(filter(x.s, triangle), and[size3,apply(same_size,x.o)]), and[and[rectangle,yellow],or[and[apply(same_color,x.o),not[and[apply(same_shape,x.o),triangle]]],iff[circle,size2]]]), or[circle,size3]), size3))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:iff[%s,%s];4:circle;4:size2;4:or[%s,%s];4:circle;4:size3;4:size3
'λx.apply(and[blue,circle],iota(filter(filter(filter(x.s, blue), not[and[size1,apply(same_size,iota(x.s))]]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, and[size3,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, blue), or[apply(same_color,iota(filter(x.s, circle))),triangle]), apply(same_shape,x.o)), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.contains(iota(x.s), filter(x.s, not[blue]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[and[and[blue,blue],circle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[or[blue,size1],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size1;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[not[apply(same_shape,x.o)],circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_shape,iota(filter(x.s, triangle))))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[size2,or[or[green,green],yellow]],iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:green;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(green,iota(filter(filter(x.s, size2), apply(size-leq,iota(x.s)))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.exists(or[not[and[blue,and[or[apply(same_size,iota(filter(filter(x.s, triangle), circle))),nand[not[and[not[size2],or[triangle,and[blue,apply(same_color,x.o)]]]],size1]],yellow]]],rectangle], filter(x.s, rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:yellow;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(apply(same_color,x.o), filter(x.s, triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[and[blue,circle],circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(and[yellow,circle],filter(x.s, iff[and[size2,not[size2]],and[not[apply(same_color,iota(x.s))],size1]]))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:size2;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(filter(x.s, and[triangle,blue]), and[rectangle,and[and[apply(size-leq,x.o),size1],and[apply(same_size,x.o),rectangle]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.forall(not[green],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[and[and[or[circle,size2],size1],size1],triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size2;4:size1;4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nor[rectangle,and[size3,size2]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[green,or[and[green,rectangle],iff[not[yellow],blue]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:iff[%s,%s];4:not[%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(filter(filter(filter(x.s, size3), yellow), yellow), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:yellow;4:size1
'λx.apply(or[not[yellow],and[not[apply(size-gt,iota(filter(filter(filter(filter(x.s, apply(size-gt,x.o)), green), and[and[yellow,size2],blue]), circle)))],circle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:blue;4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(implies[size2,not[circle]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:size2;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(and[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(not[and[circle,or[triangle,and[blue,size2]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(and[size1,not[and[blue,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size3,apply(same_size,x.o)],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(filter(filter(x.s, size2), circle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:green
'λx.apply(and[and[green,circle],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,nand[and[apply(same_shape,iota(filter(x.s, size2))),and[size2,and[circle,blue]]],and[blue,apply(same_shape,iota(filter(filter(x.s, rectangle), rectangle)))]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, apply(size-lt,iota(filter(filter(filter(x.s, triangle), not[not[not[rectangle]]]), and[not[rectangle],blue])))), and[triangle,yellow]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:not[%s];4:not[%s];4:rectangle;4:and[%s,%s];4:not[%s];4:rectangle;4:blue;4:and[%s,%s];4:triangle;4:yellow
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, size2), and[green,size1]), circle), yellow), blue), nand[blue,and[size3,size2]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:size1;4:circle;4:yellow;4:blue;4:nand[%s,%s];4:blue;4:and[%s,%s];4:size3;4:size2
'λx.empty(filter(filter(filter(filter(x.s, yellow), implies[green,circle]), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:green;4:circle;4:size1;4:rectangle
'λx.apply(not[and[or[circle,or[not[implies[blue,triangle]],green]],size1]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:blue;4:triangle;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, size2), implies[size2,not[rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:size2;4:not[%s];4:rectangle
'λx.apply(and[apply(size-leq,x.o),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, or[blue,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(not[and[and[not[rectangle],size3],not[triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[nor[size2,not[blue]]],iota(filter(filter(filter(filter(filter(x.s, and[size2,green]), triangle), and[size3,nor[nor[triangle,and[and[and[size2,triangle],yellow],or[yellow,green]]],circle]]), size2), size3)))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size2;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green;4:triangle;4:and[%s,%s];4:size3;4:nor[%s,%s];4:nor[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:yellow;4:or[%s,%s];4:yellow;4:green;4:circle;4:size2;4:size3
'λx.apply(iff[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[triangle,size3],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, not[rectangle]), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:green
'λx.exists(circle, filter(x.s, not[and[or[apply(same_shape,x.o),green],yellow]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:yellow
'λx.apply(or[or[and[apply(same_size,x.o),and[and[circle,triangle],size1]],nor[triangle,green]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size1;4:nor[%s,%s];4:triangle;4:green;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), rectangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:rectangle
'λx.exists(and[blue,blue], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, nor[rectangle,green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(iff[not[green],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, rectangle), and[circle,rectangle]), size2), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:circle;4:rectangle;4:size2;4:size2
'λx.apply(and[size1,yellow],iota(filter(filter(filter(filter(x.s, green), circle), size1), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size1;4:size1
'λx.apply(and[size3,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size1,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[size1,apply(same_size,iota(x.s))], filter(x.s, and[apply(same_shape,x.o),circle]))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(size1,filter(x.s, and[nor[apply(same_color,iota(filter(filter(x.s, size3), blue))),size1],triangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size1;4:triangle
'λx.apply(not[rectangle],iota(filter(filter(filter(filter(x.s, and[size2,circle]), size3), implies[green,size3]), green)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:size3;4:implies[%s,%s];4:green;4:size3;4:green
'λx.apply(or[not[triangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(nor[not[size2],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[not[circle],and[not[rectangle],and[or[apply(same_shape,iota(x.s)),size2],green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), size1), not[not[circle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:not[%s];4:not[%s];4:circle
'λx.apply(or[not[circle],apply(same_color,x.o)],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.empty(filter(filter(filter(x.s, circle), or[green,circle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:green;4:circle;4:yellow
'λx.apply(or[circle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[size3,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(not[apply(size-geq,x.o)],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, and[circle,or[or[apply(same_shape,x.o),size3],triangle]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:triangle
'λx.apply(or[circle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[nand[size2,implies[triangle,green]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:implies[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(x.s, not[apply(size-gt,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(or[and[yellow,size1],not[or[size3,circle]]], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:or[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size2,iota(filter(filter(filter(x.s, green), not[rectangle]), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:rectangle;4:size3
'λx.apply(implies[green,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(green,iota(filter(x.s, and[and[nor[and[yellow,and[and[and[size2,yellow],size1],circle]],implies[size2,green]],green],size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:size1;4:circle;4:implies[%s,%s];4:size2;4:green;4:green;4:size1
'λx.forall(apply(same_size,x.o),filter(filter(x.s, and[blue,size1]), not[not[circle]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:not[%s];4:not[%s];4:circle
'λx.apply(iff[size3,apply(same_color,iota(filter(filter(x.s, not[blue]), circle)))],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[apply(same_shape,iota(x.s)),green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, circle), green), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:rectangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size2), yellow), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:rectangle
'λx.apply(and[yellow,apply(size-geq,iota(filter(filter(x.s, size1), size1)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[blue,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[green,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,green],iota(filter(filter(filter(x.s, size3), or[size2,size1]), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:size1;4:size3
'λx.apply(rectangle,x.o)'	0:apply(%s,%s);4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[circle,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[rectangle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, circle)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, blue), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.forall(nand[circle,size2],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size1), or[size3,not[triangle]]), size2), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size3;4:not[%s];4:triangle;4:size2;4:triangle
'λx.exists(nand[circle,circle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.apply(not[size1],iota(filter(filter(filter(filter(x.s, triangle), rectangle), rectangle), iff[size2,green])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:rectangle;4:iff[%s,%s];4:size2;4:green
'λx.apply(not[or[size3,size1]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(and[or[green,blue],implies[blue,rectangle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:blue;4:implies[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(and[apply(size-geq,iota(x.s)),and[circle,and[circle,blue]]],iota(filter(x.s, or[yellow,nor[triangle,and[not[and[apply(same_size,x.o),size3]],nor[green,apply(same_shape,x.o)]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.forall(green,filter(x.s, not[circle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.forall(yellow,filter(x.s, yellow))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(size-gt,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(blue,iota(filter(filter(x.s, size3), and[blue,not[not[and[and[circle,rectangle],circle]]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:blue;4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:circle
'λx.empty(filter(filter(x.s, iff[size1,or[size3,circle]]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:or[%s,%s];4:size3;4:circle;4:triangle
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(not[blue],iota(filter(filter(x.s, or[size2,triangle]), yellow)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:triangle;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, green))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-gt,iota(filter(filter(x.s, green), yellow))),iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[and[rectangle,triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, or[green,yellow]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow;4:yellow
'λx.forall(apply(same_color,x.o),filter(filter(x.s, size1), and[and[blue,yellow],size1]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size1
'λx.apply(blue,iota(filter(filter(x.s, not[size1]), nand[yellow,size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:nand[%s,%s];4:yellow;4:size1
'λx.exists(green, filter(x.s, not[yellow]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(circle,iota(filter(x.s, and[size2,or[apply(size-geq,x.o),green]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green
'λx.apply(not[triangle],iota(filter(filter(x.s, or[and[and[size3,not[and[green,and[not[and[not[blue],size2]],and[iff[not[not[not[green]]],size1],green]]]]],not[iff[not[not[size3]],circle]]],and[and[implies[triangle,size1],blue],triangle]]), green)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:green;4:size1;4:green;4:not[%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:size3;4:circle;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:triangle;4:size1;4:blue;4:triangle;4:green
'λx.apply(and[triangle,size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[or[iff[and[triangle,size1],size2],not[rectangle]],and[triangle,and[and[apply(size-lt,x.o),size2],size3]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:size2;4:not[%s];4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size1,nor[apply(same_color,iota(x.s)),size1]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(iff[blue,and[blue,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[implies[and[and[blue,green],implies[not[size2],and[size1,green]]],not[size2]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:implies[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size1;4:green;4:not[%s];4:size2;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), size1), yellow), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:yellow;4:triangle
'λx.apply(circle,iota(filter(filter(filter(x.s, or[size1,green]), and[rectangle,triangle]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:and[%s,%s];4:rectangle;4:triangle;4:blue
'λx.apply(or[rectangle,rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(green, filter(x.s, size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(green, filter(x.s, size2))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, green), yellow), size1), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(or[rectangle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.forall(and[circle,apply(same_color,iota(x.s))],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(nor[or[size1,not[circle]],and[size1,size2]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:circle;4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-leq,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(size3, filter(x.s, green))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size1, filter(x.s, size2))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size3, filter(x.s, size2))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size3, filter(x.s, size1))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size2, filter(x.s, size2))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size2, filter(x.s, size3))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size2, filter(x.s, size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(x.s, rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, triangle), not[triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.contains(iota(filter(x.s, apply(same_color,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[apply(same_color,x.o),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(filter(x.s, size1), rectangle), size3), and[blue,nand[green,green]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:size3;4:and[%s,%s];4:blue;4:nand[%s,%s];4:green;4:green
'λx.apply(triangle,iota(filter(filter(x.s, blue), and[and[size2,green],nand[nor[circle,and[not[not[circle]],apply(same_shape,x.o)]],and[circle,apply(same_color,iota(filter(filter(x.s, iff[size3,apply(same_color,iota(filter(filter(filter(filter(x.s, and[apply(same_shape,x.o),green]), apply(size-leq,iota(x.s))), not[blue]), circle)))]), yellow)))]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:nand[%s,%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;4:circle;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size2), triangle), or[size2,size3]), size3), or[nor[circle,circle],blue]), green), size3), circle), not[not[and[size1,triangle]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:or[%s,%s];4:size2;4:size3;4:size3;4:or[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:blue;4:green;4:size3;4:circle;4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:triangle
'λx.exists(size2, filter(filter(x.s, circle), size3))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.exists(size2, filter(filter(filter(x.s, or[or[and[circle,yellow],size2],size2]), apply(same_size,iota(x.s))), size2))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:size2;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.contains(iota(x.s), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(not[circle],filter(filter(x.s, yellow), not[rectangle]))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:rectangle
'λx.apply(and[iff[and[triangle,size3],circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[size3,size3],triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size1), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, not[green]), size3), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size3;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, not[and[apply(same_color,x.o),size1]]), and[iff[triangle,size3],and[triangle,size1]]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:triangle;4:size1;4:yellow
'λx.exists(and[size2,iff[nor[and[and[triangle,and[apply(same_shape,iota(x.s)),rectangle]],or[green,size2]],size3],blue]], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:green;4:size2;4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[circle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, or[and[rectangle,size1],circle]), green), rectangle), size2), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:circle;4:green;4:rectangle;4:size2;4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, and[size1,blue]), circle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:circle;4:triangle
'λx.apply(and[circle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, triangle), rectangle), and[blue,green]), not[circle]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:and[%s,%s];4:blue;4:green;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, apply(same_color,x.o)), size1))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(and[or[and[apply(same_shape,x.o),rectangle],and[and[rectangle,size2],or[circle,not[size2]]]],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:circle;4:not[%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), and[rectangle,and[apply(size-geq,x.o),size2]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2
'λx.apply(rectangle,iota(filter(x.s, and[size1,circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.apply(and[circle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, filter(x.s, triangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(size3, filter(x.s, triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, and[yellow,apply(same_size,iota(filter(x.s, nor[yellow,triangle])))]), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:triangle;4:blue
'λx.forall(triangle,filter(filter(filter(x.s, circle), rectangle), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:yellow
'λx.contains(iota(filter(x.s, not[size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(green, filter(x.s, triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[circle,yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.apply(and[circle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), or[rectangle,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:rectangle;4:size3
'λx.apply(rectangle,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(not[and[yellow,nand[apply(size-lt,x.o),circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, nor[size1,and[circle,size1]]), triangle), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size1;4:triangle;4:size2;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[yellow,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(or[apply(same_shape,iota(filter(x.s, size1))),or[size3,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.forall(and[blue,not[green]],filter(filter(filter(filter(filter(filter(x.s, size1), iff[yellow,or[apply(same_size,x.o),apply(size-geq,iota(filter(filter(filter(x.s, size2), and[apply(same_size,x.o),and[blue,or[size3,triangle]]]), and[size3,size1])))]]), and[circle,triangle]), size1), yellow), nand[size3,circle]))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:size3;4:size1;4:and[%s,%s];4:circle;4:triangle;4:size1;4:yellow;4:nand[%s,%s];4:size3;4:circle
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(or[size1,size3],iota(filter(filter(filter(filter(x.s, green), size1), not[and[size3,or[triangle,green]]]), apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:not[%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[nand[and[size2,circle],yellow],size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:circle;4:yellow;4:size3;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, or[size1,blue]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:blue;4:rectangle
'λx.apply(not[triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[circle,and[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[not[size3],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[iff[size3,triangle],apply(same_color,x.o)],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(apply(size-leq,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(iff[size3,blue], filter(x.s, circle))'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[green],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, yellow), blue), circle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:circle
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(yellow, filter(filter(x.s, size1), green))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.contains(iota(filter(x.s, nor[apply(same_size,x.o),and[size3,and[size2,size3]]])), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[yellow],iota(filter(filter(filter(x.s, nor[rectangle,iff[rectangle,implies[or[size1,not[triangle]],yellow]]]), not[size3]), rectangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:iff[%s,%s];4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:triangle;4:yellow;4:not[%s];4:size3;4:rectangle
'λx.apply(nand[yellow,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[and[and[yellow,green],and[or[green,circle],size1]],green],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:and[%s,%s];4:or[%s,%s];4:green;4:circle;4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.forall(circle,filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(nor[size3,implies[green,blue]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:implies[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[nand[or[triangle,triangle],not[circle]],apply(size-lt,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:not[%s];4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nand[rectangle,blue],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[or[or[circle,size1],circle],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:size1;4:circle;4:size3;1:%s.o;2:x
'λx.forall(or[circle,and[circle,apply(same_color,iota(filter(x.s, triangle)))]],filter(x.s, rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[and[blue,green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:circle;1:%s.o;2:x
'λx.apply(nor[blue,and[triangle,size2]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[size1,triangle],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[or[or[apply(size-gt,iota(x.s)),size1],apply(same_shape,x.o)],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, circle), and[rectangle,and[blue,size1]]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:size1;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(x.s, green)), filter(filter(filter(filter(x.s, blue), not[not[green]]), apply(same_shape,x.o)), and[implies[yellow,apply(same_shape,iota(x.s))],blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(or[or[not[nor[size3,rectangle]],nand[blue,triangle]],circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:size3;4:rectangle;4:nand[%s,%s];4:blue;4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, circle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(nor[triangle,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[not[not[iff[circle,circle]]],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:iff[%s,%s];4:circle;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[apply(size-gt,x.o),size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(size-gt,x.o),and[not[and[blue,triangle]],and[blue,green]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[triangle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[size2,size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, or[size3,rectangle]))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(filter(filter(x.s, rectangle), not[green]), triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:green;4:triangle
'λx.apply(and[apply(size-geq,iota(filter(x.s, and[size2,blue]))),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue;4:size1;1:%s.o;2:x
'λx.exists(and[or[rectangle,yellow],and[rectangle,green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:rectangle;4:green;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(x.s, circle), circle), implies[size2,or[not[blue],size3]]), or[green,apply(same_size,x.o)]), not[and[green,implies[or[green,size2],yellow]]]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:implies[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:blue;4:size3;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:green;4:implies[%s,%s];4:or[%s,%s];4:green;4:size2;4:yellow;4:blue
'λx.apply(or[implies[size3,triangle],not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size3;4:triangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[implies[size3,rectangle],apply(same_size,x.o)],iota(filter(filter(x.s, and[and[size3,size2],apply(same_size,iota(filter(x.s, apply(same_color,iota(x.s)))))]), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(implies[size2,circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],iota(filter(x.s, and[size3,or[or[triangle,nand[rectangle,iff[and[size2,triangle],triangle]]],and[size2,rectangle]]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:triangle;4:nand[%s,%s];4:rectangle;4:iff[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:triangle;4:and[%s,%s];4:size2;4:rectangle
'λx.exists(apply(size-gt,x.o), filter(x.s, triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[apply(same_size,iota(x.s))], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(filter(filter(filter(x.s, circle), and[rectangle,circle]), and[and[rectangle,green],implies[triangle,and[yellow,apply(same_shape,iota(x.s))]]]), triangle), and[apply(same_shape,x.o),size2]), or[and[blue,size3],size3]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:blue;4:size3;4:size3
'λx.apply(or[or[or[and[triangle,rectangle],not[circle]],apply(size-gt,x.o)],or[not[yellow],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:not[%s];4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(iff[and[green,apply(same_size,iota(filter(x.s, rectangle)))],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[blue,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(iff[green,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, nor[and[size3,rectangle],size1]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:size1;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, size3), apply(size-geq,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, and[size3,or[rectangle,size1]]), or[yellow,blue]), circle))),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:size1;4:or[%s,%s];4:yellow;4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, not[size2]), size2), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2;4:triangle;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), triangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.exists(rectangle, filter(filter(x.s, yellow), yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(implies[or[implies[and[blue,size2],and[size1,yellow]],triangle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:size2;4:and[%s,%s];4:size1;4:yellow;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, nand[circle,and[rectangle,size2]]), or[or[or[rectangle,size3],green],implies[or[size3,circle],blue]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:green;4:implies[%s,%s];4:or[%s,%s];4:size3;4:circle;4:blue
'λx.exists(circle, filter(filter(x.s, and[circle,triangle]), rectangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:rectangle
'λx.apply(or[apply(same_color,x.o),triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(implies[rectangle,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(implies[rectangle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(implies[rectangle,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[and[rectangle,circle],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size2,size3],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[not[not[size2]],blue],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:size2;4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, green), not[triangle]), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle;4:green
'λx.exists(apply(same_shape,x.o), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(and[green,size2],filter(filter(x.s, size3), circle))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(and[and[size3,nand[triangle,size1]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:nand[%s,%s];4:triangle;4:size1;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, apply(same_size,x.o)))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[apply(same_color,iota(x.s)),blue],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, implies[size3,rectangle]), triangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:rectangle;4:triangle
'λx.exists(implies[and[rectangle,apply(same_color,x.o)],apply(same_color,x.o)], filter(x.s, and[not[size3],circle]))'	0:exists(%s, %s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:circle
'λx.exists(apply(same_shape,iota(filter(filter(filter(x.s, iff[size3,size3]), or[blue,and[or[nor[and[size3,size2],and[and[circle,size2],triangle]],triangle],or[iff[blue,size1],yellow]]]), blue))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:size3;4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:triangle;4:triangle;4:or[%s,%s];4:iff[%s,%s];4:blue;4:size1;4:yellow;4:blue;3:%s.s;2:x
'λx.apply(and[triangle,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(filter(x.s, apply(same_shape,x.o)), size2))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, apply(size-geq,x.o)), circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle
'λx.contains(iota(x.s), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(circle, filter(filter(filter(x.s, size1), triangle), and[and[apply(same_shape,x.o),or[apply(same_shape,iota(filter(x.s, rectangle))),size2]],and[size1,or[blue,size3]]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size3
'λx.forall(blue,filter(filter(filter(filter(x.s, or[not[yellow],rectangle]), size1), size1), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:rectangle;4:size1;4:size1;4:circle
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(or[or[apply(same_color,x.o),size2],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[yellow,size2]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size2;4:blue
'λx.empty(filter(filter(x.s, and[yellow,size1]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:blue
'λx.exists(circle, filter(x.s, or[circle,size2]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size2
'λx.exists(size2, filter(x.s, implies[or[size2,or[size2,blue]],apply(same_size,x.o)]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:size2;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, size3), circle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(nor[circle,and[triangle,nor[and[apply(same_size,iota(x.s)),blue],and[size3,circle]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[and[size3,circle],apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(x.s, size3), size1), size2))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:size2
'λx.forall(yellow,filter(filter(x.s, green), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(and[or[rectangle,size3],and[and[size3,iff[not[rectangle],not[yellow]]],apply(same_shape,x.o)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:size3;4:iff[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,nor[and[size1,apply(same_shape,x.o)],apply(same_shape,iota(x.s))]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:nor[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(filter(x.s, or[nor[size1,not[nor[iff[or[rectangle,or[implies[size3,and[apply(size-geq,x.o),not[rectangle]]],size3]],size1],circle]]],apply(size-gt,x.o)]), not[circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:size1;4:not[%s];4:nor[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:rectangle;4:size3;4:size1;4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(size3,iota(filter(filter(x.s, iff[circle,size2]), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size2;4:size3
'λx.apply(implies[rectangle,green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[or[or[blue,circle],size2],not[and[not[circle],circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:size2;4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(not[blue],filter(filter(filter(filter(filter(x.s, blue), or[rectangle,size1]), not[apply(same_color,iota(filter(filter(x.s, and[apply(size-lt,iota(filter(filter(x.s, size3), blue))),size3]), blue)))]), and[size2,size2]), size3))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:rectangle;4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size3;4:blue;4:and[%s,%s];4:size2;4:size2;4:size3
'λx.apply(iff[yellow,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, not[green]), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size3
'λx.empty(filter(filter(filter(x.s, circle), rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:blue
'λx.apply(or[size3,size1],iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(and[green,apply(same_color,iota(filter(x.s, size1)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(not[and[nand[blue,size2],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:size1;1:%s.o;2:x
'λx.exists(iff[triangle,size3], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, implies[triangle,blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(iff[triangle,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.exists(and[rectangle,iff[nor[not[triangle],size2],rectangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:nor[%s,%s];4:not[%s];4:triangle;4:size2;4:rectangle;3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, circle), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(or[or[and[apply(same_size,x.o),size1],size2],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(nor[size2,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, not[not[or[size1,and[apply(same_size,iota(x.s)),yellow]]]]), and[green,blue]), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:green;4:blue;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, and[size3,size3]), or[size1,implies[apply(size-geq,iota(x.s)),not[blue]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3;4:or[%s,%s];4:size1;4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(implies[green,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[triangle,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(x.s, yellow), yellow), not[size3]), size1), size1), and[or[rectangle,size1],triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:not[%s];4:size3;4:size1;4:size1;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:triangle
'λx.exists(size2, filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), or[and[or[size3,green],and[blue,green]],green]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:and[%s,%s];4:blue;4:green;4:green
'λx.apply(rectangle,iota(filter(x.s, nand[circle,circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:circle
'λx.apply(not[circle],iota(filter(filter(filter(filter(filter(filter(x.s, size2), size1), size1), iff[and[size2,size2],or[iff[not[nor[not[circle],rectangle]],size3],iff[blue,implies[yellow,triangle]]]]), implies[yellow,and[rectangle,size3]]), apply(same_color,iota(filter(filter(x.s, triangle), apply(size-lt,x.o)))))))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:size1;4:iff[%s,%s];4:and[%s,%s];4:size2;4:size2;4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:nor[%s,%s];4:not[%s];4:circle;4:rectangle;4:size3;4:iff[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:triangle;4:implies[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[or[size1,triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), apply(same_shape,x.o)), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(and[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(same_size,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[not[size1],yellow],not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[circle,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow
'λx.contains(x.o, filter(filter(x.s, implies[triangle,and[size2,blue]]), and[not[rectangle],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:blue;4:and[%s,%s];4:not[%s];4:rectangle;4:size1
'λx.apply(implies[blue,size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-lt,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(or[or[size2,blue],or[size3,and[apply(same_shape,iota(x.s)),and[circle,and[and[rectangle,iff[green,green]],blue]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:blue;4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:green;4:green;4:blue;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, rectangle), or[circle,or[and[green,blue],circle]]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:green;4:blue;4:circle;4:size1
'λx.forall(rectangle,filter(filter(x.s, yellow), or[yellow,rectangle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:yellow;4:rectangle
'λx.apply(circle,iota(filter(x.s, and[triangle,blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.apply(and[yellow,and[size3,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(and[rectangle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size3,yellow],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, not[and[size1,size2]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:size2
'λx.empty(filter(filter(filter(x.s, not[green]), or[rectangle,size3]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:or[%s,%s];4:rectangle;4:size3;4:size1
'λx.empty(filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.forall(not[apply(size-lt,x.o)],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[not[yellow],or[size2,and[green,green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(or[blue,not[apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(nor[blue,not[and[triangle,rectangle]]],filter(x.s, not[yellow]))'	0:forall(%s,%s);4:nor[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.forall(iff[size3,apply(size-gt,iota(filter(x.s, size3)))],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.apply(and[blue,and[green,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[green,not[not[implies[and[yellow,circle],yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[size2,not[nand[nor[rectangle,apply(same_color,x.o)],size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:nand[%s,%s];4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,nor[size3,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:nor[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size2), or[green,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:green;4:size1
'λx.apply(size1,iota(filter(filter(x.s, size3), or[green,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:green;4:size3
'λx.apply(green,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[implies[size3,size2],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:size3;4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[rectangle,implies[triangle,apply(same_shape,iota(filter(filter(x.s, yellow), size1)))]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[or[size1,apply(same_size,iota(filter(x.s, and[size1,and[or[blue,and[and[green,green],and[green,or[apply(same_size,x.o),apply(same_shape,iota(filter(filter(x.s, or[triangle,size3]), blue)))]]]],nand[circle,triangle]]])))],or[triangle,size2]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:blue;4:nand[%s,%s];4:circle;4:triangle;4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,implies[rectangle,or[triangle,blue]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), iff[yellow,and[not[and[size1,apply(size-geq,x.o)]],size2]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2
'λx.forall(blue,filter(x.s, nand[and[and[apply(same_color,iota(filter(x.s, not[size1]))),triangle],triangle],triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:triangle;4:triangle;4:triangle
'λx.contains(iota(filter(filter(x.s, not[size1]), not[not[triangle]])), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:not[%s];4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, circle), circle), implies[circle,size3]), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:implies[%s,%s];4:circle;4:size3;4:size3
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, not[nand[and[blue,yellow],apply(same_color,iota(filter(x.s, size3)))]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, and[triangle,rectangle]), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:blue
'λx.empty(filter(filter(x.s, nand[size3,size2]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size2;4:circle
'λx.apply(or[size1,and[rectangle,not[or[size3,yellow]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(iff[and[apply(same_shape,iota(filter(x.s, not[blue]))),apply(same_color,iota(filter(x.s, not[circle])))],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, not[circle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(implies[rectangle,nor[and[iff[apply(same_color,x.o),and[size3,blue]],and[yellow,green]],nor[nor[size3,yellow],implies[or[triangle,circle],nor[nor[and[apply(same_color,x.o),apply(same_size,iota(x.s))],and[triangle,and[size2,or[or[and[size1,size2],green],size3]]]],size2]]]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:yellow;4:green;4:nor[%s,%s];4:nor[%s,%s];4:size3;4:yellow;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:nor[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:size2;4:green;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size1,filter(filter(filter(x.s, yellow), and[and[rectangle,apply(same_size,iota(x.s))],rectangle]), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(nand[and[circle,size2],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:size2;4:blue;1:%s.o;2:x
'λx.exists(size3, filter(filter(filter(x.s, not[apply(same_size,x.o)]), circle), or[triangle,size1]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:or[%s,%s];4:triangle;4:size1
'λx.apply(not[and[circle,and[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, and[blue,size1]), and[triangle,triangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(iff[apply(same_size,x.o),circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), size3), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:not[%s];4:circle
'λx.forall(and[or[size2,rectangle],not[yellow]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, rectangle), triangle), and[circle,and[size1,rectangle]]), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:rectangle;4:triangle
'λx.apply(green,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(iff[circle,blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.empty(filter(filter(x.s, triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.forall(nor[triangle,rectangle],filter(filter(filter(x.s, blue), and[nor[size1,size3],or[size3,apply(same_size,iota(x.s))]]), yellow))'	0:forall(%s,%s);4:nor[%s,%s];4:triangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:nor[%s,%s];4:size1;4:size3;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, yellow), blue), apply(size-lt,x.o)), and[and[yellow,yellow],blue]), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:blue;4:size1
'λx.apply(and[apply(same_shape,iota(x.s)),not[yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,rectangle],iota(filter(filter(filter(filter(x.s, size2), circle), not[size3]), apply(size-lt,iota(filter(filter(filter(filter(x.s, circle), size2), size2), and[blue,triangle]))))))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:not[%s];4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size2;4:and[%s,%s];4:blue;4:triangle
'λx.exists(or[blue,and[triangle,size2]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.apply(not[green],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(and[yellow,and[yellow,yellow]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(filter(filter(x.s, green), size1))),triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(nand[circle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,not[and[size3,and[not[size3],blue]]]],iota(filter(filter(filter(x.s, triangle), nor[yellow,implies[iff[apply(size-gt,x.o),size2],and[size1,yellow]]]), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:yellow;4:implies[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;4:and[%s,%s];4:size1;4:yellow;4:blue
'λx.apply(not[yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(x.s, or[and[circle,circle],not[nor[size3,and[yellow,size3]]]]), and[apply(same_color,x.o),size1]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:not[%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2
'λx.apply(not[and[size1,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.exists(and[triangle,and[and[iff[size2,triangle],apply(same_size,x.o)],green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, and[circle,size3]), not[circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3;4:not[%s];4:circle
'λx.apply(implies[triangle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(implies[triangle,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(implies[or[apply(size-geq,x.o),not[apply(same_shape,iota(filter(filter(x.s, circle), triangle)))]],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(not[and[circle,yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, implies[blue,rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:rectangle
'λx.contains(iota(filter(filter(x.s, not[green]), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:blue;3:%s.s;2:x
'λx.exists(triangle, filter(x.s, green))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(triangle, filter(x.s, size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(circle, filter(filter(x.s, apply(same_size,x.o)), blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(apply(size-lt,iota(x.s)),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[rectangle,size1],iota(filter(filter(x.s, nand[green,blue]), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:blue;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(x.s, blue), size1), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:size3
'λx.apply(rectangle,iota(filter(x.s, apply(size-gt,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(size2, filter(x.s, apply(size-gt,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.empty(filter(x.s, and[size2,circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle
'λx.apply(and[iff[yellow,and[rectangle,apply(same_shape,x.o)]],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, size2), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.forall(and[yellow,yellow],filter(filter(x.s, not[blue]), circle))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle
'λx.empty(filter(filter(filter(x.s, blue), size2), and[circle,apply(same_shape,iota(filter(x.s, or[triangle,not[size1]])))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:size1
'λx.apply(implies[apply(same_size,iota(x.s)),size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.exists(or[not[size2],circle], filter(filter(filter(x.s, and[size3,apply(same_color,x.o)]), and[and[circle,circle],yellow]), and[rectangle,or[and[size2,not[apply(same_shape,x.o)]],triangle]]))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:size2;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:yellow;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(and[green,and[triangle,blue]],iota(filter(filter(filter(filter(filter(filter(x.s, and[green,yellow]), rectangle), triangle), and[nand[circle,not[and[size3,triangle]]],rectangle]), yellow), green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow;4:rectangle;4:triangle;4:and[%s,%s];4:nand[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:rectangle;4:yellow;4:green
'λx.exists(iff[triangle,apply(same_shape,iota(x.s))], filter(x.s, or[yellow,nor[size1,rectangle]]))'	0:exists(%s, %s);4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:nor[%s,%s];4:size1;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(x.s, triangle), green), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size1
'λx.apply(and[apply(size-leq,iota(filter(x.s, yellow))),yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(size-gt,iota(x.s)))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size3), apply(same_size,iota(x.s))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,and[apply(same_size,x.o),and[size1,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, green), size2), apply(size-leq,iota(filter(x.s, and[apply(same_color,x.o),size3]))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), nor[size2,not[triangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:size2;4:not[%s];4:triangle
'λx.contains(x.o, filter(filter(x.s, green), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(and[size2,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[rectangle,not[rectangle]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle
'λx.exists(nor[green,triangle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.forall(or[nor[yellow,and[size3,size2]],triangle],filter(x.s, size3))'	0:forall(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:size2;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[size3,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size3), size2), circle), circle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:circle;4:circle;4:yellow
'λx.apply(or[blue,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[triangle,and[nor[iff[size2,rectangle],not[size1]],iff[green,green]]],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:size2;4:rectangle;4:not[%s];4:size1;4:iff[%s,%s];4:green;4:green;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(filter(x.s, size3), triangle), yellow), and[triangle,size1]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:yellow;4:and[%s,%s];4:triangle;4:size1
'λx.forall(blue,filter(filter(x.s, circle), apply(size-lt,iota(filter(x.s, and[or[and[and[not[yellow],not[rectangle]],green],and[circle,and[not[size2],triangle]]],or[size2,size2]])))))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:rectangle;4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:size2;4:triangle;4:or[%s,%s];4:size2;4:size2
'λx.contains(iota(filter(x.s, or[size2,circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.forall(and[circle,not[size3]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), and[size2,or[size2,circle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:circle
'λx.exists(green, x.s)'	0:exists(%s, %s);4:green;3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, yellow), apply(same_shape,iota(filter(x.s, size1)))))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(yellow,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.exists(size1, x.s)'	0:exists(%s, %s);4:size1;3:%s.s;2:x
'λx.exists(size2, x.s)'	0:exists(%s, %s);4:size2;3:%s.s;2:x
'λx.exists(size3, x.s)'	0:exists(%s, %s);4:size3;3:%s.s;2:x
'λx.apply(and[size1,green],iota(filter(filter(x.s, size2), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(x.s, size2), apply(size-gt,x.o)), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green
'λx.exists(size1, filter(filter(x.s, and[apply(size-lt,iota(filter(filter(filter(filter(x.s, not[and[circle,blue]]), rectangle), triangle), and[blue,size2]))),not[nor[not[implies[and[circle,blue],green]],rectangle]]]), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:blue;4:rectangle;4:triangle;4:and[%s,%s];4:blue;4:size2;4:not[%s];4:nor[%s,%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:blue;4:green;4:rectangle;4:size1
'λx.apply(apply(size-geq,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(filter(x.s, circle))),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[iff[or[and[apply(size-lt,x.o),green],and[circle,apply(same_color,iota(filter(x.s, apply(same_shape,iota(filter(x.s, yellow))))))]],triangle],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[and[apply(same_color,x.o),size1],not[size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), triangle), and[size2,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:and[%s,%s];4:size2;4:rectangle
'λx.empty(x.s)'	0:empty(%s);3:%s.s;2:x
'λx.apply(apply(size-gt,iota(filter(filter(x.s, size2), size3))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size3,implies[size3,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:implies[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[rectangle,or[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), rectangle), not[and[rectangle,size3]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:not[%s];4:and[%s,%s];4:rectangle;4:size3
'λx.apply(or[and[apply(same_color,iota(filter(x.s, circle))),size1],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[and[size3,circle],implies[circle,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:implies[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size2,not[yellow]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[triangle,nand[rectangle,rectangle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:rectangle;4:rectangle
'λx.apply(and[and[yellow,size3],rectangle],iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(and[not[and[blue,nand[green,rectangle]]],nor[triangle,yellow]],iota(filter(filter(filter(filter(filter(x.s, triangle), not[size2]), or[rectangle,not[not[iff[apply(same_size,x.o),and[apply(same_size,iota(x.s)),rectangle]]]]]), rectangle), and[not[and[or[rectangle,apply(same_size,x.o)],size2]],circle])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:nand[%s,%s];4:green;4:rectangle;4:nor[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size2;4:or[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:circle
'λx.apply(nand[rectangle,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[size1,or[not[triangle],circle]],iota(filter(filter(filter(filter(filter(x.s, triangle), green), and[yellow,green]), circle), green)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:and[%s,%s];4:yellow;4:green;4:circle;4:green
'λx.apply(and[nor[green,and[triangle,triangle]],blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:green;4:and[%s,%s];4:triangle;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[triangle,green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(or[yellow,circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[yellow,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[not[size2],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[and[or[and[yellow,or[circle,green]],circle],blue],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:green;4:circle;4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, circle), rectangle), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:circle
'λx.apply(implies[size3,yellow],iota(filter(filter(x.s, or[rectangle,yellow]), circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:yellow;4:circle
'λx.apply(nand[or[triangle,blue],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:green;1:%s.o;2:x
'λx.apply(and[not[rectangle],and[rectangle,or[size1,iff[nand[blue,not[blue]],apply(size-gt,iota(filter(filter(x.s, size2), and[size3,and[blue,circle]])))]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:iff[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[and[circle,iff[green,triangle]],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:green;4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size2), yellow), and[green,green]), and[size1,circle]), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:size1;4:circle;4:size2
'λx.apply(implies[rectangle,green],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, rectangle), or[or[circle,blue],rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:rectangle
'λx.apply(nor[and[triangle,size1],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, and[circle,size2]), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:green
'λx.apply(circle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, rectangle), and[circle,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:circle;4:size2
'λx.exists(nand[rectangle,or[not[triangle],not[not[or[apply(same_color,x.o),and[green,apply(same_size,iota(x.s))]]]]]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:triangle;4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(and[green,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[or[or[apply(same_color,x.o),circle],nor[yellow,apply(same_shape,iota(filter(x.s, circle)))]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;1:%s.o;2:x
'λx.apply(nor[blue,and[size1,or[apply(same_color,iota(x.s)),not[size2]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:and[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(nand[not[size1],size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(filter(filter(filter(x.s, and[not[size1],size3]), green), size2), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:size3;4:green;4:size2;4:size3;1:%s.o;2:x
'λx.apply(nor[and[not[yellow],size1],rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[size1,or[yellow,or[rectangle,circle]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, blue), size3), triangle), circle)), filter(x.s, nand[size1,circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:triangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:circle
'λx.forall(or[blue,and[circle,green]],filter(x.s, green))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(filter(filter(x.s, size1), size3), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:triangle
'λx.forall(blue,filter(x.s, rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(x.s, and[rectangle,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle
'λx.exists(triangle, filter(filter(filter(filter(x.s, circle), size1), size3), not[circle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size3;4:not[%s];4:circle
'λx.forall(apply(same_color,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[and[green,rectangle],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, yellow), yellow), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:yellow
'λx.apply(circle,iota(x.s))'	0:apply(%s,%s);4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,x.s)'	0:forall(%s,%s);4:triangle;3:%s.s;2:x
'λx.apply(and[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,not[iff[or[and[blue,and[yellow,yellow]],circle],or[and[rectangle,green],size3]]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:yellow;4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, and[and[triangle,or[green,apply(size-gt,iota(x.s))]],or[circle,nand[or[and[or[and[blue,green],size1],size1],yellow],or[triangle,and[triangle,nand[apply(same_color,iota(x.s)),size1]]]]]]), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:size1;4:size1;4:yellow;4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:circle
'λx.forall(or[not[and[rectangle,or[and[triangle,nand[nor[yellow,or[rectangle,green]],circle]],size2]]],not[implies[apply(same_color,x.o),size2]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:green;4:circle;4:size2;4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[triangle,rectangle]), and[triangle,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:triangle;4:rectangle
'λx.forall(and[apply(size-gt,iota(filter(filter(filter(x.s, blue), green), triangle))),size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:triangle;4:size2;3:%s.s;2:x
'λx.apply(implies[apply(same_size,iota(filter(x.s, circle))),size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,and[size3,triangle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[or[not[yellow],size2],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:size2;4:size1;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, iff[yellow,green]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:green
'λx.exists(nor[size2,rectangle], filter(x.s, size2))'	0:exists(%s, %s);4:nor[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[apply(size-gt,iota(filter(x.s, iff[yellow,and[or[and[triangle,not[size3]],triangle],green]]))),implies[circle,not[triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:size3;4:triangle;4:green;4:implies[%s,%s];4:circle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(nor[yellow,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(nor[yellow,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size1), size1), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size3
'λx.apply(and[not[and[or[yellow,circle],green]],nor[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:green;4:nor[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, circle), green), rectangle), and[rectangle,rectangle]), nand[green,nand[and[apply(same_shape,iota(filter(filter(filter(x.s, green), green), green))),green],yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle;4:nand[%s,%s];4:green;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:green;4:green;4:yellow
'λx.apply(nand[size2,circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[yellow,and[not[size1],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, nand[and[apply(size-lt,iota(filter(filter(filter(filter(x.s, triangle), rectangle), blue), blue))),not[not[green]]],green]), or[and[not[or[size3,apply(size-leq,x.o)]],circle],green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:blue;4:blue;4:not[%s];4:not[%s];4:green;4:green;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_color,iota(filter(filter(filter(x.s, rectangle), size1), green)))), apply(same_shape,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[and[apply(same_size,x.o),size1],and[circle,or[triangle,nor[not[circle],circle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:nor[%s,%s];4:not[%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(and[rectangle,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[apply(same_size,iota(filter(filter(x.s, circle), and[or[not[and[green,size2]],apply(same_size,x.o)],or[apply(size-gt,x.o),or[size3,green]]])))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.forall(not[and[apply(same_size,iota(x.s)),green]],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[circle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), apply(same_size,x.o)))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, or[circle,rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, and[rectangle,rectangle]), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:size2
'λx.apply(yellow,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.contains(iota(x.s), filter(x.s, iff[blue,size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:size1
'λx.apply(iff[size2,not[size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[not[and[yellow,and[triangle,rectangle]]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(iff[and[size3,blue],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:blue;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size3), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(or[and[blue,size1],apply(size-lt,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, size2), and[and[size1,size3],not[size3]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:not[%s];4:size3
'λx.empty(filter(filter(filter(filter(x.s, size3), rectangle), triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:triangle;4:green
'λx.apply(and[iff[or[and[apply(same_shape,x.o),circle],triangle],yellow],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:triangle;4:yellow;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(blue,iota(filter(filter(x.s, yellow), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(blue,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(circle,iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.exists(or[yellow,not[yellow]], filter(x.s, or[green,rectangle]))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle
'λx.forall(and[and[and[size3,rectangle],rectangle],size3],filter(x.s, iff[apply(same_shape,iota(filter(x.s, size3))),size1]))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:rectangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(yellow,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, and[size1,and[size1,size2]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(green,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.exists(nand[size3,rectangle], filter(filter(filter(x.s, apply(same_size,iota(x.s))), triangle), size1))'	0:exists(%s, %s);4:nand[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1
'λx.forall(blue,filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), rectangle), not[or[size1,triangle]]), size2), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:not[%s];4:or[%s,%s];4:size1;4:triangle;4:size2;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, circle), nor[or[yellow,size2],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:green
'λx.exists(blue, filter(filter(x.s, and[yellow,triangle]), not[green]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:green
'λx.contains(iota(filter(filter(x.s, blue), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[triangle]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:triangle
'λx.apply(not[iff[apply(same_color,iota(filter(x.s, and[size2,rectangle]))),triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), apply(same_shape,iota(filter(x.s, green))))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[or[rectangle,not[yellow]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(or[or[blue,yellow],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[rectangle,size1],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size1;4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[not[size1],size3]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:size3;4:circle
'λx.apply(or[size2,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(size2, filter(filter(x.s, yellow), nor[iff[size1,size2],size2]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:iff[%s,%s];4:size1;4:size2;4:size2
'λx.apply(nand[triangle,or[size2,size3]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size2,filter(filter(x.s, triangle), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(or[apply(same_color,x.o),and[rectangle,not[yellow]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[circle,blue],size3],iota(filter(x.s, and[size2,and[and[circle,nor[green,or[implies[nor[triangle,circle],blue],size3]]],size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:green;4:or[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:triangle;4:circle;4:blue;4:size3;4:size3
'λx.forall(nand[green,yellow],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(iff[yellow,and[not[not[blue]],rectangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nor[yellow,and[blue,triangle]],size3],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, and[not[size3],and[size3,circle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:size3;4:circle
'λx.apply(apply(same_shape,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, apply(same_color,x.o)), apply(same_color,x.o)))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, blue), size2))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(or[size1,rectangle],iota(filter(filter(filter(x.s, or[triangle,apply(same_size,x.o)]), apply(same_color,x.o)), not[and[or[size1,size1],and[size1,rectangle]]])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:size1;4:and[%s,%s];4:size1;4:rectangle
'λx.exists(and[not[implies[apply(same_size,x.o),green]],green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:green;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, rectangle), size3), yellow), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:yellow;4:green
'λx.apply(and[or[rectangle,apply(same_color,x.o)],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.forall(nand[or[green,circle],not[apply(same_shape,x.o)]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:green;4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, apply(size-gt,iota(x.s))), not[size2]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[or[circle,circle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:green;1:%s.o;2:x
'λx.apply(and[and[blue,yellow],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size3;1:%s.o;2:x
'λx.forall(and[size2,rectangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.exists(and[size1,iff[size2,size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:iff[%s,%s];4:size2;4:size3;3:%s.s;2:x
'λx.apply(or[blue,or[size3,iff[size3,and[and[yellow,green],size3]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:iff[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[or[yellow,green],yellow]), rectangle), apply(same_shape,x.o)), triangle), size3), size1), and[yellow,size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:yellow;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size3;4:size1;4:and[%s,%s];4:yellow;4:size2
'λx.apply(or[rectangle,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[green]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:blue
'λx.apply(and[triangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[circle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, yellow), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.exists(size2, filter(filter(x.s, yellow), size2))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(or[and[and[not[size3],and[triangle,or[size1,apply(same_color,x.o)]]],apply(same_shape,iota(x.s))],or[green,and[rectangle,nand[triangle,size3]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(nand[yellow,nor[and[not[yellow],blue],blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:blue;4:blue;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[triangle,not[and[blue,triangle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[circle,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3
'λx.apply(iff[size3,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, circle), blue), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:circle
'λx.forall(triangle,filter(filter(x.s, size1), size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.exists(implies[size1,and[apply(same_color,x.o),implies[size3,blue]]], filter(x.s, size1))'	0:exists(%s, %s);4:implies[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[and[apply(same_size,iota(x.s)),circle],implies[blue,blue]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:blue;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(nor[size2,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[and[apply(size-gt,x.o),and[circle,size2]]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, implies[apply(same_shape,iota(x.s)),triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(x.s, and[and[and[green,yellow],green],triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:green;4:triangle
'λx.apply(or[or[or[rectangle,blue],yellow],and[green,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:yellow;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, nand[triangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:blue
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), green), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(or[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[blue,or[apply(size-geq,iota(filter(x.s, circle))),blue]],or[circle,not[circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:or[%s,%s];4:circle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(filter(x.s, not[triangle]), apply(size-leq,iota(filter(filter(x.s, and[triangle,rectangle]), and[triangle,rectangle]))))))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, circle), or[apply(same_shape,x.o),not[and[and[size2,size2],yellow]]]), or[blue,size3]), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:yellow;4:or[%s,%s];4:blue;4:size3;4:size2
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, not[and[green,size2]]), blue), size1), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:size2;4:blue;4:size1;4:yellow
'λx.apply(nand[triangle,or[and[circle,size1],green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:green;1:%s.o;2:x
'λx.apply(not[and[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[triangle,and[size2,iff[size2,apply(same_shape,iota(x.s))]]],iota(filter(filter(filter(x.s, triangle), circle), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:triangle
'λx.exists(nor[and[not[green],and[size2,size3]],blue], filter(x.s, or[green,circle]))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:size2;4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle
'λx.forall(iff[and[size3,circle],size2],filter(x.s, and[not[apply(size-gt,iota(x.s))],blue]))'	0:forall(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(not[apply(size-geq,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, blue), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(iff[nor[blue,green],size2],iota(filter(x.s, not[or[blue,or[apply(same_shape,iota(x.s)),circle]]])))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:blue;4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(and[and[rectangle,blue],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:size3;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(filter(filter(x.s, circle), green), and[size1,rectangle]), green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:and[%s,%s];4:size1;4:rectangle;4:green
'λx.empty(filter(filter(x.s, blue), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.empty(filter(filter(x.s, blue), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.empty(filter(filter(x.s, blue), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.empty(filter(filter(x.s, blue), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(or[implies[rectangle,blue],not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(filter(x.s, size3), green), yellow), size2), and[and[not[yellow],rectangle],size2]), apply(same_shape,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:yellow;4:size2;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:rectangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(size1,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(implies[apply(same_color,iota(x.s)),triangle],iota(filter(filter(x.s, iff[rectangle,circle]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size2,size1],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[size2,size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(implies[size2,apply(same_shape,iota(filter(x.s, size2)))], filter(x.s, nand[nor[or[size2,not[rectangle]],triangle],rectangle]))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:rectangle;4:triangle;4:rectangle
'λx.apply(nand[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),apply(same_color,iota(filter(x.s, or[green,size3])))],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[size1,yellow],iota(filter(x.s, apply(size-gt,iota(filter(x.s, and[size1,size3]))))))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.apply(or[apply(same_color,iota(filter(filter(x.s, triangle), apply(same_color,x.o)))),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,iff[yellow,and[yellow,size1]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, blue), or[size1,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:size3
'λx.apply(not[apply(same_size,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[not[size1],rectangle],iota(filter(x.s, implies[circle,not[circle]])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:not[%s];4:circle
'λx.exists(yellow, filter(x.s, apply(size-gt,iota(x.s))))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(apply(size-geq,iota(x.s)),iota(filter(x.s, or[green,green])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:green
'λx.forall(and[size2,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(not[or[iff[not[apply(same_size,x.o)],not[size2]],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), and[not[or[not[triangle],blue]],triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:triangle;4:blue;4:triangle
'λx.exists(or[nand[circle,apply(same_size,x.o)],rectangle], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, rectangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(x.s, and[size3,circle]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;4:size2
'λx.apply(not[not[and[circle,and[blue,or[triangle,size3]]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size1,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(and[size1,and[size1,apply(same_shape,iota(x.s))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[size1,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[size3,circle],size2],iota(filter(x.s, not[or[blue,size3]])))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:blue;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(or[size2,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[blue,apply(same_color,x.o)]],iota(filter(x.s, nand[circle,triangle])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:triangle
'λx.apply(and[not[apply(same_shape,iota(x.s))],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), green), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:size2
'λx.empty(filter(filter(filter(filter(x.s, size1), size3), triangle), apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[not[apply(same_shape,x.o)],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[and[blue,blue],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, rectangle), size2))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[apply(size-geq,iota(filter(x.s, apply(same_shape,iota(filter(filter(x.s, size2), not[nor[size2,size2]])))))),nor[triangle,circle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:nor[%s,%s];4:size2;4:size2;4:nor[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[triangle,blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, and[triangle,size1]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1;4:size3
'λx.forall(and[size3,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.apply(not[nor[and[rectangle,green],not[blue]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(x.s), filter(x.s, apply(same_shape,iota(filter(filter(filter(x.s, not[apply(same_size,iota(filter(x.s, yellow)))]), blue), blue)))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:blue
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[rectangle,blue],iota(filter(filter(filter(x.s, triangle), or[size2,size3]), size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size2;4:size3;4:size3
'λx.forall(size2,filter(filter(x.s, size3), triangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.empty(filter(x.s, and[circle,and[size2,implies[and[nand[triangle,apply(same_shape,iota(x.s))],size1],apply(same_color,iota(filter(x.s, yellow)))]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:implies[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[circle,and[or[apply(same_shape,iota(x.s)),size2],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[blue,and[triangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(iff[not[size2],and[size1,not[green]]],iota(filter(filter(filter(x.s, triangle), rectangle), not[yellow])))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size1;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:not[%s];4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size1,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[iff[green,not[apply(same_shape,iota(x.s))]]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.forall(nor[and[or[blue,circle],yellow],blue],filter(filter(x.s, circle), green))'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:yellow;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(implies[rectangle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[triangle,yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow
'λx.empty(filter(filter(x.s, and[and[apply(same_color,iota(x.s)),and[iff[and[size1,green],blue],size3]],size1]), or[size1,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:green;4:blue;4:size3;4:size1;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(circle,iota(filter(x.s, and[triangle,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(not[rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size3), yellow), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:rectangle
'λx.contains(iota(filter(x.s, size2)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(apply(same_shape,iota(filter(x.s, yellow))),filter(filter(x.s, blue), apply(same_shape,iota(filter(filter(x.s, or[size2,or[yellow,size3]]), rectangle)))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size3;4:rectangle
'λx.empty(filter(filter(x.s, size2), and[blue,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:blue;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, nor[and[circle,green],circle]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:circle;4:green;4:circle;4:size1
'λx.apply(or[apply(same_size,x.o),rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[size2], x.s)'	0:exists(%s, %s);4:not[%s];4:size2;3:%s.s;2:x
'λx.exists(not[size1], x.s)'	0:exists(%s, %s);4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(not[size3], x.s)'	0:exists(%s, %s);4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), iff[triangle,blue]), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:triangle;4:blue;4:triangle
'λx.apply(not[iff[triangle,apply(same_size,iota(x.s))]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(iff[and[implies[rectangle,and[size1,green]],or[and[apply(same_shape,iota(x.s)),or[size1,triangle]],green]],and[size3,not[circle]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:green;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:triangle;4:green;4:and[%s,%s];4:size3;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[apply(same_size,x.o),nand[circle,size2]], filter(x.s, size3))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[and[yellow,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), x.s)'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[apply(size-gt,iota(x.s))],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[not[or[or[not[not[circle]],yellow],rectangle]],rectangle],iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:yellow;4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, apply(size-geq,x.o)), iff[green,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:iff[%s,%s];4:green;4:green
'λx.apply(nand[size2,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[circle,iff[or[green,triangle],and[apply(same_color,iota(x.s)),yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:or[%s,%s];4:green;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, blue), and[size3,size3]), size1), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size3;4:size3;4:size1;4:size1
'λx.apply(apply(same_size,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size1,nor[green,apply(same_size,iota(x.s))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[size3,size2],or[yellow,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[circle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), apply(size-lt,iota(filter(filter(filter(filter(x.s, triangle), and[implies[rectangle,nor[nor[size1,size2],size3]],iff[circle,size2]]), rectangle), size2)))), not[or[size1,circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:size3;4:iff[%s,%s];4:circle;4:size2;4:rectangle;4:size2;4:not[%s];4:or[%s,%s];4:size1;4:circle
'λx.apply(nor[green,or[and[triangle,iff[triangle,not[blue]]],or[triangle,yellow]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:triangle;4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size3,not[apply(same_color,iota(filter(filter(x.s, rectangle), implies[size2,triangle])))]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, not[apply(same_color,iota(x.s))]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, circle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(and[green,blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[rectangle,not[apply(same_size,iota(filter(x.s, rectangle)))]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[circle,green],iota(filter(filter(filter(x.s, yellow), green), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:size2
'λx.apply(and[and[and[or[circle,and[apply(same_color,iota(x.s)),size1]],and[yellow,circle]],yellow],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:yellow;4:circle;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[apply(same_color,x.o),yellow],and[and[green,or[size2,or[nand[size2,green],size1]]],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:or[%s,%s];4:nand[%s,%s];4:size2;4:green;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[nand[rectangle,size1],size3],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size1;4:size3;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, implies[triangle,size3]), and[triangle,rectangle]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:triangle;4:rectangle;4:size2
'λx.apply(or[or[circle,implies[size1,rectangle]],rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:implies[%s,%s];4:size1;4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(green,iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[nor[or[yellow,size1],apply(same_color,x.o)],apply(same_size,x.o)],iota(filter(filter(filter(filter(x.s, or[triangle,size1]), apply(same_color,x.o)), apply(size-lt,x.o)), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3
'λx.exists(size2, filter(filter(x.s, green), rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.forall(size3,filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), circle), size2), triangle), or[and[apply(same_size,iota(x.s)),circle],iff[and[nor[circle,nor[size2,green]],green],size1]]), not[or[green,and[blue,apply(size-lt,x.o)]]]), and[size1,rectangle]), triangle), apply(size-geq,x.o)), size2), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:size2;4:triangle;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:nor[%s,%s];4:size2;4:green;4:green;4:size1;4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size1;4:rectangle;4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;4:green
'λx.apply(apply(size-lt,iota(x.s)),iota(filter(filter(x.s, size3), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.contains(iota(x.s), filter(x.s, apply(same_color,iota(filter(x.s, blue)))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(size-gt,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(and[and[rectangle,size1],and[and[not[size1],blue],size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:blue;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[triangle,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(and[blue,circle],iota(filter(filter(filter(filter(filter(filter(filter(x.s, size2), size2), triangle), green), nand[triangle,rectangle]), and[not[nor[apply(same_shape,x.o),green]],blue]), not[or[size1,and[not[or[triangle,circle]],and[size3,or[or[and[and[size1,size2],and[apply(size-leq,iota(x.s)),rectangle]],size3],or[nand[yellow,size2],rectangle]]]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:triangle;4:green;4:nand[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:blue;4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size3;4:or[%s,%s];4:nand[%s,%s];4:yellow;4:size2;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(nor[size2,not[apply(same_size,iota(filter(filter(x.s, and[blue,and[size2,circle]]), blue)))]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(filter(filter(filter(x.s, yellow), or[blue,green]), size3), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:green;4:size3;4:green
'λx.apply(yellow,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(or[blue,not[circle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(or[blue,yellow],filter(x.s, size3))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, and[size3,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.apply(implies[yellow,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[yellow,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, implies[blue,and[size2,size3]]), apply(size-geq,iota(x.s))), not[nor[circle,nand[size2,green]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:and[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:circle;4:nand[%s,%s];4:size2;4:green
'λx.apply(green,iota(filter(filter(x.s, rectangle), apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), or[green,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:green;4:size3
'λx.apply(size3,iota(filter(x.s, and[or[yellow,green],triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:triangle
'λx.exists(iff[green,not[and[apply(size-leq,x.o),size3]]], filter(filter(x.s, nand[rectangle,and[size1,blue]]), or[apply(size-lt,x.o),and[apply(same_color,iota(filter(filter(filter(filter(x.s, circle), apply(size-leq,x.o)), blue), size3))),or[green,triangle]]]))'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:blue;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:size3;4:or[%s,%s];4:green;4:triangle
'λx.apply(or[yellow,or[nand[and[green,rectangle],nand[rectangle,circle]],and[apply(size-leq,x.o),rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:nand[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), not[triangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle
'λx.apply(nand[size1,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(and[and[size1,triangle],green],iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.empty(filter(filter(filter(filter(x.s, implies[implies[apply(same_shape,iota(x.s)),circle],apply(same_shape,iota(x.s))]), size2), size3), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:size3;4:size1
'λx.apply(yellow,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.forall(triangle,filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[and[yellow,circle],size3],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size3;4:green;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(x.s, rectangle), size1), size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:size3
'λx.apply(or[rectangle,apply(same_shape,iota(filter(x.s, and[green,size3])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, and[implies[blue,size1],size3]), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:blue;4:size1;4:size3;4:rectangle
'λx.forall(rectangle,filter(x.s, or[not[size3],yellow]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size3;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.empty(filter(x.s, and[or[size1,size1],apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(size-lt,iota(filter(filter(filter(x.s, and[size3,green]), green), triangle)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:green;4:triangle
'λx.apply(or[apply(same_size,x.o),triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[iff[size1,or[and[circle,triangle],apply(same_color,iota(filter(x.s, triangle)))]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[implies[and[circle,blue],implies[size1,size1]],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:blue;4:implies[%s,%s];4:size1;4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,x.o),circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size3],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[not[rectangle],size3],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,circle],iota(filter(filter(filter(x.s, apply(size-gt,iota(filter(x.s, rectangle)))), or[size1,not[circle]]), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size1;4:not[%s];4:circle;4:triangle
'λx.apply(or[size1,or[circle,circle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(and[apply(same_color,x.o),blue], filter(filter(x.s, size3), circle))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, iff[nand[size3,green],blue]), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:size3;4:green;4:blue;4:yellow
'λx.apply(or[blue,apply(size-lt,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, size1), apply(size-leq,iota(filter(filter(x.s, blue), nor[yellow,and[size1,nand[size2,apply(size-leq,x.o)]]]))))))), nand[size3,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:yellow
'λx.forall(not[not[blue]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:blue;3:%s.s;2:x
'λx.empty(filter(x.s, and[size3,and[apply(same_shape,x.o),blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(implies[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, triangle), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.exists(size3, filter(filter(filter(x.s, blue), triangle), apply(same_color,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[size3,and[rectangle,size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nand[size1,and[circle,size2]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), size1), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:yellow
'λx.apply(or[yellow,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[implies[not[triangle],apply(same_color,x.o)],nand[or[triangle,and[rectangle,blue]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:blue;4:yellow;1:%s.o;2:x
'λx.exists(or[blue,nand[and[rectangle,not[iff[and[size1,size1],size1]]],yellow]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:size1;4:size1;4:yellow;3:%s.s;2:x
'λx.apply(and[green,and[and[not[apply(same_size,iota(x.s))],size3],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(filter(x.s, iff[size3,circle]), size2)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:circle;4:size2
'λx.empty(filter(filter(filter(x.s, size2), size1), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:triangle
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, not[green]), triangle), circle), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:triangle;4:circle;4:triangle
'λx.apply(not[not[or[not[apply(same_size,iota(filter(filter(filter(filter(x.s, yellow), circle), green), triangle)))],and[circle,triangle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:green;4:triangle;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(implies[and[or[size3,yellow],blue],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(iff[apply(same_color,x.o),and[not[circle],circle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),iota(filter(filter(filter(x.s, not[apply(same_color,x.o)]), size3), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:size3
'λx.forall(or[circle,apply(same_color,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[apply(same_shape,iota(x.s))],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[size3,not[size2]],and[green,circle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:size2;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(apply(same_color,x.o),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(filter(x.s, or[green,green]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:green;4:circle
'λx.apply(and[size1,size3],iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, iff[and[size2,size2],triangle]), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size2;4:size2;4:triangle;4:blue
'λx.forall(and[size1,not[circle]],filter(x.s, size1))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[not[apply(same_shape,iota(x.s))],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, and[iff[triangle,apply(same_size,iota(filter(x.s, circle)))],circle]), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:size1
'λx.apply(iff[yellow,yellow],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(yellow,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(or[circle,not[nor[apply(same_color,x.o),green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(not[not[size2]],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(triangle,iota(filter(x.s, not[not[rectangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(x.s, size2), and[size1,and[blue,size1]]), size3), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:size1;4:size3;4:yellow
'λx.apply(green,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(or[and[size3,size3],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:rectangle;1:%s.o;2:x
'λx.forall(implies[nand[not[blue],size1],not[yellow]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:size1;4:not[%s];4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(x.s, or[triangle,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle
'λx.contains(x.o, filter(x.s, or[circle,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle
'λx.empty(filter(filter(filter(x.s, size3), size2), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:circle
'λx.apply(nor[size3,not[and[rectangle,circle]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nor[and[size1,nor[yellow,size1]],and[blue,or[size2,and[not[circle],blue]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:nor[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(apply(size-lt,x.o), filter(x.s, nor[circle,yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:yellow
'λx.apply(and[or[rectangle,green],not[and[and[yellow,or[rectangle,yellow]],yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:yellow;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, triangle), not[apply(size-lt,iota(x.s))]), circle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:circle;4:size3
'λx.forall(and[size2,and[green,triangle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), circle), implies[blue,blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:implies[%s,%s];4:blue;4:blue
'λx.apply(size2,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(not[and[circle,and[rectangle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[size3,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(or[not[triangle],or[and[implies[blue,circle],yellow],and[and[circle,size3],nand[and[apply(size-leq,iota(filter(filter(filter(x.s, circle), yellow), apply(same_color,iota(x.s))))),apply(same_color,iota(filter(x.s, yellow)))],rectangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[blue,apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, rectangle), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(size2,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.contains(iota(x.s), filter(x.s, apply(same_size,iota(filter(x.s, not[circle])))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(apply(size-leq,iota(filter(filter(x.s, size1), not[and[green,size3]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(implies[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],x.o)'	0:apply(%s,%s);4:not[%s];4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, green), apply(size-lt,x.o)), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle
'λx.forall(size1,filter(x.s, and[triangle,green]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.contains(iota(filter(filter(x.s, yellow), or[circle,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(iff[or[nand[size1,size2],nor[size2,yellow]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:size1;4:size2;4:nor[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(not[rectangle], x.s)'	0:exists(%s, %s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),not[and[size1,green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.forall(or[not[yellow],blue],filter(x.s, triangle))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[circle],x.o)'	0:apply(%s,%s);4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[or[blue,triangle],nand[and[not[circle],and[triangle,and[apply(same_color,iota(x.s)),size1]]],implies[triangle,apply(size-lt,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[circle,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), apply(same_color,iota(filter(filter(x.s, size2), not[yellow])))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:yellow
'λx.forall(apply(same_color,x.o),filter(filter(x.s, and[not[green],not[yellow]]), apply(same_color,iota(filter(filter(x.s, size1), green)))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(rectangle,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(and[apply(same_color,iota(x.s)),blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(iff[yellow,circle],iota(filter(filter(filter(filter(x.s, green), or[rectangle,and[and[not[circle],triangle],blue]]), yellow), and[not[apply(size-lt,iota(x.s))],triangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:triangle;4:blue;4:yellow;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(and[yellow,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), size2), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), size3), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size3
'λx.apply(implies[circle,or[not[triangle],triangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size3,and[size1,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.contains(iota(x.s), filter(filter(filter(x.s, blue), yellow), and[and[and[triangle,triangle],triangle],circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:triangle;4:circle
'λx.forall(rectangle,filter(filter(x.s, not[green]), not[apply(same_size,x.o)]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, and[nor[size2,or[and[implies[circle,triangle],or[size3,size1]],triangle]],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:circle;4:triangle;4:or[%s,%s];4:size3;4:size1;4:triangle;4:size1
'λx.exists(yellow, filter(x.s, apply(size-gt,iota(filter(x.s, size1)))))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(filter(x.s, size1), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(or[rectangle,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(x.s, or[size3,and[not[green],or[size1,yellow]]]), apply(same_size,x.o)), size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(nor[and[or[apply(same_color,x.o),circle],iff[size1,and[and[rectangle,not[blue]],circle]]],size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:iff[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:blue;4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[rectangle],iota(filter(filter(filter(x.s, and[not[apply(same_size,x.o)],size2]), blue), apply(size-lt,x.o))))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, triangle), apply(size-gt,iota(x.s))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, nand[circle,and[rectangle,blue]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:blue
'λx.forall(circle,filter(filter(filter(x.s, size3), and[blue,circle]), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:blue;4:circle;4:size1
'λx.apply(nand[or[yellow,nand[and[yellow,size2],or[and[triangle,blue],size1]]],implies[triangle,not[blue]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:size1;4:implies[%s,%s];4:triangle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_size,x.o),iota(filter(x.s, and[and[size1,rectangle],apply(size-leq,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[and[size2,circle],rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:rectangle
'λx.contains(iota(x.s), filter(x.s, apply(same_size,iota(filter(x.s, rectangle)))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[size3,size2],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[triangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[size2,rectangle]), size2), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:size2;4:triangle
'λx.apply(triangle,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(or[and[or[rectangle,apply(same_color,iota(filter(x.s, rectangle)))],size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:circle;1:%s.o;2:x
'λx.forall(nor[rectangle,apply(size-lt,x.o)],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, or[not[yellow],blue]), and[green,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:blue;4:and[%s,%s];4:green;4:triangle
'λx.forall(size2,filter(filter(filter(x.s, size1), size3), and[implies[and[and[size2,or[nand[rectangle,implies[yellow,rectangle]],blue]],apply(same_shape,x.o)],size1],blue]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:implies[%s,%s];4:yellow;4:rectangle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:blue
'λx.apply(and[apply(same_color,iota(x.s)),triangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, not[rectangle]), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:green
'λx.apply(or[apply(same_size,iota(filter(x.s, apply(size-lt,iota(filter(filter(x.s, apply(size-leq,iota(x.s))), size3)))))),size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,and[rectangle,green]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[rectangle,green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[rectangle,or[rectangle,or[triangle,or[and[green,size3],rectangle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:green;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, and[not[or[triangle,green]],yellow]), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, not[size2]))),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[and[nor[size1,rectangle],size1],size3],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:rectangle;4:size1;4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, size3), size2)))), triangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:triangle
'λx.apply(or[size1,size1],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(apply(same_size,x.o), filter(x.s, or[not[size3],not[triangle]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size3;4:not[%s];4:triangle
'λx.forall(size3,filter(filter(filter(x.s, size1), blue), not[size1]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:not[%s];4:size1
'λx.apply(not[not[and[size1,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, circle), and[size1,not[nand[blue,size2]]]), size1), size3), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:not[%s];4:nand[%s,%s];4:blue;4:size2;4:size1;4:size3;4:size3
'λx.apply(not[and[rectangle,triangle]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[green,or[size1,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(nand[apply(same_shape,x.o),and[size3,nor[size2,size1]]], filter(x.s, implies[apply(size-lt,x.o),and[yellow,size3]]))'	0:exists(%s, %s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size3;4:nor[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(nand[blue,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[and[rectangle,blue],and[green,apply(same_shape,x.o)]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.forall(and[not[apply(same_shape,x.o)],triangle],filter(x.s, size3))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(x.s, not[rectangle]), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:rectangle
'λx.apply(and[not[and[not[rectangle],rectangle]],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[implies[size3,blue],implies[triangle,green]]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:implies[%s,%s];4:triangle;4:green;4:green
'λx.forall(size1,filter(filter(x.s, rectangle), size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(size1,iota(filter(filter(x.s, blue), or[size1,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(or[not[not[implies[rectangle,rectangle]]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), size1), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:triangle
'λx.apply(iff[nor[and[size1,size3],iff[blue,or[or[yellow,not[triangle]],rectangle]]],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:size3;4:iff[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:triangle;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[and[or[blue,not[size1]],apply(size-geq,iota(x.s))],iff[nor[triangle,nor[size1,not[green]]],not[not[yellow]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:nor[%s,%s];4:triangle;4:nor[%s,%s];4:size1;4:not[%s];4:green;4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, or[or[circle,apply(same_size,iota(filter(filter(x.s, and[green,circle]), blue)))],green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:blue;4:green
'λx.apply(triangle,iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(implies[green,yellow],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,nor[green,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(green,iota(filter(filter(filter(x.s, green), apply(same_shape,iota(filter(x.s, rectangle)))), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), and[iff[blue,blue],apply(size-gt,iota(filter(filter(filter(x.s, and[circle,rectangle]), and[triangle,and[size1,triangle]]), apply(same_color,x.o))))])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:iff[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), size2), apply(size-lt,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[and[yellow,circle],iff[green,yellow]],size1],iota(filter(filter(x.s, and[or[apply(same_size,x.o),size1],green]), nand[rectangle,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:iff[%s,%s];4:green;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:green;4:nand[%s,%s];4:rectangle;4:circle
'λx.apply(size1,iota(filter(x.s, and[not[iff[size3,size3]],and[size3,not[and[size2,green]]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:size3;4:size3;4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:size2;4:green
'λx.apply(and[yellow,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[size1,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, rectangle), triangle), circle))),iota(filter(x.s, not[not[apply(size-leq,x.o)]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[not[apply(size-gt,x.o)],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(filter(x.s, size2)))],iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[circle,not[nand[rectangle,not[triangle]]]],not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:nand[%s,%s];4:rectangle;4:not[%s];4:triangle;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(filter(filter(x.s, circle), circle), green), size1))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:green;4:size1
'λx.forall(nand[not[circle],and[and[triangle,or[size3,size2]],size3]],filter(x.s, size2))'	0:forall(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:size2;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[rectangle,or[yellow,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[rectangle,implies[green,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), size1)), filter(filter(filter(x.s, not[triangle]), or[green,circle]), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:green;4:circle;4:blue
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), not[triangle]), and[circle,triangle]), circle), size2), apply(same_shape,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle;4:and[%s,%s];4:circle;4:triangle;4:circle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[circle,size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, apply(same_shape,iota(filter(filter(filter(x.s, triangle), circle), yellow))))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:yellow
'λx.contains(x.o, filter(filter(x.s, nand[iff[apply(same_size,x.o),triangle],triangle]), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:triangle;4:green
'λx.exists(and[size3,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(and[size1,or[apply(same_color,iota(x.s)),circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.forall(or[not[rectangle],green],filter(x.s, green))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(blue, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[nor[apply(same_size,x.o),yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, or[or[yellow,rectangle],circle]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:circle;4:rectangle
'λx.exists(not[circle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(x.s, yellow), size2))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(and[apply(same_shape,iota(x.s)),or[and[triangle,triangle],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size1), not[and[size2,or[size2,triangle]]]), size1), triangle), size2), yellow), and[size2,iff[size3,rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:triangle;4:size1;4:triangle;4:size2;4:yellow;4:and[%s,%s];4:size2;4:iff[%s,%s];4:size3;4:rectangle
'λx.apply(or[apply(size-geq,x.o),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_size,iota(filter(x.s, iff[green,and[yellow,yellow]])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(not[rectangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, implies[circle,blue]), or[blue,not[circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:blue;4:or[%s,%s];4:blue;4:not[%s];4:circle
'λx.forall(green,filter(filter(x.s, triangle), circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(or[triangle,apply(size-geq,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[not[triangle],size1],triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[not[triangle],blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size1],iota(filter(filter(filter(x.s, size2), yellow), or[size2,yellow])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:or[%s,%s];4:size2;4:yellow
'λx.apply(nand[not[or[not[not[apply(same_size,iota(filter(filter(x.s, size3), or[green,size2])))]],blue]],or[size2,nor[triangle,triangle]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:green;4:size2;4:blue;4:or[%s,%s];4:size2;4:nor[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[yellow,not[size3]],iota(filter(filter(filter(x.s, circle), and[blue,not[apply(same_shape,iota(filter(x.s, apply(same_size,x.o))))]]), and[not[yellow],or[size3,blue]])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:size3;4:blue
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), or[size2,blue]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size2;4:blue;4:blue
'λx.apply(nand[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size2,green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,or[apply(size-leq,x.o),iff[yellow,size1]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:iff[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[yellow,size3]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[implies[circle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[size2,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size2,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[size2,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size3), and[size3,green]), not[not[or[yellow,yellow]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size3;4:green;4:not[%s];4:not[%s];4:or[%s,%s];4:yellow;4:yellow
'λx.apply(apply(size-leq,iota(filter(x.s, not[size1]))),iota(filter(filter(filter(x.s, blue), green), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:yellow
'λx.apply(and[size1,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[size1,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[size1,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(and[blue,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[size3,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(and[size3,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[size3,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, size1), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.exists(not[and[size3,size1]], filter(x.s, size2))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size3;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[yellow,size3], filter(x.s, nand[size3,or[or[circle,rectangle],green]]))'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:green
'λx.apply(not[not[nand[apply(same_shape,iota(x.s)),triangle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, and[size3,yellow]), size3), not[triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:size3;4:not[%s];4:triangle
'λx.apply(and[triangle,and[apply(same_size,iota(filter(x.s, or[blue,yellow]))),triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[green,green]), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;4:size2
'λx.apply(or[triangle,apply(same_size,x.o)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size2,not[size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size1,or[and[green,apply(same_size,iota(x.s))],iff[blue,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), rectangle), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:green
'λx.apply(and[size1,not[size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nor[green,or[rectangle,green]],not[size2]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:green;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(x.s, and[implies[size1,implies[not[circle],and[not[triangle],triangle]]],size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size1;4:implies[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:triangle;4:triangle;4:size3
'λx.exists(not[size1], filter(filter(x.s, nor[triangle,rectangle]), green))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:rectangle;4:green
'λx.apply(implies[not[blue],and[green,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, green), and[not[implies[and[yellow,rectangle],circle]],rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:circle;4:rectangle
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(filter(x.s, blue), circle), yellow), yellow), apply(size-leq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:yellow;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(size1,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(size2,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(size3,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(size3,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.forall(circle,filter(filter(x.s, yellow), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(or[and[implies[size2,blue],size3],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size2;4:blue;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[blue,circle],triangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(not[not[nand[or[triangle,not[size3]],circle]]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:size3;4:circle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, rectangle), not[size2]), size1), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size2;4:size1;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, size3), and[triangle,and[blue,and[blue,and[or[or[size3,green],or[not[triangle],nor[not[and[blue,circle]],iff[triangle,size1]]]],size1]]]]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:green;4:or[%s,%s];4:not[%s];4:triangle;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;4:iff[%s,%s];4:triangle;4:size1;4:size1;4:size2
'λx.apply(rectangle,iota(filter(x.s, not[apply(size-gt,x.o)])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[apply(same_color,iota(filter(x.s, rectangle))),circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(green, filter(filter(filter(filter(filter(x.s, circle), iff[size2,not[triangle]]), size3), nor[and[or[size1,circle],blue],size3]), circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:size2;4:not[%s];4:triangle;4:size3;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:circle;4:blue;4:size3;4:circle
'λx.contains(x.o, filter(x.s, and[blue,not[green]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:green
'λx.exists(size3, filter(x.s, and[not[size1],circle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:circle
'λx.apply(or[blue,iff[apply(same_shape,iota(x.s)),iff[size2,size3]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(and[size2,size2],iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(implies[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.exists(size3, filter(x.s, rectangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(size2, filter(x.s, rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[or[yellow,size2],not[rectangle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(filter(x.s, triangle), and[size2,apply(same_shape,x.o)]), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(and[size2,or[and[triangle,and[and[rectangle,or[and[and[or[size1,blue],and[yellow,and[size2,size3]]],size1],size1]],and[not[apply(same_shape,iota(filter(x.s, green)))],and[triangle,size2]]]],or[green,and[or[green,nand[rectangle,and[circle,rectangle]]],not[not[green]]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:size3;4:size1;4:size1;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:green;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:rectangle;4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.apply(not[and[circle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, size1), apply(size-leq,iota(x.s))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, yellow), and[size3,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size3;4:size3
'λx.exists(implies[rectangle,and[apply(same_shape,x.o),blue]], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(iff[size1,or[circle,rectangle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[not[and[yellow,triangle]],or[apply(same_color,x.o),blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[or[and[size1,not[apply(same_size,x.o)]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(not[and[triangle,circle]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:triangle;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, triangle), nand[triangle,apply(same_shape,iota(x.s))]), yellow), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:triangle
'λx.empty(filter(x.s, not[green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(triangle,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.contains(iota(filter(filter(filter(x.s, triangle), circle), circle)), filter(filter(filter(x.s, apply(same_size,iota(x.s))), apply(same_size,x.o)), not[circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle
'λx.contains(x.o, filter(filter(x.s, implies[green,yellow]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:yellow;4:circle
'λx.apply(iff[size1,and[rectangle,or[apply(same_shape,iota(x.s)),triangle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), triangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:rectangle
'λx.apply(not[and[size1,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), rectangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:rectangle
'λx.apply(not[and[size2,and[size1,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.forall(rectangle,x.s)'	0:forall(%s,%s);4:rectangle;3:%s.s;2:x
'λx.apply(and[size3,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(or[iff[not[nor[size1,apply(same_color,x.o)]],size3],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, and[rectangle,circle]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:triangle;3:%s.s;2:x
'λx.empty(filter(x.s, and[and[circle,size2],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:size1
'λx.apply(and[triangle,size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[apply(same_size,x.o),rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(iff[size3,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),circle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, blue))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, size2), circle), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:yellow
'λx.exists(size2, filter(x.s, blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size3, filter(x.s, blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size1, filter(x.s, blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[green,green], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[size1,blue],iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(nor[triangle,and[yellow,circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, nand[triangle,size2]), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:size2;4:blue
'λx.forall(apply(size-lt,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(or[yellow,rectangle], filter(filter(x.s, implies[implies[and[size1,yellow],size2],implies[apply(same_shape,iota(filter(x.s, or[triangle,size3]))),rectangle]]), circle))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:size2;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:rectangle;4:circle
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, triangle), not[apply(same_color,x.o)]), size2), blue), and[rectangle,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:blue;4:and[%s,%s];4:rectangle;4:triangle
'λx.contains(iota(filter(x.s, iff[green,size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.apply(or[apply(same_size,iota(x.s)),size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size2), apply(same_size,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(green, filter(x.s, rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(triangle, filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[size2,and[and[and[yellow,blue],size1],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size1;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), triangle), rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:rectangle;4:blue
'λx.apply(apply(size-leq,iota(filter(x.s, and[triangle,size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[blue,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,and[size2,and[triangle,apply(same_size,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[yellow,and[and[not[triangle],triangle],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(nor[rectangle,or[triangle,green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, and[size1,circle]), size2))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:size2
'λx.apply(and[and[blue,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[not[or[triangle,size3]]],iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(not[blue],iota(filter(filter(x.s, rectangle), and[blue,size2])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:blue;4:size2
'λx.apply(or[apply(size-gt,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(filter(x.s, size2), apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(not[size3],filter(x.s, nand[blue,apply(same_shape,iota(x.s))]))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, triangle), rectangle), green), and[size3,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:green;4:and[%s,%s];4:size3;4:green
'λx.apply(circle,iota(filter(filter(filter(x.s, and[apply(same_shape,x.o),rectangle]), size1), not[size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:size1;4:not[%s];4:size2
'λx.apply(blue,iota(filter(x.s, not[not[rectangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[not[iff[rectangle,rectangle]]],iota(filter(filter(filter(x.s, size3), apply(size-gt,x.o)), size1)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:iff[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, blue), size2), green), size2), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:green;4:size2;4:blue
'λx.apply(size1,iota(filter(filter(filter(x.s, or[apply(same_shape,x.o),and[size1,green]]), size3), or[size2,or[triangle,size2]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:green;4:size3;4:or[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:size2
'λx.apply(or[green,green],iota(filter(filter(x.s, size2), iff[yellow,not[apply(size-geq,x.o)]])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[triangle,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[size1,blue],iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(circle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(filter(x.s, rectangle), apply(same_shape,iota(filter(x.s, not[size1]))))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.empty(filter(filter(x.s, circle), or[rectangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:rectangle;4:size1
'λx.empty(filter(filter(filter(x.s, size1), size3), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:circle
'λx.apply(size2,iota(filter(x.s, and[size3,size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(apply(same_color,iota(filter(x.s, size2))),iota(filter(filter(filter(x.s, yellow), yellow), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:size2
'λx.apply(or[triangle,or[triangle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(and[not[size2],or[triangle,not[not[and[rectangle,not[size1]]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:triangle;4:not[%s];4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(x.s, yellow), size3), or[and[blue,rectangle],size1]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:or[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:size1
'λx.exists(nor[nor[triangle,not[or[rectangle,triangle]]],apply(same_size,iota(x.s))], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:nor[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, iff[green,implies[size3,green]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:implies[%s,%s];4:size3;4:green
'λx.apply(not[implies[blue,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(not[not[or[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.exists(apply(same_color,iota(x.s)), filter(x.s, and[and[circle,and[blue,rectangle]],not[rectangle]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:rectangle;4:not[%s];4:rectangle
'λx.apply(iff[iff[size1,triangle],yellow],iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:size1;4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(blue,iota(filter(x.s, iff[size1,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size3
'λx.apply(size3,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(x.s, not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(and[green,size3],iota(filter(filter(filter(filter(filter(x.s, green), size2), size2), green), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:size2;4:green;4:rectangle
'λx.apply(not[and[size3,rectangle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(filter(filter(x.s, apply(same_color,iota(x.s))), apply(same_size,x.o)), and[yellow,apply(same_shape,iota(filter(x.s, size3)))]), rectangle)), filter(filter(x.s, triangle), or[blue,and[apply(same_size,iota(x.s)),and[blue,rectangle]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle
'λx.empty(filter(filter(x.s, size1), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size3
'λx.apply(and[blue,or[green,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, rectangle), nor[triangle,circle]), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:triangle;4:circle;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, size2), and[circle,apply(same_size,iota(x.s))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[rectangle,not[green]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(filter(filter(x.s, size3), circle), rectangle), rectangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:rectangle;4:rectangle;4:size1
'λx.exists(size3, filter(filter(x.s, circle), and[rectangle,apply(size-geq,iota(x.s))]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size3,blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:blue;3:%s.s;2:x
'λx.forall(and[and[triangle,apply(same_shape,x.o)],triangle],filter(filter(x.s, implies[and[and[rectangle,size2],size2],and[and[yellow,apply(same_size,iota(x.s))],rectangle]]), apply(same_size,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[and[and[green,green],nand[green,not[green]]],rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:nand[%s,%s];4:green;4:not[%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, size3), implies[size3,triangle]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:size3;4:triangle;4:rectangle
'λx.apply(or[not[circle],not[or[yellow,and[blue,green]]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(x.s, size1), triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:blue
'λx.apply(not[rectangle],iota(filter(filter(x.s, apply(same_shape,iota(x.s))), nand[size3,apply(same_color,x.o)])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, apply(size-lt,iota(x.s))), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, not[size2]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2
'λx.empty(filter(x.s, not[apply(same_shape,iota(x.s))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(filter(x.s, size3), not[or[blue,rectangle]])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:or[%s,%s];4:blue;4:rectangle
'λx.apply(not[size2],iota(filter(filter(filter(x.s, or[circle,size1]), or[and[size2,blue],circle]), size3)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1;4:or[%s,%s];4:and[%s,%s];4:size2;4:blue;4:circle;4:size3
'λx.apply(or[or[size3,apply(same_size,x.o)],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(not[implies[circle,and[or[rectangle,size3],yellow]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(filter(filter(x.s, and[blue,iff[circle,apply(same_size,iota(filter(filter(filter(x.s, iff[or[iff[size2,circle],size2],green]), triangle), circle)))]]), blue), size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:size2;4:circle;4:size2;4:green;4:triangle;4:circle;4:blue;4:size3
'λx.apply(and[size3,blue],iota(filter(filter(filter(x.s, size3), triangle), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:size3
'λx.forall(or[size3,not[size1]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(and[rectangle,or[yellow,apply(size-gt,iota(filter(filter(filter(x.s, apply(size-leq,iota(x.s))), blue), triangle)))]], filter(filter(x.s, rectangle), green))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(size2,iota(filter(x.s, and[and[size2,size3],apply(size-lt,x.o)])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,iota(x.s))), apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(filter(filter(filter(x.s, green), size2), blue), blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:blue;4:blue
'λx.apply(and[or[apply(same_size,iota(filter(x.s, circle))),nor[blue,and[apply(same_size,x.o),and[green,or[circle,rectangle]]]]],yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(x.s, size3), size3), triangle), apply(same_color,x.o)), blue), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue
'λx.apply(and[size3,nor[green,yellow]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nor[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,iota(filter(x.s, and[blue,not[circle]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[triangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[or[rectangle,circle],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,implies[size1,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:implies[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), blue), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:triangle
'λx.apply(apply(size-lt,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size3,nand[or[and[nand[and[nor[rectangle,apply(size-geq,iota(x.s))],yellow],or[size2,or[nand[or[and[yellow,and[green,size1]],nand[size3,size1]],size3],apply(same_shape,iota(filter(filter(x.s, yellow), triangle)))]]],size3],green],size1]],circle],iota(filter(x.s, and[and[not[size3],circle],size1])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size2;4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:size1;4:nand[%s,%s];4:size3;4:size1;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:size3;4:green;4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:circle;4:size1
'λx.exists(not[and[circle,rectangle]], filter(x.s, not[size2]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:circle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[size2,and[size1,and[triangle,rectangle]]],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(triangle, filter(x.s, triangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(triangle,filter(x.s, size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(triangle,filter(x.s, size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[apply(size-lt,x.o),size2],size1],iota(filter(filter(filter(filter(x.s, size2), implies[nor[yellow,size1],or[size2,triangle]]), and[and[not[rectangle],apply(same_shape,iota(filter(filter(filter(x.s, blue), size2), blue)))],triangle]), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:nor[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:blue;4:triangle;4:yellow
'λx.apply(not[nor[or[and[yellow,iff[apply(same_size,iota(x.s)),apply(same_color,x.o)]],blue],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), and[triangle,blue]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:triangle;4:blue;4:green
'λx.contains(x.o, filter(filter(x.s, size2), or[triangle,and[size2,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(or[and[yellow,or[or[size2,and[and[triangle,apply(size-leq,iota(x.s))],size2]],rectangle]],not[and[green,size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:size2;4:rectangle;4:not[%s];4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(iff[green,implies[apply(same_shape,iota(filter(x.s, or[or[not[nor[size1,blue]],yellow],size3]))),size2]],iota(filter(x.s, iff[blue,circle])))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:size1;4:blue;4:yellow;4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:circle
'λx.empty(filter(filter(filter(x.s, triangle), and[yellow,blue]), apply(same_size,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[or[not[not[green]],or[yellow,yellow]]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:not[%s];4:green;4:or[%s,%s];4:yellow;4:yellow;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), size1), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:triangle;3:%s.s;2:x
'λx.apply(nor[green,and[and[size1,green],and[rectangle,and[blue,not[apply(size-geq,iota(x.s))]]]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, nor[apply(same_color,iota(x.s)),circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.forall(size2,filter(filter(filter(x.s, size3), size1), blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:blue
'λx.apply(blue,iota(filter(x.s, and[and[blue,triangle],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:rectangle
'λx.apply(blue,iota(filter(x.s, nand[not[triangle],implies[or[green,yellow],or[not[and[yellow,or[or[yellow,blue],rectangle]]],green]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:triangle;4:implies[%s,%s];4:or[%s,%s];4:green;4:yellow;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:rectangle;4:green
'λx.apply(not[and[green,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, implies[and[yellow,yellow],or[or[rectangle,apply(same_shape,iota(filter(filter(filter(x.s, green), size2), and[size3,blue])))],size3]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:and[%s,%s];4:size3;4:blue;4:size3
'λx.exists(and[not[and[size1,not[apply(size-lt,iota(x.s))]]],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(nand[size3,rectangle],iota(filter(x.s, and[apply(same_color,iota(x.s)),and[or[and[circle,triangle],yellow],blue]])))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:yellow;4:blue
'λx.exists(blue, filter(x.s, not[yellow]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(or[not[circle],apply(size-geq,x.o)], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[nand[circle,and[implies[apply(size-leq,iota(x.s)),and[apply(size-gt,iota(filter(x.s, triangle))),size3]],yellow]],or[blue,rectangle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:yellow;4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(x.s, or[size1,size1]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size1;4:size2
'λx.forall(blue,filter(x.s, triangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[blue,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size1,implies[yellow,or[yellow,iff[size1,green]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:implies[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:iff[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(and[blue,size1],iota(filter(filter(x.s, size1), and[not[triangle],yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:not[%s];4:triangle;4:yellow
'λx.apply(and[rectangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, or[implies[size2,triangle],or[yellow,green]]), yellow), yellow), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:size2;4:triangle;4:or[%s,%s];4:yellow;4:green;4:yellow;4:yellow;4:green
'λx.exists(and[green,iff[size3,size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:iff[%s,%s];4:size3;4:size1;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[size1,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.apply(or[and[size3,green],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, circle), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, apply(size-lt,iota(filter(filter(x.s, and[rectangle,blue]), not[apply(same_size,iota(x.s))])))), size2), yellow), apply(same_size,iota(filter(x.s, size1)))), size1))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(or[and[yellow,triangle],and[not[and[apply(same_color,x.o),size1]],and[iff[triangle,size3],and[triangle,size1]]]],iota(filter(filter(filter(x.s, rectangle), circle), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, size1), size2), iff[rectangle,size1])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:iff[%s,%s];4:rectangle;4:size1
'λx.contains(iota(x.s), filter(x.s, and[circle,triangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle
'λx.apply(or[not[rectangle],apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size2), apply(same_shape,iota(x.s))), apply(same_color,x.o)), or[blue,size1]), and[and[size1,not[triangle]],green]), yellow), apply(same_size,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size1;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:green;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(x.s, implies[triangle,apply(same_shape,x.o)]), size1), triangle), blue), or[rectangle,size3]), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:triangle;4:blue;4:or[%s,%s];4:rectangle;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-gt,iota(x.s)),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(x.s, or[and[not[not[rectangle]],and[apply(same_color,x.o),not[size3]]],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[green,green],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[blue,or[size3,not[and[size1,blue]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, size3), triangle), rectangle), rectangle), and[apply(same_size,iota(x.s)),size1]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:rectangle;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:yellow
'λx.forall(blue,filter(x.s, and[size1,size2]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.contains(iota(filter(filter(filter(x.s, blue), circle), or[not[size3],green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:or[%s,%s];4:not[%s];4:size3;4:green;3:%s.s;2:x
'λx.forall(not[and[size3,size1]],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(size-lt,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(size-leq,iota(filter(x.s, size3))),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;1:%s.o;2:x
'λx.apply(and[not[triangle],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(rectangle,filter(x.s, size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(rectangle,filter(x.s, size3))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(implies[size1,blue], filter(x.s, size3))'	0:exists(%s, %s);4:implies[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[rectangle,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), and[rectangle,not[apply(same_color,iota(filter(x.s, not[green])))]]), and[not[yellow],or[size3,blue]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:size3;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[apply(same_shape,x.o),nor[or[blue,and[rectangle,yellow]],or[circle,green]]],apply(size-gt,x.o)],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:circle;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,and[yellow,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, blue), or[size3,green]), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size3;4:green;4:triangle
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, triangle), implies[size3,and[and[size3,green],circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:circle
'λx.contains(iota(filter(x.s, and[blue,green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.exists(size3, filter(filter(x.s, circle), yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(implies[blue,size3],iota(filter(x.s, not[and[circle,rectangle]])))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:rectangle
'λx.forall(blue,filter(x.s, green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(x.s, size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(blue,filter(x.s, size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(x.s, size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[and[size2,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[and[circle,not[and[rectangle,triangle]]],and[size3,size3]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:size3;4:size3;3:%s.s;2:x
'λx.forall(or[triangle,and[and[not[size3],not[apply(same_color,x.o)]],apply(size-leq,x.o)]],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[blue],iota(filter(filter(filter(x.s, rectangle), yellow), not[nor[not[and[size2,green]],size1]])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:not[%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:green;4:size1
'λx.apply(or[triangle,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, and[blue,rectangle]), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), or[size3,rectangle]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size3;4:rectangle;4:green
'λx.apply(nand[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[and[rectangle,green],size2],or[and[circle,not[rectangle]],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:size2;4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(filter(filter(x.s, and[size3,triangle]), apply(size-gt,iota(filter(filter(x.s, yellow), size2)))))),green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[yellow],and[blue,or[size2,size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(not[and[and[apply(same_color,iota(x.s)),triangle],circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,green],iff[or[blue,and[apply(same_shape,x.o),and[triangle,and[size3,and[blue,and[and[or[green,size3],or[and[and[yellow,and[blue,and[not[triangle],triangle]]],green],or[size2,nand[apply(same_color,x.o),or[triangle,rectangle]]]]],triangle]]]]]],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:iff[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:size3;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:triangle;4:triangle;4:green;4:or[%s,%s];4:size2;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:rectangle;4:triangle;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, yellow), rectangle), and[triangle,or[size3,iff[apply(same_size,x.o),and[circle,size2]]]]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:size2;4:rectangle
'λx.apply(and[apply(same_color,x.o),rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, and[yellow,yellow]), or[circle,apply(size-gt,iota(filter(filter(x.s, blue), size1)))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.exists(apply(same_shape,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[iff[blue,size1]],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[yellow,size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, size1), size3), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:circle
'λx.forall(triangle,filter(x.s, triangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(x.s, rectangle), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, nor[apply(same_size,x.o),circle]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:green
'λx.forall(apply(same_size,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[blue,and[blue,size1]],apply(same_shape,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,nand[circle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,not[circle]],iota(filter(filter(filter(x.s, blue), size1), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:blue
'λx.apply(or[nor[and[circle,yellow],iff[not[triangle],green]],yellow],iota(filter(filter(x.s, size1), not[rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:iff[%s,%s];4:not[%s];4:triangle;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle
'λx.empty(filter(filter(filter(filter(filter(x.s, rectangle), green), apply(same_size,x.o)), rectangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:not[%s];4:blue
'λx.forall(size2,filter(x.s, nand[circle,green]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:green
'λx.forall(or[and[and[rectangle,size3],size2],and[green,apply(same_size,x.o)]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:size2;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(nor[or[apply(same_size,iota(x.s)),apply(same_size,iota(x.s))],not[or[circle,blue]]],filter(filter(x.s, rectangle), rectangle))'	0:forall(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(iff[or[yellow,apply(same_shape,iota(x.s))],green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_size,iota(x.s)),filter(filter(x.s, triangle), and[implies[and[yellow,apply(same_shape,x.o)],and[apply(size-leq,x.o),size1]],circle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;4:circle
'λx.apply(nor[and[apply(size-leq,x.o),green],apply(same_shape,x.o)],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[blue,and[and[size3,yellow],not[size1]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(x.s))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(x.s, and[blue,size1]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(nand[green,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[nor[blue,green],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), circle), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:triangle
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, blue), green), rectangle), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:rectangle;4:blue
'λx.apply(size2,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(and[triangle,size3],iota(filter(filter(x.s, circle), and[size1,and[triangle,size1]])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size1
'λx.apply(and[triangle,and[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[triangle]), apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[or[apply(same_size,x.o),circle],green],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, size1), or[or[size2,blue],rectangle]), size3), size3), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:or[%s,%s];4:size2;4:blue;4:rectangle;4:size3;4:size3;4:yellow
'λx.apply(and[size3,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[not[apply(same_shape,iota(x.s))],and[and[size3,size2],blue]],or[blue,size3]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:blue;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[size1,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, apply(size-leq,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[circle,green],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(green,iota(filter(x.s, not[and[rectangle,not[triangle]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:triangle
'λx.forall(not[triangle],filter(filter(x.s, iff[yellow,apply(size-geq,x.o)]), size3))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3
'λx.apply(green,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.empty(filter(filter(x.s, and[and[size2,size1],and[blue,triangle]]), and[or[blue,triangle],or[blue,size2]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:blue;4:size2
'λx.apply(implies[yellow,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(and[green,blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, triangle), size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.exists(apply(same_shape,iota(filter(filter(x.s, and[rectangle,size2]), yellow))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2;4:yellow;3:%s.s;2:x
'λx.apply(implies[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, nand[and[yellow,apply(same_size,x.o)],blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.forall(nand[and[size1,or[blue,size1]],triangle],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size1;4:triangle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, circle), or[circle,triangle]), green), not[yellow]), or[yellow,and[size1,size1]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:circle;4:triangle;4:green;4:not[%s];4:yellow;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:size1
'λx.contains(iota(filter(x.s, and[iff[apply(same_color,x.o),and[rectangle,and[blue,size2]]],triangle])), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:size2;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[size3],iota(filter(filter(x.s, nand[blue,circle]), blue)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:circle;4:blue
'λx.exists(apply(same_color,x.o), filter(filter(x.s, blue), or[size2,not[size1]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size2;4:not[%s];4:size1
'λx.apply(and[green,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[size1,green],rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(or[size1,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(iff[not[triangle],not[not[apply(size-lt,x.o)]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:triangle;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, and[triangle,not[implies[size2,size2]]]), green), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:implies[%s,%s];4:size2;4:size2;4:green;4:size1
'λx.exists(apply(same_shape,iota(filter(filter(filter(x.s, circle), rectangle), green))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:green;3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(x.s, green), triangle), apply(same_color,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(circle, x.s)'	0:exists(%s, %s);4:circle;3:%s.s;2:x
'λx.apply(and[triangle,size3],iota(filter(filter(x.s, blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[triangle,rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(or[green,size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(green,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[rectangle,triangle],or[and[green,apply(same_size,iota(filter(x.s, circle)))],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;1:%s.o;2:x
'λx.apply(and[nor[apply(size-geq,x.o),circle],and[circle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(and[size1,apply(same_size,iota(filter(filter(filter(filter(x.s, green), size1), green), size3)))],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[blue,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.exists(not[blue], x.s)'	0:exists(%s, %s);4:not[%s];4:blue;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, and[apply(size-leq,iota(filter(x.s, green))),size2]), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:size2
'λx.empty(filter(filter(x.s, size3), nor[blue,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:blue;4:size1
'λx.contains(x.o, filter(filter(x.s, iff[size1,blue]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:blue;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, size2))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size1), blue), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:yellow
'λx.apply(implies[circle,nand[and[circle,not[size1]],apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(apply(same_color,iota(filter(filter(x.s, nand[green,apply(same_shape,x.o)]), green))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(nor[and[blue,size2],size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[size3,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.apply(and[apply(same_shape,x.o),nand[or[and[green,not[not[or[circle,nor[blue,size3]]]]],green],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:size3;4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[iff[circle,and[triangle,apply(same_color,iota(filter(x.s, nand[size3,green])))]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:green;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, green), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;1:%s.o;2:x
'λx.apply(nor[apply(same_color,iota(x.s)),and[green,rectangle]],iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.forall(iff[size1,blue],filter(x.s, iff[size1,size2]))'	0:forall(%s,%s);4:iff[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size2
'λx.apply(triangle,iota(filter(x.s, and[size2,not[green]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:green
'λx.forall(apply(same_color,x.o),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[and[triangle,size1],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[yellow,or[green,and[size2,and[rectangle,size2]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:green;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[circle,blue],iota(filter(filter(filter(x.s, and[and[size1,not[size1]],yellow]), yellow), yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:size1;4:yellow;4:yellow;4:yellow
'λx.contains(iota(filter(filter(x.s, green), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;3:%s.s;2:x
'λx.apply(or[yellow,nand[and[green,or[triangle,and[size3,size1]]],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:size1;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(size-gt,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(size-lt,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), or[apply(same_color,iota(filter(x.s, yellow))),green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.exists(rectangle, filter(filter(filter(filter(x.s, yellow), not[blue]), apply(same_color,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size1), apply(same_size,iota(x.s))), circle), circle), or[blue,size2]), size2), nor[green,implies[size2,and[apply(same_color,x.o),implies[size3,blue]]]])))), blue))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:circle;4:or[%s,%s];4:blue;4:size2;4:size2;4:nor[%s,%s];4:green;4:implies[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:blue;4:blue
'λx.apply(and[yellow,and[iff[circle,yellow],and[green,circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:iff[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, yellow), green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(not[not[implies[green,not[apply(same_size,x.o)]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size3,blue],filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(implies[circle,iff[size1,rectangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:iff[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, not[or[green,size1]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:green;4:size1
'λx.forall(nor[size3,green],filter(filter(filter(filter(x.s, size1), rectangle), not[blue]), not[yellow]))'	0:forall(%s,%s);4:nor[%s,%s];4:size3;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:not[%s];4:blue;4:not[%s];4:yellow
'λx.apply(rectangle,iota(filter(x.s, and[triangle,triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(and[apply(same_shape,x.o),size2],iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.empty(filter(x.s, or[or[yellow,green],triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:green;4:triangle
'λx.apply(and[blue,blue],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[and[rectangle,green],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), apply(size-lt,iota(filter(filter(filter(filter(x.s, triangle), and[implies[rectangle,nor[nor[size1,size2],size3]],iff[circle,size2]]), rectangle), size2)))), not[or[size1,circle]]), and[or[blue,blue],size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:size3;4:iff[%s,%s];4:circle;4:size2;4:rectangle;4:size2;4:not[%s];4:or[%s,%s];4:size1;4:circle;4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[or[circle,nor[blue,size3]]]), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:size3;4:yellow
'λx.forall(and[triangle,size1],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[apply(same_shape,iota(filter(filter(filter(filter(x.s, size1), and[green,nand[size1,and[blue,green]]]), not[rectangle]), green))),triangle],iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:green;4:nand[%s,%s];4:size1;4:and[%s,%s];4:blue;4:green;4:not[%s];4:rectangle;4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, or[size3,triangle]), or[blue,size2]), and[blue,size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:or[%s,%s];4:blue;4:size2;4:and[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, triangle), apply(size-geq,x.o)), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle
'λx.apply(green,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(size2,iota(filter(filter(filter(x.s, blue), apply(same_color,iota(x.s))), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(and[iff[apply(same_color,iota(x.s)),size2],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, circle), blue), apply(same_shape,iota(x.s))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, apply(same_color,iota(x.s))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(or[rectangle,rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(implies[nand[blue,apply(same_color,iota(filter(x.s, triangle)))],blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(x.s, iff[implies[or[size1,size1],and[not[rectangle],green]],not[size1]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:size1;4:size1;4:and[%s,%s];4:not[%s];4:rectangle;4:green;4:not[%s];4:size1
'λx.exists(nor[and[and[size1,size3],circle],size3], filter(filter(filter(filter(x.s, blue), not[rectangle]), yellow), blue))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:rectangle;4:yellow;4:blue
'λx.apply(circle,iota(filter(x.s, or[implies[triangle,yellow],size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:yellow;4:size1
'λx.apply(not[or[and[triangle,size2],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[and[size1,and[triangle,size1]],or[triangle,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[and[size2,circle],triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_color,x.o)), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(yellow,iota(filter(x.s, and[nor[blue,size1],rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:blue;4:size1;4:rectangle
'λx.apply(nand[apply(same_color,iota(x.s)),or[yellow,implies[not[green],size1]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:not[%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[size1,and[rectangle,rectangle]],iota(filter(x.s, and[and[yellow,blue],size1])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size1
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), size3), and[circle,rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(size3,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(size3,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(size2,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(size1,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(or[or[triangle,size3],circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[or[apply(size-lt,iota(filter(filter(x.s, size2), yellow))),green],and[triangle,or[rectangle,not[circle]]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:green;4:and[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size3,yellow],iota(filter(filter(x.s, size1), not[rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle
'λx.apply(and[size2,apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,and[implies[apply(same_color,iota(x.s)),apply(same_size,x.o)],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.exists(not[not[apply(same_shape,x.o)]], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[not[not[circle]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.empty(filter(filter(filter(x.s, size1), and[and[rectangle,iff[apply(same_shape,iota(filter(x.s, size2))),apply(same_shape,iota(x.s))]],triangle]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(blue,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(apply(same_color,iota(filter(filter(x.s, rectangle), apply(same_shape,iota(filter(x.s, rectangle)))))),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(green,iota(filter(filter(x.s, triangle), and[blue,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:blue;4:triangle
'λx.apply(nand[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size1],iota(filter(filter(filter(x.s, size3), and[size3,and[blue,and[blue,and[or[or[size3,green],triangle],size1]]]]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:green;4:triangle;4:size1;4:size2
'λx.contains(iota(filter(filter(x.s, and[blue,not[not[not[and[blue,yellow]]]]]), yellow)), filter(x.s, and[circle,triangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle
'λx.contains(x.o, filter(filter(x.s, apply(size-gt,x.o)), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow
'λx.apply(and[apply(same_size,iota(filter(x.s, size2))),green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,nand[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(and[yellow,yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(not[iff[apply(same_color,iota(filter(x.s, and[size2,rectangle]))),triangle]],iota(filter(filter(x.s, and[size3,blue]), rectangle)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;4:rectangle
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, triangle), yellow), triangle), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:triangle;4:green;1:%s.o;2:x
'λx.apply(implies[blue,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[green,yellow],iota(filter(filter(x.s, triangle), and[circle,nor[implies[size2,or[rectangle,or[apply(same_shape,x.o),rectangle]]],green]])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:circle;4:nor[%s,%s];4:implies[%s,%s];4:size2;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.empty(filter(filter(filter(x.s, rectangle), and[green,size2]), not[yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:green;4:size2;4:not[%s];4:yellow
'λx.apply(iff[size2,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, triangle), green), yellow), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:yellow;4:size2
'λx.contains(iota(x.s), filter(filter(filter(x.s, yellow), apply(size-lt,iota(filter(x.s, size3)))), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(and[or[and[triangle,implies[and[size3,implies[size3,yellow]],or[rectangle,size3]]],circle],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:implies[%s,%s];4:and[%s,%s];4:size3;4:implies[%s,%s];4:size3;4:yellow;4:or[%s,%s];4:rectangle;4:size3;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[apply(same_shape,iota(filter(filter(filter(x.s, green), apply(same_color,x.o)), size2))),apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, blue), not[size1]), triangle), implies[and[yellow,nor[and[circle,triangle],not[size2]]],apply(same_color,iota(x.s))]), not[not[size2]])))],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:not[%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(not[and[not[green],and[triangle,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(not[and[and[yellow,size3],apply(same_size,x.o)]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[green,nand[not[size1],circle]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:nand[%s,%s];4:not[%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, yellow), or[size1,implies[circle,apply(same_color,iota(filter(x.s, apply(same_color,x.o))))]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[rectangle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(or[rectangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nor[and[green,size3],nand[or[size1,not[green]],size1]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:size3;4:nand[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[size2,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(nand[yellow,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nand[rectangle,triangle],iota(filter(filter(x.s, and[apply(same_size,x.o),apply(same_shape,iota(x.s))]), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(x.s, or[and[and[rectangle,size1],green],green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:green;4:green
'λx.apply(and[yellow,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.empty(filter(filter(filter(x.s, green), green), or[and[yellow,size3],apply(same_color,iota(x.s))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_size,iota(x.s)),size3],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), and[and[green,not[size1]],implies[size1,circle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:size1;4:implies[%s,%s];4:size1;4:circle
'λx.apply(not[apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(size2,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, green), and[blue,yellow]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:blue;4:yellow;4:blue
'λx.forall(rectangle,filter(x.s, triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, rectangle), green), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:circle
'λx.exists(size2, filter(filter(filter(filter(x.s, size3), not[yellow]), green), nand[size3,rectangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow;4:green;4:nand[%s,%s];4:size3;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, blue), not[circle]), yellow), or[size2,and[size1,or[blue,nor[rectangle,size3]]]]), and[not[iff[size1,size2]],size3])), filter(filter(filter(x.s, rectangle), triangle), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:circle;4:yellow;4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:nor[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:size1;4:size2;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:green
'λx.apply(or[circle,and[apply(same_shape,iota(filter(filter(x.s, triangle), size3))),size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), apply(size-geq,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), not[circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:circle
'λx.contains(x.o, filter(x.s, or[yellow,or[and[triangle,triangle],or[or[apply(size-gt,iota(x.s)),and[or[and[yellow,and[size1,apply(same_shape,iota(x.s))]],size1],yellow]],size1]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:yellow;4:size1
'λx.apply(not[and[triangle,green]],iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(apply(size-lt,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,apply(same_color,iota(x.s))],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(x.s, not[apply(same_shape,iota(x.s))]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, blue), rectangle)))), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:triangle
'λx.apply(and[or[yellow,and[size3,and[size1,size3]]],and[apply(same_shape,x.o),yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, and[triangle,and[iff[triangle,yellow],rectangle]]), green), green), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:yellow;4:rectangle;4:green;4:green;4:blue;3:%s.s;2:x
'λx.apply(or[size1,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[circle,not[blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(or[circle,circle],filter(x.s, size1))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.exists(and[circle,or[size1,implies[apply(same_size,iota(filter(filter(filter(x.s, iff[iff[circle,circle],circle]), green), green))),or[size1,blue]]]], filter(filter(x.s, green), iff[green,triangle]))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:or[%s,%s];4:size1;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:iff[%s,%s];4:circle;4:circle;4:circle;4:green;4:green;4:or[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:green;4:triangle
'λx.apply(or[and[and[size2,size2],rectangle],blue],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(x.s, or[green,apply(same_color,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(x.s))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[circle,apply(same_size,iota(x.s))],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[triangle,and[triangle,size2]],iota(filter(filter(x.s, or[size2,green]), apply(same_shape,iota(filter(x.s, circle))))))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size3,filter(filter(filter(filter(x.s, triangle), apply(same_size,iota(filter(x.s, apply(size-leq,x.o))))), and[triangle,size3]), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size3;4:size1
'λx.apply(or[and[iff[yellow,yellow],implies[size1,yellow]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:implies[%s,%s];4:size1;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[size2,size3],iota(filter(filter(filter(x.s, triangle), size2), nand[triangle,and[green,and[and[size1,or[circle,triangle]],nand[yellow,size2]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:nand[%s,%s];4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:triangle;4:nand[%s,%s];4:yellow;4:size2
'λx.apply(nand[yellow,triangle],iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(implies[green,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[size3,not[and[apply(size-lt,iota(filter(x.s, size1))),size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-leq,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[green,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.apply(or[and[triangle,and[yellow,yellow]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(not[and[size2,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[and[not[circle],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), triangle), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:size1
'λx.apply(size1,iota(filter(filter(x.s, and[green,size2]), not[green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:not[%s];4:green
'λx.empty(filter(filter(x.s, size1), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(or[triangle,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,size3],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, size1), apply(same_color,iota(filter(x.s, rectangle)))))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[and[apply(size-leq,x.o),size1],and[apply(same_color,x.o),rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, not[and[and[triangle,size2],size3]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:size3
'λx.apply(nor[implies[green,implies[yellow,size1]],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:green;4:implies[%s,%s];4:yellow;4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.forall(and[circle,implies[yellow,size1]],filter(x.s, not[size2]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.forall(green,filter(filter(x.s, rectangle), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, size1), green), circle), and[size3,iff[green,circle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:circle;4:and[%s,%s];4:size3;4:iff[%s,%s];4:green;4:circle
'λx.apply(iff[rectangle,circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[not[circle],apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[yellow,size1],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:size1;4:triangle;1:%s.o;2:x
'λx.exists(and[yellow,blue], filter(x.s, green))'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(filter(x.s, triangle), size3), size1), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size1;4:green
'λx.apply(and[not[or[and[size2,triangle],triangle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[and[rectangle,yellow],yellow],iota(filter(filter(filter(x.s, size1), yellow), green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:green
'λx.apply(or[and[blue,size3],and[blue,apply(same_size,iota(x.s))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size3;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, and[green,apply(same_color,iota(x.s))]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, yellow), size2), apply(same_shape,x.o)), green), iff[size1,and[green,and[size1,size3]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:iff[%s,%s];4:size1;4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:size3
'λx.apply(iff[circle,nor[blue,size2]],iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(or[yellow,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(rectangle,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.exists(blue, filter(x.s, size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(blue, filter(x.s, size3))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(blue, filter(x.s, green))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(iff[or[and[and[nand[blue,size1],or[rectangle,and[not[or[not[rectangle],size2]],not[and[nor[circle,green],size2]]]]],rectangle],yellow],and[not[and[size3,circle]],or[circle,and[and[blue,yellow],circle]]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:size1;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:rectangle;4:size2;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:green;4:size2;4:rectangle;4:yellow;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:circle;4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, or[apply(same_size,iota(filter(x.s, implies[triangle,rectangle]))),apply(same_size,x.o)]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.contains(x.o, filter(filter(x.s, or[not[size1],nand[or[yellow,and[triangle,green]],circle]]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size1;4:nand[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:green;4:circle;4:circle
'λx.apply(apply(same_color,iota(filter(x.s, and[circle,or[size1,triangle]]))),iota(filter(x.s, and[apply(same_size,iota(filter(x.s, yellow))),triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(and[circle,and[rectangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.forall(apply(same_size,iota(filter(filter(x.s, apply(same_shape,x.o)), triangle))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, yellow), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[or[green,yellow],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size3,and[not[green],apply(size-leq,iota(filter(x.s, size1)))]], filter(x.s, size2))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(x.s, implies[size1,circle]), or[implies[yellow,and[circle,implies[and[size3,and[size1,blue]],size2]]],size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:circle;4:or[%s,%s];4:implies[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:implies[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:blue;4:size2;4:size2
'λx.apply(size1,iota(filter(x.s, and[not[and[triangle,size1]],size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size1;4:size3
'λx.apply(and[apply(size-gt,x.o),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(iff[and[size2,rectangle],and[size3,and[circle,and[not[yellow],blue]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[not[apply(same_size,iota(filter(filter(filter(filter(x.s, circle), circle), and[yellow,apply(same_color,iota(filter(x.s, size2)))]), iff[triangle,yellow])))]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:triangle;4:yellow
'λx.apply(and[or[apply(same_color,x.o),size2],and[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,or[not[triangle],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(not[or[green,green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[nor[and[or[size3,apply(same_size,iota(filter(filter(filter(x.s, size1), not[yellow]), blue)))],and[apply(size-lt,x.o),green]],rectangle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:yellow;4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(or[size3,rectangle], filter(filter(x.s, green), green))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(iff[apply(size-lt,x.o),apply(same_color,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(x.s, yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(x.s), filter(filter(x.s, size3), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, and[green,apply(same_size,iota(x.s))]), apply(same_size,x.o)), and[blue,rectangle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:rectangle;4:green
'λx.contains(iota(x.s), filter(x.s, nor[and[green,blue],apply(same_size,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[and[size1,and[apply(size-leq,iota(filter(filter(x.s, yellow), rectangle))),apply(same_size,iota(x.s))]],rectangle], filter(x.s, and[rectangle,size2]))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.exists(nand[nand[yellow,size2],green], filter(x.s, blue))'	0:exists(%s, %s);4:nand[%s,%s];4:nand[%s,%s];4:yellow;4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(filter(x.s, size1), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[or[triangle,size3],apply(same_color,x.o)]), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(not[size2],iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, and[size2,and[triangle,size1]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size1
'λx.contains(iota(filter(x.s, green)), filter(x.s, not[and[or[triangle,apply(same_size,iota(x.s))],and[blue,size3]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.apply(nor[triangle,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, triangle), size2), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:size3;3:%s.s;2:x
'λx.apply(and[and[triangle,rectangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(nand[rectangle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nand[rectangle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(and[circle,iff[triangle,apply(size-geq,iota(filter(filter(x.s, implies[apply(same_shape,x.o),nand[apply(same_shape,iota(x.s)),apply(size-leq,iota(filter(x.s, size3)))]]), blue)))]], filter(filter(filter(x.s, size2), or[apply(same_size,x.o),green]), and[blue,size2]))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:and[%s,%s];4:blue;4:size2
'λx.apply(or[or[size2,or[yellow,size3]],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, rectangle), green), rectangle), not[rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:rectangle;4:not[%s];4:rectangle
'λx.contains(iota(x.s), filter(filter(x.s, apply(same_size,x.o)), and[and[size3,and[green,circle]],rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:circle;4:rectangle
'λx.apply(and[rectangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(and[blue,size1],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, or[not[rectangle],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:rectangle
'λx.apply(and[or[and[blue,apply(same_shape,iota(filter(filter(filter(x.s, yellow), apply(same_size,iota(filter(filter(filter(x.s, size1), apply(same_size,iota(x.s))), blue)))), size3)))],size2],and[implies[yellow,apply(same_shape,x.o)],not[blue]]],iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:size3;4:size2;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.exists(or[blue,size1], filter(x.s, size3))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, size1), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.empty(filter(filter(x.s, size1), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.empty(filter(filter(x.s, size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.empty(filter(filter(x.s, size2), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.empty(filter(filter(x.s, size3), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.empty(filter(filter(x.s, size3), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.empty(filter(filter(x.s, size3), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.empty(filter(filter(x.s, size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(triangle,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(or[and[and[and[and[and[iff[size3,blue],circle],and[or[or[not[yellow],triangle],green],size1]],and[blue,green]],rectangle],apply(same_color,iota(x.s))],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size3;4:blue;4:circle;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:triangle;4:green;4:size1;4:and[%s,%s];4:blue;4:green;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, or[and[yellow,nand[circle,circle]],circle]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:circle;4:circle;4:green
'λx.apply(not[not[blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, circle), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,iff[size3,not[green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:size3;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(filter(filter(filter(x.s, or[and[or[rectangle,size2],triangle],triangle]), apply(same_color,iota(filter(x.s, size1)))), green), triangle), or[size3,triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:triangle;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:triangle;4:or[%s,%s];4:size3;4:triangle
'λx.apply(and[and[size2,circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:circle;1:%s.o;2:x
'λx.apply(nor[size2,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.forall(or[apply(same_size,x.o),size3],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, yellow), green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(and[circle,apply(size-lt,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[rectangle,and[green,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(not[and[yellow,apply(same_color,x.o)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[green]), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:triangle
'λx.apply(or[green,and[circle,circle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(iff[green,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.exists(not[circle], x.s)'	0:exists(%s, %s);4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, and[blue,rectangle]), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:size1
'λx.apply(iff[circle,and[yellow,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(or[blue,not[blue]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, not[and[and[rectangle,blue],or[implies[nor[triangle,size1],not[and[circle,and[size2,yellow]]]],and[circle,iff[size3,blue]]]]]), and[yellow,and[not[triangle],green]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:or[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:triangle;4:size1;4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:circle;4:iff[%s,%s];4:size3;4:blue;4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:triangle;4:green
'λx.apply(size3,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.forall(size3,filter(filter(filter(x.s, and[blue,circle]), blue), size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:blue;4:size2
'λx.exists(implies[implies[triangle,circle],yellow], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:implies[%s,%s];4:triangle;4:circle;4:yellow;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[size3,not[size3]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:size3
'λx.apply(size3,iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(size1,iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(apply(same_color,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[circle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(not[and[circle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[or[size3,nor[triangle,not[or[size1,nand[not[size2],and[or[size2,triangle],yellow]]]]]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:nor[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:size1;4:nand[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, and[size1,and[not[or[size3,circle]],circle]]), size3), size2), size3), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:circle;4:circle;4:size3;4:size2;4:size3;4:size2
'λx.apply(and[implies[blue,rectangle],or[circle,not[apply(same_color,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[yellow,or[apply(same_shape,iota(x.s)),triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(implies[size2,iff[circle,apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(apply(same_color,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(or[not[apply(size-geq,iota(x.s))],rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(not[apply(size-gt,x.o)],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[green,triangle],iota(filter(filter(x.s, or[size1,green]), rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, blue), or[blue,or[or[yellow,apply(same_size,x.o)],blue]]), or[rectangle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:or[%s,%s];4:rectangle;4:blue
'λx.apply(and[size2,or[and[triangle,and[and[rectangle,green],and[triangle,and[triangle,size2]]]],or[green,and[or[yellow,rectangle],not[not[green]]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[size3,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(filter(x.s, size2), nand[rectangle,and[apply(same_color,x.o),not[and[size1,green]]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size1;4:green
'λx.apply(apply(same_size,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[rectangle,apply(same_size,x.o)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[circle,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nor[circle,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(not[or[apply(same_color,iota(x.s)),rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[or[apply(same_color,iota(x.s)),green],size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:size3
'λx.apply(iff[green,size3],iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.empty(filter(filter(x.s, triangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[blue,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(filter(x.s, and[circle,and[size2,or[triangle,size3]]]), implies[apply(same_color,x.o),circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:size3;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.exists(and[blue,and[rectangle,or[green,yellow]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(or[and[size2,or[circle,yellow]],size2],iota(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size3), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(and[circle,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[not[and[rectangle,and[rectangle,rectangle]]],circle],iota(filter(filter(filter(filter(x.s, and[green,implies[and[size1,size2],iff[green,not[size3]]]]), circle), yellow), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:size1;4:size2;4:iff[%s,%s];4:green;4:not[%s];4:size3;4:circle;4:yellow;4:blue
'λx.apply(and[or[triangle,size2],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_size,iota(filter(x.s, blue))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.forall(and[not[or[green,triangle]],apply(same_color,iota(x.s))],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[implies[green,triangle],size1],iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.forall(or[not[blue],apply(same_shape,iota(x.s))],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[and[yellow,nor[size2,or[blue,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:size2;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[circle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(filter(x.s, rectangle), size3), circle), size3)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:circle;4:size3
'λx.apply(nor[triangle,and[rectangle,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[blue,triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(x.s, not[and[triangle,blue]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:blue
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), rectangle), nand[or[not[not[apply(same_color,iota(filter(x.s, and[or[size2,circle],rectangle])))]],circle],and[not[iff[blue,green]],circle]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:circle;4:rectangle;4:circle;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:blue;4:green;4:circle
'λx.apply(not[or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(or[size3,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[apply(same_size,x.o),triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, rectangle), rectangle), yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:yellow;4:size1
'λx.apply(green,iota(filter(filter(x.s, apply(size-gt,x.o)), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3
'λx.apply(nand[not[apply(same_color,x.o)],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[or[and[blue,green],circle]],iota(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, green)))), nor[size2,yellow]), size3)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:size2;4:yellow;4:size3
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, nand[size2,size1]), rectangle), not[yellow]), yellow), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size1;4:rectangle;4:not[%s];4:yellow;4:yellow;4:size3
'λx.apply(and[yellow,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(filter(x.s, green), and[circle,size3])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:size3
'λx.apply(or[or[green,size2],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[green,triangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[or[yellow,rectangle],size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-gt,iota(filter(x.s, size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, apply(same_size,x.o)), rectangle), green)), filter(filter(x.s, rectangle), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(nand[apply(same_color,x.o),yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,and[not[or[size3,triangle]],implies[apply(same_color,iota(x.s)),iff[or[size1,size2],yellow]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:triangle;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:size1;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_color,x.o),apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.empty(filter(filter(x.s, green), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(yellow,iota(filter(x.s, implies[size3,and[yellow,yellow]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(or[nor[rectangle,not[rectangle]],nor[rectangle,circle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:nor[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, triangle), not[size2]), or[not[apply(same_color,x.o)],circle]), nand[circle,apply(same_size,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size2;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(blue,x.s)'	0:forall(%s,%s);4:blue;3:%s.s;2:x
'λx.exists(size1, filter(x.s, and[apply(same_shape,iota(filter(x.s, circle))),and[apply(size-lt,x.o),and[blue,green]]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:blue;4:green
'λx.apply(yellow,iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(and[nor[green,green],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:green;4:green;4:size3;1:%s.o;2:x
'λx.apply(and[size3,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[size1,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(and[triangle,size1],filter(filter(filter(filter(x.s, size1), size1), size3), blue))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size3;4:blue
'λx.apply(and[rectangle,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[circle]), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:green
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, iff[size2,blue]), yellow), not[size2]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:blue;4:yellow;4:not[%s];4:size2;4:blue
'λx.empty(filter(x.s, and[rectangle,circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(nand[rectangle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),size3],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, blue), triangle), green), size2), apply(size-gt,iota(x.s)))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:green;4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, or[triangle,or[rectangle,blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue
'λx.apply(circle,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.contains(iota(filter(filter(x.s, not[rectangle]), and[apply(same_size,iota(filter(filter(filter(filter(x.s, green), blue), rectangle), green))),blue])), filter(filter(filter(x.s, and[triangle,blue]), and[apply(size-lt,iota(x.s)),size1]), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:rectangle;4:green;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(green,iota(filter(filter(filter(filter(x.s, rectangle), triangle), blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, green), triangle), and[or[yellow,triangle],size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:and[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:size2
'λx.apply(rectangle,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),nor[size2,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[size3,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size1), apply(size-geq,iota(filter(filter(filter(x.s, implies[blue,nor[green,apply(same_shape,iota(x.s))]]), apply(same_color,x.o)), apply(size-leq,x.o)))))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[size3,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, implies[or[and[and[and[or[and[and[triangle,apply(same_color,iota(x.s))],size1],size3],size1],apply(same_shape,x.o)],rectangle],apply(same_size,iota(filter(x.s, size3)))],blue]), not[size3]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:size3;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:not[%s];4:size3
'λx.apply(apply(same_size,iota(filter(x.s, apply(same_size,iota(filter(x.s, size2)))))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,blue],iota(filter(x.s, or[blue,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size2
'λx.apply(and[size2,or[size1,size3]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nand[size1,size3],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size1;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(or[yellow,size3],iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[and[size1,rectangle],size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:size3
'λx.forall(and[rectangle,size2],filter(filter(filter(filter(filter(filter(x.s, apply(size-geq,x.o)), apply(same_color,iota(x.s))), not[green]), triangle), green), or[yellow,size2]))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;4:triangle;4:green;4:or[%s,%s];4:yellow;4:size2
'λx.empty(filter(x.s, and[green,circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.empty(filter(filter(filter(filter(x.s, size1), apply(same_color,iota(x.s))), triangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:yellow
'λx.exists(or[yellow,or[rectangle,not[yellow]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(and[size2,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), size1), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:size2
'λx.apply(or[apply(same_color,iota(x.s)),rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nand[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(filter(x.s, and[or[not[circle],triangle],triangle]), triangle), rectangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:triangle;4:triangle;4:triangle;4:rectangle
'λx.empty(filter(filter(x.s, green), and[and[or[size3,size1],yellow],yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size1;4:yellow;4:yellow
'λx.apply(implies[size2,iff[size1,apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:iff[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size2,size3],iota(filter(filter(filter(x.s, green), rectangle), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:blue
'λx.apply(size2,iota(filter(filter(filter(x.s, size3), size3), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:size1
'λx.apply(implies[size3,and[circle,nor[not[blue],implies[iff[size2,yellow],size2]]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:circle;4:nor[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:iff[%s,%s];4:size2;4:yellow;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, or[triangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1
'λx.contains(iota(filter(filter(x.s, and[or[yellow,blue],rectangle]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:rectangle;4:triangle;3:%s.s;2:x
'λx.forall(size3,filter(x.s, and[green,iff[blue,rectangle]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:iff[%s,%s];4:blue;4:rectangle
'λx.apply(not[blue],iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(nand[and[yellow,implies[apply(same_shape,iota(x.s)),apply(same_size,x.o)]],and[or[not[not[or[apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, yellow), yellow), size3), size2), yellow), nand[green,blue]))),iff[triangle,size2]]]],circle],and[size3,size3]]],iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:size3;4:size2;4:yellow;4:nand[%s,%s];4:green;4:blue;4:iff[%s,%s];4:triangle;4:size2;4:circle;4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.forall(apply(same_color,iota(filter(x.s, circle))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, and[triangle,or[triangle,size3]]), nor[size3,size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:size3;4:nor[%s,%s];4:size3;4:size3
'λx.apply(green,iota(filter(filter(x.s, not[or[or[triangle,rectangle],apply(same_size,iota(filter(filter(x.s, apply(same_size,iota(filter(x.s, size1)))), not[not[and[size3,size1]]])))]]), blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:size1;4:blue
'λx.exists(apply(same_size,x.o), filter(filter(filter(x.s, or[nand[green,and[iff[green,yellow],yellow]],circle]), rectangle), rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:green;4:and[%s,%s];4:iff[%s,%s];4:green;4:yellow;4:yellow;4:circle;4:rectangle;4:rectangle
'λx.apply(or[and[size2,and[triangle,size2]],green],iota(filter(filter(filter(filter(x.s, triangle), and[circle,and[size3,size3]]), green), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:size3;4:green;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[yellow,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[triangle,size2],iota(filter(x.s, or[and[not[triangle],size1],and[yellow,apply(same_color,iota(filter(x.s, size2)))]])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:size1;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_size,iota(filter(x.s, rectangle))),iota(filter(filter(x.s, and[and[size2,yellow],apply(same_color,x.o)]), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(and[size1,and[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(implies[size1,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[green,and[green,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(iff[rectangle,and[apply(size-gt,x.o),size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(size-gt,x.o)), size3), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;4:size1
'λx.apply(or[nand[size3,size1],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:size3;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(filter(filter(x.s, size1), not[and[not[circle],rectangle]]), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:rectangle;4:triangle
'λx.apply(or[size3,or[rectangle,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.forall(circle,filter(x.s, and[not[triangle],triangle]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:triangle;4:triangle
'λx.apply(blue,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(or[and[blue,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), rectangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:yellow
'λx.empty(filter(filter(x.s, and[not[yellow],rectangle]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:rectangle;4:circle
'λx.empty(filter(filter(filter(x.s, circle), green), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, size1), blue), iff[or[triangle,triangle],blue]), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:blue;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(green,iota(filter(filter(filter(x.s, size3), circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, nand[and[circle,and[and[rectangle,size2],size2]],circle]), not[and[triangle,yellow]]), and[not[or[size2,and[and[circle,apply(same_color,x.o)],and[circle,apply(same_shape,x.o)]]]],size2]), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size2;4:circle;4:not[%s];4:and[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:triangle
'λx.exists(size1, filter(filter(filter(x.s, yellow), green), triangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:triangle
'λx.exists(circle, filter(filter(filter(x.s, rectangle), rectangle), circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:circle
'λx.apply(or[size2,apply(same_color,iota(x.s))],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(filter(x.s, apply(size-lt,x.o)), blue), triangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:triangle;4:size2
'λx.forall(size1,filter(filter(filter(x.s, rectangle), size3), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size3
'λx.forall(or[green,rectangle],filter(x.s, not[and[blue,and[size2,circle]]]))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:circle
'λx.apply(size1,iota(filter(filter(x.s, blue), and[or[or[rectangle,and[nor[size1,or[size3,size3]],triangle]],and[and[size1,circle],yellow]],size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:size1;4:or[%s,%s];4:size3;4:size3;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:yellow;4:size3
'λx.forall(not[circle],filter(filter(filter(x.s, apply(same_shape,iota(x.s))), size3), and[or[circle,or[size3,size1]],green]))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:size3;4:size1;4:green
'λx.contains(x.o, filter(filter(x.s, size1), not[triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:triangle
'λx.contains(iota(x.s), filter(x.s, and[blue,size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(green,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(or[size2,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size1,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[triangle,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[iff[green,triangle]]), size1), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:green;4:triangle;4:size1;4:triangle
'λx.apply(or[blue,apply(same_color,iota(filter(x.s, not[or[size2,or[circle,blue]]])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(and[and[yellow,green],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[triangle,apply(same_color,x.o)],circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), rectangle), yellow), circle), rectangle), size1)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:yellow;4:circle;4:rectangle;4:size1
'λx.forall(not[nand[blue,size1]],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, and[and[size3,yellow],and[circle,green]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:circle;4:green
'λx.exists(circle, filter(x.s, yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[or[size2,size1]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(or[circle,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.exists(or[circle,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.exists(size3, filter(filter(x.s, green), implies[implies[size1,nor[size2,apply(same_shape,x.o)]],triangle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:implies[%s,%s];4:size1;4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(not[circle],iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(filter(x.s, green), size3), or[green,not[blue]]), blue), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:or[%s,%s];4:green;4:not[%s];4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), circle), or[iff[apply(size-lt,iota(x.s)),not[apply(size-geq,x.o)]],size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2
'λx.apply(and[triangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, blue)))), size3), nand[yellow,triangle]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:nand[%s,%s];4:yellow;4:triangle;4:size1
'λx.forall(circle,filter(x.s, and[or[and[rectangle,size2],or[green,circle]],apply(size-gt,iota(filter(filter(filter(x.s, or[apply(same_color,x.o),size2]), and[blue,rectangle]), apply(same_shape,x.o))))]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:green;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:and[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[apply(size-lt,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(not[size2], filter(filter(x.s, apply(same_color,x.o)), blue))'	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(size2,iota(filter(filter(x.s, implies[size1,not[nand[blue,and[and[and[size3,or[triangle,circle]],green],and[triangle,apply(size-gt,iota(x.s))]]]]]), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:not[%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:circle;4:green;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, and[size3,and[circle,triangle]]), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:triangle;4:circle;3:%s.s;2:x
'λx.apply(or[iff[blue,and[blue,and[green,not[green]]]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(not[and[size1,triangle]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.exists(or[triangle,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, green), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.exists(or[and[size3,apply(size-gt,iota(x.s))],and[size3,circle]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.forall(size2,filter(x.s, or[yellow,apply(same_color,iota(x.s))]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,blue],iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(nand[nor[and[and[and[blue,yellow],size1],or[rectangle,size1]],blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size1;4:or[%s,%s];4:rectangle;4:size1;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[green,or[circle,or[apply(size-geq,x.o),nor[implies[size3,size3],and[green,blue]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nor[%s,%s];4:implies[%s,%s];4:size3;4:size3;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),triangle],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[size3,or[and[size3,yellow],not[apply(same_shape,iota(x.s))]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_size,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[apply(same_size,iota(filter(filter(x.s, circle), green)))],iota(filter(filter(x.s, size3), apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, nand[and[green,not[triangle]],yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:triangle;4:yellow
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), circle), green), not[triangle]), nor[blue,size1]), apply(same_color,x.o)), or[rectangle,or[circle,yellow]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:green;4:not[%s];4:triangle;4:nor[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:yellow
'λx.apply(iff[circle,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[green,size1],size1],iota(filter(filter(filter(filter(filter(x.s, and[yellow,size1]), yellow), blue), nor[circle,size1]), apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:yellow;4:blue;4:nor[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size2,blue],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, not[apply(size-gt,x.o)]), not[blue])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(filter(x.s, size2), triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:size3
'λx.apply(and[rectangle,and[apply(same_size,iota(filter(filter(x.s, rectangle), circle))),circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[and[apply(size-gt,iota(x.s)),size1],circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;4:circle;1:%s.o;2:x
'λx.exists(not[rectangle], filter(filter(x.s, blue), or[size1,blue]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:blue
'λx.apply(and[blue,size3],iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, size2), and[blue,circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:blue;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), apply(same_shape,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[blue,size1],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size3;1:%s.o;2:x
'λx.forall(nor[rectangle,or[size2,rectangle]],filter(x.s, yellow))'	0:forall(%s,%s);4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.forall(and[and[green,circle],or[apply(same_size,iota(filter(x.s, nand[and[not[size2],and[and[rectangle,size2],size2]],triangle]))),not[and[triangle,green]]]],filter(filter(filter(x.s, and[circle,apply(same_color,x.o)]), and[circle,apply(same_shape,x.o)]), size2))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size2;4:triangle;4:not[%s];4:and[%s,%s];4:triangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(or[nand[green,apply(same_size,iota(filter(x.s, yellow)))],not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, circle), or[rectangle,apply(same_color,iota(x.s))])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, not[size2]), and[blue,rectangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(nor[or[and[and[size3,and[size3,yellow]],not[triangle]],blue],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:yellow;4:not[%s];4:triangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[not[rectangle],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(circle,iota(filter(filter(filter(x.s, triangle), not[green]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:green;4:green
'λx.apply(or[nand[and[yellow,blue],yellow],not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:yellow;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(circle,iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(and[apply(same_size,x.o),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, green), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(iff[and[rectangle,size2],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(circle,iota(filter(filter(x.s, blue), and[circle,size3])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:size3
'λx.apply(implies[triangle,nand[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[green,size1],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size2,rectangle],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, triangle), circle), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:triangle
'λx.contains(iota(filter(filter(filter(filter(filter(filter(filter(x.s, not[green]), rectangle), circle), size2), green), and[rectangle,and[size2,and[and[green,blue],blue]]]), iff[green,size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:rectangle;4:circle;4:size2;4:green;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:blue;4:blue;4:iff[%s,%s];4:green;4:size2;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(and[size3,implies[or[triangle,and[or[size2,size3],apply(size-leq,x.o)]],apply(same_color,iota(filter(x.s, and[yellow,nor[circle,yellow]])))]],iota(filter(filter(filter(filter(x.s, nor[circle,and[size1,size2]]), size1), yellow), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size2;4:size1;4:yellow;4:size2
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, green), size2), and[apply(same_color,iota(filter(x.s, and[implies[size2,size3],nand[implies[triangle,blue],circle]]))),green]), apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size2;4:size3;4:nand[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[circle], filter(x.s, not[iff[green,or[size2,size1]]]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:green;4:or[%s,%s];4:size2;4:size1
'λx.apply(and[yellow,and[rectangle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[size3,size3],iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(or[and[size1,not[nand[triangle,size2]]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:nand[%s,%s];4:triangle;4:size2;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_color,iota(filter(filter(x.s, green), triangle))))), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(x.s, and[or[rectangle,or[size3,rectangle]],and[or[size3,rectangle],not[nor[apply(same_shape,x.o),green]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(or[size1,or[rectangle,not[rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,size1],iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.exists(apply(same_size,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[apply(same_color,iota(filter(x.s, rectangle))),green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(x.s, green), circle), size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size3
'λx.apply(and[size3,green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[size3,green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(rectangle, filter(x.s, circle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, yellow), implies[rectangle,nor[yellow,iff[yellow,not[apply(size-leq,iota(filter(x.s, triangle)))]]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:yellow;4:iff[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(filter(x.s, and[size1,or[rectangle,apply(same_shape,x.o)]]), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(nor[or[circle,not[apply(same_size,x.o)]],size2],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size1,size2]],iota(filter(x.s, not[and[size1,size3]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:size3
'λx.empty(filter(x.s, apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[and[and[yellow,apply(same_shape,x.o)],size3],triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(rectangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[size2,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size1,x.s)'	0:forall(%s,%s);4:size1;3:%s.s;2:x
'λx.forall(size2,x.s)'	0:forall(%s,%s);4:size2;3:%s.s;2:x
'λx.forall(size3,x.s)'	0:forall(%s,%s);4:size3;3:%s.s;2:x
'λx.exists(not[triangle], x.s)'	0:exists(%s, %s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(and[and[size1,rectangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(or[size3,or[circle,blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, not[triangle]), and[green,size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:and[%s,%s];4:green;4:size3
'λx.apply(implies[apply(same_shape,x.o),blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, nor[size3,and[triangle,size2]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:size2
'λx.apply(and[rectangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, and[circle,size2]), not[circle]), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:not[%s];4:circle;4:size1
'λx.apply(and[and[blue,or[and[green,and[blue,size3]],triangle]],apply(same_shape,x.o)],iota(filter(filter(x.s, and[or[yellow,size2],and[circle,blue]]), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:size3;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:circle;4:blue;4:size3
'λx.apply(or[blue,or[green,green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[size2,and[size2,yellow]],green],iota(filter(x.s, implies[or[and[rectangle,rectangle],nor[size2,yellow]],rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:size2;4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:nor[%s,%s];4:size2;4:yellow;4:rectangle
'λx.forall(circle,filter(filter(filter(filter(filter(filter(filter(filter(x.s, or[rectangle,apply(same_size,iota(x.s))]), not[size3]), or[size1,and[not[apply(same_shape,iota(filter(x.s, blue)))],green]]), circle), and[size2,rectangle]), triangle), circle), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:circle;4:and[%s,%s];4:size2;4:rectangle;4:triangle;4:circle;4:blue
'λx.forall(and[green,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(size3,iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(size1,iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.forall(and[green,size2],filter(filter(x.s, size3), and[size2,and[size3,or[size3,blue]]]))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:or[%s,%s];4:size3;4:blue
'λx.empty(filter(filter(filter(x.s, apply(size-lt,iota(x.s))), size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(and[green,or[green,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, rectangle), circle))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[nand[or[size2,size3],size3]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:size2;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(not[not[size2]],filter(filter(filter(filter(x.s, triangle), nand[apply(same_color,iota(x.s)),blue]), size3), triangle))'	0:forall(%s,%s);4:not[%s];4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:size3;4:triangle
'λx.apply(or[triangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_shape,iota(x.s))), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[size1,iff[nand[blue,not[blue]],apply(size-gt,iota(filter(filter(x.s, size2), and[circle,and[blue,circle]])))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:iff[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[green,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[size2,apply(same_size,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,or[and[size2,size3],blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,or[rectangle,apply(same_shape,iota(filter(filter(x.s, yellow), green)))]],iota(filter(filter(x.s, apply(same_size,iota(x.s))), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(nor[size2,implies[or[size2,implies[or[apply(size-geq,x.o),not[apply(same_shape,iota(filter(filter(x.s, circle), triangle)))]],size3]],not[not[size2]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:implies[%s,%s];4:or[%s,%s];4:size2;4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:size3;4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[and[size3,size3],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, yellow))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(nor[triangle,nor[yellow,triangle]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:nor[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(rectangle, filter(x.s, yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, yellow), yellow), iff[apply(same_color,iota(x.s)),triangle]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[and[size1,and[or[size1,yellow],not[blue]]],and[blue,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,apply(same_size,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[blue,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[triangle,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.apply(triangle,iota(filter(filter(filter(x.s, blue), yellow), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:circle
'λx.forall(blue,filter(filter(x.s, rectangle), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(blue,iota(filter(filter(x.s, rectangle), not[nand[implies[apply(size-leq,x.o),circle],green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:nand[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:green
'λx.forall(apply(size-lt,iota(filter(x.s, size1))),filter(filter(filter(x.s, and[iff[and[not[and[circle,size3]],green],apply(same_shape,iota(x.s))],not[triangle]]), size1), nand[size1,size2]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:size3;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1;4:nand[%s,%s];4:size1;4:size2
'λx.apply(blue,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[blue,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, not[size1]))),iota(filter(filter(x.s, circle), or[green,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:green;4:blue
'λx.contains(iota(x.s), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size3,or[size1,triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, not[size3]), circle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:circle;4:green
'λx.apply(or[size2,and[not[and[size1,nand[yellow,yellow]]],or[blue,size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:nand[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(implies[triangle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[circle,yellow],and[green,apply(same_shape,x.o)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size1,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,and[and[triangle,green],yellow]],iota(filter(filter(x.s, not[blue]), and[yellow,yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:yellow;4:yellow
'λx.forall(size1,filter(filter(filter(x.s, green), yellow), rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:rectangle
'λx.apply(and[implies[size3,green],or[not[green],and[yellow,and[blue,blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:green;4:or[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[and[blue,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[rectangle,not[and[blue,nand[yellow,size2]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(implies[green,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.empty(filter(x.s, and[size1,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, iff[size1,blue]), and[green,or[size2,blue]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:blue;4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:blue
'λx.apply(and[blue,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, circle), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(not[and[yellow,or[nand[size1,apply(same_size,iota(x.s))],nor[triangle,and[not[or[circle,triangle]],green]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:triangle;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[size3,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.empty(filter(x.s, and[size3,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, blue), circle), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3
'λx.apply(or[and[or[and[apply(same_color,x.o),and[circle,green]],apply(same_size,iota(filter(x.s, size3)))],triangle],or[blue,size2]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[nor[yellow,size3],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:size3;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, yellow), triangle), not[size3]), yellow))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:not[%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.exists(nand[blue,apply(same_color,iota(x.s))], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), or[blue,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, size1), and[yellow,blue]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:yellow;4:blue;4:rectangle
'λx.apply(implies[size1,apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[green,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,rectangle],iota(filter(filter(x.s, yellow), and[and[size3,green],rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:rectangle
'λx.apply(or[not[green],or[rectangle,nor[nor[rectangle,green],blue]]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:nor[%s,%s];4:rectangle;4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[nor[and[rectangle,size2],circle],and[size1,size1]],and[size3,and[circle,not[apply(size-gt,iota(filter(filter(filter(filter(x.s, and[triangle,apply(same_color,x.o)]), triangle), rectangle), triangle)))]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:circle;4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, triangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[blue,and[size2,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(nor[size1,blue], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(and[apply(same_color,x.o),size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[and[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nand[size3,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, size2), rectangle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:green
'λx.exists(blue, filter(filter(filter(x.s, green), yellow), size3))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size3
'λx.contains(x.o, filter(filter(x.s, apply(size-lt,iota(filter(filter(x.s, apply(size-leq,iota(filter(filter(filter(filter(x.s, and[and[and[green,and[size3,or[triangle,circle]]],not[and[green,rectangle]]],rectangle]), green), size2), size2)))), and[and[green,blue],triangle])))), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:circle;4:not[%s];4:and[%s,%s];4:green;4:rectangle;4:rectangle;4:green;4:size2;4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:blue;4:triangle;4:blue
'λx.apply(implies[size3,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(or[not[rectangle],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[green,yellow], filter(filter(filter(filter(x.s, green), rectangle), size2), blue))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:size2;4:blue
'λx.apply(nor[apply(size-leq,x.o),yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, not[size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[or[yellow,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[or[circle,blue],size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[size3,not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size3))),iota(filter(filter(filter(x.s, triangle), green), apply(same_shape,iota(x.s)))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(or[or[rectangle,and[apply(same_size,iota(x.s)),not[triangle]]],yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size2), triangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size2, filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, blue), blue), not[blue]), rectangle), circle), triangle), blue), rectangle), size2), size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:not[%s];4:blue;4:rectangle;4:circle;4:triangle;4:blue;4:rectangle;4:size2;4:size1
'λx.exists(or[apply(same_color,x.o),green], filter(x.s, nand[size3,size1]))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size1
'λx.apply(and[rectangle,or[size2,and[and[green,or[size1,green]],size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:green;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[circle,circle]), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle;4:triangle
'λx.apply(or[green,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, not[and[or[size3,size1],green]]), green), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size1;4:green;4:green;4:size3
'λx.apply(or[triangle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(or[or[apply(same_color,x.o),triangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_color,iota(x.s)),size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(x.s, and[not[circle],size3]), nor[blue,not[yellow]])), filter(filter(x.s, circle), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:size3;4:nor[%s,%s];4:blue;4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.forall(nor[and[size3,size3],triangle],filter(x.s, size2))'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[yellow,yellow],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_shape,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.contains(x.o, filter(x.s, and[size2,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(and[triangle,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(and[blue,triangle],filter(x.s, size3))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[circle,circle],iota(filter(x.s, and[triangle,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2
'λx.apply(size2,iota(filter(filter(x.s, or[size2,triangle]), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:triangle;4:triangle
'λx.apply(green,iota(filter(filter(filter(x.s, size2), size3), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:circle
'λx.apply(green,iota(filter(filter(x.s, nor[rectangle,yellow]), blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:yellow;4:blue
'λx.apply(and[blue,and[rectangle,or[size1,green]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(nor[or[not[apply(same_size,iota(filter(filter(x.s, rectangle), green)))],and[yellow,and[yellow,circle]]],and[implies[circle,green],rectangle]],filter(filter(x.s, green), or[blue,rectangle]))'	0:forall(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:implies[%s,%s];4:circle;4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, and[blue,green]), green), size2)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;4:green;4:size2
'λx.apply(or[rectangle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[and[rectangle,and[size3,size2]],not[green]],iota(filter(x.s, implies[rectangle,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size2;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:size2
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, size2), and[green,size1]), blue), yellow), blue), nand[blue,and[size3,size2]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:size1;4:blue;4:yellow;4:blue;4:nand[%s,%s];4:blue;4:and[%s,%s];4:size3;4:size2
'λx.apply(nand[size3,size2],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(not[and[rectangle,apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size2), apply(size-lt,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[size1,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[yellow,green],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size3,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),rectangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, green), yellow)), filter(filter(x.s, not[green]), and[implies[size2,size3],size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:implies[%s,%s];4:size2;4:size3;4:size1
'λx.apply(and[or[not[size2],size2],or[size3,and[rectangle,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:size2;4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[size2,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[iff[or[not[rectangle],not[and[size1,apply(same_shape,iota(x.s))]]],triangle],size2],green],iota(filter(filter(x.s, apply(same_color,x.o)), apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[yellow,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(or[size3,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,and[size1,not[circle]]],iota(filter(filter(x.s, nand[and[blue,nor[or[and[size2,apply(same_shape,iota(filter(filter(x.s, blue), blue)))],apply(same_color,x.o)],blue]],yellow]), green)))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:size1;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:yellow;4:green
'λx.apply(blue,iota(filter(filter(x.s, and[apply(same_size,x.o),size2]), not[size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:not[%s];4:size2
'λx.apply(and[and[green,iff[circle,circle]],not[implies[apply(same_shape,iota(filter(filter(filter(filter(x.s, yellow), or[blue,yellow]), size2), and[circle,size2]))),blue]]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:circle;4:circle;4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:yellow;4:size2;4:and[%s,%s];4:circle;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[rectangle,and[apply(same_color,x.o),and[green,size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, yellow), green), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:blue
'λx.contains(iota(filter(x.s, apply(same_shape,iota(x.s)))), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(or[and[size2,circle],size1],filter(x.s, blue))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[apply(same_shape,x.o),apply(same_shape,x.o)],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(and[rectangle,or[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, or[and[yellow,not[size2]],yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:size2;4:yellow
'λx.apply(or[circle,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,implies[and[size3,and[or[not[apply(same_size,iota(x.s))],and[and[yellow,size3],triangle]],yellow]],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:triangle;4:yellow;4:size3;1:%s.o;2:x
'λx.forall(implies[apply(same_color,x.o),circle],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), and[yellow,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:yellow;4:size3
'λx.apply(nor[apply(same_color,iota(filter(filter(x.s, size2), circle))),apply(size-gt,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[not[and[rectangle,yellow]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, and[triangle,and[yellow,size1]]), rectangle), blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:size1;4:rectangle;4:blue;4:blue
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(x.s, green), yellow), yellow), yellow), blue), not[size3]), and[blue,implies[size3,not[rectangle]]]), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:yellow;4:yellow;4:blue;4:not[%s];4:size3;4:and[%s,%s];4:blue;4:implies[%s,%s];4:size3;4:not[%s];4:rectangle;4:not[%s];4:triangle
'λx.apply(green,iota(filter(x.s, nand[circle,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:green
'λx.forall(or[triangle,yellow],filter(filter(x.s, and[size3,blue]), and[yellow,and[green,and[size3,and[implies[and[implies[size1,apply(same_size,iota(x.s))],size3],size1],or[blue,triangle]]]]]))'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:size1;4:or[%s,%s];4:blue;4:triangle
'λx.apply(iff[green,size1],iota(filter(filter(x.s, green), blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(nor[size1,size2],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(x.s)),filter(x.s, green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(nor[size1,and[or[and[blue,and[yellow,size1]],circle],rectangle]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size1;4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(or[blue,and[circle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[triangle,yellow],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(or[not[and[and[rectangle,not[size3]],not[circle]]],and[nor[triangle,apply(same_shape,iota(x.s))],and[yellow,and[size2,yellow]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size3;4:not[%s];4:circle;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[yellow,or[size3,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[nor[size3,green],yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size3;4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,or[size1,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, green), or[or[rectangle,green],circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, yellow), not[yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:yellow
'λx.apply(and[yellow,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(x.s, and[size2,triangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, size3), not[blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue
'λx.apply(or[size2,not[and[rectangle,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(not[blue],x.o)'	0:apply(%s,%s);4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[size3,nand[size1,yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:nand[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, yellow), apply(same_color,iota(filter(filter(filter(filter(x.s, triangle), circle), circle), yellow)))), size2), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:circle;4:yellow;4:size2;4:blue
'λx.apply(iff[nor[yellow,implies[size2,green]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:yellow;4:implies[%s,%s];4:size2;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[circle,rectangle], filter(x.s, size1))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(filter(x.s, size3), rectangle), and[size2,and[and[and[yellow,apply(same_shape,x.o)],yellow],iff[implies[not[rectangle],size1],rectangle]]]), green), apply(same_color,iota(filter(x.s, and[size1,circle]))))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:iff[%s,%s];4:implies[%s,%s];4:not[%s];4:rectangle;4:size1;4:rectangle;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, and[size2,apply(same_color,iota(x.s))]), circle))),iota(filter(x.s, or[and[circle,and[circle,size3]],circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:size3;4:circle
'λx.apply(size1,iota(filter(filter(x.s, size1), or[yellow,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:yellow;4:rectangle
'λx.apply(nor[and[blue,blue],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[circle,not[and[rectangle,nand[and[and[nand[rectangle,and[and[size3,apply(same_color,iota(x.s))],size2]],size3],size3],yellow]]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:size3;4:size3;4:yellow
'λx.apply(or[apply(same_shape,x.o),size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,apply(size-geq,x.o)],iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(and[size2,or[rectangle,not[implies[and[not[nand[apply(same_color,iota(x.s)),and[apply(same_size,iota(filter(x.s, rectangle))),triangle]]],and[and[apply(same_shape,x.o),circle],size2]],yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:rectangle;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size2;4:yellow;1:%s.o;2:x
'λx.forall(and[triangle,green],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:green;3:%s.s;2:x
'λx.apply(and[not[and[size3,triangle]],and[iff[blue,circle],size1]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[circle,not[and[apply(same_shape,x.o),implies[and[apply(size-geq,x.o),blue],green]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[circle,and[size3,and[size1,apply(same_shape,x.o)]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, apply(size-leq,iota(filter(filter(filter(filter(x.s, rectangle), triangle), size2), green)))), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size2;4:green;4:yellow
'λx.forall(blue,filter(x.s, and[triangle,apply(same_shape,iota(filter(x.s, size2)))]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(x.s, and[size3,not[blue]]), apply(same_shape,iota(x.s))), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(and[size3,and[triangle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, apply(same_size,x.o)), or[blue,implies[implies[apply(same_color,iota(filter(x.s, and[circle,or[size2,size1]]))),size2],circle]]), or[size2,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:blue;4:implies[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:size1;4:size2;4:circle;4:or[%s,%s];4:size2;4:green
'λx.apply(or[size1,or[triangle,blue]],iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.exists(and[green,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:rectangle;3:%s.s;2:x
'λx.exists(nand[circle,not[and[size1,circle]]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.forall(not[circle],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[and[apply(same_size,x.o),size1]],iota(filter(filter(filter(filter(x.s, and[green,circle]), green), blue), size2)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:green;4:blue;4:size2
'λx.apply(and[triangle,size1],iota(filter(filter(filter(filter(filter(x.s, yellow), not[green]), iff[apply(size-geq,iota(x.s)),nor[apply(same_size,iota(x.s)),green]]), nor[not[yellow],yellow]), nor[not[apply(size-gt,x.o)],size1])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:green;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:not[%s];4:yellow;4:yellow;4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.contains(iota(x.s), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, green), yellow), size1), and[apply(same_color,x.o),blue]), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(x.s, not[implies[size3,size2]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:size3;4:size2
'λx.apply(and[rectangle,or[yellow,implies[and[rectangle,circle],size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, blue), circle), and[green,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:and[%s,%s];4:green;4:triangle
'λx.apply(size2,iota(filter(x.s, and[and[size2,apply(same_shape,x.o)],size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.exists(circle, filter(filter(x.s, nand[circle,apply(same_size,x.o)]), blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(green,iota(filter(filter(x.s, triangle), not[blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue
'λx.apply(yellow,iota(filter(filter(filter(x.s, green), apply(same_color,iota(filter(filter(filter(filter(filter(filter(x.s, and[implies[nand[circle,size2],or[nor[apply(same_size,x.o),yellow],blue]],green]), apply(same_size,x.o)), circle), and[apply(same_shape,iota(x.s)),blue]), iff[rectangle,blue]), triangle)))), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:circle;4:size2;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:blue;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:rectangle;4:blue;4:triangle;4:blue
'λx.apply(and[green,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, and[rectangle,blue]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(nor[circle,and[triangle,green]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, filter(filter(x.s, not[triangle]), circle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:circle
'λx.apply(or[and[not[not[nand[apply(same_shape,iota(filter(filter(filter(x.s, circle), triangle), apply(same_size,iota(filter(x.s, apply(same_color,iota(x.s)))))))),implies[triangle,apply(same_size,x.o)]]]],triangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, size1), apply(same_size,iota(x.s))), blue), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:size3;3:%s.s;2:x
'λx.forall(implies[not[blue],iff[circle,triangle]],filter(filter(x.s, rectangle), rectangle))'	0:forall(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:iff[%s,%s];4:circle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.exists(size2, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(implies[apply(same_shape,x.o),triangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(filter(x.s, blue), and[apply(same_size,x.o),size2])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(and[nand[blue,apply(size-lt,x.o)],nand[and[triangle,or[size2,size1]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, nor[apply(same_shape,x.o),triangle]), size3), rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size3;4:rectangle;4:green
'λx.forall(blue,filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(and[nor[size3,size2],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size3;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(and[not[yellow],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(or[green,circle],iota(filter(filter(filter(filter(filter(x.s, circle), and[circle,apply(same_color,x.o)]), size1), and[size2,blue]), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:and[%s,%s];4:size2;4:blue;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, circle), triangle), rectangle), not[size1])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:rectangle;4:not[%s];4:size1
'λx.apply(iff[size1,blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size2), triangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:size1
'λx.apply(not[and[size3,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[triangle,size3])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3
'λx.apply(or[triangle,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[or[size3,apply(size-lt,iota(filter(filter(filter(x.s, and[apply(size-lt,x.o),apply(same_size,iota(filter(filter(filter(filter(filter(x.s, size3), size2), blue), not[size3]), size2)))]), not[size1]), size3)))],triangle])), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:blue;4:not[%s];4:size3;4:size2;4:not[%s];4:size1;4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, size2), not[blue]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:blue;4:blue

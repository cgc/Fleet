'λx.apply(nand[or[and[not[not[and[or[rectangle,circle],implies[yellow,green]]]],circle],size3],implies[blue,or[apply(same_size,iota(x.s)),rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:implies[%s,%s];4:yellow;4:green;4:circle;4:size3;4:implies[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(or[green,or[size3,not[apply(size-gt,x.o)]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size3],filter(filter(x.s, circle), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.contains(x.o, filter(x.s, and[nor[blue,not[or[apply(size-gt,iota(x.s)),triangle]]],apply(same_size,x.o)]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), or[apply(size-geq,iota(x.s)),green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(or[or[size1,iff[blue,yellow]],and[and[triangle,or[size2,not[yellow]]],and[and[size3,blue],and[or[not[triangle],or[iff[and[rectangle,and[iff[size3,blue],size3]],rectangle],implies[rectangle,apply(size-geq,x.o)]]],blue]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:iff[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:size3;4:blue;4:size3;4:rectangle;4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(nor[size2,triangle],iota(filter(filter(x.s, triangle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.true'	0.000000	0.000000	0.000000	0:true
'λx.apply(and[or[green,size3],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.exists(nor[and[triangle,circle],size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:size2;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, size1), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.forall(size2,filter(filter(x.s, size1), or[or[triangle,size2],size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:size2
'λx.apply(nand[not[size1],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(and[triangle,green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:green;3:%s.s;2:x
'λx.empty(filter(x.s, not[nand[size1,yellow]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:size1;4:yellow
'λx.apply(and[not[implies[or[size1,and[size1,size3]],blue]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:size1;4:size3;4:blue;4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, triangle), blue), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, blue), green), not[triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:not[%s];4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(iff[size1,and[green,circle]],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, nand[blue,apply(size-gt,x.o)]), size3), rectangle), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;4:rectangle;4:size2
'λx.forall(apply(size-lt,x.o),filter(filter(filter(x.s, yellow), green), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:size1
'λx.apply(or[and[apply(same_size,x.o),and[or[circle,green],not[size3]]],and[rectangle,not[blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:not[%s];4:size3;4:and[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, not[or[and[and[circle,size1],apply(same_color,iota(filter(filter(filter(x.s, blue), yellow), size3)))],size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:size3;4:size2
'λx.apply(iff[size3,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(filter(filter(filter(x.s, blue), yellow), rectangle), and[yellow,and[apply(same_shape,x.o),not[green]]]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:rectangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green;4:rectangle
'λx.apply(or[yellow,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[yellow,or[apply(same_shape,iota(x.s)),rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_color,x.o)), triangle), size1), triangle), and[not[apply(same_shape,x.o)],blue]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size1;4:triangle;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:rectangle
'λx.apply(and[and[not[triangle],size2],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(or[triangle,and[nand[and[triangle,size1],blue],iff[blue,triangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:blue;4:iff[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[and[circle,size3],and[blue,size2]],and[size3,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:size3;4:and[%s,%s];4:blue;4:size2;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, circle), size1)), filter(x.s, size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(filter(filter(x.s, circle), size3)), filter(x.s, size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), or[yellow,and[rectangle,yellow]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:yellow;4:circle
'λx.apply(implies[apply(same_color,iota(filter(filter(filter(filter(x.s, and[size2,circle]), green), blue), and[size2,size1]))),size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:green;4:blue;4:and[%s,%s];4:size2;4:size1;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), yellow), apply(size-geq,x.o)), and[not[or[rectangle,blue]],size1]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:blue;4:size1
'λx.apply(nor[iff[apply(same_size,x.o),not[apply(same_color,x.o)]],iff[blue,yellow]],iota(filter(filter(x.s, and[blue,size3]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:rectangle
'λx.apply(or[and[blue,size3],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, green), not[triangle]), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle;4:green
'λx.apply(nor[size3,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(nand[and[not[triangle],and[nor[triangle,nor[rectangle,triangle]],and[nand[iff[blue,size3],circle],rectangle]]],or[nor[size2,and[size1,green]],rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:nor[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:blue;4:size3;4:circle;4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:size1;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, or[rectangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2
'λx.contains(iota(filter(x.s, yellow)), filter(filter(x.s, size3), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(triangle,iota(filter(x.s, or[not[or[green,triangle]],apply(size-gt,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(size-leq,iota(x.s)),implies[rectangle,not[yellow]]],iota(filter(filter(x.s, size2), apply(same_size,iota(filter(filter(filter(x.s, circle), blue), circle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:circle
'λx.apply(not[not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, blue), not[yellow]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow
'λx.apply(and[not[not[blue]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, apply(same_shape,iota(x.s))))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, not[or[yellow,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:green
'λx.apply(iff[green,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[green,triangle]), apply(same_shape,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:triangle
'λx.apply(or[yellow,size3],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[yellow,size3],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(not[green], filter(filter(filter(x.s, and[apply(same_shape,iota(x.s)),size2]), or[not[circle],and[size1,size2]]), or[rectangle,or[yellow,nor[triangle,rectangle]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:size1;4:size2;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:nor[%s,%s];4:triangle;4:rectangle
'λx.forall(or[blue,rectangle],filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_size,x.o),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size2,filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size2,filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size1,filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size2,filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(filter(x.s, green), apply(same_color,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(size-leq,x.o),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, yellow), iff[triangle,size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:triangle;4:size1
'λx.contains(x.o, filter(x.s, or[or[triangle,triangle],rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:rectangle
'λx.apply(or[blue,rectangle],iota(filter(filter(x.s, rectangle), and[triangle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:triangle;4:size1
'λx.apply(apply(size-leq,iota(x.s)),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[nand[not[rectangle],triangle],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-gt,x.o), filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[size1,or[yellow,size2]],iota(filter(filter(x.s, blue), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.exists(or[or[size2,triangle],size3], filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[circle,or[yellow,or[triangle,size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[size1,and[not[circle],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[blue,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size1), apply(size-geq,x.o)), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow
'λx.apply(apply(same_size,iota(filter(x.s, size2))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size1))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, and[and[size1,size2],size1]), not[blue]), apply(same_size,x.o)), circle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:size1;4:not[%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size3
'λx.exists(and[yellow,implies[apply(same_color,x.o),apply(size-geq,iota(x.s))]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[or[rectangle,yellow],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, and[size3,not[size1]]))),iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[green,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(and[not[rectangle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, yellow), size1), size3), and[and[circle,or[green,size2]],and[or[rectangle,blue],and[blue,circle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:size3;4:and[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:size2;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:blue;4:circle
'λx.apply(not[size2],iota(filter(filter(filter(filter(x.s, size1), green), size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size3;4:green
'λx.apply(apply(size-lt,x.o),iota(filter(filter(x.s, apply(size-leq,x.o)), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle
'λx.exists(and[and[yellow,nand[triangle,or[yellow,size1]]],not[rectangle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:size1;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(and[and[blue,rectangle],not[size3]],iota(filter(filter(x.s, iff[size2,triangle]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:triangle;4:size2
'λx.apply(blue,iota(filter(filter(x.s, circle), nand[size1,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:size1;4:rectangle
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, and[and[triangle,size1],and[triangle,size3]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:triangle;4:size3
'λx.contains(iota(filter(filter(x.s, size3), and[and[and[circle,size3],size3],rectangle])), filter(x.s, not[or[or[blue,and[yellow,size2]],nor[rectangle,nand[or[not[green],green],rectangle]]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size2;4:nor[%s,%s];4:rectangle;4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:green;4:rectangle
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,iota(filter(x.s, blue))),iota(filter(x.s, apply(same_size,iota(filter(x.s, and[nor[nand[not[and[apply(same_color,iota(x.s)),triangle]],or[size2,iff[triangle,circle]]],apply(same_color,iota(x.s))],size1]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size2;4:iff[%s,%s];4:triangle;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.exists(implies[blue,yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, and[and[apply(same_color,iota(filter(filter(filter(filter(x.s, rectangle), blue), and[size1,size3]), not[triangle]))),yellow],apply(same_size,x.o)]), triangle), rectangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:and[%s,%s];4:size1;4:size3;4:not[%s];4:triangle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:rectangle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[apply(same_color,iota(x.s)),or[size2,size1]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(x.s, size3), size2), and[yellow,size3]), size1), apply(same_size,x.o)), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:and[%s,%s];4:yellow;4:size3;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.exists(yellow, filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[blue,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_size,iota(x.s))), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(apply(size-lt,iota(x.s)),iota(filter(filter(x.s, not[green]), not[blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:not[%s];4:blue
'λx.apply(or[size2,not[size3]],iota(filter(filter(x.s, and[triangle,yellow]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow;4:yellow
'λx.apply(or[rectangle,or[size2,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[or[apply(same_size,iota(filter(x.s, or[size3,triangle]))),size2],or[yellow,nor[and[size2,size2],yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:size2;4:or[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:size2;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, rectangle), and[not[and[implies[apply(same_size,x.o),implies[rectangle,triangle]],and[rectangle,circle]]],size3]), and[triangle,not[apply(size-geq,iota(x.s))]]), apply(same_size,iota(filter(filter(x.s, circle), and[green,circle]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:rectangle;4:circle;4:size3;4:and[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:green;4:circle
'λx.exists(not[triangle], filter(filter(filter(x.s, size1), nor[and[triangle,size3],size2]), not[rectangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:size2;4:not[%s];4:rectangle
'λx.apply(and[yellow,or[apply(same_shape,iota(x.s)),or[triangle,size1]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[and[circle,triangle],green],iota(filter(x.s, implies[blue,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size3
'λx.apply(nor[green,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[green,blue]],iota(filter(filter(filter(x.s, apply(same_shape,x.o)), green), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:yellow
'λx.forall(or[blue,not[size1]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(and[size3,not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),and[size2,and[circle,nor[apply(same_color,x.o),not[and[and[circle,green],apply(same_shape,iota(filter(x.s, and[not[size1],and[circle,circle]])))]]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[blue,size3],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[blue,not[size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[or[or[blue,size3],apply(same_color,iota(filter(x.s, blue)))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size3), size1), and[apply(same_shape,iota(filter(x.s, blue))),and[not[size1],and[not[not[apply(same_size,iota(x.s))]],and[apply(same_shape,x.o),triangle]]]]), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:rectangle
'λx.apply(not[implies[green,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(not[not[size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), not[and[iff[blue,iff[size1,size2]],or[triangle,or[size3,size3]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:iff[%s,%s];4:size1;4:size2;4:or[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:size3
'λx.apply(apply(same_color,x.o),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,iota(x.s)), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(not[or[and[triangle,and[blue,triangle]],circle]], filter(filter(x.s, size2), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:triangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.forall(nor[size1,rectangle],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[and[or[yellow,size2],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,size3],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[nor[size1,blue],and[size2,and[not[or[size3,circle]],and[size1,size3]]]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:blue;4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:circle;4:and[%s,%s];4:size1;4:size3;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, blue), blue), size1), or[not[rectangle],or[not[size2],apply(same_size,iota(x.s))]]), or[size1,size3]), green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size1;4:or[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3;4:green;4:size3
'λx.apply(not[and[size1,apply(same_size,iota(filter(filter(filter(x.s, size1), apply(same_color,x.o)), green)))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(not[and[yellow,not[yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,size2],iota(filter(x.s, or[yellow,and[and[size3,not[not[yellow]]],triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:not[%s];4:yellow;4:triangle
'λx.apply(and[size1,apply(same_size,iota(filter(x.s, blue)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[yellow,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, green))),blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;1:%s.o;2:x
'λx.forall(not[and[green,apply(same_shape,x.o)]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, iff[not[not[or[implies[triangle,size2],size3]]],size2]), and[size3,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:triangle;4:size2;4:size3;4:size2;4:and[%s,%s];4:size3;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, yellow), not[rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:rectangle
'λx.apply(not[nand[yellow,and[size2,blue]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, and[blue,yellow]), circle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow;4:circle;4:rectangle
'λx.apply(not[or[and[rectangle,size2],size3]],iota(filter(x.s, or[green,or[triangle,yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:triangle;4:yellow
'λx.contains(iota(filter(x.s, and[size2,circle])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, rectangle), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.forall(not[circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, blue), yellow), or[size3,triangle]), yellow), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:or[%s,%s];4:size3;4:triangle;4:yellow;4:blue
'λx.apply(or[size2,size2],iota(filter(filter(x.s, blue), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(not[not[and[or[apply(same_color,x.o),apply(same_size,x.o)],circle]]],iota(filter(filter(filter(filter(x.s, yellow), not[size2]), size1), not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size2;4:size1;4:not[%s];4:size1
'λx.apply(blue,iota(filter(filter(x.s, size2), and[size2,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:blue
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, not[and[implies[and[not[triangle],apply(same_shape,x.o)],size1],nand[yellow,not[or[size2,iff[blue,nor[size1,rectangle]]]]]]]), and[size1,circle]), apply(same_shape,iota(filter(x.s, blue)))), apply(size-leq,x.o)))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:nand[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:size2;4:iff[%s,%s];4:blue;4:nor[%s,%s];4:size1;4:rectangle;4:and[%s,%s];4:size1;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, rectangle), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(nor[apply(size-gt,x.o),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.exists(and[green,triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.apply(nor[green,apply(size-lt,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[apply(same_color,x.o),not[circle]],implies[triangle,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:circle;4:implies[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(x.s)),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[nand[blue,not[apply(same_size,x.o)]],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(not[and[size2,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, or[rectangle,blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:blue
'λx.exists(and[yellow,apply(same_size,iota(x.s))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[or[apply(same_shape,x.o),or[size2,size2]],not[and[size2,size1]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size2;4:size2;4:not[%s];4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[yellow,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.exists(nand[green,yellow], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:green;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size3,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, and[circle,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle
'λx.apply(or[or[yellow,yellow],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-lt,x.o), filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(filter(x.s, size3), not[not[yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:not[%s];4:yellow
'λx.apply(size3,iota(filter(filter(x.s, apply(same_size,x.o)), nand[yellow,nand[blue,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:nand[%s,%s];4:blue;4:green
'λx.apply(implies[circle,and[and[blue,green],and[apply(size-gt,x.o),green]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size1,apply(size-gt,iota(x.s))],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[size3,or[size2,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size3), circle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:size2
'λx.exists(rectangle, filter(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, yellow), implies[and[yellow,and[blue,size2]],size1])))), size1), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:size2;4:size1;4:size1;4:green
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[size3,size3]), yellow), apply(same_size,iota(filter(x.s, rectangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(size-geq,x.o),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[size1,nand[size1,rectangle]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:nand[%s,%s];4:size1;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(or[triangle,circle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(triangle,iota(filter(x.s, not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(filter(x.s, yellow), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.exists(triangle, filter(filter(x.s, rectangle), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(nand[nand[triangle,triangle],and[apply(same_size,iota(filter(filter(filter(x.s, yellow), green), size1))),or[or[triangle,not[green]],iff[size2,apply(same_size,iota(x.s))]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:size1;4:or[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:green;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, iff[size3,apply(size-lt,x.o)]), not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:size2
'λx.apply(and[green,not[not[yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[size1,size3],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, nand[circle,iff[size2,apply(same_shape,iota(x.s))]]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(or[blue,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, circle), and[not[size3],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:not[%s];4:size3;4:green
'λx.apply(triangle,iota(filter(filter(x.s, and[size3,triangle]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle;4:triangle
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,x.o)), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(not[size2],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[size2],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[size1],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[size3],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[blue,size1],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(iff[iff[green,nor[green,size3]],green],iota(filter(x.s, or[size2,nor[triangle,yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:green;4:nor[%s,%s];4:green;4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:nor[%s,%s];4:triangle;4:yellow
'λx.apply(not[and[triangle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, triangle), and[apply(same_color,x.o),green]), iff[triangle,and[and[rectangle,yellow],circle]]), implies[nor[and[size2,green],and[or[size2,size3],not[size3]]],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:circle;4:implies[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size2;4:green;4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:not[%s];4:size3;4:yellow
'λx.exists(apply(same_shape,iota(filter(x.s, implies[size2,not[rectangle]]))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.forall(or[and[yellow,not[blue]],apply(same_color,x.o)],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(yellow, filter(filter(filter(filter(x.s, size3), not[size2]), yellow), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2;4:yellow;4:size3
'λx.apply(or[or[size3,blue],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, and[green,or[size2,blue]]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:blue;4:rectangle
'λx.exists(and[size1,size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size1;4:size2;3:%s.s;2:x
'λx.apply(nor[rectangle,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,implies[rectangle,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:implies[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size2,size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size3;3:%s.s;2:x
'λx.exists(and[size2,size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(and[green,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, size3), size1)))), triangle), size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:triangle;4:size2
'λx.apply(and[yellow,green],iota(filter(x.s, iff[apply(size-gt,iota(x.s)),size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size3), rectangle), yellow), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:yellow;4:size1
'λx.empty(filter(x.s, and[yellow,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(not[green],iota(filter(filter(x.s, not[implies[size3,size2]]), and[not[green],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:size3;4:size2;4:and[%s,%s];4:not[%s];4:green;4:yellow
'λx.exists(and[or[yellow,yellow],nand[and[or[circle,size1],yellow],circle]], filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[and[triangle,circle],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[triangle,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(not[apply(same_size,x.o)],filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(green,filter(x.s, and[not[not[blue]],apply(same_shape,iota(x.s))]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(green,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:%s.s;2:x
'λx.contains(iota(filter(x.s, not[green])), filter(x.s, or[circle,not[and[triangle,circle]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:triangle;4:circle
'λx.apply(and[apply(same_color,iota(x.s)),rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size2],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[size3,apply(same_size,iota(filter(x.s, iff[triangle,size2])))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(filter(filter(x.s, triangle), and[triangle,yellow]), rectangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:yellow;4:rectangle;4:yellow
'λx.apply(and[and[nand[rectangle,apply(same_shape,x.o)],size3],green],iota(filter(filter(x.s, triangle), or[size3,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size3;4:rectangle
'λx.exists(or[circle,blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, not[and[not[triangle],blue]]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:triangle;4:blue;4:green
'λx.exists(nand[rectangle,green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:green;3:%s.s;2:x
'λx.apply(or[size1,iff[and[yellow,triangle],apply(same_size,iota(filter(filter(filter(filter(x.s, apply(same_color,x.o)), size1), or[not[yellow],iff[circle,triangle]]), yellow)))]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:iff[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:or[%s,%s];4:not[%s];4:yellow;4:iff[%s,%s];4:circle;4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size3,size2],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[and[size3,yellow],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(nand[nand[and[and[triangle,and[triangle,and[green,yellow]]],not[and[and[blue,size1],green]]],yellow],size2],iota(filter(filter(filter(x.s, not[or[or[not[size2],triangle],triangle]]), apply(same_shape,x.o)), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:yellow;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:green;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:triangle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(apply(size-geq,iota(filter(filter(filter(x.s, blue), rectangle), blue))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(and[size1,yellow], filter(filter(filter(x.s, not[blue]), green), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:green;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, blue), nand[size2,nor[yellow,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:size2;4:nor[%s,%s];4:yellow;4:green
'λx.apply(not[nor[size2,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(or[and[not[green],circle],apply(same_size,iota(x.s))], filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[triangle,iff[and[yellow,nor[size1,or[iff[size2,apply(same_size,iota(filter(filter(filter(filter(filter(x.s, and[and[blue,rectangle],size3]), size3), triangle), rectangle), size1)))],green]]],size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:size1;4:or[%s,%s];4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:size3;4:size3;4:triangle;4:rectangle;4:size1;4:green;4:size2;1:%s.o;2:x
'λx.apply(or[blue,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, green), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(implies[and[size2,or[circle,apply(same_size,iota(x.s))]],triangle],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[or[blue,and[apply(size-geq,iota(x.s)),implies[size2,triangle]]],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, and[not[blue],size3]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), circle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:circle
'λx.contains(iota(filter(filter(filter(filter(filter(filter(filter(x.s, green), not[not[triangle]]), circle), yellow), size2), rectangle), apply(size-lt,iota(x.s)))), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:not[%s];4:triangle;4:circle;4:yellow;4:size2;4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, not[or[yellow,triangle]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:triangle;4:circle
'λx.apply(or[rectangle,and[size1,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), iff[green,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:green;4:size1
'λx.forall(and[size3,green],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.apply(or[rectangle,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size2],or[circle,not[triangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:circle;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, triangle), and[apply(same_size,x.o),green]), nor[size1,rectangle]), not[triangle]), triangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:nor[%s,%s];4:size1;4:rectangle;4:not[%s];4:triangle;4:triangle;4:yellow
'λx.apply(and[size3,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(and[size2,and[size1,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, rectangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(or[triangle,yellow],iota(filter(x.s, or[triangle,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green
'λx.apply(and[green,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(x.s, yellow), size3), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:yellow
'λx.apply(not[and[not[size1],apply(same_size,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,or[apply(same_size,x.o),green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, apply(same_size,iota(filter(x.s, triangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(x.s, and[size2,yellow])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, triangle), not[blue]), size2)), filter(filter(filter(x.s, and[size3,nand[size3,size1]]), apply(same_shape,x.o)), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:nand[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(apply(same_size,iota(filter(x.s, rectangle))), filter(x.s, not[or[implies[blue,apply(same_shape,x.o)],yellow]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.contains(iota(filter(x.s, or[apply(size-lt,x.o),iff[iff[circle,blue],rectangle]])), filter(x.s, not[triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:iff[%s,%s];4:iff[%s,%s];4:circle;4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[iff[size2,or[yellow,rectangle]],green],iota(filter(filter(x.s, yellow), or[nor[triangle,triangle],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:nor[%s,%s];4:triangle;4:triangle;4:blue
'λx.apply(or[size1,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.forall(size3,filter(filter(filter(x.s, apply(same_color,x.o)), size3), not[size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:not[%s];4:size2
'λx.apply(iff[or[size2,circle],and[size3,blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:size2;4:circle;4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size2,size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, not[apply(size-geq,x.o)]), and[rectangle,and[size1,and[circle,blue]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), and[yellow,rectangle]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:rectangle;4:green
'λx.forall(green,filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[rectangle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[and[size3,circle],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), size1), and[iff[yellow,size1],and[or[apply(same_size,x.o),apply(same_color,iota(x.s))],and[apply(same_shape,iota(filter(x.s, green))),triangle]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[not[not[rectangle]],and[size1,rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, size3), not[apply(same_size,x.o)]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, triangle), green), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:rectangle
'λx.contains(iota(filter(x.s, size2)), filter(x.s, not[yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(or[not[size3],size2],iota(filter(filter(filter(x.s, size1), not[not[yellow]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:not[%s];4:yellow;4:circle
'λx.apply(apply(same_color,iota(filter(x.s, size3))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[apply(same_shape,x.o)],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(implies[and[or[yellow,not[circle]],green],rectangle],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:circle;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(size-gt,iota(x.s)),filter(filter(filter(filter(x.s, size1), and[size2,triangle]), triangle), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size2;4:triangle;4:triangle;4:circle
'λx.contains(x.o, filter(x.s, or[circle,size2]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size2
'λx.contains(iota(filter(filter(filter(x.s, apply(same_shape,x.o)), nor[size1,size1]), implies[yellow,green])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:size1;4:implies[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(filter(filter(x.s, and[green,apply(same_color,x.o)]), size1), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:yellow
'λx.apply(or[implies[circle,and[size1,and[triangle,or[not[size3],and[size2,or[triangle,circle]]]]]],triangle],iota(filter(filter(filter(filter(x.s, and[blue,size3]), yellow), size3), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:yellow;4:size3;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, implies[size3,or[green,size1]]), apply(same_size,x.o)), size1), and[not[green],blue]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:or[%s,%s];4:green;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:and[%s,%s];4:not[%s];4:green;4:blue;4:size3
'λx.forall(triangle,filter(filter(x.s, or[blue,or[size2,or[yellow,rectangle]]]), nor[and[rectangle,and[yellow,or[and[size1,triangle],green]]],green]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:green;4:green
'λx.apply(nand[yellow,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[size1,not[size3]],iota(filter(filter(x.s, triangle), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[size3,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(or[or[nor[size1,or[or[yellow,yellow],and[or[green,size3],size2]]],yellow],size3],iota(filter(x.s, nand[size2,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:or[%s,%s];4:green;4:size3;4:size2;4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:green
'λx.apply(nor[yellow,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[or[circle,yellow],blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:blue;3:%s.s;2:x
'λx.apply(and[size2,nor[yellow,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:nor[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, and[yellow,size3]), not[and[blue,not[nand[apply(same_color,iota(x.s)),yellow]]]]), circle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3;4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(nand[and[blue,green],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:green;4:yellow;1:%s.o;2:x
'λx.apply(nand[triangle,apply(same_color,iota(filter(x.s, size1)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.exists(or[circle,size3], filter(x.s, apply(size-lt,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(nor[size1,rectangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, iff[apply(size-gt,iota(x.s)),or[implies[not[iff[triangle,yellow]],green],green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:triangle;4:yellow;4:green;4:green
'λx.apply(not[not[triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(green,filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(green,filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nor[green,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[size2,not[nor[size3,blue]]]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:nor[%s,%s];4:size3;4:blue;4:size3
'λx.apply(and[and[iff[or[or[size2,size2],yellow],and[not[yellow],or[rectangle,not[triangle]]]],rectangle],and[not[rectangle],triangle]],iota(filter(filter(x.s, yellow), nor[not[size2],apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:size2;4:yellow;4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:rectangle;4:not[%s];4:triangle;4:rectangle;4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(nand[blue,size1],filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[green,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(implies[iff[triangle,not[or[size2,apply(same_color,iota(x.s))]]],not[and[triangle,nand[not[triangle],and[apply(same_size,iota(filter(x.s, blue))),triangle]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(size2,iota(filter(x.s, not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(size1,iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(not[apply(size-lt,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[yellow,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.apply(green,iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(green,iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(and[and[or[size3,apply(same_size,iota(filter(filter(x.s, circle), and[size3,circle])))],and[circle,circle]],or[blue,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:circle;4:circle;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[circle,circle]), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:size3
'λx.apply(and[and[yellow,and[or[or[rectangle,circle],and[and[circle,nand[not[blue],triangle]],size3]],and[not[triangle],rectangle]]],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:not[%s];4:blue;4:triangle;4:size3;4:and[%s,%s];4:not[%s];4:triangle;4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, green), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.exists(rectangle, filter(filter(filter(x.s, apply(same_shape,iota(x.s))), nand[size2,and[yellow,nor[rectangle,size2]]]), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:rectangle;4:size2;4:size1
'λx.empty(filter(x.s, not[circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.contains(iota(filter(filter(filter(filter(x.s, size1), size2), blue), rectangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:blue;4:rectangle;3:%s.s;2:x
'λx.exists(iff[size2,size2], filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, or[blue,and[and[nand[apply(size-gt,iota(x.s)),size2],not[apply(size-lt,x.o)]],and[size3,size3]]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size2;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size3;4:circle
'λx.apply(and[and[or[yellow,and[size3,apply(same_shape,iota(x.s))]],triangle],and[size3,not[size2]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size3;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,not[green]],iota(filter(x.s, and[or[size1,implies[not[and[circle,and[green,size1]]],yellow]],not[size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:green;4:size1;4:yellow;4:not[%s];4:size2
'λx.apply(nand[blue,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nor[green,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.forall(blue,filter(filter(filter(x.s, not[rectangle]), nand[and[blue,green],circle]), and[size2,size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:blue;4:green;4:circle;4:and[%s,%s];4:size2;4:size1
'λx.apply(and[rectangle,or[triangle,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,and[rectangle,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[size2], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(blue, filter(x.s, not[size3]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.empty(filter(filter(filter(x.s, not[nor[green,apply(same_shape,iota(x.s))]]), blue), nor[blue,circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:blue;4:circle
'λx.apply(iff[or[iff[size2,nand[and[yellow,or[size2,green]],green]],triangle],triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:size2;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:green;4:green;4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nand[triangle,circle],nor[and[size3,size3],size3]],iota(filter(filter(x.s, size2), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:circle;4:nor[%s,%s];4:and[%s,%s];4:size3;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(not[green],iota(filter(filter(x.s, or[not[size1],size2]), apply(size-lt,iota(filter(x.s, blue))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size1;4:size2;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[not[size1],and[or[blue,nand[size2,rectangle]],or[nor[apply(size-leq,iota(filter(x.s, circle))),circle],triangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:blue;4:nand[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(filter(filter(filter(x.s, apply(same_color,iota(x.s))), blue), size1), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:size1;4:size2
'λx.apply(iff[yellow,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size1,triangle],not[size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[not[size3],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:yellow
'λx.contains(iota(filter(filter(x.s, size1), size2)), filter(filter(filter(filter(x.s, size1), size2), yellow), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:yellow;4:yellow
'λx.exists(yellow, filter(x.s, and[not[circle],circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:circle
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, or[size3,triangle]), circle), triangle), not[nor[green,and[not[apply(same_shape,x.o)],yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:circle;4:triangle;4:not[%s];4:nor[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(circle,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(filter(x.s, yellow), nor[size2,circle]))),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(implies[rectangle,green],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, size1), not[implies[size2,nand[apply(size-lt,x.o),yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:implies[%s,%s];4:size2;4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow
'λx.empty(filter(x.s, and[and[circle,iff[size2,yellow]],size3]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:yellow;4:size3
'λx.forall(size3,filter(x.s, iff[apply(same_size,x.o),size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.contains(iota(filter(filter(x.s, and[rectangle,yellow]), yellow)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(or[blue,nor[size3,size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,size1],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, and[iff[size3,apply(same_size,x.o)],size2]), and[apply(same_color,x.o),yellow]), blue), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:blue;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, green), triangle), or[size2,or[size1,circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:circle
'λx.empty(filter(filter(filter(filter(x.s, size3), circle), blue), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:blue;4:circle
'λx.apply(or[rectangle,size3],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size1],iota(filter(filter(filter(x.s, size3), implies[rectangle,blue]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:rectangle;4:blue;4:size3
'λx.contains(iota(x.s), filter(filter(x.s, circle), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(nand[triangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, size1), green), apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[and[and[rectangle,size3],and[circle,triangle]],and[and[size2,size3],iff[and[triangle,triangle],green]]]), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, not[rectangle]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:triangle
'λx.apply(apply(same_shape,x.o),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[circle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1
'λx.apply(nor[or[size1,circle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size1;4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[green,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(filter(x.s, not[and[apply(same_color,x.o),size3]]), and[and[yellow,triangle],circle]), apply(same_size,iota(x.s))), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_shape,x.o)), size2), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:yellow
'λx.forall(blue,filter(filter(x.s, or[size3,rectangle]), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle;4:circle
'λx.exists(size3, filter(filter(x.s, apply(size-lt,iota(x.s))), nor[and[circle,circle],size1]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:circle;4:circle;4:size1
'λx.apply(not[nor[circle,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(x.s, rectangle)), filter(filter(x.s, apply(size-geq,x.o)), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue
'λx.apply(or[blue,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[blue,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[blue,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, yellow), or[and[size3,size1],and[not[triangle],circle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:and[%s,%s];4:not[%s];4:triangle;4:circle
'λx.empty(filter(x.s, and[circle,and[size2,rectangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:rectangle
'λx.exists(implies[or[blue,size3],yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:size3;4:yellow;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[and[and[size3,blue],circle],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:circle;4:circle
'λx.apply(implies[blue,nor[apply(size-geq,x.o),blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[blue,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, size2), or[and[and[iff[size2,rectangle],and[apply(same_shape,iota(filter(x.s, blue))),size3]],size1],implies[iff[circle,size2],blue]]), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size1;4:implies[%s,%s];4:iff[%s,%s];4:circle;4:size2;4:blue;4:rectangle
'λx.apply(nand[size2,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), and[size1,and[and[circle,circle],blue]]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;4:green
'λx.apply(nand[green,apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(and[yellow,green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(or[yellow,apply(size-geq,iota(filter(x.s, or[yellow,or[triangle,and[size2,size1]]])))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[not[green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(filter(filter(x.s, not[or[and[apply(size-geq,iota(filter(x.s, or[circle,green]))),size1],or[size3,size1]]]), circle), and[not[size2],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:green;4:size1;4:or[%s,%s];4:size3;4:size1;4:circle;4:and[%s,%s];4:not[%s];4:size2;4:size2
'λx.exists(apply(size-geq,x.o), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size1), yellow), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:yellow
'λx.contains(iota(x.s), filter(x.s, green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(x.s, size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(x.s), filter(x.s, size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(x.s), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(apply(same_size,x.o), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(x.s), filter(x.s, or[yellow,yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:yellow
'λx.exists(green, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[circle,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size2,size2],filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[apply(same_size,x.o),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.exists(apply(size-leq,x.o), filter(filter(x.s, rectangle), and[triangle,size2]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:triangle;4:size2
'λx.apply(nor[circle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[blue,and[size1,apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(implies[circle,blue],filter(filter(x.s, size2), or[apply(same_shape,iota(x.s)),rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.exists(size3, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size2, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size1, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[rectangle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[size3,or[rectangle,apply(same_size,iota(filter(filter(x.s, blue), and[or[apply(same_size,iota(x.s)),and[size2,yellow]],or[nand[green,triangle],size1]])))]],iota(filter(x.s, and[implies[triangle,size2],or[green,blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:nand[%s,%s];4:green;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:green;4:blue
'λx.apply(size2,iota(filter(x.s, not[and[size3,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:green
'λx.apply(and[or[and[circle,green],apply(same_size,iota(x.s))],iff[and[circle,size3],apply(same_shape,iota(x.s))]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:circle;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,circle],iota(filter(filter(x.s, rectangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.forall(size1,filter(filter(x.s, not[yellow]), and[yellow,or[apply(same_shape,iota(filter(x.s, size1))),rectangle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(or[yellow,nor[iff[green,circle],size1]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:nor[%s,%s];4:iff[%s,%s];4:green;4:circle;4:size1;3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, yellow), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.empty(filter(filter(x.s, and[blue,circle]), not[circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:not[%s];4:circle
'λx.apply(and[and[circle,and[triangle,and[size2,yellow]]],rectangle],iota(filter(filter(x.s, triangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, circle), size1), blue), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:blue;4:green
'λx.apply(and[triangle,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[not[green],and[nand[or[size3,rectangle],size2],apply(same_shape,x.o)]]), not[nor[and[and[size2,yellow],and[triangle,or[not[apply(same_shape,x.o)],size3]]],rectangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:rectangle
'λx.apply(not[and[size3,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(not[and[size3,not[not[size2]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:not[%s];4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size1,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, size3), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, or[or[apply(size-geq,x.o),implies[iff[size2,triangle],and[yellow,rectangle]]],circle]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:implies[%s,%s];4:iff[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:yellow;4:rectangle;4:circle;4:blue
'λx.apply(nand[size2,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(nand[size3,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(nor[green,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.exists(not[and[size2,not[size2]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size2;4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(implies[size2,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[apply(size-lt,x.o),nor[nand[yellow,and[and[and[blue,apply(same_shape,iota(filter(x.s, and[rectangle,not[yellow]])))],blue],size2]],green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nor[%s,%s];4:nand[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:yellow;4:blue;4:size2;4:green;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, iff[blue,and[not[green],or[and[and[not[apply(same_size,x.o)],yellow],triangle],yellow]]]), circle), nor[circle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:triangle;4:yellow;4:circle;4:nor[%s,%s];4:circle;4:size2
'λx.exists(blue, filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[not[size1],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,or[size3,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size1,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(nand[size1,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[nand[apply(same_size,iota(filter(filter(filter(filter(x.s, and[not[not[or[blue,not[size3]]]],triangle]), not[size3]), green), yellow))),size3],not[not[blue]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:not[%s];4:size3;4:triangle;4:not[%s];4:size3;4:green;4:yellow;4:size3;4:not[%s];4:not[%s];4:blue
'λx.contains(x.o, filter(filter(x.s, rectangle), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(nor[size2,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size1,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, not[size2]), and[or[rectangle,triangle],not[not[and[size3,not[and[not[and[yellow,rectangle]],triangle]]]]]])), filter(x.s, and[green,triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle
'λx.apply(apply(same_color,iota(filter(x.s, triangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(implies[and[size3,triangle],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, and[yellow,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(apply(same_color,iota(filter(filter(x.s, blue), size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, and[circle,apply(same_shape,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(size-geq,iota(x.s)), filter(filter(filter(x.s, not[size3]), not[and[size2,triangle]]), not[circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:not[%s];4:and[%s,%s];4:size2;4:triangle;4:not[%s];4:circle
'λx.apply(blue,iota(filter(filter(x.s, size1), or[or[triangle,blue],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:circle
'λx.forall(green,filter(x.s, not[size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(or[rectangle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(implies[nor[nand[and[circle,apply(same_color,x.o)],apply(same_color,x.o)],size1],size2],iota(filter(filter(x.s, blue), or[size1,not[apply(same_shape,iota(filter(x.s, size3)))]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[nor[and[triangle,triangle],not[or[triangle,yellow]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:not[%s];4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(x.s, nor[apply(same_size,iota(filter(x.s, size2))),rectangle])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size3), blue), green), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:green;4:size2
'λx.contains(iota(x.s), filter(x.s, or[green,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:green
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, iff[or[circle,size2],triangle]), size1), size1), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:circle;4:size2;4:triangle;4:size1;4:size1;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, size3))),iota(filter(filter(x.s, size2), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.exists(or[rectangle,rectangle], filter(filter(x.s, triangle), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(apply(same_size,iota(filter(filter(x.s, not[green]), size3))),iota(filter(filter(filter(x.s, size1), size1), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size1
'λx.empty(filter(filter(x.s, size2), apply(size-geq,iota(filter(x.s, triangle)))))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(and[or[size1,size2],circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size2;4:circle;3:%s.s;2:x
'λx.apply(and[yellow,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(not[apply(size-gt,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(and[green,blue],filter(filter(x.s, apply(size-lt,x.o)), apply(same_color,iota(filter(filter(x.s, yellow), or[size3,apply(same_size,iota(filter(filter(filter(x.s, green), size3), size1)))])))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:green;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:size1
'λx.apply(blue,iota(filter(filter(x.s, circle), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[rectangle,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,not[size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(and[triangle,and[size2,and[circle,and[rectangle,size1]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, triangle), size2), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:circle
'λx.forall(apply(same_color,iota(x.s)),filter(filter(filter(x.s, and[size1,and[circle,yellow]]), yellow), and[nor[and[yellow,rectangle],size1],blue]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:yellow;4:yellow;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:size1;4:blue
'λx.apply(and[size1,nand[circle,iff[and[and[and[size3,not[size2]],size2],size2],circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nand[%s,%s];4:circle;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:size2;4:size2;4:size2;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[green,rectangle],iota(filter(filter(filter(x.s, size2), and[size2,triangle]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:triangle;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(x.s, size2), size1), yellow), or[and[circle,and[rectangle,or[size2,not[and[size2,or[yellow,green]]]]]],triangle])), filter(filter(x.s, apply(same_color,x.o)), apply(size-leq,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:yellow;4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:green;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(nand[green,not[triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[not[implies[size3,size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, or[yellow,green]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green;4:circle
'λx.apply(not[and[yellow,nor[and[blue,and[or[apply(size-lt,iota(x.s)),size3],circle]],not[rectangle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size3;4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(iff[apply(same_size,iota(filter(filter(x.s, and[blue,size1]), size3))),triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[rectangle,and[and[blue,or[and[apply(same_color,iota(x.s)),not[rectangle]],rectangle]],apply(size-leq,iota(x.s))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:rectangle;4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size2), circle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:rectangle
'λx.exists(blue, filter(filter(filter(x.s, circle), and[apply(size-gt,iota(filter(x.s, size1))),not[or[not[apply(size-lt,iota(filter(x.s, triangle)))],size1]]]), or[green,and[blue,yellow]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:yellow
'λx.apply(and[and[apply(same_shape,x.o),blue],or[green,size1]],iota(filter(filter(x.s, and[size2,green]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:or[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green;4:yellow
'λx.apply(not[or[apply(size-gt,iota(x.s)),iff[yellow,and[and[triangle,triangle],apply(same_shape,iota(x.s))]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, size2), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.forall(size1,filter(filter(x.s, size1), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(and[green,not[circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(implies[yellow,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, blue), size2), and[not[apply(same_size,iota(filter(filter(x.s, apply(same_size,x.o)), blue)))],and[yellow,circle]]), not[and[rectangle,not[blue]]]), not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:and[%s,%s];4:yellow;4:circle;4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:blue;4:not[%s];4:green
'λx.forall(implies[triangle,triangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(or[rectangle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[size2,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(implies[not[rectangle],not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(x.s)),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, green), nor[not[not[and[blue,size1]]],size2]), and[rectangle,nand[iff[green,not[size3]],and[circle,green]]])), filter(filter(x.s, rectangle), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:size1;4:size2;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:iff[%s,%s];4:green;4:not[%s];4:size3;4:and[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(and[rectangle,triangle],iota(filter(filter(filter(x.s, circle), size1), and[apply(size-geq,iota(filter(x.s, size2))),size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(iff[yellow,not[circle]],iota(filter(filter(filter(x.s, circle), and[yellow,and[green,green]]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:green;4:size1
'λx.exists(green, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[and[size1,size1],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[not[blue],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(implies[rectangle,and[iff[yellow,yellow],green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:green;1:%s.o;2:x
'λx.exists(size2, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size3, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[and[blue,size2],size2],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, blue), or[triangle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:blue
'λx.exists(implies[or[apply(same_color,x.o),not[blue]],circle], filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(x.s, apply(same_size,x.o)), or[size1,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size1;4:size3
'λx.apply(nand[green,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(filter(filter(x.s, size2), size1), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:yellow
'λx.exists(and[size2,and[circle,size2]], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[not[triangle],not[not[and[size1,size2]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(or[blue,size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(nor[size2,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[not[blue],not[size1]],iota(filter(filter(filter(filter(x.s, size1), size3), rectangle), or[size3,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:rectangle;4:or[%s,%s];4:size3;4:size3
'λx.forall(and[blue,or[blue,rectangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(and[nand[nor[iff[size1,apply(same_color,iota(x.s))],size1],blue],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[green,and[or[circle,and[yellow,nand[circle,circle]]],size3]],iota(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), green), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(nor[size1,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(iff[rectangle,not[not[or[apply(size-lt,x.o),and[yellow,or[triangle,and[triangle,size2]]]]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), filter(filter(filter(filter(x.s, blue), apply(same_color,iota(x.s))), size1), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(circle,iota(filter(x.s, or[blue,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size2
'λx.exists(circle, filter(filter(filter(filter(filter(filter(x.s, not[and[rectangle,and[size3,or[and[and[yellow,nor[green,circle]],size1],yellow]]]]), size1), rectangle), size2), and[yellow,yellow]), and[or[or[circle,triangle],rectangle],blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:green;4:circle;4:size1;4:yellow;4:size1;4:rectangle;4:size2;4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:rectangle;4:blue
'λx.contains(iota(filter(filter(x.s, not[not[size1]]), circle)), filter(filter(filter(x.s, not[apply(size-geq,x.o)]), rectangle), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size1;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;4:circle
'λx.apply(not[circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(x.s, or[not[yellow],and[triangle,yellow]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:triangle;4:yellow
'λx.exists(triangle, filter(filter(x.s, and[size2,triangle]), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:rectangle
'λx.apply(nand[triangle,iff[size3,or[and[apply(same_shape,iota(filter(x.s, not[size2]))),or[size1,triangle]],green]]],iota(filter(x.s, and[yellow,not[green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:iff[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:or[%s,%s];4:size1;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:green
'λx.forall(and[not[and[nand[and[not[rectangle],green],apply(size-lt,x.o)],not[green]]],triangle],filter(filter(filter(filter(x.s, rectangle), green), yellow), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:green;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:yellow;4:yellow
'λx.apply(and[green,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size2,and[implies[size1,yellow],blue]],iota(filter(filter(x.s, size3), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:size1;4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.contains(iota(filter(x.s, size3)), filter(x.s, blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[circle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(implies[circle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(implies[circle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, triangle), apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[yellow,and[and[or[blue,circle],nand[rectangle,and[rectangle,blue]]],or[size3,apply(size-gt,x.o)]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:blue;4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[and[or[blue,yellow],apply(size-leq,x.o)],yellow]), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;4:circle
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, triangle), and[apply(same_color,iota(x.s)),or[blue,circle]]), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, rectangle), or[circle,circle]), and[size3,triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:circle;4:circle;4:and[%s,%s];4:size3;4:triangle
'λx.exists(apply(same_color,x.o), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(apply(size-leq,iota(filter(x.s, or[circle,apply(same_color,x.o)]))),filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, and[triangle,size2]), implies[and[and[size2,green],blue],size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:blue;4:size3
'λx.apply(or[rectangle,nand[yellow,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(x.s)),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[and[nor[rectangle,yellow],green],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:yellow;4:green;4:size3;1:%s.o;2:x
'λx.apply(not[not[and[blue,blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(not[blue],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:blue;3:%s.s;2:x
'λx.forall(and[size3,triangle],filter(filter(filter(x.s, blue), circle), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[green,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[green,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[green,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(and[nor[and[size2,yellow],size2],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:size2;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, and[not[circle],blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:blue
'λx.forall(blue,filter(x.s, apply(same_color,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[green,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(not[nand[size2,blue]],filter(filter(x.s, not[size1]), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:rectangle
'λx.forall(blue,filter(filter(x.s, green), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.forall(green,filter(filter(x.s, and[not[rectangle],not[blue]]), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:blue;4:circle
'λx.apply(apply(same_size,iota(filter(filter(x.s, implies[size2,nand[green,green]]), and[not[triangle],or[and[and[yellow,and[rectangle,iff[circle,not[or[yellow,size3]]]]],size2],apply(size-geq,x.o)]]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:nand[%s,%s];4:green;4:green;4:and[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:yellow;4:size3;4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,or[rectangle,size1]],iota(filter(x.s, not[rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(or[and[triangle,triangle],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nor[size2,and[yellow,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, not[yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(nand[yellow,triangle], filter(x.s, apply(same_color,iota(filter(x.s, apply(same_color,x.o))))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[or[rectangle,size3],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(implies[iff[size1,and[circle,apply(same_size,iota(x.s))]],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), iff[not[apply(same_shape,x.o)],nand[circle,triangle]]), and[triangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:triangle;4:yellow
'λx.exists(or[apply(same_shape,x.o),green], filter(x.s, apply(size-geq,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, or[and[not[apply(size-gt,iota(x.s))],yellow],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue
'λx.forall(and[size2,nor[apply(same_size,iota(x.s)),and[and[size2,and[rectangle,triangle]],size2]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:triangle;4:size2;3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(x.s, apply(same_size,iota(filter(x.s, apply(same_size,iota(filter(x.s, triangle)))))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, and[size1,not[rectangle]]), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:rectangle;4:blue
'λx.forall(implies[rectangle,size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.forall(implies[rectangle,size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.exists(not[not[apply(same_shape,iota(filter(filter(filter(filter(x.s, size3), size3), rectangle), green)))]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:rectangle;4:green;3:%s.s;2:x
'λx.forall(or[circle,and[nand[or[not[rectangle],blue],and[yellow,rectangle]],and[size1,or[size2,apply(same_size,iota(filter(x.s, yellow)))]]]],filter(filter(x.s, not[yellow]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:blue;4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size1
'λx.apply(nand[size2,and[size2,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[not[circle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:circle
'λx.apply(not[and[rectangle,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(iff[apply(same_color,x.o),blue], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[yellow,or[triangle,apply(same_shape,iota(x.s))]],filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[implies[size2,yellow],and[size3,apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,not[circle]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[yellow,implies[triangle,size2]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:implies[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size1,iota(filter(filter(filter(x.s, size3), size3), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:rectangle
'λx.apply(and[circle,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, size3), or[apply(size-leq,iota(x.s)),not[apply(same_size,x.o)]]), and[green,circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(or[or[not[triangle],nor[not[apply(same_size,iota(filter(x.s, rectangle)))],size1]],implies[or[circle,circle],not[size3]]],iota(filter(x.s, and[green,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:implies[%s,%s];4:or[%s,%s];4:circle;4:circle;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(and[blue,apply(same_color,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,circle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(filter(filter(filter(filter(filter(x.s, triangle), green), not[not[yellow]]), nor[green,size2]), yellow), not[green])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:not[%s];4:not[%s];4:yellow;4:nor[%s,%s];4:green;4:size2;4:yellow;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(or[green,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[size2,implies[rectangle,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:implies[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[blue,not[triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.contains(iota(filter(filter(x.s, not[size2]), rectangle)), filter(filter(x.s, circle), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, size3), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.empty(filter(filter(x.s, rectangle), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(x.s, rectangle), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.empty(filter(filter(x.s, rectangle), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.forall(and[size1,triangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[size2,blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:blue
'λx.exists(yellow, filter(filter(x.s, blue), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.contains(x.o, filter(filter(x.s, blue), iff[blue,size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:blue;4:size1
'λx.apply(and[blue,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[iff[and[triangle,size3],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,not[rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(x.s, apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, apply(same_shape,iota(x.s)))))), nor[not[triangle],and[triangle,yellow]]), and[apply(same_size,x.o),or[green,size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:green;4:size2
'λx.apply(nand[not[iff[rectangle,triangle]],size1],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:iff[%s,%s];4:rectangle;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[size2,implies[apply(same_shape,x.o),blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_color,iota(x.s)),or[triangle,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[size2,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(and[apply(same_size,x.o),nand[not[blue],not[triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:not[%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(iff[triangle,blue],iota(filter(filter(filter(filter(filter(filter(x.s, and[triangle,circle]), or[size1,yellow]), triangle), triangle), blue), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:or[%s,%s];4:size1;4:yellow;4:triangle;4:triangle;4:blue;4:size3
'λx.exists(yellow, filter(filter(filter(filter(x.s, circle), not[triangle]), or[triangle,apply(same_color,iota(x.s))]), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:triangle;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.exists(and[triangle,blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), circle), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:triangle
'λx.apply(not[nor[size3,iff[size1,green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size3;4:iff[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, implies[yellow,not[apply(size-gt,x.o)]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[and[size1,rectangle],not[rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:not[%s];4:rectangle
'λx.apply(apply(size-geq,iota(x.s)),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, size2), rectangle), and[green,triangle]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[nand[apply(same_shape,x.o),circle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size1), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.contains(x.o, filter(x.s, and[or[and[yellow,or[not[size1],yellow]],size1],yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:size1;4:yellow;4:size1;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, size2), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(implies[rectangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),and[size1,apply(same_size,iota(filter(filter(filter(filter(filter(x.s, rectangle), apply(size-leq,iota(x.s))), not[size1]), implies[triangle,rectangle]), and[blue,circle])))]],iota(filter(x.s, not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:implies[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.exists(blue, filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, green), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, green), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(blue,iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(circle,filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(circle,filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(circle,filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, not[size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.contains(x.o, filter(x.s, not[size2]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.contains(x.o, filter(x.s, not[green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.forall(apply(same_shape,x.o),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[and[apply(size-leq,x.o),nor[yellow,blue]],and[green,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:nor[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[iff[or[yellow,size3],apply(same_shape,iota(x.s))],and[blue,and[triangle,green]]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, circle), or[or[size1,not[size2]],green]), and[or[and[circle,circle],or[size1,size3]],size3]), or[size3,iff[size1,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:size2;4:green;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:or[%s,%s];4:size1;4:size3;4:size3;4:or[%s,%s];4:size3;4:iff[%s,%s];4:size1;4:green
'λx.apply(apply(same_shape,iota(filter(filter(x.s, not[or[rectangle,size3]]), size3))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[triangle],and[not[triangle],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:not[%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, and[apply(size-lt,x.o),implies[size3,and[blue,rectangle]]]), or[green,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:and[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:green;4:blue
'λx.apply(or[not[and[and[triangle,size1],and[green,apply(same_size,iota(x.s))]]],triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(filter(x.s, size2), size1), blue), not[rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:blue;4:not[%s];4:rectangle
'λx.contains(iota(filter(filter(filter(x.s, triangle), size3), green)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:green;3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size1), iff[yellow,size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:yellow;4:size1
'λx.forall(implies[and[triangle,or[yellow,rectangle]],implies[apply(same_size,x.o),triangle]],filter(x.s, or[size3,size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, green), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), triangle), or[blue,iff[yellow,apply(size-leq,x.o)]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:or[%s,%s];4:blue;4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, size3), apply(size-lt,iota(filter(x.s, blue)))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size1, filter(filter(filter(x.s, yellow), size2), not[green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:not[%s];4:green
'λx.exists(or[circle,yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, iff[triangle,rectangle]), size3)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), or[blue,blue]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:blue;4:blue;4:triangle
'λx.apply(or[and[rectangle,and[apply(size-gt,x.o),size3]],and[not[apply(same_color,iota(x.s))],green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, circle), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(iff[blue,apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[nor[nand[nor[apply(same_color,iota(x.s)),and[green,rectangle]],blue],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle;4:blue;4:size1;1:%s.o;2:x
'λx.apply(iff[and[size1,size3],green],iota(filter(filter(x.s, apply(same_shape,iota(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size1), triangle)))), iff[green,apply(same_shape,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:triangle;4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.false'	0.000000	0.000000	0.000000	0:false
'λx.exists(apply(size-leq,iota(filter(x.s, size2))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, and[green,blue]), not[not[yellow]]), triangle), nor[apply(same_shape,x.o),iff[triangle,or[apply(size-geq,iota(filter(filter(filter(x.s, size3), blue), rectangle))),and[rectangle,rectangle]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue;4:not[%s];4:not[%s];4:yellow;4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(x.s, triangle), and[size1,size1]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:size1;4:size3
'λx.forall(apply(size-gt,x.o),filter(filter(x.s, size1), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(nor[rectangle,and[triangle,apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, and[not[size1],triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:triangle
'λx.forall(and[apply(same_shape,x.o),or[size2,and[and[yellow,blue],apply(size-lt,iota(x.s))]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(size3,iota(filter(x.s, not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(and[size2,size3],iota(filter(filter(filter(filter(x.s, circle), yellow), apply(same_size,x.o)), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.contains(iota(filter(filter(filter(filter(x.s, circle), green), circle), circle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:circle;4:circle;3:%s.s;2:x
'λx.apply(implies[green,size2],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[and[and[triangle,circle],blue],green],nor[size2,size3]],iota(filter(x.s, apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:blue;4:green;4:nor[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, iff[green,yellow]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[triangle,nand[and[green,circle],circle]],iota(filter(filter(filter(x.s, and[rectangle,and[circle,green]]), and[size2,or[yellow,size3]]), implies[and[blue,green],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:nand[%s,%s];4:and[%s,%s];4:green;4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size3;4:implies[%s,%s];4:and[%s,%s];4:blue;4:green;4:circle
'λx.apply(size3,iota(filter(x.s, and[size1,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.apply(or[not[or[size2,and[or[green,size2],nor[not[green],nand[and[circle,size2],yellow]]]]],green],iota(filter(filter(x.s, nor[and[size1,blue],not[rectangle]]), not[not[triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:green;4:size2;4:nor[%s,%s];4:not[%s];4:green;4:nand[%s,%s];4:and[%s,%s];4:circle;4:size2;4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size1;4:blue;4:not[%s];4:rectangle;4:not[%s];4:not[%s];4:triangle
'λx.apply(and[blue,size1],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(filter(filter(filter(x.s, or[implies[triangle,circle],size1]), rectangle), iff[and[or[size3,and[and[green,and[size1,yellow]],yellow]],triangle],or[rectangle,and[blue,and[yellow,and[and[blue,size1],or[rectangle,not[size3]]]]]]]), iff[blue,nand[and[blue,yellow],size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:circle;4:size1;4:rectangle;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:yellow;4:yellow;4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:or[%s,%s];4:rectangle;4:not[%s];4:size3;4:iff[%s,%s];4:blue;4:nand[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, circle), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(triangle,iota(filter(x.s, and[nor[or[not[not[not[size2]]],triangle],apply(same_color,iota(filter(filter(x.s, size1), circle)))],size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:size2;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:size3
'λx.exists(or[yellow,green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.contains(iota(filter(x.s, not[triangle])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;3:%s.s;2:x
'λx.exists(blue, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[rectangle,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(or[circle,not[circle]],iota(filter(filter(x.s, not[and[triangle,not[size1]]]), nor[apply(same_color,iota(filter(filter(x.s, circle), green))),not[size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:size1;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:not[%s];4:size1
'λx.apply(nor[implies[or[apply(same_size,x.o),not[green]],yellow],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:green;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(or[size1,or[rectangle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[apply(same_color,iota(x.s)),nand[blue,size3]],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[not[and[triangle,rectangle]],not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[triangle,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(or[size1,green],filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size1;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[triangle,or[rectangle,apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, blue), size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.exists(and[rectangle,blue], filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[rectangle,size1],iota(filter(filter(x.s, and[triangle,size3]), iff[apply(size-lt,iota(x.s)),nor[and[or[size3,blue],or[apply(same_color,x.o),nor[rectangle,blue]]],circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:blue;4:circle
'λx.forall(or[triangle,or[and[circle,size1],size3]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:size3;3:%s.s;2:x
'λx.forall(implies[or[and[blue,and[yellow,size1]],rectangle],green],filter(x.s, and[size3,size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size1;4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(or[circle,green],iota(filter(filter(x.s, and[rectangle,triangle]), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[apply(same_color,iota(filter(filter(x.s, size3), apply(same_shape,x.o)))),yellow],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, circle), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.forall(and[blue,not[not[blue]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(or[not[apply(size-geq,iota(filter(filter(filter(filter(x.s, apply(same_size,iota(x.s))), size1), size2), blue)))],and[or[not[and[size3,yellow]],size1],implies[triangle,yellow]]],filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:size2;4:blue;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:yellow;4:size1;4:implies[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(x.s, and[and[green,size1],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:blue
'λx.apply(nor[and[triangle,circle],and[blue,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, green), circle), yellow))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_color,iota(x.s))), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(and[green,not[size3]],iota(filter(x.s, or[blue,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(nor[triangle,size1],iota(filter(filter(filter(x.s, or[yellow,green]), green), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green;4:green;4:triangle
'λx.apply(size1,iota(filter(x.s, and[or[blue,nor[or[blue,size3],and[or[triangle,size1],green]]],and[blue,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:or[%s,%s];4:blue;4:size3;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:green;4:and[%s,%s];4:blue;4:size1
'λx.apply(nor[yellow,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,x.o),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size1), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, size2), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, and[yellow,not[size3]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:size3
'λx.apply(apply(size-geq,iota(filter(filter(filter(filter(filter(x.s, size1), size1), not[yellow]), size3), and[rectangle,size3]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:not[%s];4:yellow;4:size3;4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.exists(size3, filter(filter(filter(filter(x.s, blue), size3), apply(size-leq,x.o)), apply(same_size,iota(filter(x.s, implies[blue,yellow])))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, rectangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(and[blue,iff[rectangle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.forall(circle,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(circle,iota(filter(x.s, or[rectangle,not[size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:size3
'λx.contains(iota(filter(filter(filter(x.s, size2), size1), and[green,yellow])), filter(filter(x.s, and[rectangle,and[blue,or[size3,circle]]]), not[triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:and[%s,%s];4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:or[%s,%s];4:size3;4:circle;4:not[%s];4:triangle
'λx.forall(size2,filter(x.s, apply(same_shape,iota(filter(filter(filter(x.s, green), implies[blue,nand[size2,circle]]), blue)))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:blue;4:nand[%s,%s];4:size2;4:circle;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), size1), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:yellow
'λx.apply(and[apply(same_shape,iota(filter(filter(x.s, rectangle), blue))),size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(not[apply(same_shape,iota(filter(filter(filter(x.s, not[size3]), green), and[size1,triangle])))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:green;4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.exists(size3, filter(filter(x.s, iff[size3,size1]), or[or[size2,nand[or[and[apply(same_shape,x.o),size1],apply(same_color,x.o)],nand[triangle,circle]]],yellow]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:size1;4:or[%s,%s];4:or[%s,%s];4:size2;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:triangle;4:circle;4:yellow
'λx.apply(or[yellow,and[apply(same_size,iota(x.s)),circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.exists(implies[and[nand[size2,apply(size-geq,iota(x.s))],size2],size2], filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(blue,iota(filter(x.s, not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.empty(filter(filter(filter(filter(x.s, triangle), green), apply(same_color,x.o)), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(green,filter(filter(x.s, apply(same_color,iota(x.s))), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(iff[blue,size2],filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), rectangle), or[circle,not[yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:or[%s,%s];4:circle;4:not[%s];4:yellow
'λx.exists(nand[apply(same_color,iota(x.s)),or[and[green,size3],and[triangle,size2]]], filter(filter(x.s, size3), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(size2,iota(filter(x.s, apply(same_shape,iota(filter(x.s, blue))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[apply(same_size,iota(x.s)),not[circle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, green), apply(size-leq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(or[apply(same_size,x.o),blue],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(x.s, or[or[rectangle,size1],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:blue
'λx.apply(size1,iota(filter(filter(filter(x.s, yellow), circle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:triangle
'λx.exists(size3, filter(filter(filter(filter(filter(x.s, size1), triangle), triangle), green), not[not[yellow]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:triangle;4:green;4:not[%s];4:not[%s];4:yellow
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, size2), implies[size3,circle]), green), size1), and[iff[triangle,and[iff[size3,rectangle],and[size2,or[size3,iff[yellow,rectangle]]]]],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:size3;4:circle;4:green;4:size1;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:and[%s,%s];4:iff[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:size2;4:or[%s,%s];4:size3;4:iff[%s,%s];4:yellow;4:rectangle;4:green
'λx.apply(apply(same_color,iota(filter(x.s, rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[not[and[nand[size2,yellow],size1]],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:yellow;4:size1;4:triangle
'λx.apply(not[and[iff[size2,size1],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[apply(size-leq,iota(filter(x.s, size1))),size3],iota(filter(filter(x.s, and[apply(same_size,iota(x.s)),size3]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(implies[yellow,apply(same_color,iota(filter(filter(filter(filter(x.s, size3), circle), yellow), and[yellow,green])))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:yellow;4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(not[green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:%s.o;2:x
'λx.apply(implies[circle,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[blue,and[size1,rectangle]],apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[apply(same_size,x.o),blue],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[and[circle,circle],apply(size-geq,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[nand[blue,circle]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nor[blue,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size3)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size1)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(implies[rectangle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(x.s, green), triangle), or[not[green],not[not[size2]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:or[%s,%s];4:not[%s];4:green;4:not[%s];4:not[%s];4:size2
'λx.apply(and[implies[and[and[yellow,or[or[blue,apply(same_color,iota(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,iota(x.s)))))],and[not[size1],triangle]]],circle],nand[nor[size2,rectangle],size3]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:triangle;4:circle;4:nand[%s,%s];4:nor[%s,%s];4:size2;4:rectangle;4:size3;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, yellow), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(or[size2,rectangle],iota(filter(filter(filter(x.s, green), size3), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:triangle
'λx.apply(or[triangle,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), or[circle,rectangle]), apply(same_shape,iota(filter(x.s, yellow))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(filter(filter(filter(x.s, size3), apply(same_size,x.o)), rectangle), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:rectangle
'λx.forall(apply(same_size,x.o),filter(filter(filter(x.s, size1), or[green,not[triangle]]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:green;4:not[%s];4:triangle;4:size1
'λx.apply(and[and[size1,and[size2,apply(same_color,iota(filter(filter(filter(x.s, and[yellow,and[and[size2,size1],or[blue,rectangle]]]), and[size2,apply(same_size,iota(x.s))]), size3)))]],and[apply(size-geq,x.o),size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(circle,filter(x.s, not[size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(apply(same_color,iota(x.s)),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nand[green,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,and[yellow,size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[apply(same_shape,iota(filter(filter(x.s, implies[apply(same_color,x.o),rectangle]), implies[blue,yellow]))),or[size3,nand[triangle,size2]]],circle],iota(filter(x.s, or[triangle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:implies[%s,%s];4:blue;4:yellow;4:or[%s,%s];4:size3;4:nand[%s,%s];4:triangle;4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle
'λx.contains(x.o, filter(x.s, or[not[or[or[apply(same_color,iota(filter(x.s, or[yellow,nand[iff[green,apply(same_shape,iota(x.s))],circle]]))),not[rectangle]],yellow]],size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:nand[%s,%s];4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle;4:yellow;4:size3
'λx.apply(apply(same_color,iota(filter(x.s, green))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[triangle,and[apply(same_color,iota(x.s)),green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(rectangle, filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, and[yellow,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.apply(size3,iota(filter(filter(x.s, size2), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(size1, filter(x.s, not[not[size2]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size2
'λx.apply(and[apply(same_shape,x.o),not[size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[size3,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3
'λx.contains(x.o, filter(x.s, and[size1,size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1
'λx.contains(x.o, filter(x.s, and[size2,size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(nand[size2,implies[nor[rectangle,rectangle],rectangle]],iota(filter(filter(filter(filter(x.s, size1), rectangle), blue), and[green,or[apply(same_color,x.o),rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:implies[%s,%s];4:nor[%s,%s];4:rectangle;4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:blue;4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(not[implies[size3,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[blue,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[rectangle,triangle]],iota(filter(filter(filter(filter(x.s, or[rectangle,rectangle]), size3), rectangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle;4:size3;4:rectangle;4:blue
'λx.apply(or[size1,and[nand[size2,and[triangle,apply(size-gt,iota(x.s))]],circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, and[size3,circle]), nand[blue,and[not[nand[yellow,or[blue,and[iff[apply(same_color,iota(x.s)),size3],rectangle]]]],size2]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;4:nand[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:rectangle;4:size2
'λx.apply(or[apply(same_color,x.o),yellow],iota(filter(x.s, not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.empty(filter(filter(filter(x.s, blue), apply(same_size,x.o)), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(implies[size3,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, size3), circle), and[size2,yellow]), apply(same_shape,x.o)), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:and[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(apply(same_size,x.o), filter(filter(x.s, size2), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(nand[size3,apply(size-geq,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), size2), not[or[apply(same_color,x.o),rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(and[size3,and[size1,apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[iff[yellow,circle],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[and[green,size2]]],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[rectangle,implies[nor[or[size3,triangle],and[triangle,size3]],apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[not[size3]],iota(filter(filter(x.s, apply(size-lt,iota(filter(x.s, size3)))), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(implies[size2,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size2,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[circle],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(filter(x.s, and[green,and[and[apply(same_shape,x.o),nand[size3,or[triangle,rectangle]]],nor[or[triangle,size2],green]]]), not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:rectangle;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:green;4:not[%s];4:green
'λx.empty(filter(filter(filter(x.s, green), yellow), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:rectangle
'λx.apply(implies[not[not[size3]],not[apply(same_size,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:not[%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,and[triangle,yellow]],iota(filter(filter(x.s, and[circle,green]), iff[size1,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;4:iff[%s,%s];4:size1;4:size3
'λx.contains(iota(filter(x.s, not[blue])), filter(x.s, apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, or[iff[size1,yellow],not[and[size3,yellow]]]), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:size1;4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[implies[nand[size1,size2],size3],not[and[size1,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:size1;4:size2;4:size3;4:not[%s];4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[not[not[blue]],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(yellow,filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, and[iff[size3,size1],size2])))), size3), apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:size1;4:size2;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(implies[rectangle,yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.forall(apply(same_color,iota(filter(filter(x.s, circle), size2))),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;3:%s.s;2:x
'λx.exists(size2, filter(x.s, or[size1,size3]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, not[circle]), yellow), and[rectangle,and[and[yellow,circle],size1]]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size1;4:triangle
'λx.apply(size2,iota(filter(filter(filter(x.s, circle), blue), iff[apply(same_shape,iota(filter(filter(x.s, triangle), size3))),rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:rectangle
'λx.exists(apply(same_shape,x.o), filter(x.s, apply(size-leq,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(and[yellow,size1],filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(triangle, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:%s.s;2:x
'λx.forall(or[or[apply(same_size,iota(x.s)),circle],nor[and[iff[apply(same_size,iota(filter(filter(x.s, blue), blue))),blue],circle],rectangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:blue;4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(rectangle,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[and[blue,nand[yellow,triangle]],or[green,green]],apply(size-leq,iota(filter(x.s, rectangle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:green;4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[rectangle]), apply(size-gt,iota(x.s))), not[triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(iff[size1,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(iff[size1,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(iff[size1,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(nand[and[apply(size-gt,x.o),triangle],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, or[green,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle
'λx.apply(or[green,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[and[rectangle,circle],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,x.o),or[blue,not[and[and[nor[rectangle,not[green]],size1],size2]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:not[%s];4:green;4:size1;4:size2;1:%s.o;2:x
'λx.forall(not[apply(same_color,x.o)],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[apply(same_color,iota(x.s)),apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), and[size1,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:size2
'λx.contains(iota(x.s), filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[triangle,or[size1,size3]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:size3;3:%s.s;2:x
'λx.apply(and[blue,apply(size-gt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[and[green,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[blue]), size2)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size2;3:%s.s;2:x
'λx.forall(triangle,filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, or[or[triangle,size3],apply(same_size,x.o)]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[or[nand[size1,rectangle],triangle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:size1;4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.exists(yellow, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, triangle), apply(same_shape,iota(filter(filter(filter(x.s, rectangle), green), size3)))), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:size3;4:size3
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, and[size2,or[size3,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:size3;4:rectangle
'λx.contains(iota(filter(x.s, size2)), filter(filter(x.s, circle), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.exists(or[not[green],nor[not[and[or[apply(same_shape,iota(x.s)),yellow],blue]],size2]], filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:green;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, and[implies[rectangle,size3],yellow]), apply(same_size,iota(x.s))), iff[implies[size1,green],size3]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:implies[%s,%s];4:size1;4:green;4:size3
'λx.apply(green,iota(filter(x.s, not[blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(or[or[green,blue],green], filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[blue,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(or[size3,triangle],filter(filter(x.s, triangle), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.forall(iff[nand[green,blue],size3],filter(filter(x.s, size1), nand[and[circle,size2],not[size1]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:green;4:blue;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:and[%s,%s];4:circle;4:size2;4:not[%s];4:size1
'λx.forall(not[size2],filter(filter(filter(x.s, yellow), size1), or[size2,size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:or[%s,%s];4:size2;4:size3
'λx.apply(circle,iota(filter(filter(filter(x.s, size3), circle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:triangle
'λx.apply(and[triangle,and[green,blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nand[size2,size3],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:size3;4:green;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, and[iff[circle,rectangle],size2]), blue), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:circle;4:rectangle;4:size2;4:blue;4:blue
'λx.apply(or[green,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.forall(and[and[not[and[green,rectangle]],green],size1],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:rectangle;4:green;4:size1;3:%s.s;2:x
'λx.apply(and[circle,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[yellow,size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(or[and[rectangle,triangle],green],iota(filter(filter(x.s, or[nand[blue,size3],size1]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:blue;4:size3;4:size1;4:size1
'λx.exists(or[not[triangle],blue], filter(x.s, not[iff[and[circle,yellow],apply(size-geq,iota(x.s))]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size1,and[or[or[apply(same_size,x.o),apply(same_color,x.o)],and[implies[circle,rectangle],triangle]],green]],iota(filter(filter(filter(filter(x.s, yellow), green), size2), not[nor[triangle,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:implies[%s,%s];4:circle;4:rectangle;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:size2;4:not[%s];4:nor[%s,%s];4:triangle;4:size1
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,x.o)), nand[and[triangle,size2],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:green
'λx.forall(circle,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(rectangle,filter(filter(x.s, size2), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.exists(green, filter(filter(x.s, and[yellow,and[and[and[apply(same_shape,iota(filter(filter(x.s, green), size3))),implies[green,triangle]],size1],nor[and[rectangle,size3],apply(size-gt,iota(filter(x.s, size1)))]]]), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:implies[%s,%s];4:green;4:triangle;4:size1;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(and[implies[and[size1,circle],apply(same_size,iota(x.s))],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), not[yellow]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:yellow
'λx.apply(and[and[triangle,green],yellow],iota(filter(filter(filter(filter(x.s, size2), rectangle), green), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:green;4:yellow
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size2), size2), blue), triangle), blue), or[not[green],size1]), iff[size3,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:blue;4:triangle;4:blue;4:or[%s,%s];4:not[%s];4:green;4:size1;4:iff[%s,%s];4:size3;4:size3
'λx.apply(and[and[triangle,circle],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,and[apply(same_size,iota(x.s)),yellow]],iota(filter(filter(filter(x.s, blue), and[size1,yellow]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:yellow;4:rectangle
'λx.apply(or[size3,or[triangle,and[not[size3],circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, size2), green), green), green), rectangle), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:green;4:green;4:rectangle;4:blue
'λx.apply(not[size1],iota(filter(x.s, and[rectangle,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green
'λx.exists(or[triangle,blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, green), size3), triangle), size2), nor[triangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:triangle;4:size2;4:nor[%s,%s];4:triangle;4:size2
'λx.apply(or[size3,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[and[green,size1],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[apply(same_shape,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,implies[apply(same_color,x.o),size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, triangle), triangle), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:blue
'λx.exists(size1, filter(filter(x.s, green), triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(not[yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, size2), size1), triangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:triangle;4:size3
'λx.apply(and[apply(same_size,iota(filter(x.s, size2))),apply(same_color,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(and[rectangle,or[size2,rectangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.forall(not[or[size3,green]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, not[size1]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size1
'λx.apply(blue,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[apply(same_shape,iota(x.s)),nand[size1,rectangle]],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[apply(size-leq,iota(filter(x.s, apply(size-gt,iota(filter(x.s, size2))))))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(not[not[not[or[and[and[circle,blue],size2],nand[nand[triangle,or[size1,green]],and[circle,or[implies[apply(same_size,x.o),green],triangle]]]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:size2;4:nand[%s,%s];4:nand[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:green;4:and[%s,%s];4:circle;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[not[and[rectangle,blue]],not[size2]],iota(filter(x.s, and[circle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:blue;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle
'λx.apply(not[nor[rectangle,and[not[size1],blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[not[size3],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:yellow;1:%s.o;2:x
'λx.exists(or[triangle,rectangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(or[and[size1,nor[or[and[triangle,or[apply(same_size,x.o),or[yellow,green]]],yellow],not[size3]]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:green;4:yellow;4:not[%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.forall(nor[nor[or[size1,triangle],size1],or[not[and[apply(size-geq,iota(filter(filter(filter(x.s, rectangle), circle), blue))),rectangle]],implies[not[circle],size2]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:size1;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:blue;4:rectangle;4:implies[%s,%s];4:not[%s];4:circle;4:size2;3:%s.s;2:x
'λx.apply(nand[and[size2,blue],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size2;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[size3,not[size1]]), not[size3])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:size1;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(not[iff[not[circle],size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:not[%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[circle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[triangle,not[blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, triangle), not[circle])))), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:circle;4:rectangle
'λx.apply(and[or[triangle,and[apply(size-gt,x.o),circle]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;4:circle;1:%s.o;2:x
'λx.apply(nor[or[green,blue],not[size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:green;4:blue;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,blue],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size3), and[green,or[rectangle,circle]]), not[green]), or[or[size1,blue],triangle]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:circle;4:not[%s];4:green;4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:triangle;4:size1
'λx.apply(and[blue,rectangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(filter(filter(x.s, size2), nor[green,circle]), size3), not[green]), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:green;4:circle;4:size3;4:not[%s];4:green;4:triangle
'λx.forall(size1,filter(x.s, and[size3,size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2
'λx.apply(nand[and[triangle,and[size3,triangle]],or[circle,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:triangle;4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[and[blue,blue],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(rectangle, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:%s.s;2:x
'λx.apply(iff[yellow,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, and[blue,circle]), apply(size-lt,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(triangle,iota(filter(x.s, apply(size-geq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(not[not[and[green,blue]]],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,apply(same_color,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[circle]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:triangle
'λx.forall(not[rectangle],filter(x.s, and[rectangle,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(x.s, or[circle,rectangle]), rectangle), not[size1]), green), circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;4:rectangle;4:not[%s];4:size1;4:green;4:circle;4:size1
'λx.apply(not[size2],iota(filter(x.s, implies[rectangle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:circle
'λx.forall(green,filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(circle,filter(filter(x.s, and[and[size3,size1],rectangle]), and[and[size3,iff[apply(size-gt,x.o),and[not[and[apply(same_shape,iota(filter(filter(x.s, green), apply(same_shape,iota(filter(x.s, circle)))))),size1]],or[green,not[yellow]]]]],rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:or[%s,%s];4:green;4:not[%s];4:yellow;4:rectangle
'λx.apply(or[or[not[size3],size2],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, yellow), not[or[circle,apply(size-leq,x.o)]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[implies[yellow,and[circle,size3]],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,iota(filter(x.s, nor[triangle,and[or[size2,size3],and[and[apply(same_color,x.o),size1],size2]]]))),not[and[or[not[size3],green],iff[rectangle,circle]]]],iota(filter(x.s, nor[green,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:green;4:iff[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:triangle
'λx.apply(or[implies[size3,and[size3,size3]],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:size3;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[apply(same_shape,x.o),or[or[green,rectangle],and[not[blue],or[or[yellow,nor[not[circle],or[rectangle,not[triangle]]]],rectangle]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:rectangle;4:not[%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[not[triangle]], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-leq,x.o),iota(filter(filter(filter(x.s, not[triangle]), size3), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size3;4:size3
'λx.apply(or[green,apply(same_color,iota(x.s))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[nor[blue,blue],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:blue;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[apply(same_shape,x.o),and[yellow,or[yellow,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[green,blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue
'λx.exists(green, filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(not[size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(not[size1],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size1;3:%s.s;2:x
'λx.forall(nand[blue,triangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(nand[size3,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(not[size1], filter(filter(x.s, and[green,nor[size3,apply(size-leq,x.o)]]), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1
'λx.forall(or[size2,iff[size2,blue]],filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size2;4:iff[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[or[and[not[size3],size1],not[rectangle]],blue],iota(filter(filter(x.s, and[size1,circle]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:size1;4:not[%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:blue
'λx.forall(and[and[or[size3,circle],size1],size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:size1;4:size3;3:%s.s;2:x
'λx.apply(not[apply(same_shape,iota(filter(filter(filter(filter(x.s, size2), triangle), rectangle), circle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, size2), green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, and[and[and[triangle,and[size2,or[blue,nand[circle,size1]]]],size2],and[size2,not[size3]]]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:or[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:size1;4:size2;4:and[%s,%s];4:size2;4:not[%s];4:size3;4:yellow
'λx.apply(or[triangle,iff[green,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:iff[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(and[circle,and[blue,size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, not[nor[blue,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:blue;4:size1
'λx.forall(green,filter(filter(x.s, size2), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(implies[and[circle,iff[green,and[triangle,not[size1]]]],nor[and[size2,rectangle],rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:green;4:and[%s,%s];4:triangle;4:not[%s];4:size1;4:nor[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),and[green,apply(same_size,x.o)]],iota(filter(filter(x.s, size1), and[size3,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size3;4:blue
'λx.exists(rectangle, filter(filter(x.s, not[circle]), triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:triangle
'λx.apply(nand[circle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(nand[circle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nand[circle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(filter(x.s, rectangle), triangle))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(and[green,nand[size1,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:nand[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[not[size3],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(and[rectangle,not[green]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(x.s, size2), apply(same_color,iota(filter(filter(x.s, and[and[and[and[triangle,green],green],size2],and[size1,rectangle]]), yellow)))), or[or[green,size3],circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:green;4:size2;4:and[%s,%s];4:size1;4:rectangle;4:yellow;4:or[%s,%s];4:or[%s,%s];4:green;4:size3;4:circle
'λx.forall(apply(same_size,x.o),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[circle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[or[rectangle,rectangle],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[not[triangle],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[or[yellow,rectangle],and[size1,or[size3,and[circle,rectangle]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(nor[size3,blue],iota(filter(filter(filter(x.s, blue), and[rectangle,blue]), and[size1,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:size1;4:blue
'λx.contains(x.o, filter(filter(x.s, nand[green,green]), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:green;4:green
'λx.apply(and[yellow,iff[and[or[apply(same_color,x.o),nor[apply(same_size,x.o),and[blue,rectangle]]],size2],yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:rectangle;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[rectangle,circle],iota(filter(filter(filter(x.s, and[size1,size2]), and[triangle,or[and[or[nand[not[size3],apply(size-lt,x.o)],apply(size-leq,x.o)],and[blue,green]],circle]]), not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:blue;4:green;4:circle;4:not[%s];4:size3
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,iota(x.s))), size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[apply(same_size,iota(filter(filter(x.s, size1), size2))),or[not[and[triangle,yellow]],rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), or[size3,not[yellow]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size3;4:not[%s];4:yellow
'λx.apply(not[size2],iota(filter(x.s, and[size1,and[rectangle,yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:yellow
'λx.apply(nand[size3,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nand[size2,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[yellow]), and[size2,apply(size-gt,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[or[yellow,green],triangle],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(filter(x.s, and[green,size2]))),or[implies[circle,circle],rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:or[%s,%s];4:implies[%s,%s];4:circle;4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, blue), yellow), rectangle), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:rectangle;4:circle
'λx.contains(iota(filter(x.s, not[and[size3,size3]])), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, and[size3,and[nand[rectangle,yellow],size1]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:yellow;4:size1
'λx.apply(nor[apply(same_shape,iota(filter(filter(x.s, blue), size1))),circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[not[circle],or[and[green,nor[not[green],circle]],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:not[%s];4:green;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(iff[and[triangle,iff[and[green,size1],green]],and[and[size2,rectangle],size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:green;4:size1;4:green;4:and[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nand[circle,size1]],iota(filter(filter(x.s, blue), nand[yellow,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:yellow;4:circle
'λx.apply(or[yellow,size1],iota(filter(filter(x.s, or[rectangle,rectangle]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle;4:yellow
'λx.apply(nand[apply(size-gt,iota(x.s)),apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(or[blue,nor[size2,rectangle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.apply(nand[and[blue,yellow],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[rectangle,circle],size1],iota(filter(filter(x.s, implies[blue,rectangle]), not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:rectangle;4:not[%s];4:size3
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, triangle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(and[or[not[rectangle],size3],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:size3;4:size3;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, or[yellow,not[size2]]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[or[and[apply(same_shape,iota(x.s)),green],or[yellow,green]],and[and[green,rectangle],and[apply(same_size,iota(x.s)),size3]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:or[%s,%s];4:yellow;4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, apply(size-leq,iota(filter(x.s, circle)))), apply(same_size,iota(filter(filter(filter(x.s, not[blue]), size3), and[rectangle,triangle])))), size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3;4:and[%s,%s];4:rectangle;4:triangle;4:size2
'λx.empty(filter(filter(filter(x.s, triangle), size3), or[apply(same_shape,iota(filter(x.s, circle))),green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(and[apply(same_shape,iota(x.s)),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[green,and[size2,size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size2
'λx.apply(not[size1],iota(filter(filter(filter(x.s, green), green), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:circle
'λx.exists(blue, filter(filter(filter(x.s, apply(size-gt,x.o)), blue), or[triangle,green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;4:or[%s,%s];4:triangle;4:green
'λx.exists(rectangle, filter(filter(filter(x.s, size1), rectangle), not[and[size3,size3]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:not[%s];4:and[%s,%s];4:size3;4:size3
'λx.apply(not[and[rectangle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[size2,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size2), yellow), or[size1,size1])), filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:or[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(x.s, size1)), filter(x.s, green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, size1)), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[size3,and[and[size2,green],apply(same_color,x.o)]],iota(filter(filter(filter(filter(x.s, and[green,yellow]), implies[not[and[or[rectangle,implies[or[yellow,green],not[not[not[or[apply(same_color,x.o),not[triangle]]]]]]],size1]],circle]), or[size1,rectangle]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:triangle;4:size1;4:circle;4:or[%s,%s];4:size1;4:rectangle;4:size3
'λx.apply(not[or[not[circle],size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(implies[apply(same_size,iota(x.s)),and[size2,triangle]],iota(filter(filter(filter(filter(x.s, circle), size2), blue), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:blue;4:circle
'λx.forall(circle,filter(filter(x.s, size3), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(or[apply(same_size,x.o),size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, yellow), not[size1])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, or[circle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, rectangle), not[rectangle]), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:rectangle;4:blue
'λx.apply(or[rectangle,apply(same_color,iota(filter(filter(filter(filter(x.s, size3), triangle), yellow), yellow)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:yellow;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), circle), or[size3,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:or[%s,%s];4:size3;4:triangle
'λx.apply(not[size3],iota(filter(x.s, or[nor[and[and[yellow,size1],yellow],size1],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:yellow;4:size1;4:blue
'λx.apply(nand[size1,nand[triangle,size3]],iota(filter(filter(x.s, yellow), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:nand[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.forall(blue,filter(filter(filter(x.s, and[and[apply(same_shape,x.o),apply(size-geq,iota(x.s))],implies[green,size2]]), triangle), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:size2;4:triangle;4:green
'λx.apply(nor[apply(same_size,x.o),or[apply(same_size,x.o),size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, green)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.exists(and[and[size1,not[and[size2,nand[and[size3,rectangle],circle]]]],or[blue,yellow]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:size2;4:nand[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:circle;4:or[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.apply(or[nand[not[rectangle],not[iff[size2,implies[not[and[apply(same_color,x.o),apply(same_shape,x.o)]],rectangle]]]],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:size2;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[yellow]],iota(filter(filter(x.s, size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.exists(iff[rectangle,or[not[triangle],or[or[circle,and[and[size1,not[apply(same_color,x.o)]],apply(same_size,iota(x.s))]],and[blue,green]]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size1), rectangle), green), blue), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:green;4:blue;4:triangle
'λx.apply(or[size1,nand[triangle,and[yellow,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(or[nor[or[or[triangle,size3],and[and[or[apply(same_shape,iota(x.s)),size2],implies[size1,triangle]],blue]],yellow],nor[size1,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:size1;4:triangle;4:blue;4:yellow;4:nor[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(green,filter(filter(x.s, implies[and[and[rectangle,size1],yellow],apply(same_size,iota(filter(x.s, green)))]), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.empty(filter(filter(x.s, not[circle]), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size2
'λx.apply(not[or[apply(same_color,iota(filter(filter(x.s, green), or[size3,triangle]))),not[size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size3;4:triangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(iff[or[size1,yellow],not[and[size2,or[size1,not[green]]]]],iota(filter(x.s, apply(same_shape,iota(filter(filter(x.s, or[size1,nor[green,triangle]]), not[yellow]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:nor[%s,%s];4:green;4:triangle;4:not[%s];4:yellow
'λx.apply(and[size3,not[green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, size2), and[triangle,not[apply(same_size,x.o)]]), green), or[yellow,rectangle]), not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:or[%s,%s];4:yellow;4:rectangle;4:not[%s];4:green
'λx.apply(or[and[and[not[and[triangle,size3]],green],size2],or[yellow,and[implies[triangle,apply(same_color,iota(x.s))],or[yellow,size2]]]],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size3;4:green;4:size2;4:or[%s,%s];4:yellow;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size2,and[and[circle,and[yellow,yellow]],size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(x.s, or[blue,triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle
'λx.forall(implies[apply(same_size,x.o),triangle],filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[apply(same_size,iota(filter(filter(x.s, yellow), apply(size-lt,x.o)))),or[apply(same_color,x.o),nor[rectangle,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(or[size1,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(not[green],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:green;3:%s.s;2:x
'λx.apply(not[and[yellow,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(not[and[yellow,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(or[green,apply(same_size,iota(filter(x.s, green)))],filter(x.s, and[triangle,and[triangle,apply(same_shape,x.o)]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size3,apply(size-gt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[rectangle,size1],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[size3,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,circle],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(x.s, yellow), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), green), and[and[size3,circle],and[rectangle,yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:rectangle;4:yellow
'λx.empty(filter(x.s, and[yellow,size1]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1
'λx.apply(or[or[and[blue,triangle],size2],blue],iota(filter(x.s, iff[not[size2],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:size2;4:circle
'λx.apply(and[triangle,apply(same_size,x.o)],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(filter(x.s, rectangle), not[triangle])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(nand[circle,size2],iota(filter(filter(filter(x.s, triangle), nor[circle,blue]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:circle;4:blue;4:green
'λx.apply(and[size2,and[iff[size1,apply(same_size,x.o)],yellow]],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(iff[green,green],iota(filter(filter(filter(x.s, and[triangle,size2]), green), not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;4:green;4:not[%s];4:size1
'λx.apply(apply(same_size,iota(filter(x.s, size3))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size1))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[yellow,size1],triangle],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[size2,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[not[circle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size2), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.contains(iota(x.s), filter(filter(x.s, size3), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(and[apply(same_size,x.o),not[yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(filter(x.s, and[and[triangle,size3],triangle]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:triangle;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, circle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(nor[and[size2,triangle],and[size2,apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, size1), rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[size3,yellow],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(not[or[rectangle,or[green,circle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), nor[yellow,size2]), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:yellow;4:size2;4:circle
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.exists(and[and[yellow,rectangle],and[implies[circle,green],size2]], filter(filter(x.s, triangle), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:circle;4:green;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(or[triangle,or[rectangle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(nand[and[green,size1],and[rectangle,size2]],iota(filter(filter(x.s, circle), or[not[blue],not[and[green,or[triangle,not[green]]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:green;4:size1;4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:not[%s];4:blue;4:not[%s];4:and[%s,%s];4:green;4:or[%s,%s];4:triangle;4:not[%s];4:green
'λx.empty(filter(filter(x.s, size1), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.empty(filter(filter(x.s, size3), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.empty(filter(filter(x.s, size2), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.contains(x.o, filter(filter(x.s, apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(and[size1,not[size3]],iota(filter(x.s, and[apply(size-leq,x.o),blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.forall(triangle,filter(filter(x.s, blue), or[green,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:green;4:yellow
'λx.empty(filter(x.s, or[and[green,triangle],green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:green
'λx.exists(rectangle, filter(filter(filter(x.s, size2), not[nor[apply(same_shape,iota(x.s)),and[and[and[circle,nor[triangle,size1]],implies[size1,circle]],and[blue,apply(same_color,x.o)]]]]), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:triangle;4:size1;4:implies[%s,%s];4:size1;4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(implies[nor[green,size3],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:green;4:size3;4:triangle;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, triangle), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(not[nor[or[size2,rectangle],and[yellow,triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[triangle,triangle]), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle;4:size1
'λx.exists(rectangle, filter(filter(x.s, and[size2,circle]), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(yellow,iota(filter(filter(x.s, yellow), or[yellow,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(or[size2,and[or[apply(same_size,x.o),rectangle],size3]],iota(filter(filter(x.s, yellow), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(and[size2,apply(size-gt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, green), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.forall(and[size1,and[nor[green,or[and[apply(same_size,iota(filter(x.s, green))),triangle],and[circle,size1]]],size3]],filter(filter(filter(x.s, and[size1,size2]), size2), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:nor[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:and[%s,%s];4:circle;4:size1;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:size2;4:circle
'λx.apply(not[or[yellow,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(yellow,filter(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), iff[apply(same_shape,iota(x.s)),size3]), blue), iff[or[triangle,size3],size2]), circle), circle), or[circle,implies[yellow,and[and[size3,green],triangle]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:blue;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:size2;4:circle;4:circle;4:or[%s,%s];4:circle;4:implies[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:triangle
'λx.apply(or[not[not[or[size1,or[blue,blue]]]],not[apply(same_size,iota(x.s))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:blue;4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[and[size2,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(not[and[size2,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), apply(size-lt,iota(filter(filter(filter(filter(x.s, not[size1]), size2), size2), size3)))))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size2;4:size2;4:size3
'λx.forall(size3,filter(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), circle), green), apply(size-lt,iota(filter(filter(filter(filter(filter(filter(x.s, and[rectangle,triangle]), blue), circle), triangle), size2), size3)))), yellow), rectangle), size1), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:blue;4:circle;4:triangle;4:size2;4:size3;4:yellow;4:rectangle;4:size1;4:yellow
'λx.exists(or[triangle,nor[size3,or[green,size1]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:nor[%s,%s];4:size3;4:or[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, implies[or[size1,not[circle]],yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:circle;4:yellow
'λx.exists(size3, filter(filter(filter(x.s, size3), not[triangle]), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:triangle;4:size1
'λx.empty(filter(filter(x.s, circle), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(and[nand[iff[nor[iff[apply(same_shape,iota(x.s)),not[size1]],rectangle],green],size3],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:rectangle;4:green;4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[size2,not[yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[apply(size-geq,iota(filter(x.s, size3))),triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[implies[triangle,size3],circle])), filter(x.s, and[blue,and[size3,circle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:circle
'λx.apply(and[and[or[apply(same_shape,iota(x.s)),rectangle],rectangle],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(and[green,nand[size1,size2]], filter(filter(filter(filter(filter(filter(filter(x.s, size1), green), apply(same_size,iota(x.s))), size3), yellow), circle), not[and[circle,not[green]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:green;4:nand[%s,%s];4:size1;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:yellow;4:circle;4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:green
'λx.apply(not[apply(same_size,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(or[not[rectangle],green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:rectangle;4:green;3:%s.s;2:x
'λx.apply(not[or[size3,yellow]],iota(filter(x.s, and[size1,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle
'λx.exists(or[blue,apply(size-gt,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), size3), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:circle
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, blue), not[circle]), and[yellow,size3]), blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:circle;4:and[%s,%s];4:yellow;4:size3;4:blue;4:rectangle
'λx.apply(or[yellow,or[or[not[yellow],green],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:green;4:rectangle;1:%s.o;2:x
'λx.forall(and[yellow,yellow],filter(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), triangle), not[and[apply(size-geq,iota(x.s)),triangle]]), green), triangle), blue), blue), or[size3,and[nor[size2,rectangle],triangle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:green;4:triangle;4:blue;4:blue;4:or[%s,%s];4:size3;4:and[%s,%s];4:nor[%s,%s];4:size2;4:rectangle;4:triangle
'λx.apply(or[apply(size-geq,iota(filter(filter(x.s, or[and[triangle,iff[and[blue,or[and[rectangle,size3],size3]],green]],size1]), size2))),triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:size3;4:green;4:size1;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(and[size1,or[yellow,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[size3,implies[yellow,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:implies[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(or[circle,and[and[blue,rectangle],apply(same_shape,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[nor[circle,apply(same_shape,iota(filter(filter(x.s, iff[or[and[size1,size1],size2],triangle]), and[size1,size2])))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:size1;4:size2;4:triangle;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[and[and[rectangle,blue],triangle],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[yellow]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size1
'λx.exists(blue, filter(x.s, iff[or[triangle,not[triangle]],blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:triangle;4:blue
'λx.forall(apply(same_color,iota(x.s)),filter(x.s, implies[rectangle,implies[apply(same_size,iota(x.s)),not[blue]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[blue,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size2,and[size2,size3]],filter(filter(x.s, or[apply(same_color,iota(x.s)),size1]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(and[yellow,and[triangle,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, yellow), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, or[size1,rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(or[or[green,blue],green],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[nand[or[size2,apply(size-leq,x.o)],rectangle]],iota(filter(filter(x.s, not[size1]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, circle), circle), yellow), iff[blue,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:yellow;4:iff[%s,%s];4:blue;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, not[size2]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.contains(x.o, filter(x.s, iff[triangle,apply(same_size,x.o)]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, or[apply(same_size,x.o),size2]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(size1,iota(filter(filter(filter(x.s, yellow), blue), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:triangle
'λx.apply(and[not[apply(same_size,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, circle), rectangle), not[rectangle]), size3), size2), and[not[not[size1]],and[triangle,green]]), circle), yellow), blue), yellow)))],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:not[%s];4:rectangle;4:size3;4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:size1;4:and[%s,%s];4:triangle;4:green;4:circle;4:yellow;4:blue;4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[rectangle,size2],size2],iota(filter(filter(x.s, or[and[and[circle,size1],yellow],or[size1,apply(same_shape,x.o)]]), and[not[yellow],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:yellow;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:circle
'λx.apply(green,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[circle],iota(filter(filter(filter(filter(x.s, yellow), size3), green), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:green;4:triangle
'λx.apply(and[circle,or[circle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.empty(filter(x.s, and[implies[or[or[apply(same_size,iota(x.s)),not[and[not[or[apply(size-geq,x.o),nand[green,size3]]],yellow]]],and[and[or[yellow,size3],implies[rectangle,and[size1,rectangle]]],rectangle]],triangle],size1]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nand[%s,%s];4:green;4:size3;4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle;4:rectangle;4:triangle;4:size1
'λx.apply(or[green,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(nand[triangle,or[size2,yellow]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:yellow;3:%s.s;2:x
'λx.apply(or[not[yellow],yellow],iota(filter(x.s, or[not[or[blue,size3]],or[and[triangle,yellow],green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:size3;4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:green
'λx.apply(green,iota(filter(filter(filter(x.s, blue), triangle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:triangle
'λx.apply(yellow,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(apply(size-gt,iota(filter(x.s, green))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, iff[circle,yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(x.s, green), circle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:green
'λx.apply(implies[rectangle,blue],iota(filter(x.s, not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(nor[yellow,size3],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, and[size2,green]), circle)), filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, and[triangle,implies[yellow,size2]]), blue)))), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:yellow;4:size2;4:blue;4:size3
'λx.apply(and[blue,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[green,size1],iota(filter(x.s, nand[and[circle,size1],not[circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:circle;4:size1;4:not[%s];4:circle
'λx.forall(green,filter(filter(x.s, size1), and[rectangle,and[yellow,blue]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:blue
'λx.apply(and[nand[size2,circle],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:circle;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, yellow), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.exists(circle, filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(circle, filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(circle, filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(circle, filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[and[apply(same_shape,iota(filter(filter(x.s, green), circle))),apply(same_color,iota(filter(x.s, triangle)))],blue],iota(filter(x.s, not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.exists(nand[size3,size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:size3;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size1), and[circle,size3]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[and[blue,yellow],and[and[or[triangle,and[green,yellow]],size2],not[implies[triangle,size3]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:green;4:yellow;4:size2;4:not[%s];4:implies[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[and[rectangle,and[implies[circle,green],blue]],implies[and[size2,rectangle],or[size1,size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:circle;4:green;4:blue;4:implies[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[or[or[nand[nor[size1,size3],apply(same_color,iota(filter(filter(filter(x.s, size1), size2), size3)))],not[blue]],circle],nand[not[apply(same_color,x.o)],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:size3;4:not[%s];4:blue;4:circle;4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,size2],iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[circle,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[green,and[and[yellow,implies[triangle,size2]],or[and[size3,green],blue]]],iota(filter(filter(x.s, rectangle), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:implies[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, rectangle), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(or[blue,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[blue,or[not[triangle],triangle]],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, size3), size2), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:size3
'λx.empty(filter(filter(filter(x.s, size3), size3), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:size1
'λx.empty(filter(filter(filter(x.s, size3), size3), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:size2
'λx.apply(or[and[yellow,not[apply(same_color,iota(x.s))]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[nand[apply(same_size,x.o),or[yellow,size2]],and[size3,and[blue,yellow]]],iota(filter(filter(filter(x.s, size2), nor[circle,rectangle]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:circle;4:rectangle;4:size1
'λx.contains(iota(x.s), filter(filter(filter(x.s, size3), nand[rectangle,size1]), and[blue,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:blue;4:green
'λx.forall(apply(same_shape,x.o),filter(filter(filter(x.s, size3), not[blue]), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, triangle), and[iff[triangle,triangle],implies[size1,and[blue,iff[apply(same_shape,iota(x.s)),implies[and[green,and[or[yellow,size1],size2]],size3]]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:triangle;4:implies[%s,%s];4:size1;4:and[%s,%s];4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:size2;4:size3
'λx.apply(and[and[green,apply(same_shape,x.o)],or[size2,and[circle,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(iff[green,blue],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[iff[circle,yellow],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[circle],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[or[apply(same_size,iota(x.s)),size1],circle], filter(x.s, or[yellow,triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(and[triangle,not[and[apply(same_color,iota(filter(x.s, yellow))),circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;1:%s.o;2:x
'λx.exists(not[implies[circle,apply(same_color,iota(filter(x.s, apply(size-gt,x.o))))]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size1), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(iff[apply(same_size,x.o),rectangle],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size1), blue), green), size3), size2), or[and[yellow,or[and[blue,size2],apply(size-gt,x.o)]],and[apply(same_shape,x.o),size1]]), and[blue,not[size3]]), or[size2,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:green;4:size3;4:size2;4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:blue;4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:and[%s,%s];4:blue;4:not[%s];4:size3;4:or[%s,%s];4:size2;4:size3
'λx.apply(nor[blue,nor[size3,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:nor[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, and[rectangle,size1]), green), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1;4:green;4:circle
'λx.apply(iff[not[and[and[and[blue,blue],blue],circle]],apply(size-leq,x.o)],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:blue;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, and[size3,and[size1,green]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:green;4:circle
'λx.contains(iota(filter(filter(filter(x.s, blue), yellow), circle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:circle;3:%s.s;2:x
'λx.apply(and[green,size2],iota(filter(filter(x.s, apply(same_color,iota(filter(x.s, yellow)))), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, yellow), or[rectangle,blue]))),iota(filter(filter(x.s, not[green]), and[green,not[triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:green;4:not[%s];4:triangle
'λx.apply(and[and[green,not[apply(size-gt,iota(filter(filter(filter(x.s, not[rectangle]), not[and[not[blue],nand[size2,triangle]]]), yellow)))]],or[yellow,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:nand[%s,%s];4:size2;4:triangle;4:yellow;4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, blue))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, and[circle,rectangle]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, green), circle), iff[size2,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:iff[%s,%s];4:size2;4:rectangle
'λx.apply(not[and[or[triangle,green],and[nor[green,size1],apply(same_size,iota(x.s))]]],iota(filter(filter(x.s, green), or[green,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:green;4:and[%s,%s];4:nor[%s,%s];4:green;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:green;4:triangle
'λx.forall(size2,filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size1,filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size3,filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[iff[or[size2,green],circle],size2],iota(filter(filter(filter(x.s, triangle), rectangle), iff[green,apply(same_size,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size2;4:green;4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[blue,or[not[size1],rectangle]],iota(filter(x.s, or[or[circle,not[size3]],and[and[or[and[apply(same_size,iota(filter(filter(filter(x.s, circle), not[iff[circle,and[green,green]]]), not[and[and[not[and[not[apply(same_color,x.o)],blue]],size3],circle]]))),or[yellow,yellow]],and[size3,size3]],size3],size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:green;4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size3;4:circle;4:or[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:size3;4:size3;4:size3;4:size1
'λx.apply(or[triangle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(not[apply(same_size,iota(filter(x.s, and[blue,apply(size-lt,iota(filter(filter(filter(x.s, size1), not[size1]), and[green,and[circle,green]])))])))],iota(filter(x.s, not[and[nand[iff[not[size2],nand[green,and[or[size1,and[blue,green]],size2]]],and[apply(same_color,x.o),triangle]],not[size1]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size1;4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:not[%s];4:size2;4:nand[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:blue;4:green;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:not[%s];4:size1
'λx.forall(and[apply(same_size,x.o),size1],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(apply(size-gt,iota(filter(filter(filter(filter(x.s, size1), size2), rectangle), apply(same_size,x.o)))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[apply(size-gt,iota(filter(filter(filter(x.s, or[size3,apply(same_size,iota(filter(filter(x.s, nand[size3,size2]), size3)))]), or[yellow,size1]), triangle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size2;4:size3;4:or[%s,%s];4:yellow;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[size2,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2
'λx.forall(size1,filter(filter(filter(filter(x.s, size3), apply(same_size,iota(filter(filter(x.s, and[yellow,not[green]]), rectangle)))), triangle), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:green;4:rectangle;4:triangle;4:blue
'λx.apply(and[size3,and[or[and[yellow,blue],and[green,circle]],green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:green;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[size1,or[green,not[blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[not[size1],or[size3,and[green,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(or[or[apply(same_shape,iota(filter(x.s, yellow))),size3],iff[size2,size3]], filter(x.s, and[apply(same_size,iota(filter(x.s, green))),and[nor[and[triangle,triangle],size2],and[size1,yellow]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:iff[%s,%s];4:size2;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:size2;4:and[%s,%s];4:size1;4:yellow
'λx.apply(green,iota(filter(filter(x.s, circle), nand[rectangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:rectangle;4:size2
'λx.apply(or[and[size3,not[yellow]],triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,and[size3,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, apply(same_size,x.o)), and[circle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(and[blue,triangle],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[or[nand[rectangle,apply(same_shape,x.o)],yellow],circle],iota(filter(filter(filter(x.s, yellow), circle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:yellow
'λx.apply(and[apply(same_shape,iota(x.s)),green],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, blue), and[apply(same_color,iota(filter(filter(filter(x.s, triangle), green), or[green,size1]))),blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:or[%s,%s];4:green;4:size1;4:blue
'λx.apply(circle,iota(filter(x.s, and[green,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1
'λx.empty(filter(filter(x.s, green), not[green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:green
'λx.apply(or[and[nand[size3,not[not[or[and[size1,triangle],not[and[or[or[triangle,iff[green,not[and[blue,and[size3,not[yellow]]]]]],green],size3]]]]]],and[size3,nand[circle,nor[size2,green]]]],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:not[%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:iff[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:not[%s];4:yellow;4:green;4:size3;4:and[%s,%s];4:size3;4:nand[%s,%s];4:circle;4:nor[%s,%s];4:size2;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[or[size1,and[circle,blue]]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[or[rectangle,green],and[blue,size3]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(x.s), filter(x.s, nor[and[rectangle,size1],size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:size1
'λx.exists(rectangle, filter(x.s, or[green,size2]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size2
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[circle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1
'λx.apply(or[not[rectangle],and[blue,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(iff[circle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(size1,iota(filter(x.s, and[triangle,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, not[size3]), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[yellow,size1],or[size1,size2]],iota(filter(filter(x.s, nor[size2,apply(size-gt,iota(x.s))]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(not[and[rectangle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[and[and[green,or[green,not[size3]]],and[green,and[size1,not[yellow]]]],size1],iota(filter(filter(x.s, triangle), and[nor[rectangle,and[size1,yellow]],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:not[%s];4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:not[%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:yellow;4:size2
'λx.forall(iff[rectangle,apply(same_size,iota(filter(filter(x.s, not[rectangle]), yellow)))],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.apply(nor[or[circle,circle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[size1,and[blue,nor[and[green,green],green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:green;4:green;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, size1), nor[triangle,blue]), size2), blue)), filter(x.s, circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:triangle;4:blue;4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(triangle,filter(x.s, and[triangle,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.contains(iota(filter(x.s, size2)), filter(filter(filter(filter(x.s, green), and[not[triangle],yellow]), apply(same_color,iota(x.s))), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:not[%s];4:triangle;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(blue,iota(filter(filter(x.s, and[not[size3],size2]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:size2;4:rectangle
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), triangle), and[apply(size-leq,x.o),size2]), triangle), implies[triangle,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;4:triangle;4:implies[%s,%s];4:triangle;4:triangle
'λx.exists(size2, filter(x.s, apply(size-lt,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.forall(and[blue,blue],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, iff[size1,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:rectangle
'λx.apply(not[not[not[and[size2,size3]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[size3,size1]), and[apply(same_size,iota(x.s)),or[and[rectangle,not[circle]],and[blue,circle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:circle;4:and[%s,%s];4:blue;4:circle
'λx.apply(yellow,iota(filter(x.s, and[apply(same_size,iota(filter(x.s, blue))),size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(nor[not[triangle],apply(same_shape,iota(filter(x.s, blue)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[circle,yellow],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[yellow,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(same_size,x.o)],iota(filter(filter(filter(filter(filter(filter(x.s, implies[size3,triangle]), circle), not[not[size2]]), or[size3,size1]), triangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:triangle;4:circle;4:not[%s];4:not[%s];4:size2;4:or[%s,%s];4:size3;4:size1;4:triangle;4:blue
'λx.apply(and[size2,size2],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[green,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,or[triangle,size3]],iota(filter(filter(filter(x.s, and[circle,and[triangle,size2]]), yellow), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:size2;4:yellow;4:size3
'λx.apply(and[and[and[and[blue,circle],size2],blue],rectangle],iota(filter(filter(x.s, nor[iff[yellow,green],circle]), or[blue,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:size2;4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:iff[%s,%s];4:yellow;4:green;4:circle;4:or[%s,%s];4:blue;4:size1
'λx.contains(iota(filter(x.s, and[rectangle,not[blue]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:blue;3:%s.s;2:x
'λx.exists(yellow, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[nand[triangle,apply(size-gt,x.o)],and[apply(size-gt,x.o),circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, not[apply(same_color,iota(filter(filter(x.s, apply(size-geq,x.o)), size2)))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2
'λx.apply(and[blue,or[rectangle,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_color,iota(filter(x.s, or[apply(same_size,iota(x.s)),not[and[apply(same_size,x.o),green]]]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(implies[rectangle,or[nor[green,size3],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:green;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[and[circle,and[and[and[size2,or[circle,apply(same_color,iota(filter(filter(x.s, green), size3)))]],apply(same_shape,iota(x.s))],green]],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:yellow;1:%s.o;2:x
'λx.apply(nor[iff[size3,rectangle],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:size3;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(filter(x.s, triangle), green), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:rectangle
'λx.exists(or[size1,size1], filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(triangle,filter(filter(filter(x.s, apply(same_shape,x.o)), size2), apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[yellow,implies[apply(same_shape,iota(filter(x.s, triangle))),or[circle,or[circle,size2]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:circle;4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, triangle), implies[implies[size2,green],size2]), and[rectangle,apply(size-gt,iota(filter(filter(x.s, size3), triangle)))])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:implies[%s,%s];4:size2;4:green;4:size2;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;3:%s.s;2:x
'λx.apply(not[apply(size-leq,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size2,implies[circle,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:implies[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, or[apply(same_size,x.o),size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, blue), yellow), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:size3
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, and[not[and[size1,triangle]],apply(same_size,iota(filter(filter(x.s, rectangle), size1)))]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(and[triangle,apply(same_shape,iota(x.s))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(size-leq,iota(x.s))), yellow), apply(same_color,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-geq,x.o),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, yellow), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[rectangle,size1],filter(x.s, and[size3,blue]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(and[size3,apply(size-lt,x.o)],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(filter(x.s, blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(and[blue,apply(size-geq,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.exists(not[yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, blue), and[and[yellow,triangle],or[and[circle,size3],triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:and[%s,%s];4:circle;4:size3;4:triangle
'λx.apply(or[size2,or[blue,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(iff[yellow,or[blue,not[size1]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(filter(x.s, blue), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.empty(filter(filter(filter(x.s, green), yellow), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size3
'λx.exists(yellow, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[or[nand[blue,circle],triangle],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:blue;4:circle;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(not[not[blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(triangle, filter(filter(x.s, and[circle,circle]), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:size3
'λx.forall(and[not[and[size3,size2]],circle],filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[implies[implies[not[apply(same_size,x.o)],yellow],rectangle],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_size,x.o),iota(filter(x.s, and[green,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(circle,iota(filter(x.s, and[apply(same_size,iota(filter(x.s, rectangle))),green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.exists(or[size3,apply(size-leq,iota(filter(x.s, triangle)))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(implies[green,circle],iota(filter(x.s, implies[size1,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, size2), triangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:rectangle
'λx.apply(apply(same_size,iota(filter(x.s, yellow))),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(filter(x.s, or[triangle,size1]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1;4:triangle
'λx.empty(filter(filter(x.s, or[or[not[apply(same_size,x.o)],rectangle],not[yellow]]), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:not[%s];4:yellow;4:size1
'λx.exists(blue, filter(filter(filter(x.s, size3), green), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:size1
'λx.apply(and[apply(same_color,iota(filter(x.s, size3))),circle],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,nor[size1,size1]],iota(filter(filter(filter(x.s, and[circle,or[not[green],not[yellow]]]), not[blue]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:green;4:not[%s];4:yellow;4:not[%s];4:blue;4:yellow
'λx.apply(or[rectangle,apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[blue,not[rectangle]], filter(filter(filter(x.s, apply(same_size,x.o)), blue), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size2
'λx.apply(and[blue,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, blue), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(size2,iota(filter(x.s, nor[not[and[size2,green]],and[and[not[green],and[rectangle,rectangle]],implies[apply(same_size,x.o),size2]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:rectangle;4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, triangle), size1), nand[blue,and[blue,and[rectangle,blue]]]), yellow), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:nand[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:blue;4:yellow;4:size1
'λx.apply(green,iota(filter(filter(x.s, triangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(nor[nand[green,and[not[green],and[yellow,rectangle]]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:yellow;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[blue,triangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[not[not[not[not[rectangle]]]],implies[apply(same_color,iota(filter(x.s, blue))),not[green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:not[%s];4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(filter(x.s, size3)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.empty(filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(x.s, and[size2,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(not[size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, and[not[yellow],and[size3,size1]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:size3;4:size1
'λx.forall(and[rectangle,apply(same_shape,x.o)],filter(filter(x.s, size2), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(yellow,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:%s.o;2:x
'λx.forall(and[size1,or[yellow,implies[apply(same_size,x.o),implies[and[apply(same_color,x.o),apply(same_shape,iota(x.s))],not[rectangle]]]]],filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(not[yellow], filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[and[nand[and[triangle,rectangle],or[size2,size3]],yellow],apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:or[%s,%s];4:size2;4:size3;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size3,or[circle,apply(same_shape,iota(x.s))]],iota(filter(x.s, apply(same_color,iota(filter(x.s, size3))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[or[blue,size3],nor[and[green,size2],and[triangle,rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size3;4:nor[%s,%s];4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(iff[yellow,rectangle],filter(filter(x.s, green), apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[yellow,blue]), apply(size-geq,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[size2,rectangle],filter(filter(x.s, size1), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.exists(or[size1,size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:size2;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, size2), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(apply(same_color,iota(filter(filter(x.s, and[apply(same_color,iota(x.s)),not[blue]]), rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,triangle],iota(filter(filter(x.s, apply(same_shape,iota(x.s))), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(not[and[circle,not[not[green]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), or[size3,nand[or[and[green,green],size2],circle]])), filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(green, filter(filter(filter(x.s, yellow), size1), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:circle
'λx.empty(filter(x.s, and[not[and[size2,size3]],apply(size-gt,x.o)]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(blue, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, rectangle), and[size1,size1]), and[size3,size3]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:size3;4:size3;4:green
'λx.contains(iota(filter(filter(x.s, blue), rectangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(nor[size2,or[yellow,size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, and[size3,triangle]), apply(same_shape,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,size2],iota(filter(x.s, not[and[not[yellow],and[rectangle,and[triangle,or[size1,or[nand[circle,rectangle],triangle]]]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:or[%s,%s];4:nand[%s,%s];4:circle;4:rectangle;4:triangle
'λx.empty(filter(x.s, circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[apply(same_color,iota(filter(x.s, circle))),triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, and[nand[circle,and[or[triangle,or[blue,yellow]],size2]],size1]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:yellow;4:size2;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, size2), size2), not[triangle]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:not[%s];4:triangle;4:blue
'λx.apply(green,iota(filter(x.s, and[rectangle,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3
'λx.apply(iff[apply(size-lt,iota(x.s)),size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, triangle), not[triangle])), filter(x.s, circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(x.s, nor[implies[triangle,apply(same_shape,iota(x.s))],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.forall(and[not[triangle],blue],filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, and[size2,or[yellow,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.forall(implies[rectangle,iff[yellow,yellow]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:rectangle;4:iff[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(and[not[size2],and[nand[circle,circle],not[size1]]],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:nand[%s,%s];4:circle;4:circle;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[apply(size-lt,iota(filter(x.s, or[and[and[blue,green],and[apply(same_color,x.o),triangle]],yellow]))),size1],iota(filter(filter(x.s, triangle), or[apply(same_color,x.o),triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.forall(and[size3,or[rectangle,size3]],filter(filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), yellow), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:yellow;4:rectangle
'λx.contains(iota(filter(filter(x.s, green), size2)), filter(x.s, size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, size2), not[size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size3
'λx.apply(and[and[size1,or[green,nor[triangle,yellow]]],circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:green;4:nor[%s,%s];4:triangle;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[and[size1,size2],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size1,and[size2,not[size1]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[circle,iff[blue,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size2), and[blue,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:and[%s,%s];4:blue;4:triangle
'λx.apply(and[blue,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[blue,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[blue,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(not[and[size3,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[and[green,green],blue],not[triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(or[yellow,nor[blue,not[size1]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nor[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, yellow), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.empty(filter(filter(filter(x.s, circle), not[size1]), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size1;4:blue
'λx.apply(nand[yellow,or[rectangle,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(nand[and[size1,rectangle],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, and[green,rectangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, implies[not[size1],nand[or[apply(same_color,iota(filter(filter(filter(x.s, and[and[rectangle,yellow],green]), or[not[not[size3]],size2]), green))),circle],size1]]), not[size1]), size2), and[yellow,implies[circle,yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:size1;4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:green;4:or[%s,%s];4:not[%s];4:not[%s];4:size3;4:size2;4:green;4:circle;4:size1;4:not[%s];4:size1;4:size2;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:circle;4:yellow
'λx.apply(or[size3,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[yellow,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(nor[rectangle,rectangle],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[circle,not[size1]],iota(filter(filter(x.s, size1), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(or[rectangle,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[size1,or[or[apply(size-gt,x.o),size2],rectangle]],iota(filter(filter(filter(x.s, and[rectangle,triangle]), yellow), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle;4:yellow;4:size3
'λx.apply(size1,iota(filter(x.s, and[rectangle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(or[rectangle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[rectangle,and[size3,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, blue), triangle), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:green
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, rectangle), rectangle), and[green,and[rectangle,rectangle]]), not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:size2
'λx.exists(implies[size3,circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[or[apply(same_color,iota(x.s)),and[or[rectangle,size2],rectangle]],blue]), and[rectangle,not[blue]]), or[not[size2],implies[apply(same_color,iota(x.s)),size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:rectangle;4:blue;4:and[%s,%s];4:rectangle;4:not[%s];4:blue;4:or[%s,%s];4:not[%s];4:size2;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(and[size1,and[yellow,apply(size-gt,iota(filter(x.s, yellow)))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[implies[blue,size3],and[yellow,and[blue,size1]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.exists(or[implies[blue,size3],or[not[circle],apply(size-geq,iota(x.s))]], filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:or[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[not[apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[not[or[rectangle,size3]],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:size3;4:green;1:%s.o;2:x
'λx.forall(and[blue,apply(size-gt,iota(x.s))],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[or[yellow,yellow],circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.contains(x.o, filter(filter(x.s, size2), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(not[and[rectangle,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, iff[rectangle,triangle]), implies[or[triangle,blue],and[size3,yellow]]), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:triangle;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:size3;4:yellow;4:green
'λx.apply(green,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[not[yellow],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(iff[and[not[rectangle],size2],and[nand[size1,and[green,or[apply(same_shape,iota(x.s)),circle]]],not[and[green,size1]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:size2;4:and[%s,%s];4:nand[%s,%s];4:size1;4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:not[%s];4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, size2))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, size1))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, circle), blue), and[or[circle,size1],and[size1,triangle]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.forall(not[or[apply(same_size,iota(filter(x.s, blue))),size3]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, nand[circle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:yellow
'λx.exists(not[green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:green;3:%s.s;2:x
'λx.apply(or[nand[apply(same_size,iota(x.s)),yellow],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, size3), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.forall(yellow,filter(filter(x.s, size2), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(nand[and[triangle,not[blue]],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[and[apply(same_shape,iota(filter(filter(filter(x.s, size3), green), circle))),and[yellow,yellow]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:circle;4:and[%s,%s];4:yellow;4:yellow;4:size1;1:%s.o;2:x
'λx.forall(implies[and[iff[not[not[size2]],blue],not[yellow]],size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:size2;4:blue;4:not[%s];4:yellow;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[apply(same_shape,x.o),apply(same_size,iota(filter(x.s, triangle)))]), size3), or[size1,rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:or[%s,%s];4:size1;4:rectangle
'λx.contains(x.o, x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[or[green,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), and[not[and[not[and[green,size1]],size3]],circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:size1;4:size3;4:circle
'λx.apply(size2,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, yellow), green), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:triangle
'λx.apply(and[nand[blue,blue],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[not[circle],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[size3,and[yellow,triangle]]), size2), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:triangle;4:size2;4:size2
'λx.apply(or[and[apply(size-gt,iota(filter(filter(x.s, size3), circle))),size2],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:size2;4:size3;1:%s.o;2:x
'λx.exists(or[yellow,apply(same_color,x.o)], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, circle), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(or[or[circle,or[size1,circle]],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:size1;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, circle), yellow)), filter(x.s, blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[green,apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[circle,iff[size2,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, yellow), and[size1,yellow]))),iota(filter(filter(filter(filter(filter(x.s, green), rectangle), size1), triangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:size1;4:triangle;4:blue
'λx.apply(yellow,iota(filter(x.s, and[circle,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), size1), size3), triangle), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:size3;4:triangle;4:yellow
'λx.apply(not[size1],iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, apply(same_color,iota(x.s))), circle)))), and[size1,triangle]), or[apply(same_shape,x.o),triangle]), yellow), size1), or[and[or[yellow,size1],size2],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:yellow;4:size1;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:size2;4:yellow
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), or[and[rectangle,yellow],apply(same_shape,x.o)]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[and[and[and[green,green],size3],and[and[circle,and[iff[or[not[apply(same_size,iota(x.s))],or[apply(same_color,x.o),size2]],and[or[size1,triangle],blue]],yellow]],yellow]],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:size3;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:blue;4:yellow;4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, and[not[circle],blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:blue
'λx.forall(triangle,filter(x.s, and[triangle,size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2
'λx.exists(not[size2], filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(blue,filter(x.s, and[nand[yellow,circle],apply(same_size,iota(x.s))]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:yellow;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(and[blue,size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size3;3:%s.s;2:x
'λx.exists(and[blue,size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.forall(not[yellow],filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[yellow],iota(filter(filter(filter(filter(x.s, yellow), yellow), size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:size3;4:green
'λx.apply(apply(same_color,iota(filter(x.s, size1))),iota(filter(filter(filter(x.s, not[size3]), green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:green;4:size3
'λx.apply(apply(same_size,x.o),iota(filter(x.s, or[green,nor[apply(same_shape,x.o),size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(size2,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(filter(filter(x.s, and[and[and[rectangle,not[size3]],size2],apply(same_size,x.o)]), yellow), not[rectangle]), triangle), and[apply(same_shape,iota(filter(x.s, yellow))),green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size3;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:not[%s];4:rectangle;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(or[or[size1,size2],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(same_color,iota(filter(filter(filter(filter(x.s, implies[implies[and[size2,rectangle],apply(same_color,iota(x.s))],blue]), not[apply(size-lt,x.o)]), and[green,yellow]), rectangle)))), and[circle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:green;4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:circle
'λx.apply(iff[or[and[triangle,triangle],triangle],and[triangle,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:triangle;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nor[green,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, circle), size2)), filter(x.s, apply(size-lt,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(nand[green,green],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(x.s, nand[and[green,and[size3,size2]],green]), yellow)), filter(filter(filter(x.s, and[not[and[blue,size2]],rectangle]), blue), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size2;4:rectangle;4:blue;4:size1
'λx.apply(and[and[yellow,apply(same_size,x.o)],size1],iota(filter(filter(filter(x.s, not[green]), yellow), and[rectangle,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:yellow;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nand[size3,blue],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, not[green]), triangle), blue)), filter(x.s, or[size2,and[and[and[and[iff[nor[triangle,and[yellow,and[apply(same_shape,x.o),rectangle]]],and[and[or[size3,nand[and[triangle,circle],triangle]],or[rectangle,blue]],size3]],and[rectangle,size2]],triangle],triangle],size3]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:triangle;4:or[%s,%s];4:rectangle;4:blue;4:size3;4:and[%s,%s];4:rectangle;4:size2;4:triangle;4:triangle;4:size3
'λx.apply(and[size3,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(nor[circle,apply(same_shape,iota(filter(x.s, triangle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[green,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[yellow,size3],iota(filter(x.s, implies[implies[size3,blue],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:triangle
'λx.apply(or[size2,and[size2,rectangle]],iota(filter(filter(x.s, and[green,size2]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:triangle
'λx.apply(not[and[triangle,or[or[apply(same_color,x.o),size3],not[circle]]]],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[or[not[blue],and[size2,triangle]],size2],iota(filter(x.s, and[apply(same_color,iota(filter(filter(filter(filter(x.s, and[circle,yellow]), size2), or[yellow,yellow]), not[or[yellow,triangle]]))),rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:size2;4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:size2;4:or[%s,%s];4:yellow;4:yellow;4:not[%s];4:or[%s,%s];4:yellow;4:triangle;4:rectangle
'λx.apply(not[or[implies[size3,yellow],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:size3;4:yellow;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, not[triangle]), and[not[size3],blue]), apply(size-leq,iota(x.s))), implies[size1,and[circle,size1]])), filter(filter(x.s, size3), nor[and[size2,blue],circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:and[%s,%s];4:not[%s];4:size3;4:blue;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:and[%s,%s];4:size2;4:blue;4:circle
'λx.apply(and[iff[size1,rectangle],and[rectangle,and[yellow,rectangle]]],iota(filter(filter(x.s, circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size1;4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(green,iota(filter(filter(filter(x.s, size2), blue), nor[triangle,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:nor[%s,%s];4:triangle;4:size3
'λx.apply(or[iff[and[size3,not[triangle]],or[circle,or[blue,circle]]],and[apply(same_color,x.o),and[size3,green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:triangle;4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[not[not[apply(same_size,x.o)]],size2]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(nand[circle,and[size2,and[size2,size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[and[green,size3],and[and[size1,not[size3]],yellow]]), and[size1,not[not[apply(same_shape,x.o)]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:size3;4:yellow;4:and[%s,%s];4:size1;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[yellow],and[and[size3,yellow],triangle]],iota(filter(x.s, or[green,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:green
'λx.apply(green,iota(filter(filter(x.s, rectangle), and[size1,implies[green,apply(same_shape,iota(x.s))]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[blue]), or[size3,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[yellow,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(apply(same_size,iota(filter(filter(x.s, and[rectangle,rectangle]), rectangle))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(not[implies[not[and[triangle,or[size3,not[size1]]]],and[not[size1],rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:not[%s];4:size1;4:and[%s,%s];4:not[%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, green), or[size2,size2]), apply(same_size,x.o)), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size2;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, rectangle)))), triangle), blue), rectangle), or[size2,not[blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:blue;4:rectangle;4:or[%s,%s];4:size2;4:not[%s];4:blue
'λx.apply(not[not[green]],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[size3,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, and[circle,triangle]), blue), apply(size-gt,x.o)))),iota(filter(filter(x.s, circle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(not[and[not[circle],and[apply(same_shape,x.o),yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[size1,or[and[triangle,and[size2,blue]],and[implies[circle,and[iff[and[and[circle,blue],apply(same_shape,iota(x.s))],circle],size2]],not[blue]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:blue;4:and[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[or[rectangle,not[green]],and[nand[size3,rectangle],blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:green;4:and[%s,%s];4:nand[%s,%s];4:size3;4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[circle,green],iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.forall(apply(same_shape,iota(filter(x.s, size1))),filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[green,and[blue,rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size1],filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[apply(same_shape,iota(filter(filter(filter(filter(x.s, green), size3), and[or[and[circle,green],circle],green]), blue))),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:circle;4:green;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[size1,or[triangle,and[apply(same_color,iota(x.s)),triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[yellow,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(or[green,nor[green,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:nor[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size3), and[and[circle,not[size3]],size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size3;4:size1
'λx.exists(or[size1,nand[apply(same_color,x.o),triangle]], filter(x.s, nand[blue,not[size2]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:not[%s];4:size2
'λx.apply(implies[yellow,size1],iota(filter(filter(filter(x.s, circle), not[apply(same_shape,x.o)]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(apply(size-leq,x.o),iota(filter(filter(filter(x.s, size2), rectangle), iff[circle,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:iff[%s,%s];4:circle;4:rectangle
'λx.apply(nand[size3,implies[and[yellow,yellow],apply(same_color,iota(x.s))]],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[nor[rectangle,size1],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[and[yellow,green],and[and[circle,nor[size1,size2]],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:size1;4:size2;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, triangle), and[size3,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size3;4:triangle
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, size2), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.contains(x.o, filter(filter(x.s, size1), nand[iff[or[green,yellow],size1],not[size3]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size1;4:not[%s];4:size3
'λx.apply(triangle,iota(filter(x.s, apply(size-gt,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nor[nand[blue,and[or[size2,triangle],green]],apply(same_color,iota(x.s))],iota(filter(x.s, or[circle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[size3,nand[size1,blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:nand[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[yellow,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(size-gt,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(size-gt,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(or[and[and[size2,yellow],apply(same_color,x.o)],apply(same_size,iota(x.s))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, blue), iff[blue,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:blue;4:size3
'λx.empty(filter(filter(x.s, and[size1,size2]), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:size1
'λx.apply(implies[rectangle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[size1,not[triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(implies[and[blue,size2],iff[yellow,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:size2;4:iff[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[and[or[size3,blue],or[size3,size3]],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:or[%s,%s];4:size3;4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[triangle],nand[green,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:nand[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[and[size2,or[implies[triangle,apply(same_color,iota(filter(filter(x.s, green), and[and[and[size1,triangle],size1],blue])))],blue]],size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size1;4:blue;4:blue;4:size3
'λx.exists(triangle, filter(filter(x.s, apply(same_size,x.o)), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(apply(same_color,iota(filter(filter(x.s, triangle), circle))),iota(filter(x.s, and[blue,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(and[iff[not[rectangle],yellow],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:rectangle;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[implies[apply(same_color,iota(filter(filter(x.s, yellow), rectangle))),circle],and[apply(size-geq,x.o),circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[not[and[apply(same_shape,x.o),apply(size-gt,x.o)]],apply(same_size,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, size2), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(green,iota(filter(x.s, nor[circle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:blue
'λx.apply(and[or[circle,apply(same_color,iota(x.s))],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[circle,size2],iota(filter(filter(x.s, and[nand[green,circle],yellow]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:green;4:circle;4:yellow;4:circle
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, blue), size1), not[blue]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, implies[size3,not[not[or[size3,size3]]]]), nand[circle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:not[%s];4:not[%s];4:or[%s,%s];4:size3;4:size3;4:nand[%s,%s];4:circle;4:yellow
'λx.forall(blue,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(or[apply(same_size,x.o),blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(and[size1,blue],iota(filter(x.s, not[or[or[nand[rectangle,yellow],size2],or[apply(same_color,iota(x.s)),and[size3,circle]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:yellow;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle
'λx.empty(filter(filter(x.s, circle), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.empty(filter(x.s, not[triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(iff[rectangle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, green), and[and[not[implies[size1,rectangle]],apply(same_size,x.o)],circle]), size1)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size1;3:%s.s;2:x
'λx.exists(yellow, filter(filter(filter(x.s, size1), green), iff[not[triangle],circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:iff[%s,%s];4:not[%s];4:triangle;4:circle
'λx.forall(not[and[green,yellow]],filter(filter(x.s, triangle), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(nor[and[rectangle,rectangle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, nor[circle,rectangle]), rectangle), and[or[not[and[circle,not[size1]]],blue],apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:rectangle;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:size1;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, size2), or[circle,apply(same_shape,x.o)]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[size3,apply(size-leq,iota(x.s))],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(x.s, green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), size1), not[green]), yellow), green), triangle), green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:not[%s];4:green;4:yellow;4:green;4:triangle;4:green;4:size1
'λx.apply(implies[size2,or[nand[circle,not[triangle]],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:or[%s,%s];4:nand[%s,%s];4:circle;4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[or[size1,size3],not[and[size3,or[and[rectangle,rectangle],and[triangle,triangle]]]]],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size3;4:not[%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(x.s, apply(size-gt,iota(filter(filter(x.s, and[rectangle,blue]), triangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;4:triangle
'λx.apply(nand[or[and[and[size3,circle],blue],blue],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), and[size2,nand[blue,not[rectangle]]]), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:not[%s];4:rectangle;4:triangle
'λx.apply(or[apply(same_shape,x.o),and[not[size3],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size3;4:size1;1:%s.o;2:x
'λx.exists(and[not[size3],circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size3;4:circle;3:%s.s;2:x
'λx.apply(not[or[size3,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, and[not[green],apply(size-lt,iota(x.s))]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[triangle,not[size1]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:triangle;4:not[%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[size1,and[circle,apply(same_shape,x.o)]],or[green,apply(same_size,iota(filter(x.s, and[rectangle,or[nor[rectangle,size2],circle]])))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:size2;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, nor[blue,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:size2
'λx.apply(or[yellow,and[not[green],size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[yellow,triangle],filter(filter(x.s, size2), or[circle,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:circle;4:yellow
'λx.apply(not[apply(size-leq,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[circle],iota(filter(filter(filter(filter(filter(filter(x.s, or[apply(same_shape,x.o),rectangle]), rectangle), iff[or[triangle,and[not[circle],green]],or[iff[green,circle],and[size2,circle]]]), size3), size3), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:rectangle;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:circle;4:green;4:or[%s,%s];4:iff[%s,%s];4:green;4:circle;4:and[%s,%s];4:size2;4:circle;4:size3;4:size3;4:yellow
'λx.apply(and[apply(same_size,x.o),triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, blue), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.forall(yellow,filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[yellow,triangle],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[not[size1],apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[size2,triangle],apply(size-geq,iota(x.s))],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(green,filter(x.s, not[triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[iff[or[yellow,rectangle],rectangle],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, yellow), green), apply(same_shape,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, nand[size3,green]), apply(same_color,iota(x.s))), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(or[not[rectangle],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-lt,x.o),filter(filter(filter(x.s, not[triangle]), or[size3,and[not[or[rectangle,and[green,apply(same_color,x.o)]]],circle]]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:triangle
'λx.forall(size2,filter(filter(filter(x.s, size1), size1), or[or[and[blue,implies[blue,and[and[size2,apply(same_shape,x.o)],not[triangle]]]],iff[yellow,size2]],not[apply(same_color,iota(x.s))]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:triangle;4:iff[%s,%s];4:yellow;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.forall(not[size2],filter(x.s, and[not[or[not[green],triangle]],size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:green;4:triangle;4:size3
'λx.apply(and[triangle,size3],iota(filter(filter(filter(filter(x.s, or[and[size1,green],blue]), size2), size2), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:green;4:blue;4:size2;4:size2;4:size1
'λx.apply(circle,iota(filter(x.s, iff[triangle,and[green,blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:green;4:blue
'λx.empty(filter(filter(filter(x.s, triangle), green), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:yellow
'λx.contains(iota(filter(x.s, not[yellow])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, circle))),iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(filter(filter(x.s, size1), blue), blue)), filter(filter(x.s, yellow), and[yellow,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:yellow;4:size3
'λx.apply(implies[circle,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, not[blue]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size1
'λx.apply(size3,iota(filter(filter(x.s, size3), and[size1,and[circle,and[iff[nor[size1,apply(size-gt,x.o)],size2],size1]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;4:size1
'λx.contains(iota(filter(x.s, triangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(and[blue,nand[rectangle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(implies[circle,size1],iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[rectangle,rectangle]), size2), yellow), size3), size1), triangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:size2;4:yellow;4:size3;4:size1;4:triangle;4:yellow
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, or[not[apply(same_color,iota(x.s))],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.forall(size1,filter(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, not[or[size2,triangle]]), triangle)))), circle), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:triangle;4:triangle;4:circle;4:size2
'λx.apply(and[triangle,size3],iota(filter(x.s, or[blue,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(or[circle,or[green,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), size2), and[size2,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:and[%s,%s];4:size2;4:triangle
'λx.apply(apply(same_shape,iota(filter(x.s, yellow))),iota(filter(filter(filter(x.s, apply(same_size,x.o)), triangle), and[not[triangle],not[size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:size3
'λx.apply(size3,iota(filter(filter(x.s, or[yellow,yellow]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:yellow;4:rectangle
'λx.contains(iota(x.s), filter(x.s, nand[yellow,size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:size1
'λx.apply(blue,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, iff[rectangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:yellow
'λx.exists(size3, filter(filter(filter(x.s, rectangle), triangle), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:green
'λx.forall(or[implies[iff[size3,not[rectangle]],size1],apply(same_shape,x.o)],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:size3;4:not[%s];4:rectangle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, size1), and[and[size2,size1],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:yellow
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[size2,circle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), rectangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:size1
'λx.apply(or[size2,and[size2,circle]],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, nand[or[apply(same_shape,x.o),blue],and[triangle,yellow]]), apply(same_size,x.o)), iff[rectangle,triangle]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:and[%s,%s];4:triangle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:rectangle;4:triangle;4:size2
'λx.empty(filter(filter(filter(filter(x.s, yellow), size3), green), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:green;4:size1
'λx.apply(and[not[triangle],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(implies[not[size3],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:size1;1:%s.o;2:x
'λx.forall(circle,filter(x.s, nand[or[triangle,or[rectangle,apply(same_color,iota(x.s))]],yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(filter(filter(x.s, or[apply(same_shape,iota(filter(x.s, not[size1]))),size2]), circle), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size2;4:circle;4:triangle
'λx.exists(apply(size-lt,x.o), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[rectangle,or[size3,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[rectangle,triangle]), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:triangle
'λx.apply(and[yellow,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[triangle,size3],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, circle), not[size3]), not[yellow]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size3;4:not[%s];4:yellow;4:yellow
'λx.apply(green,iota(filter(filter(filter(filter(filter(filter(x.s, and[size1,size1]), triangle), rectangle), triangle), not[triangle]), and[green,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1;4:triangle;4:rectangle;4:triangle;4:not[%s];4:triangle;4:and[%s,%s];4:green;4:size3
'λx.apply(and[and[not[apply(same_size,x.o)],size1],iff[blue,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:iff[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, size1), not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size3
'λx.apply(size1,iota(filter(filter(x.s, and[blue,circle]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:size2
'λx.empty(filter(filter(x.s, size2), and[implies[circle,yellow],blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:implies[%s,%s];4:circle;4:yellow;4:blue
'λx.apply(implies[yellow,and[green,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, size3), size3), triangle), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[green,size2],iota(filter(filter(x.s, circle), or[size2,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size2;4:yellow
'λx.apply(and[not[and[apply(size-lt,x.o),blue]],nand[green,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:nand[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(nor[nand[not[size1],or[rectangle,rectangle]],implies[yellow,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:rectangle;4:rectangle;4:implies[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), or[yellow,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:yellow;4:blue
'λx.apply(size3,iota(filter(x.s, and[circle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle
'λx.apply(or[and[size2,size1],or[apply(same_size,iota(filter(x.s, nand[green,apply(same_shape,x.o)]))),size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,apply(size-lt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), not[blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue
'λx.apply(not[apply(same_color,iota(filter(x.s, and[and[and[or[rectangle,and[or[and[nand[rectangle,yellow],size1],green],triangle]],triangle],circle],and[green,apply(same_color,iota(filter(x.s, triangle)))]])))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:yellow;4:size1;4:green;4:triangle;4:triangle;4:circle;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[and[and[and[rectangle,blue],size1],green],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:size1;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[size3,yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.apply(not[green],iota(filter(x.s, and[size3,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, apply(same_shape,iota(filter(x.s, iff[yellow,not[size1]]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:not[%s];4:size1
'λx.apply(or[apply(same_shape,x.o),yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, size2)))), nor[rectangle,apply(same_shape,x.o)]), yellow), size3), size1), or[size3,blue]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size3;4:size1;4:or[%s,%s];4:size3;4:blue;4:triangle
'λx.apply(and[nand[blue,not[not[size3]]],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:not[%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nand[blue,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(nand[blue,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(nand[blue,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[iff[triangle,apply(size-leq,iota(filter(filter(filter(filter(x.s, size3), size3), circle), rectangle)))],and[blue,and[size2,or[size1,green]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:circle;4:rectangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(x.s, apply(same_shape,x.o)), size2), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:size3
'λx.apply(iff[nand[and[green,blue],apply(same_color,x.o)],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[circle,circle]), size2)), filter(x.s, not[size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(nor[and[iff[size3,and[apply(same_size,iota(x.s)),size2]],apply(size-gt,x.o)],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(implies[or[green,size2],not[or[size3,nand[and[circle,size1],rectangle]]]],iota(filter(filter(x.s, yellow), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:green;4:size2;4:not[%s];4:or[%s,%s];4:size3;4:nand[%s,%s];4:and[%s,%s];4:circle;4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, rectangle))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-geq,iota(filter(filter(x.s, rectangle), not[size1]))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(iff[size1,size1], filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[and[and[and[and[green,yellow],blue],and[apply(same_size,x.o),or[circle,triangle]]],blue],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:triangle;4:blue;4:green;1:%s.o;2:x
'λx.apply(and[circle,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, triangle), and[not[circle],triangle]), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:circle;4:triangle;4:rectangle
'λx.exists(size2, filter(filter(x.s, green), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(and[size2,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,iota(filter(filter(filter(x.s, circle), yellow), or[blue,circle]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[and[triangle,and[rectangle,triangle]],apply(size-lt,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[not[circle],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[yellow,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(nand[triangle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(nand[apply(same_shape,x.o),and[circle,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(implies[or[size2,size1],green],filter(filter(filter(x.s, and[apply(size-leq,iota(filter(x.s, green))),rectangle]), circle), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size2;4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:circle;4:blue
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, not[size1]), and[circle,implies[circle,size2]]), apply(size-lt,iota(x.s))), triangle), rectangle), blue), not[and[rectangle,and[yellow,size1]]]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:and[%s,%s];4:circle;4:implies[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle;4:blue;4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:size1;4:triangle
'λx.apply(nand[size3,size3],iota(filter(filter(filter(filter(x.s, iff[not[triangle],size3]), circle), implies[size2,size1]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:triangle;4:size3;4:circle;4:implies[%s,%s];4:size2;4:size1;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, and[size2,size3]), yellow), and[triangle,size2])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:yellow;4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), rectangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size2
'λx.exists(iff[rectangle,green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:rectangle;4:green;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[blue,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[blue,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), implies[or[triangle,size1],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:blue
'λx.exists(not[apply(size-lt,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, not[nor[nand[circle,and[or[triangle,rectangle],blue]],rectangle]]), nand[not[green],or[yellow,size2]]), and[size3,circle]), or[nand[and[size3,size2],and[or[or[yellow,green],circle],rectangle]],and[yellow,apply(size-geq,iota(x.s))]]), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue;4:rectangle;4:nand[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:size3;4:circle;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;4:rectangle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(or[or[size3,green],nor[and[circle,green],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:green;4:nor[%s,%s];4:and[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(x.s)),triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, and[green,size2]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:size1
'λx.contains(iota(filter(filter(x.s, and[triangle,yellow]), apply(same_shape,iota(x.s)))), filter(filter(x.s, circle), and[size2,rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(not[apply(same_size,iota(filter(filter(x.s, yellow), circle)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, or[size1,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:triangle
'λx.apply(size3,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(circle,iota(filter(x.s, and[or[size1,and[and[size2,size2],size2]],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size2;4:circle
'λx.forall(size2,filter(x.s, or[size3,rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle
'λx.forall(nand[circle,not[yellow]],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, iff[triangle,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), blue), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), iff[size3,green]), apply(same_shape,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:size3;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nand[apply(same_shape,x.o),and[triangle,not[and[blue,size3]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[iff[rectangle,apply(same_shape,iota(x.s))],and[apply(size-geq,iota(filter(filter(filter(x.s, yellow), nand[apply(same_color,iota(filter(x.s, rectangle))),triangle]), size3))),size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size3;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[green,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:green
'λx.apply(yellow,iota(filter(filter(x.s, green), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(not[size3],iota(filter(x.s, apply(size-lt,iota(filter(filter(x.s, size3), rectangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_shape,x.o)), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(apply(size-lt,iota(filter(filter(x.s, and[yellow,size1]), green))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-leq,iota(filter(x.s, not[or[and[or[or[yellow,or[triangle,apply(same_shape,x.o)]],and[and[not[or[rectangle,rectangle]],blue],triangle]],size3],size3]]))), filter(filter(x.s, or[size1,apply(same_color,x.o)]), and[size1,yellow]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:rectangle;4:blue;4:triangle;4:size3;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.apply(implies[size3,size3],iota(filter(filter(x.s, rectangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(size2,iota(filter(filter(x.s, triangle), apply(same_color,iota(filter(x.s, circle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[or[triangle,circle],size3],iota(filter(filter(filter(x.s, rectangle), triangle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, nor[and[circle,and[triangle,yellow]],triangle]), blue), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:yellow;4:triangle;4:blue;4:blue
'λx.empty(filter(filter(x.s, size1), and[yellow,size2]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:yellow;4:size2
'λx.contains(iota(filter(filter(x.s, and[or[size2,size1],size1]), size3)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:size1;4:size1;4:size3;3:%s.s;2:x
'λx.apply(nor[yellow,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[not[size2],not[iff[rectangle,or[nand[green,circle],or[rectangle,iff[and[size3,or[and[circle,nand[size2,and[blue,size3]]],not[yellow]]],size3]]]]]],iota(filter(filter(filter(filter(x.s, triangle), circle), circle), not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:not[%s];4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:nand[%s,%s];4:green;4:circle;4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size3;4:not[%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:circle;4:not[%s];4:size1
'λx.apply(or[yellow,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[nand[blue,or[size2,and[and[triangle,circle],triangle]]],size1]), triangle)), filter(filter(filter(filter(x.s, triangle), size1), and[size3,size2]), not[size2]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:blue;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:triangle;4:size1;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:and[%s,%s];4:size3;4:size2;4:not[%s];4:size2
'λx.apply(size2,iota(filter(filter(x.s, and[circle,green]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;4:yellow
'λx.exists(size2, filter(filter(x.s, green), not[circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:circle
'λx.exists(rectangle, filter(filter(x.s, circle), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), blue), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:triangle
'λx.apply(and[yellow,and[triangle,rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(implies[apply(same_size,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size1), blue), iff[apply(size-geq,iota(x.s)),green]), circle), or[blue,size3]), size3), circle))),and[blue,size1]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;4:circle;4:or[%s,%s];4:blue;4:size3;4:size3;4:circle;4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_size,x.o)), size3), yellow), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:yellow;4:yellow
'λx.apply(or[circle,and[and[nor[size3,size3],blue],size2]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:size3;4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[apply(same_shape,iota(x.s)),blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, rectangle), and[blue,not[size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:blue;4:not[%s];4:size3
'λx.contains(x.o, filter(x.s, apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[blue,and[not[and[nand[triangle,and[size2,blue]],size1]],not[green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:blue;4:size1;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[yellow,or[or[size1,iff[size3,and[circle,green]]],rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:size1;4:iff[%s,%s];4:size3;4:and[%s,%s];4:circle;4:green;4:rectangle
'λx.apply(or[and[size1,size3],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size3;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[yellow,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(apply(size-gt,iota(filter(x.s, or[not[and[size1,green]],circle]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:green;4:circle;1:%s.o;2:x
'λx.apply(not[not[or[not[or[green,yellow]],circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, not[and[size2,blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:blue
'λx.forall(size2,filter(filter(x.s, or[circle,circle]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle;4:size3
'λx.apply(not[and[or[or[yellow,circle],and[and[green,size1],yellow]],nor[rectangle,nor[rectangle,rectangle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:yellow;4:nor[%s,%s];4:rectangle;4:nor[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, circle)), filter(filter(x.s, rectangle), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.empty(filter(filter(x.s, apply(same_shape,iota(x.s))), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(filter(x.s, triangle), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.forall(triangle,filter(filter(filter(x.s, green), not[size1]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size1;4:size1
'λx.apply(and[or[triangle,rectangle],rectangle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_color,iota(filter(x.s, size3))),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(filter(x.s, not[not[blue]]), and[size3,apply(same_color,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, and[green,size1]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1;4:triangle
'λx.empty(filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[apply(same_size,x.o),size2],iota(filter(filter(x.s, not[circle]), and[blue,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:blue;4:size2
'λx.apply(or[blue,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[green,green],and[yellow,or[size3,circle]]],iota(filter(filter(x.s, triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:green;4:and[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.forall(circle,filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size1), apply(same_color,x.o)), or[size3,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size3;4:size1
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[not[and[apply(same_shape,x.o),size2]],or[nand[size3,or[and[not[or[size3,size1]],implies[blue,blue]],blue]],not[size2]]]), blue), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:or[%s,%s];4:nand[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:size1;4:implies[%s,%s];4:blue;4:blue;4:blue;4:not[%s];4:size2;4:blue;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, circle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(or[size2,or[circle,size2]],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, blue), not[circle]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:circle;4:yellow
'λx.apply(or[yellow,apply(same_shape,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[not[blue],not[not[size2]]],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:not[%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(or[blue,rectangle],iota(filter(filter(filter(x.s, size1), triangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:blue
'λx.contains(x.o, filter(filter(x.s, rectangle), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.forall(circle,filter(x.s, nand[size2,size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), size3), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:circle
'λx.contains(iota(x.s), filter(x.s, blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[blue],iota(filter(filter(filter(filter(filter(filter(filter(x.s, not[apply(same_shape,iota(filter(filter(x.s, green), size1)))]), green), circle), size3), not[and[size1,green]]), yellow), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:green;4:circle;4:size3;4:not[%s];4:and[%s,%s];4:size1;4:green;4:yellow;4:green
'λx.forall(size3,filter(x.s, or[size3,size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size3
'λx.apply(triangle,iota(filter(filter(filter(x.s, yellow), size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:blue
'λx.forall(green,filter(x.s, or[green,and[circle,and[green,circle]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:green;4:circle
'λx.apply(yellow,iota(filter(filter(x.s, not[blue]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size1
'λx.apply(apply(same_color,iota(filter(filter(x.s, size2), blue))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;1:%s.o;2:x
'λx.forall(green,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[apply(same_color,x.o),nand[rectangle,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(iff[yellow,implies[size1,and[apply(same_shape,iota(x.s)),green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:implies[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[circle,apply(same_size,iota(x.s))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), size2), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:green
'λx.exists(implies[size1,size2], filter(x.s, and[implies[rectangle,size2],circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size2;4:circle
'λx.apply(and[nor[apply(same_shape,x.o),size1],green],iota(filter(filter(filter(filter(x.s, rectangle), size1), green), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:green;4:size2
'λx.forall(blue,filter(x.s, and[and[and[yellow,size2],apply(size-geq,x.o)],apply(same_shape,iota(filter(filter(x.s, blue), or[apply(size-geq,x.o),green])))]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green
'λx.exists(and[circle,green], filter(filter(x.s, or[not[size1],and[apply(same_shape,iota(filter(filter(x.s, yellow), size2))),not[not[size2]]]]), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:not[%s];4:not[%s];4:size2;4:size2
'λx.apply(triangle,iota(filter(x.s, not[circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(or[yellow,triangle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), not[size2]), and[yellow,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size2;4:and[%s,%s];4:yellow;4:yellow
'λx.forall(rectangle,filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), not[blue]), or[size3,or[green,and[triangle,green]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:not[%s];4:blue;4:or[%s,%s];4:size3;4:or[%s,%s];4:green;4:and[%s,%s];4:triangle;4:green
'λx.exists(blue, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[apply(same_size,x.o),apply(same_size,x.o)],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(x.s, and[circle,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle
'λx.apply(yellow,iota(filter(x.s, not[blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[triangle,or[size2,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, iff[iff[size3,and[triangle,size2]],green]), triangle), not[not[size1]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:iff[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:size2;4:green;4:triangle;4:not[%s];4:not[%s];4:size1
'λx.apply(yellow,iota(filter(x.s, and[apply(same_color,x.o),implies[size3,triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:triangle
'λx.apply(or[iff[apply(same_color,iota(x.s)),apply(size-gt,x.o)],apply(same_shape,x.o)],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[apply(same_shape,iota(filter(x.s, blue))),and[apply(same_color,x.o),green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[or[size3,blue],size3],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(filter(filter(x.s, triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(or[yellow,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[blue,green],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:green;4:size2;1:%s.o;2:x
'λx.apply(or[blue,and[and[rectangle,blue],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[and[and[or[yellow,not[triangle]],circle],green],and[size2,not[not[apply(size-leq,x.o)]]]]), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:triangle;4:circle;4:green;4:and[%s,%s];4:size2;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green
'λx.apply(circle,iota(filter(filter(filter(x.s, implies[or[rectangle,green],size2]), or[yellow,yellow]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:size2;4:or[%s,%s];4:yellow;4:yellow;4:rectangle
'λx.apply(and[not[or[green,rectangle]],circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_color,x.o),or[size1,green]],filter(filter(x.s, and[not[size2],and[apply(same_size,iota(x.s)),or[green,nand[not[green],size3]]]]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:green;4:nand[%s,%s];4:not[%s];4:green;4:size3;4:triangle
'λx.apply(or[implies[and[nor[green,size1],not[green]],or[yellow,size1]],or[rectangle,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:size1;4:not[%s];4:green;4:or[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, not[and[not[green],nand[apply(same_size,x.o),blue]]]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size3
'λx.apply(and[size3,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size2), size2))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size2,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(and[size1,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, or[triangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2
'λx.apply(nor[and[yellow,circle],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nor[or[apply(same_shape,iota(filter(x.s, size1))),circle],yellow],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[size2,not[not[green]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:not[%s];4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[and[size1,rectangle],and[apply(same_shape,x.o),and[or[and[blue,or[not[apply(size-gt,x.o)],size1]],triangle],size2]]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:triangle;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size2), green), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:green
'λx.apply(and[not[or[and[size1,and[not[or[green,triangle]],rectangle]],and[size2,blue]]],nor[size1,apply(same_size,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:triangle;4:rectangle;4:and[%s,%s];4:size2;4:blue;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size2,circle],yellow],iota(filter(x.s, and[triangle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.apply(not[apply(same_size,iota(x.s))],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[and[and[apply(same_shape,x.o),and[circle,and[blue,rectangle]]],triangle],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:rectangle;4:triangle;4:yellow;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(filter(x.s, iff[size2,circle]), rectangle), size2), and[green,and[and[implies[not[nand[triangle,size1]],apply(same_size,iota(x.s))],blue],circle]]), or[nand[and[size3,blue],size2],and[size2,size3]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:circle;4:rectangle;4:size2;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:nand[%s,%s];4:triangle;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:circle;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:blue;4:size2;4:and[%s,%s];4:size2;4:size3
'λx.contains(iota(filter(filter(x.s, size2), yellow)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;3:%s.s;2:x
'λx.apply(and[and[nand[or[apply(same_size,x.o),circle],green],triangle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:green;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[size3,green],iota(filter(filter(filter(x.s, size2), yellow), apply(same_color,iota(filter(x.s, triangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[and[nor[circle,rectangle],size2],blue],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:rectangle;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[rectangle,and[iff[and[size2,and[green,not[green]]],green],apply(same_color,x.o)]],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:not[%s];4:green;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(size-leq,x.o),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[implies[implies[apply(same_size,x.o),yellow],size2]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, implies[iff[rectangle,size1],circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:rectangle;4:size1;4:circle
'λx.apply(not[yellow],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[yellow],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[yellow],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size1, filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, size3))),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;1:%s.o;2:x
'λx.exists(size2, filter(filter(filter(filter(filter(x.s, and[blue,apply(same_shape,x.o)]), or[rectangle,nor[circle,green]]), yellow), iff[implies[rectangle,green],apply(same_shape,iota(filter(filter(x.s, and[not[not[or[yellow,yellow]]],and[circle,triangle]]), yellow)))]), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:circle;4:green;4:yellow;4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:circle;4:triangle;4:yellow;4:circle
'λx.apply(triangle,iota(filter(x.s, implies[and[yellow,yellow],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:circle
'λx.contains(iota(filter(filter(x.s, size2), size3)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;3:%s.s;2:x
'λx.apply(and[blue,size1],iota(filter(filter(filter(x.s, and[size2,size3]), and[and[and[and[size1,apply(same_color,x.o)],rectangle],not[blue]],blue]), or[size1,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:not[%s];4:blue;4:blue;4:or[%s,%s];4:size1;4:circle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), circle), nand[apply(same_shape,x.o),and[green,circle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:circle
'λx.forall(size2,filter(filter(filter(x.s, and[green,size1]), size3), and[yellow,or[size2,apply(same_size,x.o)]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1;4:size3;4:and[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[circle,not[not[circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[blue,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(and[triangle,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[size2,and[yellow,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,size3],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size3,iota(filter(x.s, implies[and[size3,blue],and[yellow,apply(same_shape,x.o)]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[blue,yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size3), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), blue), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:yellow
'λx.forall(green,filter(filter(x.s, green), not[green]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:green
'λx.apply(and[not[blue],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(and[apply(same_size,x.o),apply(size-gt,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[rectangle,or[rectangle,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[not[triangle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, size1), and[rectangle,size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:rectangle;4:size1
'λx.contains(x.o, filter(filter(x.s, not[implies[triangle,circle]]), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:triangle;4:circle;4:size3
'λx.forall(size1,filter(filter(x.s, green), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(implies[implies[blue,size3],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:size1;1:%s.o;2:x
'λx.exists(nand[size2,size1], filter(x.s, apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[blue,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[green,or[size1,size2]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:size2
'λx.apply(and[or[size3,green],rectangle],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nor[apply(size-leq,x.o),not[size3]],iota(filter(filter(filter(filter(filter(x.s, green), and[apply(size-leq,x.o),nor[and[or[blue,green],not[not[and[size2,green]]]],triangle]]), and[triangle,apply(size-leq,x.o)]), and[size1,yellow]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:not[%s];4:not[%s];4:and[%s,%s];4:size2;4:green;4:triangle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow;4:size1
'λx.exists(size2, filter(filter(x.s, triangle), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.empty(filter(x.s, and[triangle,rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle
'λx.empty(filter(x.s, and[and[or[not[not[triangle]],nand[circle,circle]],green],circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:triangle;4:nand[%s,%s];4:circle;4:circle;4:green;4:circle
'λx.apply(yellow,iota(filter(x.s, and[and[blue,apply(same_size,x.o)],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.forall(not[and[yellow,implies[and[size1,triangle],rectangle]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(x.s, implies[apply(same_size,iota(x.s)),size1])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(and[triangle,or[blue,size2]],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[or[size3,and[circle,size3]],yellow],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size3;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[size2,circle]), triangle), nor[circle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:triangle;4:nor[%s,%s];4:circle;4:circle
'λx.apply(implies[apply(same_color,x.o),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), size1), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:yellow
'λx.exists(or[blue,blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, yellow), implies[iff[size3,green],and[and[green,rectangle],blue]]), nor[size1,circle]), nor[green,and[size2,apply(same_size,iota(x.s))]]), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:iff[%s,%s];4:size3;4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:blue;4:nor[%s,%s];4:size1;4:circle;4:nor[%s,%s];4:green;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, yellow), or[yellow,or[green,triangle]]), size2), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:yellow;4:or[%s,%s];4:green;4:triangle;4:size2;4:rectangle
'λx.apply(iff[and[not[size2],circle],yellow],iota(filter(filter(filter(x.s, not[rectangle]), and[rectangle,size1]), nand[size3,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:rectangle;4:size1;4:nand[%s,%s];4:size3;4:size1
'λx.apply(or[blue,nor[nand[green,yellow],green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:nand[%s,%s];4:green;4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, or[yellow,implies[apply(same_color,x.o),rectangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(nand[implies[and[size3,circle],not[yellow]],size1],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size3;4:circle;4:not[%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[size2,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), and[size2,and[green,blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:blue
'λx.apply(implies[size3,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(not[green],filter(x.s, and[apply(same_size,x.o),size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(implies[size1,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, size2), apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, blue), apply(size-lt,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,and[blue,or[triangle,blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[blue,and[green,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.exists(and[green,rectangle], filter(filter(x.s, yellow), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(or[size2,and[size3,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, size1), size2), not[and[nand[apply(same_size,x.o),size3],yellow]]), not[or[size3,apply(size-geq,iota(filter(x.s, size3)))]]), and[or[or[size2,triangle],not[circle]],size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:yellow;4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:not[%s];4:circle;4:size3
'λx.apply(not[or[triangle,yellow]],iota(filter(filter(filter(filter(x.s, size2), apply(same_shape,iota(filter(filter(x.s, not[and[apply(same_shape,iota(x.s)),size1]]), size3)))), green), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:size3;4:green;4:size2
'λx.apply(not[and[size3,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,apply(size-gt,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, not[circle]), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.apply(nor[green,circle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[or[size1,nor[size1,and[triangle,or[blue,implies[yellow,size1]]]]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:nor[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:size1;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, rectangle), not[and[size2,and[and[yellow,and[circle,green]],apply(same_size,iota(x.s))]]]), and[and[and[yellow,iff[green,not[blue]]],not[circle]],or[and[and[size3,not[triangle]],blue],rectangle]]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:green;4:not[%s];4:blue;4:not[%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:triangle;4:blue;4:rectangle;4:yellow
'λx.apply(implies[yellow,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, green), size3))),iota(filter(x.s, or[blue,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size1
'λx.apply(triangle,iota(filter(x.s, or[yellow,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.contains(iota(filter(filter(x.s, triangle), size3)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;3:%s.s;2:x
'λx.apply(nor[and[size2,triangle],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,or[apply(size-leq,x.o),size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.exists(implies[apply(size-lt,iota(x.s)),green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(and[not[implies[not[size2],yellow]],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:not[%s];4:size2;4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,iff[or[size2,not[green]],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:iff[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, not[and[blue,iff[apply(same_size,x.o),circle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[circle,and[or[size3,size2],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(and[triangle,and[nand[apply(same_shape,iota(x.s)),apply(same_shape,x.o)],size3]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, apply(size-gt,x.o)), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_color,iota(filter(filter(filter(filter(filter(x.s, and[blue,rectangle]), blue), yellow), circle), circle)))), size1), not[triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:blue;4:yellow;4:circle;4:circle;4:size1;4:not[%s];4:triangle
'λx.exists(triangle, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size3,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size1,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(triangle,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(filter(filter(x.s, circle), not[or[and[apply(size-gt,x.o),not[nor[apply(size-gt,iota(x.s)),yellow]]],and[green,size1]]]), implies[apply(same_size,iota(filter(filter(x.s, size2), apply(same_color,iota(x.s))))),blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:green;4:size1;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, or[circle,size3]), yellow), and[size1,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size3;4:yellow;4:and[%s,%s];4:size1;4:size3
'λx.apply(or[or[or[and[green,not[apply(size-leq,iota(filter(x.s, triangle)))]],apply(same_color,x.o)],blue],rectangle],iota(filter(filter(x.s, yellow), or[rectangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:rectangle;4:yellow
'λx.apply(green,iota(filter(filter(x.s, or[circle,blue]), or[green,and[green,apply(same_shape,x.o)]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:green;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(triangle,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:%s.o;2:x
'λx.exists(size3, filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, triangle), blue), or[and[rectangle,size2],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:circle
'λx.apply(and[size2,size2],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[circle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[or[or[size2,apply(same_shape,iota(x.s))],not[green]],or[size1,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;4:or[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), blue), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:size3
'λx.apply(not[nor[circle,and[size1,green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(or[or[and[green,apply(same_size,iota(filter(x.s, and[size2,blue])))],apply(same_color,x.o)],apply(same_shape,iota(x.s))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), implies[yellow,iff[and[triangle,yellow],size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:yellow;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:size2
'λx.apply(nor[green,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,nand[green,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nand[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(and[apply(size-geq,iota(x.s)),and[and[size3,yellow],nor[and[yellow,not[blue]],circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, triangle), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.contains(x.o, filter(x.s, nand[circle,triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:triangle
'λx.forall(and[and[size2,size3],and[size2,green]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, and[and[yellow,size3],circle]), not[size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:circle;4:not[%s];4:size2
'λx.contains(iota(filter(x.s, implies[and[rectangle,triangle],circle])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:circle;3:%s.s;2:x
'λx.exists(or[green,apply(same_shape,iota(filter(filter(x.s, rectangle), not[circle])))], filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size1,apply(same_size,iota(filter(filter(filter(x.s, rectangle), size1), size3)))],iota(filter(filter(x.s, and[apply(same_shape,iota(filter(filter(x.s, yellow), triangle))),or[blue,apply(same_color,iota(filter(filter(x.s, size2), blue)))]]), and[circle,apply(same_color,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, nor[and[size2,not[yellow]],nor[yellow,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:yellow;4:nor[%s,%s];4:yellow;4:size1
'λx.contains(iota(filter(x.s, blue)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[circle,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[circle,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, and[and[size3,size2],yellow]), nor[size3,size2]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:yellow;4:nor[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[apply(same_shape,iota(x.s)),blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(nand[and[size2,or[implies[size3,yellow],size1]],apply(size-leq,iota(filter(filter(x.s, and[rectangle,nor[and[blue,rectangle],circle]]), size2)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:implies[%s,%s];4:size3;4:yellow;4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, blue), or[and[implies[rectangle,triangle],or[size3,size1]],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:size3;4:size1;4:circle
'λx.apply(size3,iota(filter(filter(x.s, circle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(implies[and[blue,triangle],circle],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(filter(filter(x.s, nand[rectangle,not[rectangle]]), size2), and[yellow,and[size2,apply(size-leq,iota(x.s))]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:size2;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, green), rectangle))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[rectangle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.empty(filter(x.s, or[green,or[yellow,blue]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:yellow;4:blue
'λx.forall(apply(same_shape,x.o),filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, and[green,blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue
'λx.apply(or[size1,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, yellow), blue))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,or[rectangle,rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[rectangle,blue]],iota(filter(filter(filter(x.s, or[size2,iff[and[size3,triangle],yellow]]), size3), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:yellow;4:size3;4:triangle
'λx.apply(implies[size3,implies[not[yellow],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:implies[%s,%s];4:not[%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[circle,apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size2,or[or[implies[blue,iff[apply(same_size,iota(filter(filter(filter(filter(x.s, apply(same_size,x.o)), iff[or[size2,triangle],green]), iff[size3,size3]), blue))),blue]],blue],size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:green;4:iff[%s,%s];4:size3;4:size3;4:blue;4:blue;4:blue;4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[apply(same_color,x.o),circle]), not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:not[%s];4:size1
'λx.apply(not[nor[triangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, size2), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.exists(apply(same_color,x.o), filter(filter(x.s, yellow), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(and[green,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(not[size2], filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, not[and[yellow,apply(same_shape,iota(x.s))]]), size3), apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(or[size2,not[circle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:circle;3:%s.s;2:x
'λx.exists(apply(size-gt,iota(x.s)), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size3), or[green,circle]), apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:green;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,and[blue,iff[and[triangle,green],yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, size1), apply(same_size,iota(x.s))), green), blue)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:blue;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, apply(same_color,x.o)))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[size1],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(not[and[and[rectangle,triangle],size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, triangle), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(not[apply(size-gt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[blue,size2],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, nor[yellow,blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:blue
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, nor[green,and[rectangle,blue]]), triangle), blue), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:blue;4:triangle;4:blue;4:yellow
'λx.apply(iff[triangle,or[not[size1],not[apply(size-geq,iota(x.s))]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(or[yellow,green],filter(x.s, and[nand[circle,nand[and[circle,size1],not[triangle]]],or[rectangle,triangle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:size1;4:not[%s];4:triangle;4:or[%s,%s];4:rectangle;4:triangle
'λx.exists(apply(size-gt,x.o), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(filter(filter(x.s, green), size1), and[and[size3,size3],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:circle
'λx.apply(and[and[circle,size2],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[size3,size2]), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2;4:size3
'λx.apply(or[iff[nand[or[not[and[green,blue]],nand[not[circle],green]],not[apply(same_color,iota(x.s))]],apply(size-geq,x.o)],and[size2,iff[or[apply(same_size,x.o),green],size3]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:blue;4:nand[%s,%s];4:not[%s];4:circle;4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:size2;4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, green), and[and[yellow,size2],or[size1,green]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:or[%s,%s];4:size1;4:green
'λx.apply(blue,iota(filter(filter(x.s, triangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(nand[green,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(size-gt,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, yellow), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(and[nand[apply(size-lt,x.o),circle],and[and[green,size1],triangle]],iota(filter(filter(filter(x.s, yellow), and[and[yellow,circle],blue]), and[and[nor[and[or[size3,green],yellow],size1],and[size2,blue]],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:blue;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:yellow;4:size1;4:and[%s,%s];4:size2;4:blue;4:triangle
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), not[circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, size1), or[size1,blue]), circle), green), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size1;4:blue;4:circle;4:green;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_shape,x.o)), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, rectangle), size1), or[blue,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:or[%s,%s];4:blue;4:size3
'λx.apply(or[blue,blue],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[green,apply(same_size,iota(filter(x.s, circle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.forall(and[circle,size1],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.forall(and[circle,size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.apply(nand[and[or[or[and[size3,and[size3,and[rectangle,yellow]]],and[green,or[rectangle,size1]]],blue],not[size3]],size1],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:size1;4:blue;4:not[%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[or[green,rectangle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), blue), not[size1]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:not[%s];4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, not[iff[and[yellow,triangle],size3]]), green), and[yellow,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:size3;4:green;4:and[%s,%s];4:yellow;4:blue
'λx.apply(or[size3,and[circle,size1]],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[rectangle,yellow],iota(filter(x.s, and[not[nor[triangle,triangle]],not[size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:triangle;4:triangle;4:not[%s];4:size3
'λx.apply(nand[yellow,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(iff[rectangle,not[apply(size-leq,iota(x.s))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_color,iota(filter(x.s, yellow))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(filter(x.s, blue), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(triangle,iota(filter(x.s, not[not[size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3
'λx.apply(not[iff[or[size3,implies[triangle,rectangle]],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:size3;4:implies[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[green,or[circle,size3]],iota(filter(filter(x.s, size2), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(nand[size1,or[and[circle,circle],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), not[triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:triangle
'λx.apply(or[implies[blue,apply(same_size,iota(filter(x.s, green)))],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;1:%s.o;2:x
'λx.apply(nor[size2,not[and[blue,nand[not[blue],rectangle]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:blue;4:nand[%s,%s];4:not[%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[size1,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(same_size,iota(filter(filter(filter(x.s, circle), apply(same_size,x.o)), apply(same_color,x.o)))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[size1,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(implies[size3,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.forall(and[apply(size-geq,iota(x.s)),green],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[rectangle,apply(same_shape,x.o)]), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(and[not[circle],blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:circle;4:blue;3:%s.s;2:x
'λx.forall(apply(same_shape,iota(filter(filter(filter(x.s, or[yellow,circle]), and[or[apply(same_shape,x.o),and[size3,apply(same_size,x.o)]],size3]), size3))),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size3;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, implies[size2,iff[size3,not[and[size2,apply(same_shape,x.o)]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:iff[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size2],iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(nand[or[size1,nand[or[and[apply(same_size,iota(x.s)),circle],size3],nor[blue,triangle]]],implies[iff[apply(size-leq,iota(x.s)),and[and[size2,not[green]],size1]],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size1;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:size3;4:nor[%s,%s];4:blue;4:triangle;4:implies[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:green;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[size1,blue],iota(filter(x.s, iff[size1,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:blue
'λx.apply(nand[size2,triangle],iota(filter(filter(filter(x.s, implies[and[apply(same_size,iota(filter(filter(x.s, blue), size2))),size2],nor[rectangle,or[triangle,apply(size-gt,iota(filter(filter(x.s, triangle), size1)))]]]), or[iff[and[rectangle,triangle],yellow],iff[rectangle,not[yellow]]]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:size2;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:yellow;4:iff[%s,%s];4:rectangle;4:not[%s];4:yellow;4:blue
'λx.contains(iota(filter(x.s, blue)), filter(filter(x.s, size3), and[size3,size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size3;4:size1
'λx.apply(nand[yellow,and[size2,size3]],iota(filter(filter(filter(filter(x.s, and[size1,circle]), blue), green), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:blue;4:green;4:green
'λx.apply(or[size2,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, circle), size3), rectangle), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:rectangle;4:green
'λx.apply(yellow,iota(filter(filter(x.s, not[nand[rectangle,and[blue,rectangle]]]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:rectangle;4:green
'λx.apply(and[blue,not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[iff[or[rectangle,apply(same_color,iota(filter(filter(filter(x.s, and[size3,and[not[not[size3]],iff[blue,circle]]]), green), and[size3,not[nand[rectangle,rectangle]]])))],size3],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:not[%s];4:size3;4:iff[%s,%s];4:blue;4:circle;4:green;4:and[%s,%s];4:size3;4:not[%s];4:nand[%s,%s];4:rectangle;4:rectangle;4:size3;4:size1;1:%s.o;2:x
'λx.exists(iff[or[size3,and[nand[not[rectangle],apply(same_size,iota(x.s))],apply(same_shape,x.o)]],size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.empty(filter(filter(x.s, yellow), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), and[and[size2,yellow],and[blue,rectangle]]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:blue;4:rectangle;4:yellow
'λx.empty(filter(filter(x.s, yellow), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.empty(filter(filter(x.s, yellow), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(blue,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, size3), triangle), yellow), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:yellow;4:size3
'λx.apply(not[or[blue,size1]],iota(filter(x.s, apply(size-gt,iota(filter(x.s, and[circle,and[and[apply(same_size,x.o),size2],or[yellow,and[iff[circle,size2],rectangle]]]]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:or[%s,%s];4:yellow;4:and[%s,%s];4:iff[%s,%s];4:circle;4:size2;4:rectangle
'λx.apply(triangle,iota(filter(filter(filter(x.s, not[rectangle]), size2), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size2;4:size3
'λx.apply(iff[triangle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(and[size1,circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, blue), nand[size3,size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:size3;4:size3
'λx.apply(circle,iota(filter(filter(filter(x.s, size3), triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:circle
'λx.apply(not[and[and[and[yellow,blue],and[rectangle,apply(same_color,iota(x.s))]],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), apply(same_size,iota(x.s))), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[and[not[circle],triangle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(implies[size2,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[apply(size-leq,iota(x.s)),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(iff[triangle,and[not[size2],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(triangle,filter(x.s, apply(same_color,iota(filter(filter(x.s, rectangle), circle)))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.exists(rectangle, filter(filter(filter(filter(filter(x.s, apply(same_size,x.o)), blue), size2), blue), implies[size1,rectangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size2;4:blue;4:implies[%s,%s];4:size1;4:rectangle
'λx.forall(yellow,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, implies[yellow,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:size3
'λx.apply(and[apply(same_size,x.o),circle],iota(filter(filter(filter(x.s, size1), yellow), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:green
'λx.apply(and[circle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.forall(or[triangle,and[not[and[and[and[yellow,triangle],apply(same_color,iota(filter(filter(filter(x.s, and[apply(size-geq,iota(filter(filter(filter(filter(x.s, and[and[blue,yellow],circle]), rectangle), rectangle), or[size3,size3]))),rectangle]), or[green,size2]), not[triangle])))],and[blue,green]]],yellow]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:circle;4:rectangle;4:rectangle;4:or[%s,%s];4:size3;4:size3;4:rectangle;4:or[%s,%s];4:green;4:size2;4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:green;4:yellow;3:%s.s;2:x
'λx.exists(and[yellow,or[not[circle],size1]], filter(filter(x.s, size3), or[not[blue],green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:not[%s];4:blue;4:green
'λx.apply(not[triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[or[blue,or[not[triangle],size1]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, circle), size1)), filter(x.s, and[size1,nand[and[or[and[size3,and[size3,triangle]],blue],nand[green,size3]],size1]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:triangle;4:blue;4:nand[%s,%s];4:green;4:size3;4:size1
'λx.apply(and[circle,or[not[size1],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:size1;4:size1;1:%s.o;2:x
'λx.exists(apply(same_color,iota(x.s)), filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[iff[size3,circle],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size3;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,implies[size2,green]],iota(filter(x.s, and[iff[yellow,size3],and[size1,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:implies[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(and[rectangle,size1],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(x.s, implies[green,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, green), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.exists(and[not[apply(size-geq,x.o)],size2], filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(x.s, or[size1,or[triangle,size3]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:size3
'λx.apply(nor[nand[yellow,yellow],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:yellow;4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size3,size2], filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, rectangle), and[size1,circle]), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:circle;4:size2
'λx.apply(and[triangle,rectangle],iota(filter(filter(x.s, and[yellow,rectangle]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, or[blue,yellow]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:green
'λx.apply(yellow,iota(filter(filter(filter(x.s, not[and[size2,size2]]), triangle), not[apply(same_color,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:size2;4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[nand[or[circle,nor[rectangle,rectangle]],size1],not[nor[and[circle,nor[implies[size2,circle],or[size1,iff[size2,and[iff[green,circle],apply(same_size,x.o)]]]]],size3]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:rectangle;4:size1;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:implies[%s,%s];4:size2;4:circle;4:or[%s,%s];4:size1;4:iff[%s,%s];4:size2;4:and[%s,%s];4:iff[%s,%s];4:green;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(nand[or[apply(same_size,iota(filter(filter(filter(x.s, yellow), rectangle), rectangle))),yellow],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:rectangle;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[not[blue],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(and[nand[nand[yellow,nand[and[or[blue,not[apply(same_shape,iota(filter(x.s, green)))]],circle],and[circle,triangle]]],and[or[and[size2,and[apply(size-geq,iota(filter(x.s, or[blue,circle]))),green]],size2],yellow]],size3],filter(filter(x.s, blue), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:nand[%s,%s];4:yellow;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle;4:green;4:size2;4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.forall(or[apply(same_shape,x.o),yellow],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[nand[rectangle,yellow],blue]), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:yellow;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[rectangle,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[implies[or[circle,green],size3],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:circle;4:green;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), size1)), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, apply(same_color,x.o)), and[yellow,apply(same_color,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),or[size2,apply(same_color,iota(filter(x.s, rectangle)))]],iota(filter(x.s, and[rectangle,apply(same_color,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(filter(x.s, size3))),triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,and[rectangle,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, triangle), blue), rectangle), apply(same_color,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[circle,size1],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[blue,apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[rectangle,nand[green,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:nand[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size3), rectangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:yellow
'λx.forall(or[green,iff[green,green]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:green;4:iff[%s,%s];4:green;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, triangle), apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[and[circle,and[size2,size1]],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:size1;4:triangle;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, circle), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(not[and[size2,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[or[size3,size2],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, circle), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.contains(iota(filter(x.s, size3)), filter(x.s, and[nor[yellow,or[not[triangle],size1]],and[blue,size2]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:triangle;4:size1;4:and[%s,%s];4:blue;4:size2
'λx.exists(green, filter(filter(x.s, rectangle), or[green,yellow]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:green;4:yellow
'λx.apply(not[iff[circle,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(or[or[green,yellow],size2],iota(filter(filter(filter(x.s, apply(same_color,iota(filter(filter(filter(x.s, or[and[triangle,blue],and[not[rectangle],or[blue,rectangle]]]), green), and[circle,or[yellow,size3]])))), rectangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:blue;4:rectangle;4:green;4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:size3;4:rectangle;4:size1
'λx.apply(and[size3,size2],iota(filter(x.s, and[and[yellow,size2],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle
'λx.empty(filter(filter(filter(x.s, circle), rectangle), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:green
'λx.apply(not[apply(same_color,iota(filter(x.s, circle)))],iota(filter(filter(x.s, size3), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, and[iff[or[size1,size2],not[size2]],blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size1;4:size2;4:not[%s];4:size2;4:blue
'λx.apply(and[circle,blue],iota(filter(x.s, and[apply(same_size,iota(filter(x.s, rectangle))),yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.exists(or[size2,circle], filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(x.s, not[and[apply(same_color,iota(x.s)),and[rectangle,size1]]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size3))),iota(filter(filter(x.s, size2), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.forall(yellow,filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(yellow,filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, green), or[nor[and[rectangle,triangle],apply(same_color,iota(filter(x.s, and[circle,blue])))],blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue;4:blue
'λx.exists(apply(same_size,iota(filter(filter(filter(x.s, yellow), size2), not[iff[and[size1,triangle],size1]]))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size1;3:%s.s;2:x
'λx.apply(implies[nand[green,iff[blue,blue]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:green;4:iff[%s,%s];4:blue;4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[circle,yellow])), filter(x.s, blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(x.s), filter(filter(filter(x.s, rectangle), or[apply(size-geq,iota(x.s)),circle]), and[not[size3],size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:not[%s];4:size3;4:size3
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, and[apply(size-lt,x.o),nand[apply(same_size,iota(filter(x.s, apply(same_shape,iota(x.s))))),not[circle]]]), size2), apply(same_color,x.o)), triangle), triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:triangle
'λx.apply(iff[not[blue],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,size3],iota(filter(filter(filter(x.s, apply(same_size,iota(x.s))), and[size2,apply(same_shape,x.o)]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(implies[blue,not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(and[rectangle,circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.forall(not[triangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, blue), yellow)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;3:%s.s;2:x
'λx.apply(and[circle,circle],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(filter(filter(filter(x.s, yellow), size3), size2), apply(same_color,x.o)), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, apply(size-gt,iota(x.s))), size2), nor[apply(same_size,x.o),apply(same_size,x.o)]), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(and[apply(same_shape,x.o),and[not[apply(same_shape,x.o)],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), yellow), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:triangle
'λx.apply(and[and[and[size1,not[and[not[apply(same_color,x.o)],size1]]],rectangle],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:rectangle;4:size1;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[apply(same_size,x.o),yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[green,and[rectangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(and[nor[yellow,nor[rectangle,or[size3,circle]]],circle],iota(filter(x.s, or[and[size1,rectangle],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:blue
'λx.apply(or[blue,and[or[yellow,green],not[nand[apply(size-leq,iota(x.s)),not[blue]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[blue],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[blue],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(or[triangle,size1], filter(filter(x.s, circle), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size2,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size3,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(green, filter(filter(filter(x.s, or[rectangle,circle]), and[iff[and[rectangle,rectangle],or[size3,and[rectangle,apply(same_shape,iota(filter(filter(x.s, yellow), circle)))]]],size1]), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:size1;4:rectangle
'λx.apply(not[triangle],iota(filter(x.s, implies[not[blue],or[size2,blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:size2;4:blue
'λx.forall(triangle,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[circle,and[not[yellow],triangle]],iota(filter(filter(x.s, triangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(or[blue,size1],iota(filter(x.s, and[size3,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.contains(x.o, filter(filter(filter(filter(x.s, size3), size1), green), and[size1,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:green;4:and[%s,%s];4:size1;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.exists(triangle, filter(filter(x.s, circle), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.exists(or[size2,or[yellow,size1]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.apply(or[rectangle,apply(size-geq,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[not[apply(same_color,x.o)],blue],iota(filter(filter(filter(x.s, blue), and[size3,or[green,circle]]), not[or[size1,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size3;4:or[%s,%s];4:green;4:circle;4:not[%s];4:or[%s,%s];4:size1;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(x.s, or[yellow,and[triangle,blue]]), apply(size-leq,x.o)), size3), and[size2,yellow]), size3), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3;4:and[%s,%s];4:size2;4:yellow;4:size3;4:size2
'λx.apply(green,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[nor[circle,size3],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:circle;4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), size3), apply(size-leq,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, green), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.forall(triangle,filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size2,filter(x.s, nor[triangle,iff[size3,nor[and[size1,yellow],size1]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:iff[%s,%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:size1
'λx.exists(blue, filter(x.s, nor[nand[and[or[or[not[green],size2],blue],size2],iff[green,apply(same_shape,x.o)]],size3]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:size2;4:blue;4:size2;4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(x.s, nor[yellow,and[nand[size3,green],and[apply(same_shape,iota(x.s)),rectangle]]]), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:nand[%s,%s];4:size3;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(and[green,or[and[size2,green],or[implies[apply(same_shape,iota(filter(filter(filter(filter(x.s, blue), and[circle,size1]), blue), yellow))),circle],size3]]],iota(filter(filter(x.s, size1), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:size1;4:blue;4:yellow;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(and[size1,circle],iota(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(and[triangle,size2],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, and[yellow,blue]), and[and[green,triangle],size1]), size3), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:size1;4:size3;4:size3
'λx.exists(nand[and[not[rectangle],implies[size3,and[and[size1,rectangle],or[nor[circle,blue],size1]]]],circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:implies[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:size1;4:circle;3:%s.s;2:x
'λx.apply(and[not[or[apply(same_shape,x.o),blue]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(nand[apply(size-leq,x.o),and[and[size3,iff[apply(same_size,iota(filter(x.s, apply(same_size,x.o)))),apply(same_shape,iota(x.s))]],size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(green,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[size3,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[size1,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size1), blue), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:green
'λx.apply(nand[size3,blue],iota(filter(filter(filter(x.s, and[nand[size3,size2],blue]), circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:size3;4:size2;4:blue;4:circle;4:size1
'λx.apply(and[and[triangle,size1],nor[and[rectangle,size1],and[rectangle,green]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[and[size1,and[circle,yellow]],nand[yellow,and[not[green],circle]]],or[and[circle,circle],and[size2,size2]]],iota(filter(x.s, iff[apply(size-geq,iota(x.s)),rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:yellow;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:green;4:circle;4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[blue,implies[yellow,or[circle,implies[apply(size-leq,x.o),apply(same_color,x.o)]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[rectangle,triangle],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,rectangle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(not[and[apply(same_size,x.o),triangle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.forall(or[or[size3,blue],rectangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(and[circle,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, or[apply(size-lt,iota(x.s)),size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(apply(size-leq,iota(filter(filter(x.s, not[size3]), rectangle))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[size2,and[size3,green]],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:size1
'λx.empty(filter(filter(filter(filter(x.s, blue), iff[circle,apply(same_color,iota(x.s))]), iff[rectangle,or[size3,green]]), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:green;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.empty(filter(filter(x.s, yellow), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, and[apply(size-geq,x.o),implies[apply(same_size,iota(x.s)),not[size1]]]), size1), green), and[size2,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;4:size1;4:green;4:and[%s,%s];4:size2;4:size3
'λx.exists(size1, filter(x.s, not[blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(size3, filter(x.s, not[blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(size2,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:%s.o;2:x
'λx.apply(size3,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:%s.o;2:x
'λx.apply(size1,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:%s.o;2:x
'λx.apply(nor[rectangle,not[not[or[green,or[triangle,triangle]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:or[%s,%s];4:green;4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(not[or[yellow,triangle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(implies[yellow,or[size2,circle]],iota(filter(x.s, and[green,apply(same_shape,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[yellow,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,size3],iota(filter(filter(filter(filter(filter(x.s, or[not[yellow],blue]), size3), size1), and[not[or[and[triangle,and[implies[blue,not[yellow]],and[triangle,or[apply(same_size,iota(x.s)),size2]]]],green]],and[implies[and[yellow,rectangle],yellow],green]]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:blue;4:size3;4:size1;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:implies[%s,%s];4:blue;4:not[%s];4:yellow;4:and[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:green;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:yellow;4:green;4:blue
'λx.apply(and[green,apply(same_shape,iota(filter(filter(filter(x.s, blue), and[and[circle,and[triangle,not[rectangle]]],and[green,size2]]), and[nand[implies[apply(same_size,x.o),size1],green],blue])))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:not[%s];4:rectangle;4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, yellow), iff[or[or[triangle,size3],apply(size-geq,x.o)],green])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, and[and[and[circle,circle],size3],implies[or[blue,rectangle],yellow]]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:size3;4:implies[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:yellow;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, iff[size1,or[size2,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:or[%s,%s];4:size2;4:green
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, or[rectangle,implies[circle,size3]]), triangle), circle), green))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:circle;4:size3;4:triangle;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, apply(size-gt,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.empty(filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, and[triangle,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.empty(filter(x.s, apply(size-lt,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[size3,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(blue,iota(filter(x.s, and[size2,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.empty(filter(filter(x.s, and[yellow,circle]), not[blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle;4:not[%s];4:blue
'λx.exists(yellow, filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(yellow, filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(nand[and[circle,blue],triangle],filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:blue;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, or[blue,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green
'λx.apply(or[circle,and[green,nor[blue,not[yellow]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:green;4:nor[%s,%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[triangle,apply(same_color,iota(x.s))],iota(filter(filter(filter(x.s, size1), size3), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:size2
'λx.apply(or[and[rectangle,apply(same_size,iota(x.s))],and[size3,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(nor[size1,apply(same_size,iota(filter(x.s, green)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, not[size1]), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue
'λx.exists(and[size2,yellow], filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[size3,blue],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, green), or[triangle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:triangle;4:blue
'λx.exists(not[size3], filter(x.s, or[rectangle,and[size2,not[blue]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:not[%s];4:blue
'λx.apply(iff[yellow,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[green,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(x.s)),size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, size3), yellow), blue), triangle), size1)), filter(x.s, not[or[triangle,yellow]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:blue;4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:yellow
'λx.apply(and[size3,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size2,and[circle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[circle,and[size1,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(or[blue,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,iota(x.s)),yellow],iota(filter(x.s, and[size2,or[size1,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(and[or[rectangle,not[not[apply(same_size,iota(filter(filter(x.s, circle), size3)))]]],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[iff[not[not[and[size3,triangle]]],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(not[not[size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[and[or[not[size2],yellow],size2],rectangle],size2],iota(filter(filter(x.s, size2), iff[size2,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:yellow;4:size2;4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:size2;4:rectangle
'λx.apply(not[not[size3]],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[nand[triangle,apply(same_color,iota(x.s))],and[triangle,circle]],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, not[not[triangle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:triangle
'λx.apply(not[not[implies[and[size3,implies[size1,blue]],and[rectangle,circle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size3;4:implies[%s,%s];4:size1;4:blue;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(not[and[rectangle,and[size1,blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[blue,nand[size2,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[green,implies[size3,size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(and[and[nand[iff[apply(same_color,iota(x.s)),blue],yellow],implies[green,size1]],green], filter(filter(filter(x.s, size2), nor[size3,or[or[rectangle,yellow],blue]]), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:yellow;4:implies[%s,%s];4:green;4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:blue;4:green
'λx.apply(and[rectangle,triangle],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, not[size1]), size3), apply(size-geq,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[or[or[and[yellow,blue],and[size1,and[yellow,size2]]],size3],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2;4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,or[green,not[blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[not[and[size1,or[blue,size1]]],and[circle,apply(same_size,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size1;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[not[or[apply(same_shape,iota(x.s)),and[and[green,blue],and[size1,size2]]]],and[size3,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:blue;4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, and[circle,iff[size2,apply(same_size,x.o)]]), size2), rectangle), not[green]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:rectangle;4:not[%s];4:green;4:size1
'λx.exists(size2, filter(filter(filter(x.s, size3), yellow), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:circle
'λx.apply(and[or[size3,triangle],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size3,green],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(filter(x.s, green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(and[triangle,not[not[size1]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, nor[size2,size3]), or[circle,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:size3;4:or[%s,%s];4:circle;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(x.s, size3), yellow), or[and[triangle,and[yellow,and[blue,or[not[size3],size3]]]],apply(same_color,x.o)]), size1)), filter(x.s, or[not[yellow],or[not[size2],blue]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size3;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:not[%s];4:size2;4:blue
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(size-lt,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, and[size1,size3]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.apply(apply(size-leq,iota(filter(filter(filter(filter(x.s, not[size2]), triangle), triangle), and[triangle,and[triangle,or[rectangle,not[size1]]]]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:triangle;4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[or[not[and[size2,green]],blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_shape,x.o),size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), triangle), or[blue,triangle]), and[or[green,size2],blue]), size1), triangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:or[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:or[%s,%s];4:green;4:size2;4:blue;4:size1;4:triangle;4:size2
'λx.apply(rectangle,iota(filter(x.s, or[and[nor[circle,rectangle],size1],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:rectangle;4:size1;4:triangle
'λx.apply(iff[or[and[rectangle,and[size2,circle]],and[iff[size3,yellow],apply(same_color,iota(x.s))]],and[size3,iff[triangle,apply(same_shape,x.o)]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:iff[%s,%s];4:size3;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[yellow,green], filter(filter(x.s, triangle), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(nor[circle,yellow],iota(filter(filter(filter(x.s, and[not[rectangle],iff[triangle,and[or[and[green,or[apply(size-lt,iota(x.s)),not[not[size1]]]],size2],circle]]]), not[triangle]), nor[triangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size1;4:size2;4:circle;4:not[%s];4:triangle;4:nor[%s,%s];4:triangle;4:size2
'λx.apply(or[or[not[size1],blue],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:blue;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, circle), yellow)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, green), and[not[yellow],or[and[iff[nand[yellow,green],size1],circle],circle]]), and[triangle,and[green,size3]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:yellow;4:green;4:size1;4:circle;4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:size3
'λx.apply(or[size3,triangle],iota(filter(filter(x.s, size3), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, size3)))), green), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(x.s, blue), and[size3,size3]), size3), apply(size-leq,x.o))), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size3;4:size3;4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[green,iff[circle,rectangle]]), not[size1]), implies[size3,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:iff[%s,%s];4:circle;4:rectangle;4:not[%s];4:size1;4:implies[%s,%s];4:size3;4:size2
'λx.apply(or[not[or[green,circle]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:circle;4:circle;1:%s.o;2:x
'λx.exists(iff[yellow,size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:yellow;4:size3;3:%s.s;2:x
'λx.apply(or[circle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, and[and[size2,or[apply(size-geq,iota(filter(filter(filter(x.s, rectangle), yellow), size1))),green]],circle]), rectangle), blue), not[size2]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:size1;4:green;4:circle;4:rectangle;4:blue;4:not[%s];4:size2;4:rectangle
'λx.apply(and[circle,not[triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(filter(x.s, rectangle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nand[rectangle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, size3), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(nand[iff[size1,circle],and[blue,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:size1;4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(and[yellow,yellow],filter(filter(x.s, size2), and[apply(same_shape,x.o),size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, iff[yellow,nand[nor[size1,and[triangle,yellow]],size3]]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:nand[%s,%s];4:nor[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:yellow;4:size3;4:yellow
'λx.apply(nand[and[apply(same_color,x.o),size2],and[blue,size1]],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), and[blue,rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:blue;4:rectangle
'λx.forall(iff[circle,size1],filter(filter(filter(filter(x.s, and[triangle,size3]), circle), or[size3,iff[triangle,size2]]), not[rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:circle;4:or[%s,%s];4:size3;4:iff[%s,%s];4:triangle;4:size2;4:not[%s];4:rectangle
'λx.apply(circle,iota(filter(x.s, apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(nand[or[size2,apply(size-leq,x.o)],size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(or[and[apply(same_size,iota(x.s)),green],or[size3,and[circle,not[not[size1]]]]], filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(or[size3,and[yellow,yellow]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size1,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[size1,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[size2,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[size2,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[size2,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[not[green],apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,and[size3,iff[blue,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(x.s, rectangle), apply(same_size,x.o)), not[and[or[size2,and[or[implies[size1,not[blue]],green],size3]],apply(same_size,iota(filter(filter(filter(x.s, triangle), and[circle,not[size3]]), nand[size1,not[size1]])))]]), not[or[green,or[not[rectangle],yellow]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:size1;4:not[%s];4:blue;4:green;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:circle;4:not[%s];4:size3;4:nand[%s,%s];4:size1;4:not[%s];4:size1;4:not[%s];4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:rectangle;4:yellow
'λx.forall(apply(same_color,iota(filter(filter(x.s, not[size1]), triangle))),filter(filter(filter(x.s, green), green), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:size2
'λx.apply(rectangle,iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(size-geq,iota(x.s)),iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(filter(x.s, size1), size1), size3), green), apply(size-leq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size3;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[blue,green],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, blue), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, blue), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(size3,iota(filter(filter(x.s, nand[size3,iff[size1,green]]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:iff[%s,%s];4:size1;4:green;4:blue
'λx.empty(filter(filter(filter(x.s, not[rectangle]), triangle), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:triangle;4:size1
'λx.apply(apply(size-leq,iota(filter(filter(x.s, blue), nor[triangle,yellow]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(x.s, and[blue,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.forall(size3,filter(x.s, implies[size1,and[apply(same_size,x.o),and[nor[rectangle,triangle],size3]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:triangle;4:size3
'λx.apply(and[green,nand[not[triangle],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:nand[%s,%s];4:not[%s];4:triangle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, size2), nor[green,rectangle]), rectangle), and[or[rectangle,and[green,size1]],rectangle]), green)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:green;4:rectangle;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size1;4:rectangle;4:green;3:%s.s;2:x
'λx.forall(nor[size1,yellow],filter(filter(filter(filter(filter(x.s, size2), size3), green), green), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:green;4:green;4:circle
'λx.apply(or[and[yellow,apply(same_color,iota(x.s))],nor[and[blue,circle],or[iff[apply(same_color,iota(x.s)),size1],apply(same_color,iota(filter(x.s, blue)))]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:blue;4:circle;4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[size1,rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(triangle,iota(filter(filter(filter(x.s, blue), size1), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:yellow
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), size2), and[green,iff[triangle,size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:and[%s,%s];4:green;4:iff[%s,%s];4:triangle;4:size2
'λx.apply(nand[blue,and[not[and[nand[apply(same_color,x.o),and[size3,size2]],and[size1,size2]]],triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:size1;4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[size3,size1],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:size1;4:circle;1:%s.o;2:x
'λx.forall(size3,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size1,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[yellow],iota(filter(filter(filter(x.s, or[size2,circle]), size2), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle;4:size2;4:rectangle
'λx.apply(green,iota(filter(filter(filter(filter(x.s, implies[circle,circle]), size3), triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:circle;4:size3;4:triangle;4:circle
'λx.forall(green,filter(x.s, nor[and[apply(size-leq,iota(x.s)),nand[nor[size3,size3],triangle]],and[circle,apply(same_color,x.o)]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:size3;4:size3;4:triangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[apply(size-leq,x.o),size2])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, not[size1]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size1
'λx.apply(nand[or[rectangle,apply(same_color,iota(x.s))],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, circle), implies[yellow,blue]), circle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:yellow;4:blue;4:circle;4:circle
'λx.apply(blue,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:%s.o;2:x
'λx.apply(or[or[triangle,green],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:green;4:rectangle;1:%s.o;2:x
'λx.forall(and[not[size1],apply(same_size,x.o)],filter(filter(x.s, iff[blue,green]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:green;4:size3
'λx.apply(or[rectangle,and[green,implies[not[size1],green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:implies[%s,%s];4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(or[not[yellow],blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:yellow;4:blue;3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[circle,and[apply(same_shape,x.o),circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[size3,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size3,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), yellow), not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:not[%s];4:triangle
'λx.empty(filter(filter(x.s, and[size3,or[triangle,size1]]), and[circle,nor[green,triangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:circle;4:nor[%s,%s];4:green;4:triangle
'λx.apply(size2,iota(filter(filter(x.s, circle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(and[and[and[blue,rectangle],triangle],nand[size3,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:triangle;4:nand[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[circle,blue],iota(filter(filter(x.s, and[and[circle,size2],not[green]]), and[implies[size1,not[apply(same_size,iota(x.s))]],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:not[%s];4:green;4:and[%s,%s];4:implies[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(or[triangle,and[and[apply(same_shape,iota(x.s)),green],or[size1,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(implies[and[and[and[blue,or[and[size2,apply(same_shape,iota(filter(filter(filter(x.s, blue), and[not[size1],or[apply(same_size,iota(filter(filter(filter(x.s, or[rectangle,triangle]), circle), yellow))),size1]]), and[size2,triangle])))],yellow]],nand[yellow,apply(same_size,x.o)]],rectangle],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:circle;4:yellow;4:size1;4:and[%s,%s];4:size2;4:triangle;4:yellow;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[and[circle,yellow],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nand[size3,blue],circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:size3;4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[circle,size1]), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1;4:blue
'λx.forall(circle,filter(filter(x.s, green), and[rectangle,size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:rectangle;4:size3
'λx.apply(or[circle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[circle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.exists(or[rectangle,apply(size-lt,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), filter(filter(x.s, triangle), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(green,iota(filter(filter(x.s, and[size1,triangle]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle;4:green
'λx.forall(and[yellow,or[yellow,size2]],filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, nand[apply(same_shape,x.o),triangle]), triangle), and[and[blue,or[triangle,size2]],rectangle]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:triangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size2;4:rectangle;4:size3
'λx.apply(and[circle,and[green,and[yellow,not[nand[circle,implies[size3,triangle]]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:not[%s];4:nand[%s,%s];4:circle;4:implies[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, green), green), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:triangle
'λx.forall(or[not[or[size2,rectangle]],not[triangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:rectangle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.forall(size2,filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[and[rectangle,circle],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size3,and[size1,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, green), or[rectangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:rectangle;4:yellow
'λx.apply(and[green,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[green,or[apply(same_size,iota(filter(x.s, blue))),implies[circle,or[apply(same_size,iota(filter(filter(filter(filter(x.s, rectangle), implies[green,green]), yellow), nor[and[size1,size3],size2]))),green]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:green;4:green;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:size1;4:size3;4:size2;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, and[circle,size3]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, or[green,size3]), circle), green), size1), triangle)), filter(x.s, and[nand[not[size2],nand[size1,rectangle]],triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3;4:circle;4:green;4:size1;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:size2;4:nand[%s,%s];4:size1;4:rectangle;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size3), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(nand[yellow,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.exists(and[triangle,circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:circle;3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, yellow), or[green,triangle]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, not[rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(nand[yellow,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(or[not[or[apply(same_color,iota(x.s)),yellow]],and[or[size2,and[size3,circle]],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, blue))),and[apply(same_color,x.o),nor[rectangle,triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(nor[or[and[rectangle,apply(same_size,x.o)],size1],apply(size-leq,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(filter(filter(x.s, and[green,size2]), and[blue,yellow]), or[size3,triangle]), and[or[yellow,blue],rectangle]), size2), or[blue,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:blue;4:yellow;4:or[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:rectangle;4:size2;4:or[%s,%s];4:blue;4:size2
'λx.apply(and[implies[size2,iff[blue,size2]],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:iff[%s,%s];4:blue;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(x.s, rectangle), size2), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:circle
'λx.apply(and[or[and[yellow,and[yellow,blue]],nand[and[size1,nand[size1,yellow]],or[not[and[nor[and[size3,yellow],and[size1,triangle]],rectangle]],and[and[yellow,or[rectangle,blue]],iff[triangle,circle]]]]],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:blue;4:nand[%s,%s];4:and[%s,%s];4:size1;4:nand[%s,%s];4:size1;4:yellow;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:size1;4:triangle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:blue;4:iff[%s,%s];4:triangle;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[size3,or[blue,and[circle,yellow]]],filter(filter(x.s, and[size3,nor[size2,nor[circle,circle]]]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:size3;4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:nor[%s,%s];4:size2;4:nor[%s,%s];4:circle;4:circle;4:size1
'λx.apply(or[yellow,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[green,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle
'λx.apply(or[blue,or[blue,iff[nand[and[size3,not[triangle]],green],size3]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:blue;4:iff[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:triangle;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), triangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[apply(size-gt,x.o),size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3
'λx.apply(nand[or[and[not[green],nor[size1,size2]],size1],apply(same_shape,iota(x.s))],iota(filter(filter(x.s, or[circle,and[iff[or[size1,and[triangle,and[implies[green,green],triangle]]],size1],blue]]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:nor[%s,%s];4:size1;4:size2;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:implies[%s,%s];4:green;4:green;4:triangle;4:size1;4:blue;4:size2
'λx.apply(not[triangle],iota(filter(filter(x.s, or[yellow,size3]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3;4:rectangle
'λx.apply(nand[yellow,not[size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),and[and[or[triangle,blue],circle],implies[rectangle,triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:circle;4:implies[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, green), and[size2,or[green,size3]]), size1), and[and[and[apply(same_size,x.o),not[not[iff[blue,blue]]]],and[and[triangle,size1],rectangle]],nor[green,and[nor[triangle,size2],and[yellow,blue]]]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size2;4:or[%s,%s];4:green;4:size3;4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:not[%s];4:iff[%s,%s];4:blue;4:blue;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:rectangle;4:nor[%s,%s];4:green;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:yellow;4:blue;3:%s.s;2:x
'λx.apply(not[and[circle,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, and[not[size1],iff[blue,not[size1]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:iff[%s,%s];4:blue;4:not[%s];4:size1
'λx.contains(iota(filter(filter(filter(x.s, and[and[size1,and[triangle,yellow]],implies[nor[or[blue,size1],or[green,size3]],circle]]), size3), apply(same_size,iota(filter(x.s, blue))))), filter(filter(x.s, not[size2]), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:yellow;4:implies[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:blue;4:size1;4:or[%s,%s];4:green;4:size3;4:circle;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, and[blue,blue]), size2), and[size2,or[green,triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:size2;4:and[%s,%s];4:size2;4:or[%s,%s];4:green;4:triangle
'λx.apply(implies[circle,or[triangle,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(x.s, and[or[apply(same_shape,x.o),size1],triangle]), size2), and[triangle,and[yellow,apply(same_size,x.o)]]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:triangle;4:size2;4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(not[rectangle],iota(filter(x.s, nor[implies[apply(same_shape,iota(x.s)),and[apply(size-geq,x.o),circle]],and[triangle,and[rectangle,yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:yellow
'λx.contains(iota(filter(x.s, circle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[not[not[size3]],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:size3;4:green
'λx.exists(not[apply(size-gt,iota(x.s))], filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size3), yellow), blue), size1), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:blue;4:size1;4:yellow
'λx.apply(not[apply(same_color,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, implies[size1,nand[iff[size1,size3],green]]), and[rectangle,and[or[size3,size3],green]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:nand[%s,%s];4:iff[%s,%s];4:size1;4:size3;4:green;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:size3;4:green
'λx.exists(or[size2,triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.apply(or[circle,size1],iota(filter(filter(filter(x.s, blue), implies[size3,rectangle]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size3;4:rectangle;4:triangle
'λx.apply(not[and[yellow,rectangle]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[size3,triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.apply(and[not[blue],triangle],iota(filter(x.s, and[or[size3,or[size3,implies[and[triangle,size1],triangle]]],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:triangle;4:blue
'λx.apply(or[not[circle],size1],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[green,or[size2,or[triangle,rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(size-gt,iota(filter(x.s, size1))),and[triangle,not[blue]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[circle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow
'λx.apply(implies[and[circle,size3],circle],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size1, filter(filter(x.s, not[nand[circle,size3]]), and[triangle,green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:circle;4:size3;4:and[%s,%s];4:triangle;4:green
'λx.forall(blue,filter(filter(x.s, size1), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.contains(x.o, filter(filter(x.s, yellow), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.contains(x.o, filter(filter(x.s, yellow), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(or[circle,nor[rectangle,not[apply(same_shape,iota(x.s))]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, green), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, circle), not[blue]), rectangle), apply(size-leq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue;4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(implies[size2,not[size2]],filter(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), apply(same_shape,x.o)), blue), not[apply(same_shape,iota(x.s))]), blue), green), size3), iff[triangle,rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:size2;4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:green;4:size3;4:iff[%s,%s];4:triangle;4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), not[blue]), not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;4:not[%s];4:size2
'λx.apply(not[or[not[nor[size1,green]],circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:size1;4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(filter(x.s, circle), iff[size2,and[size3,triangle]]))),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:size2;4:and[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, or[green,apply(size-leq,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), size1), green), size2), and[not[not[and[and[nor[circle,not[implies[size1,size1]]],and[blue,rectangle]],nand[blue,yellow]]]],size3]), not[not[triangle]]), blue), or[triangle,and[size3,apply(same_shape,x.o)]])))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:green;4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:not[%s];4:implies[%s,%s];4:size1;4:size1;4:and[%s,%s];4:blue;4:rectangle;4:nand[%s,%s];4:blue;4:yellow;4:size3;4:not[%s];4:not[%s];4:triangle;4:blue;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[and[green,size1]],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, nand[or[blue,size3],size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:blue;4:size3;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[blue,not[green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:green
'λx.apply(iff[triangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, size2), size3), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size3
'λx.forall(nand[triangle,and[apply(same_size,x.o),rectangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(implies[triangle,implies[rectangle,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:implies[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[size1,and[implies[and[green,and[size3,and[size2,rectangle]]],blue],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:rectangle;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[and[triangle,apply(same_color,x.o)],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size3), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(or[implies[yellow,not[size1]],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:yellow;4:not[%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, implies[circle,size3]), yellow), apply(size-geq,x.o)), or[apply(size-gt,x.o),yellow]), and[green,yellow]), or[apply(same_color,x.o),not[rectangle]]), and[size2,triangle]), size3), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size3;4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:green;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:size2;4:triangle;4:size3;4:rectangle
'λx.apply(or[rectangle,rectangle],iota(filter(x.s, nand[not[not[and[yellow,rectangle]]],apply(size-gt,iota(filter(filter(filter(x.s, apply(same_size,x.o)), size2), and[size3,size1])))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:and[%s,%s];4:size3;4:size1
'λx.forall(not[size1],filter(filter(x.s, not[implies[blue,and[size2,apply(same_shape,x.o)]]]), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(and[not[and[blue,rectangle]],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(iff[and[yellow,green],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:yellow;4:green;4:triangle;1:%s.o;2:x
'λx.apply(iff[and[blue,size2],and[green,not[size1]]],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, circle), not[size1]), size3), apply(same_size,x.o)), size2), size3), triangle), yellow), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:size2;4:and[%s,%s];4:green;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size1;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:size3;4:triangle;4:yellow;4:size3
'λx.apply(or[rectangle,or[triangle,and[size1,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(size2,filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size3,filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size1,filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size1, filter(filter(x.s, size1), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, yellow), rectangle), green), blue), size3), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:green;4:blue;4:size3;4:size3
'λx.empty(filter(filter(filter(filter(x.s, size2), apply(same_color,iota(x.s))), iff[size3,circle]), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:circle;4:yellow
'λx.apply(implies[yellow,apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, iff[green,or[size2,and[nand[size2,size2],or[not[size2],rectangle]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:or[%s,%s];4:size2;4:and[%s,%s];4:nand[%s,%s];4:size2;4:size2;4:or[%s,%s];4:not[%s];4:size2;4:rectangle
'λx.empty(filter(x.s, and[iff[size3,or[circle,blue]],blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:or[%s,%s];4:circle;4:blue;4:blue
'λx.forall(nand[apply(size-lt,x.o),nor[green,rectangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nor[%s,%s];4:green;4:rectangle;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, size1), apply(same_color,x.o)), circle), not[and[and[size3,nor[apply(same_color,x.o),size2]],circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:circle
'λx.apply(and[and[apply(same_color,iota(x.s)),circle],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[not[rectangle],nor[size2,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.forall(and[size1,apply(same_shape,x.o)],filter(filter(x.s, circle), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[circle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, green), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.contains(iota(x.s), filter(filter(filter(x.s, size1), or[size2,rectangle]), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size2;4:rectangle;4:size1
'λx.apply(and[apply(same_size,x.o),green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size3,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(or[not[and[green,apply(same_size,x.o)]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[and[circle,nand[yellow,blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(x.s)),blue],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(nor[size3,green],filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[green,and[size2,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(or[yellow,and[blue,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(and[and[or[triangle,not[apply(size-gt,x.o)]],and[circle,and[and[not[rectangle],and[implies[blue,green],nand[circle,size1]]],and[nand[and[apply(same_shape,iota(x.s)),and[and[and[or[circle,size1],and[rectangle,yellow]],green],not[iff[size2,size3]]]],triangle],triangle]]]],size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:blue;4:green;4:nand[%s,%s];4:circle;4:size1;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size1;4:and[%s,%s];4:rectangle;4:yellow;4:green;4:not[%s];4:iff[%s,%s];4:size2;4:size3;4:triangle;4:triangle;4:size2;3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, apply(same_color,x.o)), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.exists(size1, filter(x.s, iff[or[blue,apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, or[and[rectangle,or[rectangle,blue]],rectangle]), circle), implies[rectangle,size2]), and[yellow,and[size1,rectangle]]), circle), apply(same_size,iota(filter(filter(x.s, yellow), or[apply(same_size,x.o),size2]))))))],yellow]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:blue;4:rectangle;4:circle;4:implies[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:rectangle;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:yellow
'λx.apply(size1,iota(filter(filter(filter(x.s, and[size3,green]), rectangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:rectangle;4:yellow
'λx.apply(and[and[and[rectangle,and[size3,rectangle]],and[and[not[implies[yellow,size3]],triangle],green]],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:yellow;4:size3;4:triangle;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, size2), triangle), circle), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:circle;4:size3
'λx.apply(nand[circle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[blue,or[circle,not[green]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:circle;4:not[%s];4:green
'λx.apply(and[circle,not[blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(or[rectangle,implies[size2,apply(same_color,iota(x.s))]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(green, filter(filter(x.s, size3), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, and[yellow,or[rectangle,and[green,or[blue,size2]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:size2
'λx.apply(or[circle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, and[blue,not[apply(same_shape,x.o)]]), triangle), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, circle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(size2,iota(filter(filter(x.s, circle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(size2,iota(filter(filter(x.s, circle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.contains(iota(x.s), filter(filter(x.s, yellow), iff[and[apply(size-lt,x.o),yellow],and[nand[blue,size2],and[size1,rectangle]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:and[%s,%s];4:size1;4:rectangle
'λx.forall(and[not[size2],size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:size3;3:%s.s;2:x
'λx.apply(or[or[blue,and[size1,size1]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(green,iota(filter(filter(x.s, size1), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(green,iota(filter(filter(x.s, size2), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(and[triangle,iff[not[or[size3,rectangle]],and[circle,size1]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[or[circle,not[rectangle]],and[triangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:rectangle;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, circle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(and[rectangle,apply(same_shape,iota(filter(filter(x.s, and[size3,and[circle,and[blue,size1]]]), apply(same_size,iota(filter(filter(x.s, size3), yellow))))))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nand[green,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(nand[green,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, green), not[apply(same_size,iota(filter(filter(filter(filter(x.s, rectangle), blue), triangle), yellow)))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:triangle;4:yellow
'λx.apply(size2,iota(filter(x.s, and[size1,apply(same_color,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[blue,nand[yellow,size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size1,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(nor[yellow,and[or[or[yellow,nand[green,iff[green,implies[size3,yellow]]]],rectangle],yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:nand[%s,%s];4:green;4:iff[%s,%s];4:green;4:implies[%s,%s];4:size3;4:yellow;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[yellow,and[size2,not[rectangle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:not[%s];4:rectangle
'λx.apply(green,iota(filter(filter(x.s, size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(green,iota(filter(filter(x.s, size1), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(nor[and[implies[iff[not[size2],or[circle,size3]],circle],and[and[circle,rectangle],blue]],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:circle;4:size3;4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size2), not[size1]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[not[green],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,implies[and[blue,and[and[green,and[size3,yellow]],size2]],green]],filter(filter(filter(x.s, and[or[rectangle,or[green,circle]],triangle]), size3), apply(same_shape,iota(filter(x.s, nand[green,not[rectangle]])))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:implies[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:yellow;4:size2;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:circle;4:triangle;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:not[%s];4:rectangle
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(filter(filter(x.s, size1), and[green,triangle])))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:green;4:triangle
'λx.forall(and[triangle,and[size1,and[yellow,yellow]]],filter(filter(x.s, triangle), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[apply(same_shape,iota(filter(x.s, size3))),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(size3,iota(filter(filter(x.s, size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(size1,iota(filter(filter(x.s, size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(size3,iota(filter(filter(x.s, size1), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(size1,iota(filter(filter(x.s, size1), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(size3,iota(filter(filter(x.s, size3), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.contains(iota(filter(filter(filter(x.s, nand[yellow,circle]), size2), green)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:circle;4:size2;4:green;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size2), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(or[size2,triangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(x.s, and[size3,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.apply(iff[circle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), or[or[and[size2,size3],blue],and[triangle,size2]])), filter(x.s, not[green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:blue;4:and[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(and[and[rectangle,nand[triangle,green]],not[size3]],iota(filter(filter(x.s, yellow), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:triangle;4:green;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(implies[and[and[size1,circle],not[rectangle]],yellow],iota(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, nor[blue,rectangle]), apply(same_shape,iota(x.s)))))), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:not[%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[iff[or[size3,size2],or[green,and[rectangle,yellow]]],and[and[or[blue,triangle],apply(same_shape,x.o)],iff[not[nor[rectangle,or[green,rectangle]]],triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size3;4:size2;4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:not[%s];4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:rectangle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_size,x.o)), and[size3,blue]), circle), implies[yellow,apply(same_shape,iota(filter(x.s, rectangle)))]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:blue;4:circle;4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[and[size3,green],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:green;4:size1;1:%s.o;2:x
'λx.forall(and[not[size2],apply(same_shape,iota(filter(filter(x.s, size3), size3)))],filter(filter(x.s, size2), nand[size3,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:size3;4:yellow
'λx.apply(not[or[and[not[and[or[size3,size3],and[and[rectangle,not[nand[or[rectangle,size1],circle]]],size1]]],size2],not[nand[rectangle,triangle]]]],iota(filter(x.s, implies[triangle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size3;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:circle;4:size1;4:size2;4:not[%s];4:nand[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:circle
'λx.apply(or[size2,and[size1,implies[yellow,size3]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:implies[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[blue,circle],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(green,iota(filter(filter(x.s, circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(green,iota(filter(filter(x.s, circle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(or[not[green],or[size1,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size1,green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.forall(green,filter(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, and[size1,circle])))), blue), or[circle,rectangle]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:blue;4:or[%s,%s];4:circle;4:rectangle;4:triangle
'λx.apply(circle,iota(filter(x.s, and[green,apply(size-geq,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[size2,and[blue,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, circle), size3), circle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:circle;1:%s.o;2:x
'λx.apply(nor[not[and[size3,size2]],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,nor[triangle,or[circle,blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(and[iff[and[circle,apply(size-leq,iota(x.s))],blue],yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:blue;4:yellow;3:%s.s;2:x
'λx.apply(nand[yellow,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[yellow,size1],triangle],iota(filter(filter(filter(filter(x.s, circle), size1), not[size1]), not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:not[%s];4:size1;4:not[%s];4:size1
'λx.apply(or[green,or[blue,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.exists(not[implies[apply(same_color,x.o),circle]], filter(filter(filter(x.s, rectangle), triangle), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:blue
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), iff[rectangle,size1]), size1), and[yellow,circle]), green), rectangle), apply(same_shape,x.o)), and[triangle,apply(same_size,iota(filter(x.s, size3)))]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:rectangle;4:size1;4:size1;4:and[%s,%s];4:yellow;4:circle;4:green;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(and[green,or[rectangle,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[not[rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[triangle,not[and[apply(same_shape,iota(filter(filter(x.s, yellow), apply(same_size,iota(x.s))))),apply(same_color,x.o)]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(filter(x.s, implies[circle,size1]), implies[and[blue,blue],yellow]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size1;4:implies[%s,%s];4:and[%s,%s];4:blue;4:blue;4:yellow;4:circle
'λx.apply(and[triangle,nand[size3,apply(size-lt,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size3,rectangle],iota(filter(filter(x.s, rectangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.forall(blue,filter(filter(x.s, green), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(not[and[and[nand[size1,apply(same_color,x.o)],blue],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[triangle,iff[nor[and[rectangle,size2],blue],size3]],iota(filter(x.s, and[and[or[and[size3,size2],size1],size3],size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:size2;4:size1;4:size3;4:size3
'λx.apply(and[rectangle,and[size3,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(nand[and[not[triangle],yellow],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[circle,size3])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.apply(or[green,and[green,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[and[size1,not[blue]],and[blue,and[size1,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[green,apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[size2,not[implies[or[nor[yellow,size1],not[size2]],nand[and[or[apply(same_color,iota(x.s)),circle],or[and[size2,iff[size3,apply(same_shape,iota(x.s))]],yellow]],apply(same_shape,iota(filter(x.s, or[size3,or[or[triangle,not[size1]],size3]])))]]]],iota(filter(x.s, or[yellow,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:yellow;4:size1;4:not[%s];4:size2;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:and[%s,%s];4:size2;4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size2
'λx.empty(filter(filter(filter(x.s, iff[rectangle,size3]), rectangle), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:size3;4:rectangle;4:blue
'λx.contains(iota(filter(filter(filter(x.s, apply(same_size,iota(x.s))), and[circle,size2]), apply(same_color,iota(filter(filter(filter(filter(x.s, apply(size-leq,iota(filter(x.s, circle)))), green), blue), not[and[yellow,circle]]))))), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:blue;4:not[%s];4:and[%s,%s];4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_shape,iota(filter(x.s, not[yellow]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(iff[size3,or[yellow,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(same_shape,x.o),filter(filter(filter(x.s, and[circle,triangle]), size2), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, or[apply(same_shape,x.o),rectangle]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:size3
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, yellow), iff[rectangle,rectangle]), size1), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:rectangle;4:rectangle;4:size1;4:yellow
'λx.exists(and[nor[apply(same_size,x.o),circle],circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:circle;3:%s.s;2:x
'λx.apply(or[blue,iff[rectangle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(iff[size1,or[yellow,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(or[rectangle,green],filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size2,and[apply(same_shape,x.o),and[green,not[and[and[blue,triangle],yellow]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[not[green],or[rectangle,or[and[size2,apply(same_size,x.o)],and[apply(same_shape,x.o),nor[and[or[yellow,rectangle],circle],yellow]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:circle;4:yellow;1:%s.o;2:x
'λx.forall(or[size2,apply(size-leq,x.o)],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[green,apply(same_size,iota(filter(x.s, size3)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(filter(x.s, blue), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(or[implies[size3,size2],apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, size2), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(or[triangle,or[size2,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(rectangle, filter(x.s, and[circle,blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(and[and[or[blue,apply(same_size,iota(filter(filter(filter(x.s, or[triangle,iff[and[apply(same_size,x.o),triangle],triangle]]), apply(size-gt,x.o)), green)))],size2],and[triangle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;4:size2;4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), and[rectangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:yellow
'λx.contains(iota(filter(filter(x.s, size2), not[rectangle])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(and[triangle,apply(size-gt,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[yellow,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size1,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,and[not[size3],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[green,and[size2,size3]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size3
'λx.apply(and[rectangle,nor[not[size3],green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, iff[and[circle,or[size1,size3]],triangle]), blue)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:size1;4:size3;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(nor[triangle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.exists(nand[iff[and[size3,size3],size3],implies[or[triangle,rectangle],circle]], filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size3;4:size3;4:size3;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[green,and[and[apply(same_color,x.o),rectangle],size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, size3), green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:blue
'λx.apply(or[nand[not[size1],size2],and[not[nor[circle,circle]],and[not[size3],and[triangle,size3]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:size1;4:size2;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:circle;4:circle;4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,apply(size-gt,x.o)],iota(filter(filter(x.s, triangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[not[or[size2,green]],circle],iota(filter(x.s, or[size2,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1
'λx.apply(blue,iota(filter(filter(x.s, size2), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(blue,iota(filter(filter(x.s, size2), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.empty(filter(filter(filter(x.s, blue), size1), or[circle,not[apply(same_color,x.o)]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:or[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[circle,not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(not[rectangle],iota(filter(filter(filter(filter(filter(x.s, yellow), size1), and[size2,green]), green), and[triangle,apply(same_shape,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:and[%s,%s];4:size2;4:green;4:green;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[rectangle,size1]), green), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1;4:green;4:triangle
'λx.apply(apply(same_shape,iota(filter(x.s, rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nor[rectangle,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, blue), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, rectangle), yellow), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:yellow
'λx.forall(rectangle,filter(filter(x.s, size2), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.forall(blue,filter(filter(filter(x.s, rectangle), size3), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size3
'λx.exists(nand[size2,size2], filter(x.s, and[rectangle,iff[size3,size2]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:size3;4:size2
'λx.exists(size3, filter(filter(x.s, green), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.contains(iota(filter(filter(x.s, apply(size-lt,iota(x.s))), green)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,nor[size1,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:nor[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, or[and[apply(size-leq,iota(filter(filter(filter(filter(filter(x.s, size2), yellow), size3), green), nand[apply(same_shape,x.o),implies[green,green]]))),implies[size1,not[and[apply(same_shape,iota(filter(filter(filter(filter(x.s, implies[triangle,green]), green), green), and[implies[size3,and[apply(same_shape,x.o),green]],blue]))),and[circle,green]]]]],size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:size3;4:green;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:green;4:green;4:implies[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:green;4:green;4:green;4:and[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:blue;4:and[%s,%s];4:circle;4:green;4:size2
'λx.apply(or[size2,and[or[size2,size3],not[and[yellow,circle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, nand[apply(same_size,x.o),blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.exists(blue, filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[size2,circle],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:circle;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.exists(not[size1], filter(filter(x.s, size2), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.forall(not[yellow],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(implies[rectangle,and[size1,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(nand[and[and[not[yellow],green],size2],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:green;4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[size2,and[and[iff[size2,size1],iff[yellow,size1]],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:size1;4:iff[%s,%s];4:yellow;4:size1;4:size1;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(filter(filter(x.s, yellow), or[blue,circle]), size1), nand[size1,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:circle;4:size1;4:nand[%s,%s];4:size1;4:blue
'λx.forall(or[nand[rectangle,size1],rectangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(and[not[and[size3,size2]],or[and[size2,and[blue,green]],or[size2,or[size3,iff[blue,or[nand[triangle,not[circle]],size2]]]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size2;4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:green;4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:or[%s,%s];4:nand[%s,%s];4:triangle;4:not[%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(rectangle, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), yellow), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:blue
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, size3), green), and[size1,or[or[apply(same_color,x.o),green],triangle]]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:and[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, yellow), circle), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, or[green,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:green
'λx.apply(nand[apply(same_shape,iota(x.s)),or[triangle,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(not[size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(or[green,size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.forall(size3,filter(filter(filter(filter(x.s, rectangle), circle), and[blue,blue]), and[green,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:and[%s,%s];4:blue;4:blue;4:and[%s,%s];4:green;4:circle
'λx.forall(and[apply(same_color,iota(filter(x.s, yellow))),size2],filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size1,iff[apply(same_shape,iota(filter(filter(filter(x.s, circle), green), rectangle))),blue]],iota(filter(filter(x.s, size1), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(not[size2],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[blue,nand[blue,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(iff[and[triangle,triangle],rectangle],iota(filter(x.s, not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(not[implies[and[or[size2,yellow],apply(size-geq,iota(x.s))],size1]],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[circle,nand[blue,circle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size1), circle), and[and[nor[circle,triangle],yellow],or[size2,not[size2]]]), circle), apply(size-lt,iota(x.s))), green), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:triangle;4:yellow;4:or[%s,%s];4:size2;4:not[%s];4:size2;4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:green;4:green
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, or[or[green,or[triangle,size1]],blue]), or[not[circle],circle]), apply(size-geq,iota(x.s))), triangle), and[triangle,size2])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:triangle;4:size1;4:blue;4:or[%s,%s];4:not[%s];4:circle;4:circle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(x.s, not[nand[and[and[not[not[apply(size-geq,iota(filter(x.s, rectangle)))]],yellow],implies[green,size3]],not[not[not[and[triangle,blue]]]]]]), apply(same_size,x.o)), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:implies[%s,%s];4:green;4:size3;4:not[%s];4:not[%s];4:not[%s];4:and[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(iff[and[size3,size2],or[size1,and[apply(same_color,iota(x.s)),circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:size2;4:or[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.exists(and[size2,size1], filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[green,size2],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[and[size3,size2],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:size2;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, not[and[apply(same_color,iota(filter(filter(x.s, triangle), rectangle))),circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:circle
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[rectangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, triangle), yellow), yellow), circle), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:yellow;4:circle;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, circle), circle), implies[size1,size2]), or[not[size3],rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:implies[%s,%s];4:size1;4:size2;4:or[%s,%s];4:not[%s];4:size3;4:rectangle
'λx.empty(filter(filter(x.s, blue), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.forall(or[green,size1],filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:green;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(yellow, filter(filter(x.s, blue), size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(or[size3,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(iff[blue,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[size1,circle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, rectangle), and[blue,and[or[circle,size3],green]]), not[rectangle])), filter(filter(x.s, yellow), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:green;4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, blue), nand[yellow,green]), and[triangle,apply(same_size,iota(x.s))]), iff[and[apply(same_color,x.o),not[and[blue,and[and[and[blue,yellow],or[size2,yellow]],rectangle]]]],circle]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:yellow;4:green;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:or[%s,%s];4:size2;4:yellow;4:rectangle;4:circle;4:green
'λx.apply(or[size3,circle],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[implies[blue,circle],iff[blue,blue]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:iff[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.forall(not[blue],filter(filter(filter(x.s, size2), or[and[rectangle,triangle],green]), not[size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:green;4:not[%s];4:size2
'λx.apply(yellow,iota(filter(filter(x.s, size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(and[green,yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(and[rectangle,and[circle,blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,size3],iota(filter(x.s, implies[implies[blue,size3],implies[and[not[not[green]],size2],size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:green;4:size2;4:size2
'λx.contains(iota(filter(x.s, nand[green,size1])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[and[and[and[size3,triangle],size2],circle],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:size2;4:circle;4:yellow
'λx.apply(size3,iota(filter(x.s, or[and[yellow,size1],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:size2
'λx.apply(or[size2,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[and[size2,and[triangle,or[size1,or[and[size1,apply(same_shape,x.o)],blue]]]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[rectangle,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[green,size2]), size1), iff[size2,size2]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:size1;4:iff[%s,%s];4:size2;4:size2
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, or[size1,nor[yellow,size3]]), and[size2,not[yellow]]), size3), triangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:nor[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:size2;4:not[%s];4:yellow;4:size3;4:triangle;4:size1
'λx.exists(blue, filter(filter(filter(x.s, blue), yellow), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:size2
'λx.apply(blue,iota(filter(x.s, and[size2,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, and[circle,yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow
'λx.apply(or[size1,and[yellow,and[circle,triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, circle), circle), triangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:triangle;4:size2
'λx.apply(and[or[circle,and[size3,blue]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:size3;4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[size1,size1],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size1,size1],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[size3,not[size1]],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[triangle,implies[not[size3],apply(same_shape,iota(filter(filter(filter(x.s, yellow), green), blue)))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:implies[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:blue;1:%s.o;2:x
'λx.apply(or[not[iff[blue,size3]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:blue;4:size3;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_shape,x.o)), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.exists(implies[not[rectangle],triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.exists(green, filter(filter(filter(x.s, yellow), size2), and[or[blue,triangle],size3]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:size3
'λx.apply(and[size1,apply(same_color,x.o)],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(apply(same_shape,iota(filter(x.s, and[or[and[size1,yellow],nand[and[apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, not[size2]), not[green]), and[circle,circle]), triangle), circle), size2))),triangle],or[circle,not[rectangle]]]],blue]))),filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:not[%s];4:green;4:and[%s,%s];4:circle;4:circle;4:triangle;4:circle;4:size2;4:triangle;4:or[%s,%s];4:circle;4:not[%s];4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[iff[size1,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[size2,yellow],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(blue,iota(filter(x.s, iff[blue,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:size2
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, green), and[size1,triangle]), blue), or[not[green],yellow]), rectangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size1;4:triangle;4:blue;4:or[%s,%s];4:not[%s];4:green;4:yellow;4:rectangle;3:%s.s;2:x
'λx.forall(iff[apply(size-gt,iota(filter(x.s, size1))),green],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;3:%s.s;2:x
'λx.forall(yellow,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(implies[size1,yellow],filter(filter(x.s, rectangle), and[and[apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), and[size2,size1]))),size1],size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size2;4:size1;4:size1;4:size2
'λx.apply(or[and[rectangle,size2],size2],iota(filter(filter(filter(x.s, not[rectangle]), not[rectangle]), not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:not[%s];4:rectangle;4:not[%s];4:size2
'λx.apply(apply(same_size,iota(filter(x.s, green))),iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[apply(same_shape,iota(filter(filter(x.s, not[nor[and[nor[rectangle,rectangle],rectangle],triangle]]), blue))),not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:rectangle;4:rectangle;4:triangle;4:blue;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(not[and[yellow,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(not[nand[apply(same_color,iota(x.s)),nand[circle,blue]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, size1), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(or[apply(same_shape,iota(filter(filter(x.s, size2), apply(size-lt,x.o)))),size2],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size2,filter(filter(filter(x.s, circle), green), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:size1
'λx.exists(implies[and[not[or[size1,rectangle]],implies[and[rectangle,or[or[circle,not[blue]],size2]],size2]],not[apply(same_size,iota(x.s))]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size1;4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:blue;4:size2;4:size2;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[size2,and[size3,blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, circle), apply(size-geq,x.o)), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle
'λx.contains(iota(x.s), filter(x.s, or[green,and[nor[size3,size2],rectangle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:nor[%s,%s];4:size3;4:size2;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), circle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:blue
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), and[implies[and[rectangle,size2],apply(size-leq,x.o)],and[circle,blue]]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[size1,apply(same_shape,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size1],iota(filter(filter(x.s, not[and[size3,nand[or[and[yellow,size2],triangle],green]]]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;4:green;4:size3
'λx.contains(x.o, filter(filter(x.s, apply(same_color,x.o)), and[or[size1,rectangle],apply(same_shape,x.o)]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(x.s, nand[rectangle,circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:circle
'λx.empty(filter(filter(filter(filter(x.s, circle), or[size2,nand[blue,and[size3,nor[or[blue,green],apply(same_color,x.o)]]]]), size2), nor[nor[or[circle,not[size1]],apply(size-gt,x.o)],rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:and[%s,%s];4:size3;4:nor[%s,%s];4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:nor[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle
'λx.apply(or[size1,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, size3), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(green,iota(filter(filter(x.s, nor[circle,apply(same_color,iota(x.s))]), or[circle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow
'λx.apply(or[yellow,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nor[blue,nor[yellow,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:nor[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[apply(same_color,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(filter(x.s, rectangle), not[yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:yellow
'λx.empty(filter(filter(filter(filter(filter(x.s, rectangle), size3), triangle), triangle), or[triangle,yellow]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:triangle;4:triangle;4:or[%s,%s];4:triangle;4:yellow
'λx.apply(or[rectangle,apply(same_color,x.o)],iota(filter(filter(filter(filter(filter(filter(x.s, nand[green,apply(same_color,x.o)]), or[yellow,triangle]), not[and[triangle,blue]]), blue), size1), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:triangle;4:not[%s];4:and[%s,%s];4:triangle;4:blue;4:blue;4:size1;4:triangle
'λx.contains(iota(filter(x.s, green)), filter(filter(x.s, and[triangle,size3]), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:yellow
'λx.apply(or[and[and[size1,triangle],circle],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,or[blue,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[size2,and[not[size2],and[triangle,apply(same_size,iota(filter(x.s, not[and[nand[yellow,triangle],rectangle]])))]]],iota(filter(x.s, or[size3,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:yellow;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:yellow
'λx.apply(nor[triangle,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, nor[or[nor[and[size3,apply(same_size,iota(filter(filter(filter(filter(x.s, and[and[triangle,not[size3]],size2]), triangle), blue), yellow)))],not[green]],or[size1,and[yellow,triangle]]],or[circle,blue]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:size3;4:size2;4:triangle;4:blue;4:yellow;4:not[%s];4:green;4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:circle;4:blue
'λx.forall(not[not[apply(size-leq,iota(x.s))]],filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[yellow,size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.empty(filter(x.s, and[and[circle,green],or[triangle,or[and[yellow,triangle],green]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:or[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:green
'λx.apply(or[or[size3,size1],nand[yellow,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:nand[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, not[or[size3,size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size3;4:size3
'λx.apply(iff[size2,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[not[green],size2],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,yellow],iota(filter(filter(filter(x.s, not[rectangle]), rectangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:rectangle;4:size2
'λx.apply(iff[apply(same_color,iota(filter(x.s, yellow))),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size2), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(and[apply(same_size,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, apply(size-geq,x.o)), and[rectangle,size2]), not[and[size3,nand[blue,size3]]]), size3), nor[apply(size-geq,iota(filter(x.s, or[or[green,blue],size3]))),not[yellow]]), circle), circle), apply(same_size,x.o)), rectangle), size3), triangle))),or[triangle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size2;4:not[%s];4:and[%s,%s];4:size3;4:nand[%s,%s];4:blue;4:size3;4:size3;4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:size3;4:not[%s];4:yellow;4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size3;4:triangle;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, or[rectangle,or[triangle,and[and[size3,size1],rectangle]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle
'λx.apply(not[rectangle],iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), rectangle), green), or[circle,size3]), rectangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:green;4:or[%s,%s];4:circle;4:size3;4:rectangle;4:size3
'λx.apply(and[and[and[size2,size1],yellow],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, not[apply(same_color,iota(x.s))]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size1), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(size1,iota(filter(filter(x.s, triangle), and[triangle,and[or[yellow,and[rectangle,triangle]],size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:triangle;4:size3
'λx.forall(iff[size1,not[rectangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:size1;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size2), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.exists(size3, filter(filter(filter(filter(x.s, or[yellow,and[and[nand[rectangle,green],blue],green]]), and[or[rectangle,triangle],triangle]), and[triangle,and[size3,yellow]]), apply(same_color,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:green;4:blue;4:green;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,iff[circle,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[or[size3,green],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:blue;1:%s.o;2:x
'λx.apply(or[nor[and[and[not[and[green,apply(same_shape,x.o)]],green],nand[apply(size-lt,iota(x.s)),size3]],rectangle],iff[size2,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size3;4:rectangle;4:iff[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,and[size1,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-gt,iota(filter(filter(x.s, yellow), or[rectangle,size3]))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.empty(filter(x.s, and[apply(same_shape,x.o),circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(nor[green,size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:green;4:size2;3:%s.s;2:x
'λx.apply(and[green,circle],iota(filter(filter(x.s, not[rectangle]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size1
'λx.apply(and[green,nand[size3,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:nand[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[apply(size-leq,x.o),and[and[size1,blue],and[blue,and[green,circle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[not[size3],blue]), apply(same_color,x.o)), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.forall(size2,filter(filter(x.s, triangle), and[triangle,rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nor[green,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(not[and[yellow,rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, yellow))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[blue,triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.contains(x.o, filter(x.s, apply(same_size,iota(filter(x.s, circle)))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(nand[size1,size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:size1;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, or[or[or[and[and[size1,and[size2,yellow]],size1],blue],size2],apply(size-geq,iota(filter(x.s, and[or[size3,blue],size2])))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:yellow;4:size1;4:blue;4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:size2
'λx.apply(or[circle,or[size1,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[or[yellow,size2]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.empty(filter(x.s, blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size1,yellow],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[or[size2,rectangle],not[yellow]],iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[green,apply(same_shape,iota(filter(x.s, and[triangle,not[yellow]])))],filter(x.s, and[size3,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, blue), and[size2,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:size1
'λx.apply(and[green,and[triangle,size1]],iota(filter(filter(filter(filter(filter(x.s, rectangle), and[not[circle],blue]), green), and[blue,apply(same_color,iota(x.s))]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:not[%s];4:circle;4:blue;4:green;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(size1,filter(x.s, nor[size1,not[green]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:not[%s];4:green
'λx.apply(and[size2,apply(same_shape,x.o)],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nor[and[and[green,and[rectangle,blue]],yellow],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:blue;4:yellow;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[and[blue,and[circle,or[size1,green]]],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:size1;4:green;4:size2
'λx.apply(and[size2,and[circle,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), triangle), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[rectangle,rectangle]), and[and[triangle,apply(same_size,iota(filter(x.s, green)))],blue])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;3:%s.s;2:x
'λx.apply(or[implies[circle,size3],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[rectangle,apply(same_color,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[circle,or[circle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:or[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, not[triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(circle,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(x.s, or[size3,or[size3,or[or[not[circle],rectangle],rectangle]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:rectangle;4:rectangle
'λx.exists(or[and[and[iff[green,rectangle],blue],triangle],blue], filter(x.s, nor[circle,and[and[size3,triangle],blue]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:blue;4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:blue
'λx.apply(green,iota(filter(filter(filter(x.s, circle), circle), iff[or[green,rectangle],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:iff[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:circle
'λx.apply(apply(same_color,iota(filter(filter(x.s, not[not[and[size3,triangle]]]), not[circle]))),iota(filter(filter(x.s, and[and[size3,not[and[iff[not[green],size3],not[apply(same_color,x.o)]]]],size1]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:green;4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2
'λx.apply(and[and[rectangle,not[rectangle]],triangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[green,rectangle]), rectangle), circle), or[apply(same_size,iota(filter(x.s, size3))),and[green,and[circle,size1]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle;4:rectangle;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:size1
'λx.apply(or[green,size1],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-lt,iota(filter(x.s, or[circle,apply(same_color,x.o)]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[triangle,iff[and[or[triangle,blue],implies[blue,size2]],triangle]], filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:implies[%s,%s];4:blue;4:size2;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, and[size2,yellow]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow
'λx.forall(or[apply(size-leq,x.o),and[size3,yellow]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.apply(or[apply(same_color,iota(filter(filter(filter(x.s, yellow), green), rectangle))),and[not[blue],yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_size,iota(x.s)),filter(filter(x.s, implies[size2,not[and[apply(same_color,iota(x.s)),and[size2,size2]]]]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2;4:size3
'λx.forall(size3,filter(filter(x.s, triangle), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(nor[circle,apply(size-leq,iota(filter(filter(filter(x.s, size2), or[rectangle,rectangle]), blue)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, blue), and[triangle,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:yellow
'λx.forall(implies[apply(same_color,x.o),size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(filter(filter(x.s, green), size1), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:size3
'λx.forall(green,filter(filter(x.s, not[size2]), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.apply(blue,iota(filter(x.s, or[rectangle,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle
'λx.apply(blue,iota(filter(x.s, and[size1,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.apply(and[blue,and[rectangle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[or[and[apply(same_size,x.o),size2],size3],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(and[not[or[size2,size1]],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[size1,size2],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-lt,x.o),filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(not[green],filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[iff[yellow,and[and[triangle,yellow],yellow]],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[size1,not[green]])), filter(x.s, circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(x.s, or[green,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:triangle
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[and[blue,not[and[not[size3],or[size3,and[or[apply(size-geq,iota(filter(x.s, blue))),size3],size1]]]]],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(and[not[not[blue]],apply(same_color,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, green), blue), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:yellow
'λx.exists(or[green,not[and[not[yellow],apply(same_shape,x.o)]]], filter(filter(x.s, rectangle), apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[blue,not[rectangle]]), not[size1]), rectangle), green), nand[green,size1]), apply(size-gt,iota(filter(filter(x.s, blue), circle)))), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:rectangle;4:not[%s];4:size1;4:rectangle;4:green;4:nand[%s,%s];4:green;4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:triangle
'λx.apply(and[rectangle,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size1), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, and[size1,green]), green), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:green;4:triangle
'λx.apply(nor[green,or[size3,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:green;4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[or[yellow,rectangle],and[nor[size2,size2],size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:size2;4:size2;4:size1
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, circle), or[green,triangle]), size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:green;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[yellow,and[blue,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:green
'λx.apply(nand[size2,apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[circle,yellow],iota(filter(filter(x.s, size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.exists(yellow, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(x.s, and[green,iff[size3,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:iff[%s,%s];4:size3;4:rectangle
'λx.apply(implies[and[size1,circle],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[blue,not[apply(size-gt,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, size3), triangle), and[iff[or[blue,rectangle],rectangle],apply(same_size,x.o)]), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.exists(blue, filter(x.s, and[size3,not[size3]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:size3
'λx.contains(iota(x.s), filter(x.s, iff[rectangle,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:size3
'λx.apply(apply(same_size,iota(x.s)),iota(filter(filter(x.s, size2), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(and[circle,yellow],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(x.s, and[yellow,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.forall(yellow,filter(x.s, and[blue,and[yellow,green]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:green
'λx.apply(and[size2,not[green]],iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(green,iota(filter(filter(filter(x.s, not[not[not[rectangle]]]), apply(same_size,iota(filter(x.s, circle)))), or[and[nand[blue,size2],size2],and[triangle,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:size2;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(not[size3],iota(filter(x.s, and[and[apply(same_color,x.o),and[triangle,size3]],iff[apply(same_size,x.o),not[size2]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size3;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2
'λx.apply(not[or[triangle,nor[apply(same_shape,iota(x.s)),and[implies[circle,rectangle],not[size3]]]]],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:circle;4:rectangle;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[blue,and[green,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(implies[yellow,green],iota(filter(x.s, and[yellow,and[yellow,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size1
'λx.apply(circle,iota(filter(x.s, nor[implies[apply(same_shape,x.o),and[not[and[apply(same_size,iota(filter(x.s, apply(same_size,iota(x.s))))),and[rectangle,iff[size2,apply(same_size,x.o)]]]],circle]],or[size1,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:or[%s,%s];4:size1;4:rectangle
'λx.forall(apply(size-lt,x.o),filter(filter(x.s, yellow), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.forall(rectangle,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[triangle,nand[and[apply(same_color,x.o),nor[green,and[not[nor[and[green,and[blue,size1]],and[yellow,or[circle,apply(same_shape,iota(x.s))]]]],circle]]],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:size1;4:and[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, green), apply(size-lt,iota(filter(filter(x.s, blue), and[triangle,size1])))), circle), size3), triangle))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:size1;4:circle;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, or[size3,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle
'λx.apply(or[nand[blue,triangle],or[apply(same_color,x.o),and[size2,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), implies[size1,circle])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[triangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2
'λx.apply(and[not[rectangle],not[size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), and[yellow,or[apply(same_shape,x.o),blue]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[circle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[size3,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[triangle,and[rectangle,nand[green,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(and[yellow,blue], filter(x.s, and[green,or[size1,size2]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:size2
'λx.exists(apply(same_size,iota(filter(filter(filter(x.s, size3), circle), rectangle))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:rectangle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size1), implies[size1,iff[and[and[rectangle,not[circle]],apply(size-leq,x.o)],blue]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:implies[%s,%s];4:size1;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.apply(or[circle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, not[implies[implies[yellow,size2],yellow]]), or[size2,size3]), size3), nand[and[size3,green],triangle]), yellow), circle), size1), or[circle,triangle]), and[blue,yellow]), or[green,and[size1,green]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:size2;4:yellow;4:or[%s,%s];4:size2;4:size3;4:size3;4:nand[%s,%s];4:and[%s,%s];4:size3;4:green;4:triangle;4:yellow;4:circle;4:size1;4:or[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:blue;4:yellow;4:or[%s,%s];4:green;4:and[%s,%s];4:size1;4:green
'λx.forall(apply(size-geq,iota(filter(x.s, blue))),filter(filter(x.s, implies[size2,yellow]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:yellow;4:triangle
'λx.exists(or[size3,size2], filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[green,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, size2), nor[apply(same_shape,x.o),triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.exists(iff[and[apply(same_shape,iota(x.s)),size2],size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:size1;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[yellow]), and[size1,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:size1;4:triangle
'λx.apply(and[circle,yellow],iota(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), yellow), blue), circle), nand[green,nor[yellow,blue]]), yellow), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:blue;4:circle;4:nand[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:blue;4:yellow;4:circle
'λx.apply(nand[size1,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.exists(size3, filter(x.s, and[green,and[rectangle,yellow]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:yellow
'λx.apply(apply(size-geq,iota(filter(x.s, triangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[yellow,and[apply(size-gt,x.o),green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[green,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.exists(and[or[blue,triangle],blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(rectangle,x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[circle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, size1), and[green,green]), yellow), apply(size-leq,x.o)), and[not[nand[circle,size1]],not[and[blue,blue]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:green;4:green;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:circle;4:size1;4:not[%s];4:and[%s,%s];4:blue;4:blue
'λx.apply(size3,iota(filter(x.s, and[size1,and[triangle,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:rectangle
'λx.forall(apply(same_color,x.o),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, implies[or[size3,circle],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size3;4:circle;4:yellow
'λx.apply(size3,iota(filter(x.s, and[iff[blue,triangle],size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:size1
'λx.apply(or[nor[green,and[not[green],circle]],apply(size-gt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:green;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.contains(x.o, filter(filter(x.s, triangle), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(apply(size-gt,iota(x.s)),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size3,size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, green), iff[implies[circle,circle],and[yellow,size1]]), size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:implies[%s,%s];4:circle;4:circle;4:and[%s,%s];4:yellow;4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[and[and[apply(same_size,x.o),apply(same_shape,iota(filter(x.s, triangle)))],blue],not[and[size2,yellow]]]), and[yellow,circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:not[%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:yellow;4:circle
'λx.apply(size3,iota(filter(x.s, not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(apply(same_color,iota(filter(x.s, circle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[nand[size3,implies[and[rectangle,triangle],rectangle]],or[size1,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:rectangle;4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, apply(size-gt,x.o))), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(yellow,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[and[triangle,or[not[size3],not[size3]]],blue],iota(filter(x.s, or[green,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:size3;4:not[%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, rectangle), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.empty(filter(filter(x.s, and[size1,yellow]), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow;4:circle
'λx.apply(apply(size-gt,iota(x.s)),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(not[nor[size2,blue]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:nor[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.apply(and[or[size3,size3],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:size3;4:green;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(filter(filter(x.s, rectangle), size1), and[size2,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:and[%s,%s];4:size2;4:circle
'λx.forall(not[not[size2]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(iff[iff[circle,triangle],blue],iota(filter(x.s, not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:circle;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(size2,iota(filter(filter(filter(x.s, and[and[and[and[and[and[and[yellow,and[triangle,implies[yellow,blue]]],apply(same_color,x.o)],and[triangle,rectangle]],nand[triangle,rectangle]],rectangle],and[not[yellow],circle]],or[circle,circle]]), triangle), not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:nand[%s,%s];4:triangle;4:rectangle;4:rectangle;4:and[%s,%s];4:not[%s];4:yellow;4:circle;4:or[%s,%s];4:circle;4:circle;4:triangle;4:not[%s];4:triangle
'λx.apply(or[or[and[size3,implies[circle,or[size1,or[triangle,and[apply(same_color,x.o),green]]]]],size2],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:implies[%s,%s];4:circle;4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:size2;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, and[and[and[and[size3,rectangle],size3],triangle],and[yellow,size2]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:size3;4:triangle;4:and[%s,%s];4:yellow;4:size2
'λx.forall(blue,filter(filter(x.s, and[size2,not[apply(size-gt,iota(filter(filter(x.s, rectangle), triangle)))]]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, and[and[size3,and[circle,size3]],apply(same_color,x.o)]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(implies[yellow,or[size1,size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), not[and[and[apply(same_size,iota(x.s)),yellow],green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:green
'λx.forall(not[or[circle,not[green]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:not[%s];4:green;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[blue,yellow]), and[triangle,and[size2,blue]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:blue
'λx.apply(and[rectangle,not[and[blue,rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,and[yellow,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(nand[size2,or[triangle,apply(same_color,iota(x.s))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[size2,nand[green,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:nand[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, blue), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(nor[not[blue],not[or[size2,green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:blue;4:not[%s];4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, or[triangle,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3
'λx.apply(or[green,not[yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,nor[size3,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), not[and[and[size1,or[nor[apply(same_shape,iota(x.s)),size1],size1]],size1]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:size1;4:size1
'λx.apply(and[size3,blue],iota(filter(filter(x.s, green), and[green,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:size3
'λx.apply(or[and[and[or[nand[triangle,size1],or[yellow,green]],blue],nor[implies[nor[apply(size-leq,iota(filter(x.s, green))),circle],and[nor[size2,size2],not[rectangle]]],blue]],circle],iota(filter(filter(filter(x.s, circle), green), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:yellow;4:green;4:blue;4:nor[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:nor[%s,%s];4:size2;4:size2;4:not[%s];4:rectangle;4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:triangle
'λx.apply(or[nor[and[yellow,apply(same_size,iota(x.s))],green],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(green, filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[rectangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(x.s)),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(size1, filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size1, filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size3, filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size2, filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size2, filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, and[circle,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle
'λx.contains(iota(filter(x.s, rectangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, and[triangle,size2]), triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;4:triangle;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, blue), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(blue,iota(filter(x.s, or[apply(same_shape,iota(x.s)),size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(not[and[and[triangle,apply(same_color,iota(x.s))],blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_color,x.o),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(not[green], filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[apply(same_shape,iota(x.s)),nand[and[and[triangle,rectangle],yellow],and[size3,and[size1,size2]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.forall(and[rectangle,green],filter(filter(x.s, and[blue,rectangle]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:triangle
'λx.empty(filter(filter(x.s, and[blue,size3]), not[size3]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:not[%s];4:size3
'λx.apply(or[green,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[rectangle,apply(same_color,iota(x.s))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, green), rectangle), size1), circle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:size1;4:circle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[size1,blue],nor[green,triangle]],iota(filter(x.s, not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:nor[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(x.s, and[yellow,circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.apply(and[rectangle,implies[not[size3],green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:not[%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,yellow],iota(filter(filter(x.s, size1), or[rectangle,not[blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:rectangle;4:not[%s];4:blue
'λx.apply(implies[not[and[iff[circle,yellow],triangle]],and[or[apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, circle), blue), triangle), green), not[and[size2,rectangle]]))),size2],size2]],iota(filter(filter(x.s, apply(same_shape,iota(x.s))), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:circle;4:yellow;4:triangle;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:triangle;4:green;4:not[%s];4:and[%s,%s];4:size2;4:rectangle;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[triangle,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[yellow,yellow],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[green,and[or[not[triangle],blue],not[not[iff[size3,size1]]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:blue;4:not[%s];4:not[%s];4:iff[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, iff[green,apply(size-lt,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, iff[or[or[triangle,rectangle],not[yellow]],and[not[and[circle,triangle]],size3]]), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:not[%s];4:yellow;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:triangle;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(and[apply(size-lt,x.o),size2],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, circle), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(iff[or[blue,nor[size1,yellow]],not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:size1;4:yellow;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(iff[rectangle,iff[apply(size-geq,x.o),nand[size3,nand[or[circle,apply(same_size,iota(x.s))],or[blue,size2]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.exists(iff[blue,size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, circle), or[circle,rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(and[circle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[circle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[circle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, green))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(and[size2,or[size2,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size3), blue), size3), green), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size3;4:green;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, size2), nor[triangle,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:triangle;4:green
'λx.apply(and[size1,nand[and[rectangle,apply(same_color,iota(filter(x.s, triangle)))],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[not[blue],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, blue), and[triangle,blue]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:blue;4:triangle
'λx.apply(and[circle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, iff[triangle,not[rectangle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:not[%s];4:rectangle
'λx.forall(or[circle,size1],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, size2), iff[apply(same_size,x.o),or[rectangle,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:rectangle
'λx.apply(and[apply(same_size,iota(x.s)),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[implies[triangle,apply(size-geq,iota(filter(filter(x.s, not[or[apply(same_size,x.o),and[blue,not[triangle]]]]), nand[and[blue,and[yellow,size1]],or[triangle,green]])))]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:nand[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:triangle;4:green
'λx.apply(and[circle,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, and[size1,blue]), size1)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:size1;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), nand[iff[yellow,size3],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:iff[%s,%s];4:yellow;4:size3;4:blue
'λx.empty(filter(filter(x.s, triangle), and[circle,size2]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:circle;4:size2
'λx.forall(yellow,filter(x.s, and[and[triangle,or[nand[triangle,circle],size2]],rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:nand[%s,%s];4:triangle;4:circle;4:size2;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, yellow), apply(same_color,iota(x.s))), yellow), or[size1,blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size1;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, blue), and[apply(size-leq,x.o),rectangle]), size3), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:rectangle;4:size3;4:rectangle
'λx.apply(nor[size1,and[and[implies[size3,size1],size2],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:size1;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(implies[iff[implies[apply(same_color,x.o),triangle],apply(size-lt,iota(filter(x.s, triangle)))],and[size3,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.exists(size1, filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(size3, filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[and[size2,size2]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, blue), size1), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:yellow
'λx.contains(iota(filter(x.s, not[size3])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;3:%s.s;2:x
'λx.exists(green, filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[circle,yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.apply(and[circle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[green,rectangle],iota(filter(filter(filter(x.s, size3), rectangle), and[rectangle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(implies[not[triangle],green],iota(filter(filter(filter(x.s, and[size2,apply(same_color,iota(filter(x.s, not[or[yellow,and[size2,green]]])))]), green), or[blue,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:green;4:green;4:or[%s,%s];4:blue;4:triangle
'λx.apply(and[and[size1,yellow],and[apply(same_size,iota(x.s)),circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size2,apply(same_shape,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,iff[or[size1,triangle],size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(not[or[rectangle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, and[circle,and[size1,and[size1,green]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:green
'λx.apply(size3,iota(filter(x.s, iff[size3,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:green
'λx.apply(and[size2,and[not[circle],green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-lt,iota(filter(filter(x.s, blue), rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[blue,and[circle,size3]],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, triangle))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(size3,iota(filter(x.s, not[circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(size1,iota(filter(x.s, not[circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(apply(same_color,iota(filter(filter(x.s, circle), yellow))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,or[blue,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.forall(apply(size-leq,iota(x.s)),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(triangle, filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, size1), iff[size3,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:size3;4:triangle
'λx.apply(and[green,triangle],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[green,yellow],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(same_shape,x.o),filter(x.s, and[not[green],triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:triangle
'λx.apply(nand[yellow,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, not[not[size3]]), green), size2), blue), apply(same_size,x.o))), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3;4:green;4:size2;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, size1), apply(same_color,x.o)), green), yellow), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:yellow;4:blue
'λx.apply(and[and[blue,blue],size2],iota(filter(filter(filter(x.s, green), size2), and[green,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:and[%s,%s];4:green;4:size2
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, triangle), size3), triangle), green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:triangle;4:green;4:size1
'λx.contains(iota(x.s), filter(filter(filter(x.s, size1), blue), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:circle
'λx.apply(or[or[size1,size1],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size1;4:green;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(filter(x.s, and[blue,triangle]), size2), circle), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:size2;4:circle;4:yellow
'λx.apply(and[nand[or[green,circle],size1],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:green;4:circle;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, nor[circle,and[apply(same_size,x.o),yellow]]))),iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[and[not[size3],circle],apply(same_shape,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), apply(size-leq,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, circle), apply(same_shape,x.o)))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,not[green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), blue), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:yellow
'λx.apply(or[size1,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[size2,apply(same_size,iota(filter(x.s, or[or[iff[triangle,apply(same_shape,x.o)],and[apply(same_shape,iota(x.s)),size1]],size2])))],size2],iota(filter(filter(filter(x.s, size3), or[apply(size-geq,iota(x.s)),green]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;4:green
'λx.apply(or[size3,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[size1],triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,nor[size2,yellow]],iota(filter(filter(filter(x.s, size2), rectangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:circle
'λx.apply(or[size2,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, circle), size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.exists(and[and[green,yellow],triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[rectangle,or[triangle,triangle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:triangle
'λx.contains(x.o, filter(filter(x.s, apply(same_color,x.o)), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(or[apply(same_shape,x.o),size1],iota(filter(x.s, iff[size3,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:size2
'λx.apply(apply(same_size,x.o),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[iff[rectangle,and[not[blue],blue]],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[triangle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[or[not[size2],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[green,green],iota(filter(filter(x.s, blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, yellow), size1), implies[yellow,not[rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:implies[%s,%s];4:yellow;4:not[%s];4:rectangle
'λx.exists(green, filter(filter(filter(filter(filter(filter(x.s, yellow), and[and[size1,apply(same_color,iota(filter(x.s, yellow)))],green]), nor[apply(same_color,iota(x.s)),blue]), rectangle), blue), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:rectangle;4:blue;4:blue
'λx.exists(apply(same_shape,x.o), filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size2,nor[circle,and[not[size1],not[and[size2,circle]]]]],iota(filter(filter(x.s, and[yellow,not[green]]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:nor[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:green;4:size3
'λx.forall(green,filter(x.s, not[and[triangle,green]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:green
'λx.apply(apply(same_color,iota(filter(filter(x.s, iff[size2,apply(same_color,iota(x.s))]), rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nor[and[not[or[not[apply(size-geq,x.o)],yellow]],triangle],and[rectangle,apply(same_color,iota(x.s))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow;4:triangle;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[and[green,and[circle,green]],size1],circle],iota(filter(filter(x.s, and[circle,or[not[apply(same_size,x.o)],and[triangle,or[size1,triangle]]]]), not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:green;4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:triangle;4:not[%s];4:triangle
'λx.forall(nor[rectangle,circle],filter(x.s, or[triangle,green]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:rectangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green
'λx.apply(and[apply(same_color,x.o),or[not[rectangle],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[rectangle,rectangle],iota(filter(x.s, or[implies[or[rectangle,rectangle],yellow],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:yellow;4:triangle
'λx.apply(or[nand[green,blue],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:green;4:blue;4:size1;1:%s.o;2:x
'λx.exists(not[yellow], filter(filter(x.s, iff[size1,or[size1,blue]]), implies[apply(same_size,x.o),size3]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:or[%s,%s];4:size1;4:blue;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(or[nand[circle,apply(same_color,x.o)],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(not[apply(same_size,iota(x.s))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, and[apply(size-gt,x.o),size3]), apply(same_size,iota(filter(x.s, triangle)))), size3), rectangle), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:rectangle;4:size2
'λx.apply(nor[size1,and[not[yellow],size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(implies[size3,size3], filter(filter(x.s, iff[and[circle,blue],circle]), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:size3;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:circle;4:blue;4:circle;4:size3
'λx.apply(and[circle,triangle],iota(filter(filter(x.s, implies[and[size1,rectangle],blue]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:blue;4:triangle
'λx.apply(not[or[not[and[triangle,triangle]],or[size1,apply(size-geq,iota(x.s))]]],iota(filter(filter(x.s, blue), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(triangle,iota(filter(x.s, and[size1,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.empty(filter(filter(filter(filter(x.s, yellow), green), green), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:green;4:triangle
'λx.apply(iff[size1,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[yellow,green],iota(filter(filter(x.s, green), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(and[blue,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[green,circle],iota(filter(filter(x.s, yellow), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, nand[triangle,circle]), not[blue]), rectangle), not[size2]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:circle;4:not[%s];4:blue;4:rectangle;4:not[%s];4:size2
'λx.apply(and[triangle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.forall(or[green,implies[rectangle,circle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size2), apply(size-geq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(not[or[not[and[yellow,triangle]],size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[triangle,iff[implies[rectangle,yellow],and[rectangle,triangle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:rectangle;4:triangle
'λx.forall(apply(size-leq,iota(x.s)),filter(filter(x.s, not[or[and[blue,and[blue,rectangle]],yellow]]), nand[circle,not[circle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:rectangle;4:yellow;4:nand[%s,%s];4:circle;4:not[%s];4:circle
'λx.apply(and[blue,and[apply(same_shape,iota(filter(x.s, size3))),not[and[apply(same_size,x.o),nand[iff[size2,triangle],size2]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:iff[%s,%s];4:size2;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(not[and[blue,triangle]],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(triangle, filter(filter(filter(x.s, rectangle), size3), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size3
'λx.contains(x.o, filter(filter(x.s, or[triangle,size3]), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3;4:rectangle
'λx.apply(implies[rectangle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(implies[rectangle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[apply(size-leq,x.o),not[and[rectangle,size1]]],iota(filter(x.s, and[and[green,green],or[green,and[blue,not[or[rectangle,yellow]]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:rectangle;4:yellow
'λx.apply(nand[green,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), and[size1,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:circle
'λx.apply(green,iota(filter(x.s, iff[blue,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:size2
'λx.apply(not[apply(same_color,iota(filter(filter(filter(x.s, apply(size-gt,x.o)), apply(same_color,iota(filter(filter(x.s, apply(size-gt,iota(filter(x.s, size1)))), yellow)))), circle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_shape,x.o)), blue), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue
'λx.apply(or[or[nor[or[size2,size2],yellow],size1],not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size2;4:size2;4:yellow;4:size1;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(nor[iff[size3,triangle],or[nor[green,and[size1,apply(same_color,iota(filter(filter(filter(filter(filter(filter(x.s, green), not[circle]), and[size2,not[or[size2,rectangle]]]), green), rectangle), or[blue,apply(same_shape,iota(x.s))])))]],size3]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:or[%s,%s];4:nor[%s,%s];4:green;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:circle;4:and[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:size2;4:rectangle;4:green;4:rectangle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.apply(nand[and[size2,triangle],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size3;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(triangle,iota(filter(filter(filter(x.s, or[yellow,circle]), not[not[triangle]]), not[blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle;4:not[%s];4:not[%s];4:triangle;4:not[%s];4:blue
'λx.forall(not[and[and[size3,size1],apply(same_color,x.o)]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nor[blue,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, apply(same_color,x.o)), green), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, triangle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(apply(size-lt,iota(filter(filter(x.s, circle), or[apply(same_color,x.o),yellow]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, or[and[size3,green],and[triangle,green]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:triangle;4:green
'λx.apply(green,iota(filter(filter(filter(x.s, not[yellow]), yellow), or[and[yellow,apply(same_size,x.o)],and[apply(same_shape,x.o),triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:yellow;4:or[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(or[triangle,not[triangle]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[circle,apply(same_color,x.o)],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[size3,blue],apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(yellow, filter(filter(filter(filter(x.s, and[size1,or[size2,circle]]), size2), and[size2,apply(same_shape,x.o)]), apply(same_color,iota(filter(filter(x.s, triangle), blue)))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:size2;4:circle;4:size2;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.contains(iota(x.s), filter(x.s, circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(filter(x.s, and[blue,blue]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:yellow
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, and[apply(same_color,iota(x.s)),blue]), triangle), and[size3,not[size1]]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:triangle;4:and[%s,%s];4:size3;4:not[%s];4:size1;4:rectangle
'λx.forall(blue,filter(filter(filter(x.s, circle), not[triangle]), not[not[blue]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:triangle;4:not[%s];4:not[%s];4:blue
'λx.apply(or[and[nand[not[green],and[triangle,blue]],apply(same_color,iota(filter(x.s, not[rectangle])))],triangle],iota(filter(filter(x.s, green), and[yellow,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:yellow;4:green
'λx.apply(or[and[blue,green],and[triangle,apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, blue), nand[size1,and[size2,apply(same_shape,iota(filter(filter(x.s, green), triangle)))]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:size1;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[or[triangle,size1],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, apply(same_shape,iota(filter(x.s, size1)))))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(x.s, apply(size-geq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_color,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[not[or[rectangle,not[not[triangle]]]],size2],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(rectangle,filter(filter(x.s, and[apply(size-geq,x.o),size3]), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[rectangle,triangle],iota(filter(filter(x.s, nor[blue,apply(same_size,iota(filter(x.s, rectangle)))]), and[or[green,blue],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:green;4:blue;4:rectangle
'λx.forall(yellow,filter(filter(filter(x.s, circle), size2), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, and[size3,circle]), size2), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;4:size2;4:triangle
'λx.contains(iota(filter(filter(x.s, circle), blue)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), or[or[size1,and[or[not[iff[apply(same_size,iota(x.s)),yellow]],green],iff[blue,or[blue,or[size1,size2]]]]],implies[not[iff[rectangle,blue]],rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:green;4:iff[%s,%s];4:blue;4:or[%s,%s];4:blue;4:or[%s,%s];4:size1;4:size2;4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:rectangle;4:blue;4:rectangle
'λx.apply(or[size2,implies[circle,or[circle,rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:implies[%s,%s];4:circle;4:or[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(not[not[size3]],iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.contains(iota(filter(x.s, circle)), filter(x.s, and[size1,not[blue]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:blue
'λx.apply(and[size3,and[implies[and[or[triangle,nor[size1,rectangle]],size2],circle],not[not[and[and[not[or[size2,yellow]],nand[blue,size1]],size3]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:nor[%s,%s];4:size1;4:rectangle;4:size2;4:circle;4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:yellow;4:nand[%s,%s];4:blue;4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[size1,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,iota(filter(filter(filter(x.s, yellow), and[size1,yellow]), size2))), filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size1;4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(and[blue,blue],filter(filter(filter(x.s, triangle), or[yellow,circle]), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:yellow;4:circle;4:green
'λx.apply(circle,iota(filter(x.s, and[not[size3],size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:size1
'λx.apply(or[blue,and[nor[size1,yellow],green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:nor[%s,%s];4:size1;4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[and[nor[and[apply(size-gt,iota(filter(x.s, size1))),yellow],size1],or[triangle,or[triangle,size3]]],nor[and[implies[apply(size-lt,iota(filter(filter(x.s, iff[blue,blue]), circle))),not[yellow]],size2],size1]],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size1;4:or[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:size3;4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:blue;4:circle;4:not[%s];4:yellow;4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, circle), and[triangle,not[not[or[rectangle,green]]]]), rectangle)), filter(filter(filter(x.s, size1), size3), apply(same_color,iota(filter(x.s, iff[and[apply(same_size,iota(x.s)),circle],green])))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:or[%s,%s];4:rectangle;4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:green
'λx.exists(not[rectangle], filter(x.s, not[circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.forall(and[yellow,apply(same_size,x.o)],filter(x.s, or[iff[or[size2,apply(same_shape,iota(filter(filter(x.s, not[yellow]), implies[size2,size3])))],rectangle],not[rectangle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:implies[%s,%s];4:size2;4:size3;4:rectangle;4:not[%s];4:rectangle
'λx.apply(and[circle,not[and[not[circle],size1]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,or[triangle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(nand[triangle,apply(size-gt,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, nor[triangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:yellow
'λx.apply(and[or[triangle,triangle],triangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size3,filter(filter(filter(x.s, green), or[nor[apply(same_size,x.o),triangle],circle]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:circle;4:size3
'λx.apply(and[and[size2,apply(same_color,iota(filter(x.s, and[yellow,green])))],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[blue,circle],filter(filter(x.s, size1), and[rectangle,triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:rectangle;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, size2), green), not[size2]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:not[%s];4:size2
'λx.apply(apply(size-lt,iota(filter(x.s, green))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[blue]), and[not[yellow],yellow])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:not[%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, or[size2,green]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:green;4:rectangle
'λx.apply(and[apply(same_shape,x.o),size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_color,iota(x.s)),not[size2]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size2;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, or[circle,green]), green), size3), rectangle), not[size2]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:green;4:green;4:size3;4:rectangle;4:not[%s];4:size2
'λx.apply(or[nor[blue,circle],not[size1]],iota(filter(x.s, and[size1,and[and[size1,apply(same_color,iota(x.s))],nor[size1,size3]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:size3
'λx.apply(size2,iota(filter(filter(x.s, yellow), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(size3,iota(filter(filter(x.s, yellow), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(or[yellow,not[size2]],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, triangle), apply(same_size,iota(x.s))), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[green,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.exists(or[green,rectangle], filter(filter(x.s, and[and[size1,size3],blue]), nand[green,not[yellow]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:blue;4:nand[%s,%s];4:green;4:not[%s];4:yellow
'λx.apply(or[and[rectangle,apply(same_size,iota(x.s))],and[yellow,blue]],iota(filter(filter(filter(x.s, size2), apply(same_color,iota(filter(x.s, size3)))), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.forall(size3,filter(filter(filter(x.s, size3), and[circle,rectangle]), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:circle;4:rectangle;4:blue
'λx.exists(or[rectangle,and[apply(same_shape,iota(filter(x.s, circle))),or[and[and[size3,size3],or[apply(size-lt,x.o),yellow]],blue]]], filter(x.s, apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,x.o),rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, apply(size-lt,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_size,iota(x.s))), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, triangle), yellow), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:size3
'λx.apply(green,iota(filter(x.s, not[and[rectangle,triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:triangle
'λx.forall(yellow,filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[not[green],triangle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[circle,or[rectangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, nor[not[blue],size2]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[green,or[not[yellow],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, or[circle,apply(same_color,iota(x.s))]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(nand[rectangle,size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, or[nor[size1,nand[blue,triangle]],or[green,green]]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:size1;4:nand[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:green;4:green;4:yellow
'λx.contains(x.o, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, nor[size2,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(x.s, not[circle]), green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:green;4:size3
'λx.contains(iota(filter(filter(filter(x.s, size2), circle), or[nand[circle,blue],yellow])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:or[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:yellow;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, iff[circle,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:triangle
'λx.exists(size2, filter(filter(x.s, rectangle), and[size2,yellow]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size2;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, size1), and[size1,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:size1
'λx.apply(blue,iota(filter(x.s, or[and[not[apply(size-leq,x.o)],or[yellow,not[blue]]],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:blue;4:rectangle
'λx.apply(iff[and[not[green],apply(same_shape,iota(x.s))],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, and[and[apply(same_size,x.o),or[size2,yellow]],green]), and[or[rectangle,size3],yellow]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size2;4:yellow;4:green;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size3), and[size1,and[or[circle,triangle],size1]]), circle), and[green,size1]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:size1;4:circle;4:and[%s,%s];4:green;4:size1
'λx.apply(or[circle,iff[size1,implies[size2,yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:size1;4:implies[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.forall(nor[and[rectangle,green],triangle],filter(filter(x.s, yellow), not[not[implies[size2,green]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:not[%s];4:implies[%s,%s];4:size2;4:green
'λx.apply(nand[or[triangle,green],apply(size-gt,x.o)],iota(filter(filter(x.s, and[and[size1,size2],and[not[green],blue]]), apply(same_shape,iota(filter(x.s, rectangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:not[%s];4:green;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, rectangle), circle), yellow), triangle), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:yellow;4:triangle;4:blue
'λx.forall(yellow,filter(filter(x.s, triangle), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, not[rectangle]), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:rectangle
'λx.apply(nand[circle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, yellow), triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(implies[size2,and[circle,apply(same_color,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,or[rectangle,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(yellow,iota(filter(filter(filter(x.s, iff[or[size1,size1],triangle]), circle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:size1;4:size1;4:triangle;4:circle;4:yellow
'λx.apply(or[or[rectangle,triangle],size3],iota(filter(filter(x.s, and[circle,blue]), apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[triangle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(implies[triangle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, rectangle), not[apply(size-lt,iota(filter(x.s, triangle)))]), size2), and[yellow,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:and[%s,%s];4:yellow;4:size1
'λx.apply(and[and[size1,triangle],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(nand[circle,apply(size-lt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:blue
'λx.exists(triangle, filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(triangle, filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(triangle, filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(triangle, filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[size1,circle],iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[not[yellow],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size3), circle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;3:%s.s;2:x
'λx.forall(triangle,filter(x.s, nand[and[circle,triangle],and[and[apply(same_size,x.o),apply(same_color,iota(filter(x.s, size2)))],triangle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(implies[triangle,and[and[triangle,triangle],and[not[circle],yellow]]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:not[%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size3,green],iota(filter(x.s, and[size3,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(apply(same_color,iota(filter(x.s, not[iff[and[and[green,yellow],triangle],size3]]))),iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, or[yellow,size3]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3;4:rectangle
'λx.apply(iff[not[yellow],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(or[nor[apply(size-gt,iota(filter(x.s, yellow))),yellow],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[rectangle,not[apply(size-lt,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[green,and[blue,size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:size3
'λx.exists(circle, filter(filter(x.s, or[triangle,triangle]), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:triangle;4:rectangle
'λx.empty(filter(filter(filter(x.s, and[size3,size3]), size1), not[yellow]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3;4:size1;4:not[%s];4:yellow
'λx.apply(and[circle,apply(same_shape,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(filter(filter(x.s, triangle), circle), size3), and[or[yellow,or[yellow,yellow]],green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:size3;4:and[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:yellow;4:green
'λx.contains(x.o, filter(filter(filter(x.s, size2), green), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:rectangle
'λx.forall(and[green,and[apply(same_color,iota(x.s)),rectangle]],filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[implies[circle,and[yellow,green]],nor[rectangle,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:green;4:nor[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), circle), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size3
'λx.contains(iota(filter(filter(filter(x.s, triangle), blue), yellow)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:yellow;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, green), apply(same_shape,x.o)), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(circle,iota(filter(x.s, and[and[size3,size2],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:size2
'λx.apply(not[rectangle],iota(filter(x.s, and[and[not[blue],green],and[green,size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:green;4:and[%s,%s];4:green;4:size2
'λx.exists(and[triangle,blue], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), not[size3]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size3;4:circle
'λx.apply(green,iota(filter(x.s, or[and[circle,rectangle],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:yellow
'λx.forall(or[not[triangle],size3],filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(iff[not[circle],triangle],iota(filter(filter(x.s, triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(and[size3,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(x.s, not[rectangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(iff[blue,not[size1]],iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(not[or[circle,and[circle,or[circle,size1]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:or[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[yellow,and[green,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(nor[apply(same_size,iota(x.s)),implies[size1,not[blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), and[or[apply(same_size,iota(filter(x.s, size2))),size3],yellow])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:yellow;3:%s.s;2:x
'λx.apply(nand[and[size2,apply(size-leq,iota(filter(filter(x.s, size2), size1)))],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:circle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, triangle), not[nor[not[green],or[and[yellow,and[apply(same_color,iota(x.s)),apply(same_size,iota(x.s))]],circle]]]), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:nor[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(and[triangle,size3],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, size1), circle), or[and[circle,triangle],or[yellow,or[and[or[or[and[size1,nor[apply(same_color,iota(x.s)),size3]],green],yellow],and[and[triangle,and[not[size2],rectangle]],nor[green,size3]]],size1]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:or[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:green;4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:size2;4:rectangle;4:nor[%s,%s];4:green;4:size3;4:size1
'λx.apply(blue,iota(filter(filter(x.s, circle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.contains(x.o, filter(filter(x.s, size2), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.exists(green, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:%s.s;2:x
'λx.forall(green,filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.empty(filter(x.s, iff[blue,apply(same_size,iota(filter(x.s, and[green,or[not[circle],rectangle]])))]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:circle;4:rectangle
'λx.apply(yellow,iota(filter(filter(x.s, size1), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(blue,iota(filter(filter(x.s, rectangle), or[circle,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:circle;4:green
'λx.apply(yellow,iota(filter(filter(x.s, size3), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.exists(size1, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:%s.s;2:x
'λx.exists(size2, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:%s.s;2:x
'λx.exists(size3, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, blue), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, size3), apply(same_color,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), or[or[and[green,and[circle,or[size3,or[size2,implies[or[not[circle],circle],blue]]]]],and[circle,green]],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:or[%s,%s];4:size2;4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:circle;4:blue;4:and[%s,%s];4:circle;4:green;4:triangle
'λx.apply(apply(size-geq,x.o),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[or[circle,and[apply(same_size,x.o),yellow]],apply(size-lt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, nand[size2,or[nor[circle,apply(same_size,iota(filter(filter(filter(filter(filter(filter(x.s, circle), not[and[size2,apply(same_shape,x.o)]]), rectangle), and[iff[iff[size3,size1],size2],and[and[not[size1],not[and[circle,green]]],implies[triangle,rectangle]]]), rectangle), rectangle)))],not[triangle]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:or[%s,%s];4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:iff[%s,%s];4:size3;4:size1;4:size2;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:and[%s,%s];4:circle;4:green;4:implies[%s,%s];4:triangle;4:rectangle;4:rectangle;4:rectangle;4:not[%s];4:triangle
'λx.apply(nand[circle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size2), size2), and[triangle,circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:and[%s,%s];4:triangle;4:circle
'λx.apply(and[size1,and[size1,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, blue), implies[not[and[green,green]],size2]), size3), triangle), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:green;4:size2;4:size3;4:triangle;4:green
'λx.empty(x.s)'	0.000000	0.000000	0.000000	0:empty(%s);3:%s.s;2:x
'λx.apply(and[and[blue,triangle],nor[green,size1]],iota(filter(filter(x.s, green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:nor[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(not[apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(iff[rectangle,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size1,size3],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, rectangle), or[blue,size3]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:blue;4:size3;4:circle
'λx.apply(nor[and[rectangle,apply(same_size,x.o)],or[triangle,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, and[nand[rectangle,rectangle],apply(size-leq,iota(filter(x.s, blue)))]), apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[apply(size-gt,iota(filter(x.s, triangle))),blue]), and[rectangle,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:and[%s,%s];4:rectangle;4:triangle
'λx.empty(filter(filter(filter(x.s, blue), nand[rectangle,rectangle]), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:rectangle;4:rectangle;4:yellow
'λx.apply(implies[and[and[and[triangle,rectangle],triangle],rectangle],not[green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:triangle;4:rectangle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[size1,triangle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(or[yellow,circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.forall(and[apply(same_shape,iota(filter(filter(x.s, size1), and[size3,or[blue,blue]]))),triangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:blue;4:triangle;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[yellow,apply(same_color,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, rectangle), and[yellow,size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:size2
'λx.apply(or[triangle,apply(same_size,iota(filter(filter(x.s, circle), blue)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), or[size2,triangle]), and[blue,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:blue;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, or[or[size1,circle],nand[size2,nand[triangle,green]]]), iff[size1,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:nand[%s,%s];4:size2;4:nand[%s,%s];4:triangle;4:green;4:iff[%s,%s];4:size1;4:triangle
'λx.apply(nand[size3,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[not[or[and[size1,and[apply(same_size,iota(filter(x.s, triangle))),or[blue,and[size2,green]]]],size1]],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:size2;4:green;4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, green), size1), not[not[size2]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:not[%s];4:not[%s];4:size2;4:circle
'λx.forall(and[size1,apply(same_color,x.o)],filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(rectangle, filter(filter(filter(x.s, circle), size2), apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[or[blue,size2],nand[not[circle],implies[not[and[size1,and[blue,green]]],apply(same_size,iota(x.s))]]],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size2;4:nand[%s,%s];4:not[%s];4:circle;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), blue), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:triangle
'λx.apply(and[green,apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[or[and[triangle,size1],and[size2,and[blue,and[circle,not[circle]]]]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[rectangle,or[apply(same_color,iota(filter(x.s, size1))),iff[rectangle,size3]]]), implies[not[not[size2]],and[yellow,or[yellow,circle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:rectangle;4:size3;4:implies[%s,%s];4:not[%s];4:not[%s];4:size2;4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:circle
'λx.apply(yellow,iota(filter(filter(filter(x.s, triangle), green), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size2
'λx.contains(iota(filter(filter(x.s, circle), green)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;3:%s.s;2:x
'λx.apply(not[size2],iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[nor[not[yellow],circle],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:yellow;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(nand[rectangle,and[yellow,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(not[and[yellow,circle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, not[size2]), and[not[and[circle,not[yellow]]],circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:yellow;4:circle
'λx.forall(blue,filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(filter(x.s, green), size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:green
'λx.contains(iota(filter(x.s, and[rectangle,not[green]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:green;3:%s.s;2:x
'λx.forall(apply(same_color,iota(x.s)),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[and[green,rectangle],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, not[blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(implies[apply(same_shape,x.o),circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[rectangle,apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, yellow), triangle), size3), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:size3;4:size3
'λx.apply(and[circle,size1],iota(filter(filter(filter(x.s, or[rectangle,rectangle]), and[and[nor[green,blue],or[nor[size1,circle],size1]],not[circle]]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:blue;4:or[%s,%s];4:nor[%s,%s];4:size1;4:circle;4:size1;4:not[%s];4:circle;4:size1
'λx.forall(triangle,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:%s.s;2:x
'λx.apply(and[blue,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, green), or[size2,size2]), not[circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size2;4:size2;4:not[%s];4:circle
'λx.empty(filter(filter(filter(x.s, and[or[yellow,blue],and[rectangle,yellow]]), circle), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:rectangle;4:yellow;4:circle;4:triangle
'λx.apply(blue,iota(filter(x.s, or[green,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow
'λx.apply(and[rectangle,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[apply(same_color,iota(filter(x.s, size2))),size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[apply(same_color,x.o),size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.exists(circle, filter(filter(x.s, size2), implies[and[green,size1],triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:and[%s,%s];4:green;4:size1;4:triangle
'λx.forall(and[size1,rectangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(and[not[iff[yellow,green]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:yellow;4:green;4:size1;1:%s.o;2:x
'λx.apply(and[or[and[green,size2],size2],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:size2;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, not[apply(same_shape,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[size3,yellow],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, and[green,triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle
'λx.contains(iota(filter(filter(x.s, circle), and[size1,apply(same_size,iota(x.s))])), filter(x.s, blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_color,iota(filter(filter(filter(filter(x.s, not[circle]), circle), circle), apply(same_size,x.o))))), not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), size3), not[apply(size-gt,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(filter(filter(x.s, and[yellow,rectangle]), apply(same_size,iota(filter(filter(filter(x.s, size1), rectangle), green)))), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:green;4:triangle
'λx.forall(nor[green,size1],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[triangle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1
'λx.contains(x.o, filter(x.s, implies[size2,circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:circle
'λx.apply(and[apply(same_color,iota(filter(filter(x.s, and[size1,blue]), yellow))),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:yellow;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, and[circle,rectangle]), blue), and[blue,or[apply(same_size,x.o),or[or[size3,circle],blue]]]), blue)), filter(filter(filter(x.s, and[size3,size1]), and[or[iff[green,circle],or[and[size2,yellow],apply(size-leq,iota(x.s))]],and[triangle,blue]]), not[or[triangle,triangle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:blue;4:and[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:size3;4:circle;4:blue;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:green;4:circle;4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:not[%s];4:or[%s,%s];4:triangle;4:triangle
'λx.apply(or[circle,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(and[implies[rectangle,triangle],circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:triangle;4:circle;3:%s.s;2:x
'λx.empty(filter(x.s, and[and[iff[rectangle,size3],triangle],rectangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:triangle;4:rectangle
'λx.apply(nand[size2,yellow],iota(filter(filter(filter(filter(x.s, size2), blue), blue), not[and[and[iff[size1,yellow],yellow],size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:blue;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size1;4:yellow;4:yellow;4:size2
'λx.contains(x.o, filter(filter(x.s, not[not[size2]]), not[and[and[nand[blue,triangle],rectangle],and[and[not[apply(size-lt,iota(x.s))],size2],triangle]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size2;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:triangle;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size2;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, size1), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, size2), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.exists(not[green], filter(filter(x.s, not[size2]), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.apply(size2,iota(filter(x.s, and[not[green],and[yellow,nor[yellow,green]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:yellow;4:green
'λx.apply(yellow,iota(filter(filter(x.s, circle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, yellow), or[not[green],triangle]), size3))),iota(filter(x.s, implies[triangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:not[%s];4:green;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size2
'λx.apply(blue,iota(filter(filter(x.s, yellow), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(circle,iota(filter(x.s, and[size2,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(and[iff[triangle,size3],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(not[and[yellow,size3]], filter(filter(filter(x.s, rectangle), size3), apply(size-leq,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size1,nor[triangle,rectangle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.empty(filter(filter(filter(filter(filter(x.s, triangle), yellow), green), apply(same_shape,iota(x.s))), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, and[triangle,not[nand[or[size3,rectangle],blue]]]), or[triangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:blue;4:or[%s,%s];4:triangle;4:yellow
'λx.apply(and[or[not[size3],apply(same_size,x.o)],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, triangle), apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[rectangle,size3],iota(filter(filter(filter(x.s, triangle), rectangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:circle
'λx.apply(or[green,implies[yellow,blue]],iota(filter(x.s, not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(and[or[rectangle,rectangle],apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, circle), green), apply(size-gt,x.o)), apply(same_shape,x.o)), size1), triangle)))],iota(filter(filter(x.s, size2), not[rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:rectangle
'λx.apply(nor[triangle,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[size3,triangle],and[size1,or[rectangle,implies[blue,iff[rectangle,green]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:iff[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[nor[and[apply(same_color,x.o),rectangle],apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[triangle,not[green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:green
'λx.apply(and[and[yellow,rectangle],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[iff[not[rectangle],triangle],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:rectangle;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-geq,iota(filter(x.s, size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[blue,apply(size-geq,x.o)],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, size3), circle), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:size1
'λx.forall(size3,filter(filter(x.s, triangle), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.forall(size1,filter(filter(filter(x.s, size3), yellow), or[size3,green]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:or[%s,%s];4:size3;4:green
'λx.forall(nand[green,yellow],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(nand[rectangle,size2],iota(filter(filter(filter(filter(x.s, size3), size1), not[size2]), or[triangle,iff[blue,apply(same_shape,x.o)]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:not[%s];4:size2;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, rectangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(implies[circle,not[implies[size1,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),iota(filter(filter(x.s, size1), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.forall(or[nor[or[apply(same_size,x.o),size1],size1],not[size2]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:size1;4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(and[and[and[apply(same_shape,x.o),green],size2],not[triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:size2;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[green,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle
'λx.apply(and[and[yellow,size2],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size2,rectangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[size3,rectangle]), size1), apply(same_color,iota(filter(filter(x.s, size2), blue)))))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(or[rectangle,not[rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[triangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[circle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, and[size2,blue]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, yellow), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.forall(yellow,filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[not[apply(same_size,x.o)],green],apply(size-geq,iota(x.s))],iota(filter(x.s, not[not[circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:circle
'λx.apply(or[green,not[nor[and[size1,circle],triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(iff[size1,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,and[or[or[circle,size2],triangle],size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:size2;4:triangle;4:size2;1:%s.o;2:x
'λx.forall(and[yellow,circle],filter(filter(filter(filter(x.s, size3), not[blue]), blue), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue;4:blue;4:circle
'λx.empty(filter(filter(filter(x.s, yellow), size1), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:green
'λx.apply(and[size2,or[nand[blue,implies[size2,not[yellow]]],and[triangle,size2]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:nand[%s,%s];4:blue;4:implies[%s,%s];4:size2;4:not[%s];4:yellow;4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, filter(filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), rectangle), triangle), and[blue,size2]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;4:triangle;4:and[%s,%s];4:blue;4:size2
'λx.forall(triangle,filter(filter(x.s, size3), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(yellow,iota(filter(filter(filter(x.s, size2), size2), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:size2
'λx.apply(not[rectangle],iota(filter(x.s, and[or[yellow,size2],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:rectangle
'λx.exists(or[size3,apply(same_size,iota(filter(x.s, iff[yellow,triangle])))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(rectangle, filter(x.s, apply(size-lt,iota(filter(x.s, not[circle])))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.contains(iota(filter(filter(x.s, size3), size2)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, or[triangle,size1]), implies[not[or[and[not[triangle],size3],yellow]],green]), blue), and[yellow,not[size1]]), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1;4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:size3;4:yellow;4:green;4:blue;4:and[%s,%s];4:yellow;4:not[%s];4:size1;4:blue
'λx.apply(or[yellow,apply(size-gt,iota(x.s))],iota(filter(filter(filter(x.s, triangle), triangle), apply(same_size,iota(filter(filter(filter(filter(filter(filter(x.s, blue), size1), triangle), not[and[yellow,size1]]), circle), blue))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:triangle;4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:circle;4:blue
'λx.exists(or[blue,circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.forall(nor[size3,size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:size3;4:size3;3:%s.s;2:x
'λx.apply(and[and[apply(same_shape,x.o),apply(same_color,iota(filter(x.s, blue)))],rectangle],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, or[or[size2,not[and[green,and[circle,apply(same_size,iota(filter(x.s, blue)))]]]],triangle]), blue), and[and[size3,triangle],yellow]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:blue;4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:yellow;4:yellow
'λx.empty(filter(filter(x.s, size2), and[green,blue]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:blue
'λx.empty(filter(x.s, and[size2,and[size1,blue]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:blue
'λx.apply(and[not[not[size3]],or[and[circle,blue],size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[not[size1],blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, filter(filter(x.s, apply(same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, triangle), size3), or[circle,blue]), circle), size3), size2)))), and[not[size2],size1]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:or[%s,%s];4:circle;4:blue;4:circle;4:size3;4:size2;4:and[%s,%s];4:not[%s];4:size2;4:size1
'λx.apply(iff[and[green,yellow],not[apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size3,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[size3,and[and[not[and[iff[size1,nor[yellow,apply(same_size,x.o)]],triangle]],iff[size3,and[size1,triangle]]],size1]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size1;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:iff[%s,%s];4:size3;4:and[%s,%s];4:size1;4:triangle;4:size1
'λx.apply(or[size1,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(filter(x.s, rectangle), size1), blue), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:blue;4:rectangle
'λx.apply(and[or[yellow,apply(same_size,x.o)],and[triangle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.exists(or[and[triangle,and[apply(size-geq,iota(filter(filter(filter(x.s, rectangle), circle), yellow))),rectangle]],triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:yellow;4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, size2), and[size1,size1]), circle), green), yellow), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size1;4:size1;4:circle;4:green;4:yellow;4:green
'λx.empty(filter(filter(x.s, blue), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.empty(filter(filter(x.s, blue), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(size2,iota(filter(filter(x.s, green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(size2,iota(filter(filter(x.s, green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(size1,iota(filter(filter(x.s, green), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(size1,iota(filter(filter(x.s, green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(implies[triangle,iff[size2,not[apply(same_shape,x.o)]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:iff[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(and[rectangle,and[size1,triangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.forall(and[size2,size1],filter(filter(filter(filter(filter(filter(x.s, not[circle]), not[circle]), size1), or[not[nor[or[size2,size1],circle]],size1]), apply(same_size,iota(filter(x.s, yellow)))), and[and[and[and[size3,circle],yellow],circle],size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:not[%s];4:circle;4:size1;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:size2;4:size1;4:circle;4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:yellow;4:circle;4:size3
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, apply(size-lt,iota(filter(x.s, size1))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[triangle],iota(filter(filter(x.s, circle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.forall(circle,filter(filter(filter(filter(x.s, green), size1), green), and[not[iff[yellow,apply(size-geq,iota(filter(filter(filter(x.s, blue), green), yellow)))]],not[size2]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:green;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:yellow;4:not[%s];4:size2
'λx.apply(nor[apply(same_size,iota(filter(filter(x.s, and[and[blue,not[triangle]],size1]), green))),and[size3,and[size1,not[rectangle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:size1;4:green;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(nand[implies[triangle,apply(same_color,iota(filter(filter(x.s, implies[green,apply(size-gt,x.o)]), rectangle)))],apply(same_color,iota(filter(x.s, yellow)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(implies[apply(same_color,x.o),blue],iota(filter(filter(filter(x.s, apply(size-lt,x.o)), apply(size-geq,x.o)), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle
'λx.apply(or[green,and[yellow,green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[rectangle,blue],triangle],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:triangle;4:size1;1:%s.o;2:x
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, and[and[blue,and[and[green,size3],and[green,apply(same_color,iota(x.s))]]],not[and[green,and[blue,rectangle]]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(and[triangle,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, not[nor[size1,not[size1]]]), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:size1;4:not[%s];4:size1;4:blue
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, green), size3), green), circle), circle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:green;4:circle;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size3), or[and[size1,green],or[apply(same_shape,x.o),triangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:and[%s,%s];4:size1;4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(and[or[circle,circle],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:rectangle;1:%s.o;2:x
'λx.exists(or[or[size2,triangle],not[and[not[apply(size-gt,iota(filter(x.s, nand[triangle,yellow])))],rectangle]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:not[%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:yellow;4:rectangle;3:%s.s;2:x
'λx.apply(iff[triangle,and[size2,size3]],iota(filter(filter(filter(filter(filter(filter(x.s, triangle), circle), triangle), triangle), apply(same_size,x.o)), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:triangle;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.forall(triangle,filter(filter(x.s, size3), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.forall(triangle,filter(filter(x.s, size2), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(or[size2,or[and[rectangle,size3],size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:size1;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, green), not[triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle
'λx.empty(filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[not[green],or[circle,or[circle,not[rectangle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:circle;4:or[%s,%s];4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[rectangle,triangle],iota(filter(filter(x.s, blue), and[size2,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:size1
'λx.forall(and[iff[size1,and[circle,triangle]],not[and[nor[iff[not[rectangle],size2],size3],or[size3,green]]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:circle;4:triangle;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:not[%s];4:rectangle;4:size2;4:size3;4:or[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, nor[and[triangle,circle],and[yellow,implies[and[apply(same_size,iota(x.s)),size3],blue]]]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:blue;4:size2
'λx.apply(iff[and[triangle,circle],and[and[circle,blue],green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:green;1:%s.o;2:x
'λx.apply(or[size1,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, or[size2,and[nand[apply(same_color,x.o),circle],and[and[blue,green],or[or[and[rectangle,rectangle],not[not[triangle]]],green]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:not[%s];4:triangle;4:green
'λx.apply(or[size2,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, or[and[blue,green],blue]), size2), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:blue;4:size2;4:blue
'λx.apply(green,iota(filter(filter(x.s, yellow), apply(size-leq,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, blue), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.contains(iota(x.s), filter(filter(x.s, blue), iff[yellow,and[rectangle,apply(same_color,x.o)]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size3), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.forall(or[blue,circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, and[size3,circle]), size2), blue), green), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;4:size2;4:blue;4:green;4:size1
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, and[green,size3]), or[apply(size-lt,x.o),rectangle]), circle), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:rectangle;4:circle;4:yellow
'λx.apply(and[circle,implies[size1,circle]],iota(filter(filter(filter(x.s, and[green,green]), or[triangle,size3]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;4:or[%s,%s];4:triangle;4:size3;4:size1
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size3,filter(x.s, apply(size-gt,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[green],apply(same_color,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size2,apply(same_size,x.o)])), filter(x.s, or[triangle,and[apply(same_size,x.o),green]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(and[apply(same_size,iota(filter(x.s, not[size3]))),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[or[or[and[blue,yellow],size3],and[yellow,or[size3,or[circle,nand[green,nand[not[apply(size-lt,iota(x.s))],green]]]]]],size3]), implies[triangle,size2]), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size3;4:and[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:or[%s,%s];4:circle;4:nand[%s,%s];4:green;4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:green;4:size3;4:implies[%s,%s];4:triangle;4:size2;4:green
'λx.forall(size2,filter(filter(x.s, size1), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.contains(x.o, filter(x.s, or[rectangle,triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle
'λx.exists(triangle, filter(filter(x.s, implies[yellow,not[rectangle]]), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:not[%s];4:rectangle;4:blue
'λx.contains(iota(filter(x.s, apply(same_size,iota(filter(x.s, apply(same_color,x.o)))))), filter(x.s, or[size2,or[size3,green]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:green
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), and[size2,triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(not[or[circle,green]],iota(filter(x.s, and[apply(size-leq,x.o),nor[and[size1,triangle],apply(same_shape,iota(x.s))]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(or[or[implies[apply(same_color,iota(x.s)),and[triangle,size3]],triangle],size3], filter(filter(filter(x.s, rectangle), not[or[or[green,not[and[green,green]]],and[nand[or[apply(same_shape,x.o),yellow],size3],apply(same_size,iota(x.s))]]]), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:triangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:green;4:green;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[apply(same_shape,iota(filter(x.s, green))),size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(x.s, size3)), filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_size,iota(filter(x.s, circle))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[not[and[size3,circle]],not[and[size3,rectangle]]], filter(x.s, and[size3,or[apply(size-leq,x.o),triangle]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:circle;4:not[%s];4:and[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle
'λx.exists(not[size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size2;3:%s.s;2:x
'λx.exists(not[size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(iff[or[blue,size3],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:size3;4:blue;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, size3), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.empty(filter(filter(x.s, green), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.exists(apply(same_size,iota(filter(x.s, size3))), filter(x.s, nor[size2,and[size3,and[nor[and[nand[implies[nand[nor[yellow,yellow],size3],circle],circle],and[and[not[or[yellow,or[green,implies[yellow,size3]]]],size3],apply(size-gt,x.o)]],yellow],apply(same_size,iota(x.s))]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:and[%s,%s];4:size3;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:yellow;4:yellow;4:size3;4:circle;4:circle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:green;4:implies[%s,%s];4:yellow;4:size3;4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[circle,size3],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[and[yellow,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[size1,apply(size-lt,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[apply(same_color,x.o),apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[and[or[size3,triangle],green],blue], filter(filter(filter(x.s, size3), blue), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:green;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:blue
'λx.apply(apply(size-leq,iota(x.s)),iota(filter(filter(filter(filter(x.s, circle), rectangle), size2), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:size2;4:yellow
'λx.apply(nand[or[size2,not[apply(same_size,x.o)]],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,and[size3,nor[and[and[green,size3],apply(same_shape,x.o)],triangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, yellow), size2), or[triangle,apply(size-geq,x.o)]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1
'λx.apply(apply(same_size,iota(x.s)),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size2,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[apply(size-leq,iota(x.s)),not[implies[yellow,or[or[and[green,not[and[and[blue,circle],rectangle]]],size1],or[triangle,or[circle,yellow]]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:rectangle;4:size1;4:or[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,size3],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(and[nand[green,size3],size1],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:size3;4:size1;3:%s.s;2:x
'λx.apply(and[yellow,size3],iota(filter(filter(filter(x.s, yellow), size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:rectangle
'λx.contains(iota(filter(x.s, or[circle,and[rectangle,and[triangle,implies[green,not[yellow]]]]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:green;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(and[yellow,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(green,iota(filter(x.s, nor[yellow,and[not[size2],green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:size2;4:green
'λx.contains(iota(filter(x.s, apply(same_size,x.o))), filter(filter(filter(filter(filter(x.s, size1), size1), and[nand[size3,nor[iff[triangle,nand[size2,nand[green,and[size1,size1]]]],apply(same_size,x.o)]],green]), and[triangle,and[and[size2,nand[blue,green]],rectangle]]), size2))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:and[%s,%s];4:nand[%s,%s];4:size3;4:nor[%s,%s];4:iff[%s,%s];4:triangle;4:nand[%s,%s];4:size2;4:nand[%s,%s];4:green;4:and[%s,%s];4:size1;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:green;4:rectangle;4:size2
'λx.forall(apply(same_shape,iota(filter(filter(filter(x.s, size2), not[size1]), blue))),filter(filter(filter(filter(filter(x.s, size3), size1), size1), implies[size1,green]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size1;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:size1;4:implies[%s,%s];4:size1;4:green;4:size3
'λx.forall(iff[blue,or[blue,circle]],filter(filter(x.s, and[blue,circle]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:size3
'λx.forall(size2,filter(filter(filter(x.s, rectangle), and[yellow,size3]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:size3;4:triangle
'λx.exists(rectangle, filter(filter(filter(filter(x.s, not[size2]), and[circle,rectangle]), yellow), and[size1,green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:circle;4:rectangle;4:yellow;4:and[%s,%s];4:size1;4:green
'λx.apply(or[apply(same_color,x.o),blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(size-geq,x.o),rectangle],iota(filter(x.s, and[size2,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2
'λx.apply(and[and[iff[circle,size3],nand[triangle,triangle]],apply(same_size,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:circle;4:size3;4:nand[%s,%s];4:triangle;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, circle), apply(size-gt,iota(filter(x.s, size2)))))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, or[yellow,size1]), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size1;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, circle), circle), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:triangle
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, triangle), and[triangle,apply(same_color,iota(filter(x.s, yellow)))]), and[rectangle,triangle]), triangle), and[and[and[apply(same_color,x.o),size2],green],iff[triangle,and[yellow,circle]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:rectangle;4:triangle;4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:green;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:circle
'λx.apply(nand[and[and[rectangle,or[rectangle,size2]],or[size3,or[not[iff[green,yellow]],blue]]],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:yellow;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size3), and[size2,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size2;4:size3
'λx.apply(implies[iff[size1,size3],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:size1;4:size3;4:size2;1:%s.o;2:x
'λx.apply(nand[yellow,and[and[circle,iff[not[or[size3,iff[circle,and[and[apply(size-leq,iota(filter(x.s, implies[and[apply(same_color,x.o),blue],rectangle]))),size2],and[green,blue]]]]],and[size2,size2]]],iff[size3,apply(size-geq,x.o)]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:iff[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;4:size2;4:and[%s,%s];4:green;4:blue;4:and[%s,%s];4:size2;4:size2;4:iff[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[not[size3],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(implies[and[yellow,apply(same_shape,x.o)],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size3), not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow
'λx.apply(nor[not[triangle],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,rectangle],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(not[rectangle],filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[and[rectangle,green],or[size3,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(not[or[size2,and[green,green]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[circle,not[triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), nor[size1,size3]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:size3
'λx.exists(or[and[size2,size1],blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size1;4:blue;3:%s.s;2:x
'λx.exists(iff[not[yellow],and[circle,or[green,not[size2]]]], filter(filter(x.s, green), implies[size3,and[size2,or[green,rectangle]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:size3;4:and[%s,%s];4:size2;4:or[%s,%s];4:green;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, size1), triangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:size1
'λx.exists(or[circle,and[or[circle,apply(same_color,iota(x.s))],yellow]], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[blue,not[yellow]],iota(filter(filter(filter(x.s, blue), size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:blue
'λx.apply(and[nor[nand[and[triangle,implies[and[yellow,size2],blue]],size3],triangle],green],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:triangle;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:blue;4:size3;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(blue, filter(filter(filter(x.s, circle), blue), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:blue
'λx.exists(blue, filter(x.s, and[apply(same_shape,iota(x.s)),circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(or[rectangle,iff[green,triangle]],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size3,and[apply(same_color,x.o),triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(nand[size1,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, yellow))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(implies[and[triangle,circle],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[yellow,size1],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:size1;1:%s.o;2:x
'λx.apply(nand[green,apply(size-geq,iota(filter(x.s, rectangle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(or[yellow,nor[apply(same_shape,x.o),nor[triangle,nor[apply(same_size,iota(filter(x.s, rectangle))),or[green,blue]]]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.exists(or[size1,apply(same_shape,iota(filter(x.s, and[green,not[size1]])))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(implies[size3,not[not[and[green,nand[circle,rectangle]]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:nand[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(filter(x.s, size2), not[or[yellow,blue]]), apply(same_color,iota(filter(x.s, iff[and[size2,triangle],green])))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:or[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:green
'λx.apply(nand[yellow,apply(same_color,x.o)],iota(filter(filter(x.s, yellow), not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size2
'λx.apply(or[not[rectangle],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,iota(filter(x.s, or[size1,size1]))),size2],iota(filter(filter(x.s, circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.forall(yellow,filter(filter(filter(filter(x.s, and[or[nand[nand[triangle,not[apply(size-geq,iota(filter(x.s, or[rectangle,or[size3,yellow]])))]],or[apply(same_color,x.o),or[size1,and[size1,green]]]],size1],apply(same_color,iota(filter(x.s, implies[triangle,size1])))]), apply(same_color,x.o)), rectangle), or[green,size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:nand[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:size1;4:green;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:or[%s,%s];4:green;4:size2
'λx.forall(and[triangle,size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.exists(size3, filter(filter(filter(filter(x.s, not[and[size1,implies[green,not[or[size1,and[size2,size1]]]]]]), size1), green), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:implies[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:size2;4:size1;4:size1;4:green;4:yellow
'λx.forall(not[green],filter(filter(filter(filter(filter(filter(filter(x.s, yellow), and[and[apply(same_shape,iota(filter(x.s, or[yellow,or[and[nand[size1,nor[triangle,size1]],size1],or[not[yellow],size3]]]))),rectangle],not[green]]), and[not[nand[not[triangle],blue]],rectangle]), and[yellow,rectangle]), and[apply(same_shape,x.o),rectangle]), apply(size-lt,x.o)), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:nor[%s,%s];4:triangle;4:size1;4:size1;4:or[%s,%s];4:not[%s];4:yellow;4:size3;4:rectangle;4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:not[%s];4:triangle;4:blue;4:rectangle;4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(filter(x.s, blue), circle), not[blue]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:not[%s];4:blue;4:yellow
'λx.apply(or[and[circle,circle],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, nor[size1,rectangle]), or[size3,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:size3;4:size2
'λx.apply(rectangle,iota(filter(x.s, apply(size-gt,iota(filter(x.s, triangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(nand[circle,yellow], filter(filter(x.s, green), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.forall(size2,filter(x.s, apply(size-lt,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.forall(and[nor[circle,rectangle],apply(same_color,iota(filter(x.s, and[circle,and[yellow,size3]])))],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[blue,size2],iota(filter(filter(filter(x.s, and[size3,yellow]), apply(size-geq,iota(filter(x.s, yellow)))), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(size2,iota(filter(x.s, and[yellow,not[not[not[size1]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:not[%s];4:not[%s];4:size1
'λx.exists(not[size2], filter(filter(x.s, and[triangle,triangle]), nor[and[yellow,green],not[yellow]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:green;4:not[%s];4:yellow
'λx.forall(size1,filter(filter(filter(filter(filter(x.s, not[and[green,and[yellow,apply(size-lt,iota(x.s))]]]), size1), yellow), green), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1;4:yellow;4:green;4:circle
'λx.apply(not[circle],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[not[size2],circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(iff[circle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[yellow,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(or[blue,and[or[rectangle,and[rectangle,blue]],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(not[or[triangle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(iff[or[not[yellow],apply(size-geq,iota(x.s))],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(or[size3,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, and[size1,or[rectangle,size2]]), triangle), not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:size2;4:triangle;4:not[%s];4:yellow
'λx.apply(not[yellow],iota(filter(filter(x.s, not[and[green,and[not[triangle],apply(same_shape,iota(x.s))]]]), and[circle,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[green,or[implies[or[apply(size-lt,x.o),and[size1,triangle]],blue],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size1;4:triangle;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(or[not[and[and[not[size2],rectangle],blue]],or[rectangle,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:rectangle;4:blue;4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[apply(size-leq,iota(x.s))],not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[and[blue,triangle],yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, size3), triangle), size1), size1), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:size1;4:size1;4:size1
'λx.forall(or[size2,or[circle,size3]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, green), and[blue,size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:blue;4:size2
'λx.apply(rectangle,iota(filter(x.s, or[and[circle,triangle],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:blue
'λx.apply(circle,iota(filter(filter(x.s, yellow), and[nand[and[rectangle,not[triangle]],size3],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:triangle;4:size3;4:rectangle
'λx.empty(filter(filter(filter(x.s, yellow), size3), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:triangle
'λx.empty(filter(filter(filter(x.s, yellow), size1), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, size2), yellow), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:triangle
'λx.apply(not[size2],iota(filter(filter(x.s, green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(not[not[or[size3,blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size2))),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[rectangle,or[yellow,rectangle]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[apply(size-gt,x.o),apply(same_shape,iota(filter(x.s, rectangle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, blue), or[not[and[blue,size3]],blue]), not[size3])), filter(filter(x.s, nor[size2,rectangle]), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size3;4:blue;4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:rectangle;4:rectangle
'λx.apply(iff[not[nor[green,apply(same_size,iota(x.s))]],circle],iota(filter(x.s, nor[and[or[green,green],not[yellow]],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:not[%s];4:yellow;4:green
'λx.apply(or[apply(same_shape,iota(filter(x.s, circle))),or[size1,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(filter(filter(x.s, circle), size1), size2), not[triangle]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size2;4:not[%s];4:triangle;4:size1
'λx.exists(and[and[size1,and[size1,green]],rectangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:green;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(x.s, not[green])), filter(filter(x.s, or[size1,size2]), apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(filter(filter(x.s, size2), circle), and[yellow,and[and[yellow,and[rectangle,apply(same_color,iota(filter(x.s, triangle)))]],size3]]), or[circle,triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:or[%s,%s];4:circle;4:triangle
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), or[apply(same_shape,x.o),blue]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:triangle
'λx.apply(and[and[blue,size2],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(implies[triangle,apply(size-lt,iota(filter(x.s, nand[circle,size2])))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(or[and[size1,apply(size-gt,iota(filter(x.s, size2)))],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;1:%s.o;2:x
'λx.apply(not[or[blue,size3]],iota(filter(x.s, nor[size1,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:size3
'λx.contains(x.o, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(green, filter(filter(x.s, size3), apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, yellow), apply(same_size,x.o)), and[and[size3,yellow],or[or[and[or[blue,or[apply(same_shape,x.o),size2]],apply(size-gt,x.o)],size1],nand[circle,circle]]]), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:nand[%s,%s];4:circle;4:circle;4:green
'λx.apply(apply(size-lt,iota(filter(filter(filter(x.s, rectangle), circle), size3))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[apply(same_shape,x.o),size3],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.apply(not[or[circle,apply(same_shape,iota(x.s))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[size2,size2]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size2;4:circle
'λx.apply(not[and[nor[not[and[nand[rectangle,nor[not[size1],and[size1,rectangle]]],and[size2,size2]]],triangle],and[implies[not[rectangle],and[and[yellow,size1],not[apply(same_size,iota(filter(x.s, blue)))]]],size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:size1;4:rectangle;4:and[%s,%s];4:size2;4:size2;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[apply(same_color,iota(filter(x.s, not[circle]))),and[size1,or[nor[size1,triangle],size3]]],filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:size1;4:or[%s,%s];4:nor[%s,%s];4:size1;4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(filter(x.s, circle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(size2,iota(filter(filter(x.s, circle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.contains(iota(filter(x.s, yellow)), filter(filter(x.s, rectangle), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(nand[size3,and[size2,yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:and[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[size3,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.exists(size2, filter(filter(x.s, apply(size-leq,iota(x.s))), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(filter(x.s, rectangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(and[apply(same_size,iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_size,x.o)), and[and[size2,and[size2,circle]],and[iff[or[apply(same_size,x.o),size3],blue],size2]]), triangle), rectangle), triangle), iff[triangle,size1]))),apply(same_color,x.o)],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:blue;4:size2;4:triangle;4:rectangle;4:triangle;4:iff[%s,%s];4:triangle;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[iff[size1,size1],apply(size-gt,iota(filter(filter(x.s, rectangle), and[and[and[triangle,not[size1]],rectangle],size1])))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size1;4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:size1;4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[blue,size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:blue;4:size3;3:%s.s;2:x
'λx.apply(not[rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, and[and[and[yellow,circle],or[size1,circle]],green]), rectangle), yellow), iff[circle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:or[%s,%s];4:size1;4:circle;4:green;4:rectangle;4:yellow;4:iff[%s,%s];4:circle;4:yellow
'λx.apply(nor[or[green,size1],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:green;4:size1;4:green;1:%s.o;2:x
'λx.exists(not[rectangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(implies[circle,or[blue,or[iff[apply(same_color,x.o),size1],and[yellow,apply(same_size,iota(filter(filter(filter(filter(filter(x.s, circle), size1), size2), triangle), triangle)))]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:blue;4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size2;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(not[circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[blue,apply(size-leq,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, blue), size2), yellow), blue), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:yellow;4:blue;4:rectangle
'λx.apply(nand[nor[size1,and[circle,circle]],and[yellow,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:size1;4:and[%s,%s];4:circle;4:circle;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, and[rectangle,rectangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle
'λx.apply(and[yellow,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_size,iota(x.s))), green)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.exists(not[iff[rectangle,and[yellow,or[or[or[iff[blue,triangle],or[size1,iff[apply(size-leq,iota(filter(x.s, not[or[or[or[rectangle,rectangle],yellow],green]]))),and[green,blue]]]],and[size2,size3]],size1]]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:size1;4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:yellow;4:green;4:and[%s,%s];4:green;4:blue;4:and[%s,%s];4:size2;4:size3;4:size1;3:%s.s;2:x
'λx.apply(or[rectangle,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size1), nor[circle,circle]), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:circle;4:circle;4:size3
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[size3],iota(filter(x.s, and[triangle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1
'λx.apply(or[circle,or[apply(size-lt,iota(filter(filter(x.s, size3), green))),circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[size3,size3],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[triangle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[circle,size3],iota(filter(x.s, and[nand[or[size3,rectangle],apply(same_size,iota(filter(x.s, not[green])))],apply(size-geq,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(and[size1,circle], filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, size1), size3), not[size2]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:not[%s];4:size2
'λx.forall(implies[circle,size3],filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[blue,green],iota(filter(filter(x.s, size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(and[apply(same_color,iota(filter(x.s, blue))),apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size2,green],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, or[not[yellow],size2]), and[or[rectangle,green],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:size2;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, size3), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, and[blue,yellow]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow;4:triangle
'λx.apply(size1,iota(filter(x.s, and[yellow,nor[triangle,apply(same_size,x.o)]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, triangle), blue), nand[rectangle,size2]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:nand[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,size3],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[not[not[size1]],size3],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, blue), and[size2,size1]), not[and[circle,size3]]), yellow), rectangle), iff[circle,not[circle]]), nand[or[apply(same_color,x.o),rectangle],size3]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:size1;4:not[%s];4:and[%s,%s];4:circle;4:size3;4:yellow;4:rectangle;4:iff[%s,%s];4:circle;4:not[%s];4:circle;4:nand[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:size3;4:yellow
'λx.empty(filter(filter(filter(x.s, blue), green), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[and[size2,size1],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:blue
'λx.apply(or[implies[implies[rectangle,rectangle],size3],and[triangle,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:size3;4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, and[implies[green,rectangle],blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:green;4:rectangle;4:blue
'λx.contains(iota(filter(x.s, or[circle,circle])), filter(x.s, and[green,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(size3,iota(filter(x.s, and[yellow,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.forall(rectangle,filter(x.s, or[and[size1,yellow],nand[blue,and[apply(size-gt,iota(x.s)),circle]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:nand[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(not[or[size3,size3]],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[blue,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(or[nand[size3,rectangle],triangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:size3;4:rectangle;4:triangle;3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, rectangle), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[size3,not[yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), or[size2,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size2;4:blue
'λx.apply(and[size1,not[yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(x.s, apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[and[size1,triangle],implies[and[and[yellow,green],size1],green]],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[apply(same_color,iota(x.s)),apply(size-geq,iota(filter(x.s, nand[rectangle,yellow])))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, triangle), blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle
'λx.apply(and[nor[and[apply(size-lt,iota(x.s)),not[or[apply(size-geq,x.o),or[apply(size-lt,iota(filter(filter(x.s, circle), size3))),rectangle]]]],size3],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:rectangle;4:size3;4:triangle;1:%s.o;2:x
'λx.forall(size2,filter(x.s, apply(size-leq,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[or[size2,apply(same_shape,x.o)],rectangle],iota(filter(filter(filter(filter(filter(filter(x.s, blue), circle), yellow), or[triangle,and[and[size3,blue],apply(same_color,x.o)]]), rectangle), and[yellow,and[blue,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:yellow;4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:size1
'λx.apply(and[circle,size3],iota(filter(filter(x.s, or[size2,not[apply(same_shape,iota(x.s))]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(and[green,and[not[blue],not[yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), not[blue]), not[or[size1,and[yellow,rectangle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue;4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:rectangle
'λx.empty(filter(filter(filter(x.s, rectangle), triangle), and[rectangle,size1]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:and[%s,%s];4:rectangle;4:size1
'λx.exists(and[rectangle,size1], filter(x.s, apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, not[yellow]), not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:not[%s];4:green
'λx.apply(and[triangle,size1],iota(filter(x.s, and[apply(same_size,x.o),size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.exists(and[nor[nor[blue,or[size3,or[not[size2],rectangle]]],iff[and[and[size3,green],size1],rectangle]],triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:size2;4:rectangle;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:size1;4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(x.s, nand[blue,apply(same_color,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[and[rectangle,circle],not[implies[yellow,triangle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:not[%s];4:implies[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, and[size1,yellow]), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow;4:size2
'λx.exists(and[circle,size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.exists(and[size2,blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.exists(blue, filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[and[size3,size3],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,size3],iota(filter(filter(x.s, apply(same_color,x.o)), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(implies[size2,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size1), iff[and[and[rectangle,size3],or[blue,yellow]],green]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:blue;4:yellow;4:green;4:green
'λx.apply(not[rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[implies[blue,or[size3,circle]],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:or[%s,%s];4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, green), size1), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:triangle
'λx.apply(and[not[size2],not[apply(same_shape,iota(filter(x.s, size1)))]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,iff[yellow,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size1,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[green],triangle],iota(filter(filter(x.s, yellow), and[triangle,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:triangle;4:yellow
'λx.contains(x.o, filter(filter(filter(x.s, size2), and[circle,rectangle]), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:rectangle;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, yellow), and[size3,and[size3,and[and[or[and[nand[and[size2,and[circle,blue]],and[or[triangle,size3],or[yellow,or[not[size2],and[size1,triangle]]]]],circle],size3],triangle],apply(same_color,x.o)]]]), size3), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size1;4:triangle;4:circle;4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:blue
'λx.forall(blue,filter(filter(filter(filter(x.s, blue), size1), blue), apply(size-leq,iota(filter(filter(x.s, yellow), nor[size1,triangle])))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:blue;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:size1;4:triangle
'λx.forall(not[size3],filter(filter(x.s, and[circle,size2]), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:yellow
'λx.contains(iota(filter(x.s, green)), filter(filter(filter(x.s, not[size1]), circle), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:circle;4:size3
'λx.apply(and[size2,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size2,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[size2,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[rectangle,apply(size-gt,x.o)],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(filter(filter(x.s, yellow), rectangle), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:rectangle
'λx.empty(filter(filter(x.s, implies[not[size2],and[or[blue,green],rectangle]]), implies[yellow,apply(same_color,iota(x.s))]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:rectangle;4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(and[circle,and[blue,nor[or[size2,size1],green]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:nor[%s,%s];4:or[%s,%s];4:size2;4:size1;4:green;3:%s.s;2:x
'λx.apply(and[size1,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[size1,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[size1,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[size3,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(and[size3,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[size3,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, size3), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.contains(x.o, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[circle,circle],iota(filter(filter(x.s, circle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.forall(implies[apply(same_shape,iota(filter(x.s, and[size3,or[not[rectangle],size3]]))),size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:rectangle;4:size3;4:size3;3:%s.s;2:x
'λx.apply(or[and[and[blue,rectangle],size3],green],iota(filter(filter(x.s, rectangle), and[and[apply(same_size,x.o),apply(same_shape,x.o)],apply(same_color,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, size1), or[blue,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:green
'λx.apply(not[or[apply(same_color,x.o),rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[iff[apply(same_size,iota(x.s)),rectangle],and[size3,triangle]], filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size3,apply(same_shape,iota(x.s))],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(blue, filter(filter(x.s, rectangle), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.exists(triangle, filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), and[rectangle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(not[and[size1,and[apply(same_shape,x.o),nand[size3,size1]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size3,circle])), filter(x.s, nand[not[apply(same_shape,iota(filter(x.s, rectangle)))],blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.exists(and[blue,and[blue,and[circle,size2]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.apply(and[and[yellow,size1],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(not[or[not[size1],apply(same_shape,x.o)]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(green,iota(filter(filter(x.s, rectangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(or[and[circle,not[nor[size1,size2]]],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:nor[%s,%s];4:size1;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, and[apply(size-lt,iota(filter(x.s, apply(same_shape,x.o)))),triangle]), not[rectangle]))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(x.s, and[implies[size3,yellow],blue]), and[and[size2,size2],yellow]), circle), or[and[triangle,and[green,not[and[circle,blue]]]],and[triangle,rectangle]]), implies[triangle,not[apply(same_shape,iota(x.s))]]), green), or[or[and[size1,not[triangle]],size1],yellow]), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size3;4:yellow;4:blue;4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:yellow;4:circle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:triangle;4:rectangle;4:implies[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:size1;4:yellow;4:size3
'λx.apply(and[not[circle],and[circle,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, or[blue,not[apply(same_size,x.o)]]), size2), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, implies[not[apply(size-gt,x.o)],and[not[size3],size1]]), rectangle), and[green,size2]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size3;4:size1;4:rectangle;4:and[%s,%s];4:green;4:size2;4:size2
'λx.apply(size1,iota(filter(x.s, and[green,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle
'λx.apply(size2,iota(filter(x.s, or[apply(same_size,iota(x.s)),circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(filter(x.s, or[size3,green]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green;4:circle
'λx.forall(blue,filter(filter(x.s, yellow), not[size2]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size2
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, and[iff[or[apply(same_color,iota(filter(x.s, size3))),not[triangle]],and[yellow,green]],size2]), not[not[or[not[triangle],yellow]]]), or[rectangle,and[apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, triangle), or[green,size2]), size3), triangle), nor[and[yellow,and[size3,green]],apply(size-leq,x.o)]))),blue]]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:triangle;4:and[%s,%s];4:yellow;4:green;4:size2;4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:triangle;4:yellow;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:green;4:size2;4:size3;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:blue
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, or[or[or[size2,and[and[yellow,not[size3]],rectangle]],and[and[triangle,not[triangle]],green]],blue]), green), and[blue,size3]), size3))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:size3;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:triangle;4:green;4:blue;4:green;4:and[%s,%s];4:blue;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, yellow), size2), size3), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:size3;4:rectangle
'λx.apply(triangle,iota(filter(x.s, and[size3,nor[yellow,and[apply(same_color,iota(filter(x.s, nand[rectangle,or[size3,blue]]))),circle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:blue;4:circle
'λx.empty(filter(filter(filter(x.s, not[size3]), or[size1,circle]), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:size1;4:circle;4:size3
'λx.apply(implies[yellow,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[implies[size3,triangle],and[not[implies[yellow,size1]],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:yellow;4:size1;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, size1), rectangle), size2), apply(same_size,iota(x.s))), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, and[circle,and[apply(same_shape,x.o),and[triangle,yellow]]]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:yellow;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, circle), triangle), triangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[circle,rectangle]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:yellow
'λx.exists(size3, filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(size2, filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, yellow), triangle), green), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:green;4:green
'λx.forall(yellow,filter(filter(filter(x.s, circle), apply(size-lt,x.o)), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3
'λx.contains(iota(x.s), filter(x.s, implies[green,blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:blue
'λx.apply(or[not[yellow],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size3,or[rectangle,or[size2,apply(same_size,x.o)]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, yellow), size1), size2)), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[yellow],iota(filter(x.s, apply(size-lt,iota(filter(filter(x.s, triangle), size3))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size2), apply(same_size,iota(x.s))))),iota(filter(x.s, nand[size1,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:triangle
'λx.apply(and[size1,apply(same_shape,x.o)],iota(filter(x.s, nor[triangle,and[apply(same_shape,x.o),size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(or[blue,nand[blue,and[blue,blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:blue;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[and[triangle,blue],or[and[size3,rectangle],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:or[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(or[size3,blue],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[yellow,triangle],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, iff[yellow,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:green
'λx.forall(apply(size-gt,x.o),filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[blue,nor[apply(same_shape,x.o),size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(not[and[size1,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[circle,and[yellow,apply(same_shape,x.o)]],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[rectangle,triangle],filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(filter(x.s, and[triangle,blue]), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:blue
'λx.apply(or[or[circle,apply(same_color,x.o)],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nand[size3,and[size3,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), and[apply(same_shape,x.o),triangle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.forall(rectangle,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[or[size2,size3],iff[size3,apply(size-leq,iota(filter(filter(x.s, yellow), size2)))]]), not[not[rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:iff[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:not[%s];4:not[%s];4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), circle), apply(same_shape,x.o)), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, or[iff[not[apply(same_shape,iota(x.s))],not[yellow]],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;4:yellow
'λx.apply(or[rectangle,apply(same_color,iota(filter(x.s, size2)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[and[rectangle,size2],rectangle],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[apply(same_color,x.o),blue],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[size1,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size3],filter(filter(x.s, or[rectangle,and[size2,size1]]), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:size1;4:rectangle
'λx.apply(or[circle,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, or[rectangle,green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green
'λx.apply(or[not[yellow],or[size3,implies[size1,rectangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:size3;4:implies[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, rectangle), green), green), yellow), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:green;4:yellow;4:circle
'λx.apply(implies[and[and[size2,and[green,circle]],size2],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:circle;4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(green,iota(filter(filter(x.s, size3), nor[size3,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:size3;4:size3
'λx.apply(or[apply(size-gt,iota(x.s)),size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, and[circle,size3]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3;4:triangle
'λx.exists(or[rectangle,rectangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.exists(apply(same_color,iota(filter(x.s, yellow))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.exists(not[not[blue]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(iff[triangle,triangle],iota(filter(x.s, not[apply(same_color,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(filter(filter(x.s, green), apply(same_color,x.o)), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.contains(x.o, filter(filter(x.s, not[apply(same_color,x.o)]), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(and[triangle,size3],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(and[or[green,and[size3,and[yellow,nor[circle,and[size3,green]]]]],circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:and[%s,%s];4:size3;4:green;4:circle;3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, apply(same_color,iota(filter(filter(x.s, nand[green,green]), size3))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:green;4:size3
'λx.apply(and[not[size2],apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), apply(same_size,x.o)), and[yellow,circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.apply(or[green,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[or[size1,or[or[not[and[circle,or[or[not[triangle],and[triangle,size3]],rectangle]]],size3],yellow]],and[and[triangle,green],yellow]],size3],iota(filter(x.s, and[and[green,circle],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:triangle;4:size3;4:rectangle;4:size3;4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:rectangle
'λx.exists(size2, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size3, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size1, filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, size2), iff[and[blue,apply(size-gt,iota(filter(filter(x.s, size3), iff[triangle,size1])))],apply(size-geq,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:triangle;4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[and[apply(size-geq,x.o),or[apply(same_shape,iota(filter(filter(filter(x.s, not[size3]), size3), size2))),yellow]],and[green,size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size3;4:size2;4:yellow;4:and[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(x.s)),yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(implies[iff[yellow,size2],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:yellow;4:size2;4:yellow;1:%s.o;2:x
'λx.forall(size1,filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(apply(same_size,x.o), filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(x.s), filter(filter(x.s, triangle), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.empty(filter(filter(filter(filter(x.s, apply(size-gt,x.o)), size2), green), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;4:green;4:size2
'λx.apply(and[implies[size3,green],and[and[iff[circle,rectangle],triangle],apply(size-leq,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:green;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:circle;4:rectangle;4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[size1,or[size2,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_shape,iota(filter(x.s, blue))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(x.s, and[and[triangle,yellow],green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:green
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, and[yellow,blue]), and[not[and[apply(same_size,iota(filter(x.s, circle))),size1]],or[size2,circle]]), yellow), and[blue,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:or[%s,%s];4:size2;4:circle;4:yellow;4:and[%s,%s];4:blue;4:yellow
'λx.apply(nand[and[apply(size-geq,iota(x.s)),rectangle],or[triangle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(not[and[circle,yellow]],iota(filter(filter(filter(filter(filter(x.s, and[not[or[not[blue],or[blue,blue]]],triangle]), green), and[rectangle,size1]), iff[blue,size1]), or[triangle,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:blue;4:blue;4:triangle;4:green;4:and[%s,%s];4:rectangle;4:size1;4:iff[%s,%s];4:blue;4:size1;4:or[%s,%s];4:triangle;4:size3
'λx.forall(not[green],filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(x.s, blue), and[and[and[apply(same_color,iota(filter(x.s, circle))),apply(size-gt,iota(x.s))],circle],circle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(nand[size1,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(x.s), filter(x.s, apply(size-gt,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, or[size3,yellow]), triangle), rectangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:yellow;4:triangle;4:rectangle;4:size1
'λx.apply(or[triangle,not[or[or[green,apply(same_size,iota(x.s))],and[circle,nand[and[or[rectangle,and[circle,green]],and[size2,or[triangle,green]]],size2]]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(nand[size1,green], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(and[triangle,apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, apply(same_shape,x.o)), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(size3, filter(filter(x.s, apply(same_size,x.o)), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, size1), triangle), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:size3
'λx.apply(rectangle,iota(filter(x.s, nand[not[and[green,and[size3,implies[circle,green]]]],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:implies[%s,%s];4:circle;4:green;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(size1,iota(filter(x.s, and[size1,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size1
'λx.apply(size1,iota(filter(x.s, and[size1,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.apply(size3,iota(filter(x.s, and[size1,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.apply(or[rectangle,not[size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[circle,size1],iota(filter(filter(filter(filter(x.s, size3), not[triangle]), and[size1,not[implies[not[triangle],and[and[size3,not[green]],circle]]]]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:triangle;4:and[%s,%s];4:size1;4:not[%s];4:implies[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:green;4:circle;4:green
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, size2), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(yellow,iota(filter(filter(x.s, not[triangle]), nand[nand[rectangle,and[green,size3]],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:nand[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size3;4:blue
'λx.apply(or[implies[not[yellow],triangle],and[and[size2,size1],yellow]],iota(filter(filter(x.s, or[rectangle,circle]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:yellow;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:size2
'λx.apply(blue,iota(filter(filter(x.s, triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.empty(filter(filter(filter(x.s, green), rectangle), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:yellow
'λx.apply(green,iota(filter(x.s, and[size2,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(size3,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(or[or[yellow,size1],or[size1,and[and[circle,and[apply(same_shape,x.o),size2]],nand[blue,size3]]]], filter(x.s, and[triangle,size2]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:nand[%s,%s];4:blue;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2
'λx.contains(x.o, filter(x.s, not[yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(and[blue,apply(same_color,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[rectangle,and[and[or[and[not[size2],or[apply(same_shape,iota(filter(x.s, size2))),or[or[size1,and[size3,triangle]],and[triangle,and[rectangle,rectangle]]]]],blue],apply(same_size,x.o)],size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:rectangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, and[and[nor[size2,not[rectangle]],and[and[and[triangle,and[green,and[blue,or[or[apply(size-geq,iota(filter(filter(x.s, apply(size-lt,x.o)), blue))),circle],size1]]]],yellow],size2]],size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size2;4:not[%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:circle;4:size1;4:yellow;4:size2;4:size1
'λx.apply(implies[or[triangle,yellow],nor[triangle,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:nor[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nor[or[and[size2,yellow],or[circle,size1]],or[blue,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:circle;4:size1;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[size3,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size1,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.exists(or[not[or[or[blue,apply(same_size,iota(filter(filter(x.s, and[apply(same_size,iota(x.s)),triangle]), blue)))],nand[nand[not[and[triangle,size3]],size2],size1]]],size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:blue;4:nand[%s,%s];4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size3;4:size2;4:size1;4:size1;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(size-leq,x.o)), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3
'λx.apply(or[nand[nand[blue,size3],green],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:nand[%s,%s];4:blue;4:size3;4:green;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,size1],iota(filter(filter(x.s, nor[blue,size3]), iff[and[not[not[rectangle]],circle],size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:size3;4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:circle;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(x.s, yellow), rectangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:blue
'λx.apply(implies[circle,triangle],iota(filter(filter(x.s, not[apply(size-lt,iota(filter(filter(filter(x.s, green), rectangle), apply(same_color,iota(x.s)))))]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(x.s, iff[blue,apply(same_shape,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[yellow,and[triangle,size3]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:size3;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size3), and[green,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:rectangle
'λx.apply(or[yellow,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[yellow,and[nor[nand[or[size3,rectangle],and[or[yellow,yellow],green]],and[circle,not[yellow]]],iff[apply(same_color,x.o),yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:green;4:and[%s,%s];4:circle;4:not[%s];4:yellow;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.forall(size3,filter(filter(x.s, circle), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.forall(not[rectangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), yellow), not[blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:not[%s];4:blue
'λx.forall(or[implies[green,apply(same_color,iota(x.s))],green],filter(x.s, and[size1,not[size1]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:size1
'λx.apply(not[and[size2,apply(size-lt,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(size-gt,iota(filter(filter(filter(filter(x.s, yellow), circle), and[apply(size-lt,iota(filter(x.s, size2))),and[and[size3,size1],blue]]), rectangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:blue;4:rectangle
'λx.apply(iff[and[size2,size1],size1],iota(filter(filter(filter(filter(filter(x.s, yellow), green), and[and[size2,rectangle],not[yellow]]), or[not[blue],implies[and[green,size2],apply(same_size,iota(x.s))]]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:and[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:not[%s];4:yellow;4:or[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:and[%s,%s];4:green;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(not[or[blue,triangle]],iota(filter(filter(filter(filter(filter(x.s, and[yellow,triangle]), triangle), triangle), or[and[size2,size1],size1]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:triangle;4:triangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:size1;4:size1;4:blue
'λx.empty(filter(x.s, not[apply(same_shape,iota(x.s))]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,not[circle]],iota(filter(filter(filter(x.s, nand[triangle,nor[size1,triangle]]), and[green,size3]), not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:nor[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:green;4:size3;4:not[%s];4:size3
'λx.apply(triangle,iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[and[not[size2],or[or[triangle,implies[rectangle,nor[yellow,size2]]],blue]],or[green,triangle]],iota(filter(filter(filter(filter(x.s, not[yellow]), blue), blue), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:triangle;4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:yellow;4:size2;4:blue;4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:blue;4:blue;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, not[green]), yellow), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:yellow;4:green
'λx.apply(apply(same_color,iota(filter(filter(x.s, size1), green))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[blue],implies[circle,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[size1,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green
'λx.apply(or[circle,and[green,not[nand[circle,yellow]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:green;4:not[%s];4:nand[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, not[and[apply(size-geq,iota(x.s)),or[blue,triangle]]]), or[green,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:green;4:triangle
'λx.apply(green,iota(filter(filter(x.s, not[implies[size3,yellow]]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:size3;4:yellow;4:size1
'λx.apply(size2,iota(filter(x.s, iff[triangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:size2
'λx.empty(filter(filter(filter(x.s, size1), triangle), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:size3
'λx.apply(or[triangle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[not[and[and[and[size2,nor[blue,size1]],not[rectangle]],green]],green],iota(filter(filter(filter(filter(x.s, size1), apply(same_color,iota(x.s))), size2), or[yellow,or[apply(same_shape,iota(filter(x.s, size3))),yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:nor[%s,%s];4:blue;4:size1;4:not[%s];4:rectangle;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(and[or[yellow,size2],green],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(x.s, apply(same_shape,iota(filter(filter(x.s, size2), size2)))))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(or[yellow,triangle],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size3), yellow), implies[circle,size1]), yellow), green), size2), and[circle,or[and[rectangle,and[circle,triangle]],or[triangle,size3]]]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:implies[%s,%s];4:circle;4:size1;4:yellow;4:green;4:size2;4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:triangle;4:or[%s,%s];4:triangle;4:size3;4:rectangle
'λx.empty(filter(filter(x.s, circle), implies[size2,green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:size2;4:green
'λx.forall(yellow,filter(filter(filter(filter(x.s, blue), size1), circle), or[apply(size-leq,x.o),yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:circle;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow
'λx.exists(and[and[blue,green],size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:size3;3:%s.s;2:x
'λx.forall(implies[size3,size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:size3;4:size3;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, not[and[green,size1]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:size1
'λx.apply(apply(size-lt,iota(x.s)),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, nand[yellow,and[size1,circle]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[rectangle,not[size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:size3
'λx.contains(iota(filter(filter(x.s, size1), size2)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;3:%s.s;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.contains(iota(filter(filter(x.s, and[yellow,size3]), circle)), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[triangle,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, circle), size3), triangle), nor[size2,iff[blue,and[green,blue]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:triangle;4:nor[%s,%s];4:size2;4:iff[%s,%s];4:blue;4:and[%s,%s];4:green;4:blue
'λx.exists(size3, filter(filter(filter(filter(filter(filter(x.s, blue), yellow), size1), size3), circle), iff[and[and[yellow,size2],yellow],blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:size1;4:size3;4:circle;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:yellow;4:blue
'λx.forall(and[apply(same_size,iota(x.s)),rectangle],filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size1, filter(filter(x.s, size2), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, size2), yellow), rectangle), nor[blue,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:rectangle;4:nor[%s,%s];4:blue;4:triangle
'λx.apply(implies[not[yellow],and[size2,apply(same_color,x.o)]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(triangle, filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(triangle,filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(triangle,filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(triangle,filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size3, filter(filter(filter(x.s, yellow), and[size2,blue]), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size2;4:blue;4:blue
'λx.forall(circle,filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, or[size2,blue]), size3), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:blue;4:size3;4:size1
'λx.apply(or[triangle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(and[or[size1,or[or[green,size2],circle]],or[apply(size-gt,x.o),green]],iota(filter(filter(x.s, yellow), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:green;4:size2;4:circle;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(nor[and[yellow,nor[apply(same_color,iota(filter(filter(filter(filter(x.s, and[and[or[triangle,size2],circle],apply(same_color,x.o)]), triangle), size2), size2))),size2]],implies[yellow,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size2;4:size2;4:size2;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[and[and[blue,size3],and[triangle,rectangle]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:and[%s,%s];4:triangle;4:rectangle;4:size3;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_shape,x.o),or[triangle,triangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:triangle
'λx.apply(not[and[green,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[and[not[size2],and[yellow,size3]],apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[and[triangle,rectangle],yellow],apply(size-gt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:yellow;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[iff[size3,size1],blue]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:size1;4:blue;4:circle
'λx.empty(filter(filter(x.s, or[size1,size2]), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2;4:size1
'λx.apply(not[green],iota(filter(x.s, iff[apply(same_color,x.o),and[apply(same_size,iota(x.s)),triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(and[blue,not[apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[nor[circle,blue],and[blue,or[yellow,size1]]]), blue))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:size1;4:blue
'λx.apply(size1,iota(filter(filter(x.s, apply(same_size,iota(x.s))), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[apply(same_color,x.o),rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(x.s, apply(same_color,iota(x.s)))), filter(x.s, size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[blue,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[circle], filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, yellow), and[size3,or[or[green,or[size3,apply(same_size,iota(filter(x.s, apply(same_size,x.o))))]],apply(same_shape,x.o)]]), apply(size-gt,iota(filter(x.s, circle))))), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(and[circle,or[blue,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, and[yellow,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(and[rectangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(and[green,size2], filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(not[apply(same_size,iota(filter(x.s, rectangle)))],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(and[and[blue,or[or[and[size1,triangle],circle],blue]],and[apply(size-geq,iota(x.s)),yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:circle;4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[triangle,not[not[green]]],not[blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size2), size1), size2), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:size2;4:size3
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, rectangle), and[or[and[yellow,or[triangle,apply(size-leq,iota(x.s))]],not[or[rectangle,not[size2]]]],triangle]), blue), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:not[%s];4:size2;4:triangle;4:blue;4:blue
'λx.apply(and[iff[not[size2],circle],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:size2;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[iff[size1,not[size2]],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size1;4:not[%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(nand[apply(size-gt,x.o),size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(not[nor[apply(size-geq,x.o),or[or[green,not[size3]],apply(same_shape,iota(filter(filter(filter(x.s, size1), size3), blue)))]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:blue;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(x.s, or[green,size2]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[size3,size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(circle,iota(filter(filter(x.s, yellow), not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:green
'λx.apply(or[or[and[rectangle,size1],circle],and[triangle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:circle;4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(filter(filter(x.s, and[green,circle]), size3), blue), yellow), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:size3;4:blue;4:yellow;4:rectangle
'λx.apply(apply(size-lt,x.o),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[nor[or[and[size1,circle],triangle],triangle],blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:triangle;4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, nor[size1,size2]), iff[yellow,or[apply(same_size,iota(x.s)),not[or[size2,and[size1,green]]]]])), filter(filter(x.s, rectangle), and[or[green,size1],size2]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:size2;4:iff[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:green;4:size1;4:size2
'λx.forall(rectangle,filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(rectangle,filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[size1,or[blue,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(implies[and[yellow,circle],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[and[triangle,size3],size3],iota(filter(filter(x.s, circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(and[implies[size1,not[blue]],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size1;4:not[%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[apply(same_size,iota(x.s)),green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(not[not[or[circle,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), blue), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:size3
'λx.apply(or[apply(same_size,iota(filter(filter(x.s, yellow), size3))),green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:green;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, not[not[and[yellow,blue]]]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:blue;4:triangle
'λx.forall(blue,filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(iff[size2,not[triangle]],iota(filter(filter(x.s, size2), not[green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:green
'λx.empty(filter(filter(filter(filter(x.s, and[rectangle,green]), apply(same_shape,iota(x.s))), size1), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(rectangle,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size1,and[size2,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(not[apply(same_size,x.o)],iota(filter(filter(x.s, apply(size-leq,x.o)), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2
'λx.contains(x.o, filter(filter(x.s, and[rectangle,or[apply(same_size,x.o),green]]), and[and[nand[size2,blue],apply(size-lt,iota(filter(filter(x.s, size2), size2)))],implies[blue,yellow]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:implies[%s,%s];4:blue;4:yellow
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, blue), apply(size-leq,x.o)), triangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;4:size3
'λx.apply(and[or[circle,implies[not[circle],not[apply(same_size,iota(x.s))]]],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:implies[%s,%s];4:not[%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, green), size1), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:rectangle
'λx.apply(and[nor[blue,or[yellow,not[rectangle]]],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:not[%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, implies[not[circle],apply(same_shape,x.o)]), and[and[and[size1,not[rectangle]],rectangle],size3]), or[size1,rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:rectangle;4:rectangle;4:size3;4:or[%s,%s];4:size1;4:rectangle
'λx.exists(apply(same_shape,x.o), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(x.s, iff[size2,and[and[size1,or[size3,apply(same_color,iota(filter(filter(filter(x.s, size2), and[implies[circle,size3],not[iff[rectangle,green]]]), green)))]],implies[size3,triangle]]]), not[and[apply(same_color,iota(filter(x.s, rectangle))),rectangle]]), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:implies[%s,%s];4:circle;4:size3;4:not[%s];4:iff[%s,%s];4:rectangle;4:green;4:green;4:implies[%s,%s];4:size3;4:triangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:size1
'λx.forall(triangle,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(and[circle,iff[blue,or[rectangle,size1]]],filter(x.s, or[blue,not[or[size1,iff[or[and[size3,size1],circle],green]]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:size1;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:circle;4:green
'λx.apply(and[and[size1,circle],iff[blue,apply(same_size,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[not[size1],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(nand[or[and[green,green],circle],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:circle;4:size2;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[size2,size1]), not[triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;4:not[%s];4:triangle
'λx.apply(blue,iota(filter(filter(x.s, or[size3,not[apply(same_color,x.o)]]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.forall(blue,filter(filter(x.s, yellow), not[or[rectangle,yellow]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:or[%s,%s];4:rectangle;4:yellow
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), size3), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:green
'λx.apply(or[iff[apply(same_size,iota(filter(filter(x.s, rectangle), apply(size-gt,iota(filter(x.s, size2)))))),and[size3,size2]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size3;4:size2;4:size3;1:%s.o;2:x
'λx.exists(nor[yellow,and[and[nor[and[circle,size1],not[circle]],and[green,or[iff[or[not[size3],or[rectangle,triangle]],or[apply(same_size,iota(x.s)),size2]],blue]]],size2]], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:circle;4:size1;4:not[%s];4:circle;4:and[%s,%s];4:green;4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(same_size,x.o),filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),iota(filter(filter(x.s, or[yellow,and[rectangle,implies[rectangle,size3]]]), apply(same_shape,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:rectangle;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,green],iota(filter(filter(x.s, green), and[size3,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size3;4:size1
'λx.apply(nor[yellow,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[iff[rectangle,and[yellow,and[and[triangle,nor[size2,circle]],green]]],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:size2;4:circle;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, size3), yellow), rectangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:rectangle;4:size3
'λx.apply(circle,iota(filter(filter(x.s, and[size3,yellow]), and[triangle,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:triangle;4:size1
'λx.apply(iff[apply(same_size,x.o),not[yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, nor[not[green],blue]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:green;4:blue;4:blue
'λx.apply(triangle,iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,implies[triangle,size1]],iota(filter(filter(filter(filter(x.s, and[yellow,size1]), nor[and[size1,rectangle],size3]), iff[and[or[circle,not[yellow]],circle],circle]), and[yellow,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:implies[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:nor[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:size3;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:yellow;4:circle;4:circle;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(not[rectangle],iota(filter(filter(x.s, rectangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(nand[green,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), yellow), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:triangle
'λx.apply(iff[and[yellow,size1],apply(size-lt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, size2), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(nor[size1,and[size1,triangle]],iota(filter(filter(x.s, and[size2,size2]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2;4:triangle
'λx.contains(x.o, filter(x.s, nor[triangle,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:size3
'λx.forall(circle,filter(filter(filter(x.s, apply(same_color,x.o)), triangle), or[yellow,green]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:yellow;4:green
'λx.apply(apply(same_shape,iota(filter(x.s, size1))),iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[triangle,size1],iota(filter(filter(filter(x.s, size3), size1), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, not[apply(size-geq,iota(x.s))]), rectangle), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.exists(not[iff[or[and[or[and[circle,nor[and[not[not[green]],yellow],green]],green],not[yellow]],apply(same_color,iota(filter(x.s, apply(size-geq,iota(filter(x.s, and[and[and[yellow,and[and[circle,triangle],size3]],implies[circle,green]],triangle]))))))],rectangle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:green;4:yellow;4:green;4:green;4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size3;4:implies[%s,%s];4:circle;4:green;4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(implies[blue,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, triangle), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.empty(filter(filter(x.s, nor[size1,nor[size2,and[and[triangle,yellow],iff[triangle,green]]]]), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:nor[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:iff[%s,%s];4:triangle;4:green;4:circle
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, size1), yellow), apply(size-leq,x.o)), size1), not[and[green,apply(size-leq,x.o)]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;4:not[%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[yellow,yellow]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow;4:circle
'λx.empty(filter(filter(filter(x.s, and[and[apply(size-lt,iota(filter(x.s, size1))),size3],apply(same_color,x.o)]), rectangle), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:size1
'λx.apply(or[size1,blue],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(x.s, rectangle), and[yellow,circle]), and[blue,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:blue;4:circle
'λx.apply(and[size3,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_size,iota(filter(x.s, and[size2,not[green]]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:green
'λx.apply(not[nand[blue,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[green,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[size1,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(or[size3,not[nor[rectangle,size3]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:nor[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size3), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(green,iota(filter(x.s, and[iff[size2,yellow],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size2;4:yellow;4:circle
'λx.apply(rectangle,iota(filter(x.s, apply(size-geq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(filter(filter(filter(x.s, apply(size-lt,iota(filter(filter(filter(x.s, triangle), or[triangle,size2]), circle)))), or[circle,and[green,circle]]), yellow), yellow), circle), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:triangle;4:size2;4:circle;4:or[%s,%s];4:circle;4:and[%s,%s];4:green;4:circle;4:yellow;4:yellow;4:circle;4:yellow
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, or[green,blue]), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue;4:blue
'λx.apply(or[and[size3,and[blue,implies[yellow,apply(size-lt,x.o)]]],apply(size-gt,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[apply(size-geq,x.o),rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nand[rectangle,apply(same_color,iota(x.s))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,yellow],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[yellow,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[not[or[size3,green]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:green;4:rectangle;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, triangle), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.forall(nor[and[yellow,apply(same_color,x.o)],size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.apply(or[yellow,apply(same_color,iota(filter(x.s, size2)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(size-leq,x.o),apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(and[and[triangle,apply(size-geq,iota(x.s))],or[size3,and[circle,size3]]],filter(filter(filter(x.s, nand[rectangle,size2]), triangle), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:size2;4:triangle;4:circle
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, yellow), blue), size2))),iota(filter(filter(filter(filter(x.s, or[blue,blue]), size2), and[not[not[implies[or[blue,circle],iff[triangle,rectangle]]]],implies[rectangle,green]]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue;4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:blue;4:circle;4:iff[%s,%s];4:triangle;4:rectangle;4:implies[%s,%s];4:rectangle;4:green;4:size1
'λx.apply(and[or[implies[circle,blue],size3],and[and[blue,blue],blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:circle;4:blue;4:size3;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[and[size1,and[size3,size1]],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,blue]), iff[blue,circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:iff[%s,%s];4:blue;4:circle
'λx.apply(and[blue,apply(same_color,iota(filter(filter(x.s, green), size1)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;1:%s.o;2:x
'λx.apply(and[green,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, not[triangle]), triangle), and[or[and[iff[triangle,size2],and[circle,circle]],yellow],green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:triangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:circle;4:circle;4:yellow;4:green
'λx.apply(not[and[size3,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[or[or[circle,yellow],and[not[blue],size2]],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:not[%s];4:blue;4:size2;4:blue
'λx.apply(not[circle],iota(filter(filter(x.s, triangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.empty(filter(x.s, and[not[iff[yellow,blue]],size3]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:yellow;4:blue;4:size3
'λx.apply(or[size2,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(or[size1,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(nor[size1,nor[rectangle,size1]],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:nor[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(apply(same_color,iota(x.s)),filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_color,iota(filter(x.s, apply(size-gt,iota(x.s))))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(circle, x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:%s.s;2:x
'λx.exists(and[and[size3,not[blue]],yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:blue;4:yellow;3:%s.s;2:x
'λx.apply(and[not[size3],or[and[triangle,apply(same_size,iota(x.s))],triangle]],iota(filter(x.s, implies[size3,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:size1
'λx.exists(triangle, filter(x.s, or[not[and[circle,and[apply(size-lt,iota(x.s)),not[triangle]]]],size2]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;4:size2
'λx.apply(circle,iota(filter(filter(x.s, or[yellow,triangle]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle;4:yellow
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(x.s, rectangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(green,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[and[triangle,nor[blue,and[size3,apply(same_color,iota(x.s))]]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:blue;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(x.s, not[triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(green,iota(filter(x.s, and[yellow,and[not[size2],and[size3,triangle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size3;4:triangle
'λx.apply(or[size1,and[green,and[not[green],yellow]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), triangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:rectangle
'λx.apply(and[rectangle,and[apply(same_color,x.o),rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(nand[triangle,rectangle],filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:triangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[triangle,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.exists(not[blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(nor[size1,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(and[circle,and[triangle,implies[and[and[blue,size2],not[green]],triangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:not[%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(and[nor[circle,circle],size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:size2;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, or[circle,circle]), nand[not[rectangle],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle;4:nand[%s,%s];4:not[%s];4:rectangle;4:rectangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, and[rectangle,circle]), yellow), size3), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:yellow;4:size3;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, not[and[and[not[or[iff[green,circle],triangle]],nand[green,rectangle]],triangle]]), apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:green;4:circle;4:triangle;4:nand[%s,%s];4:green;4:rectangle;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, apply(same_shape,iota(x.s))), iff[triangle,iff[yellow,nor[triangle,or[size2,green]]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:iff[%s,%s];4:yellow;4:nor[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:green
'λx.apply(not[and[implies[blue,triangle],apply(size-gt,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(filter(filter(x.s, green), triangle), apply(same_size,iota(filter(filter(filter(x.s, circle), yellow), rectangle)))), or[iff[size2,yellow],not[blue]]), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:size2;4:yellow;4:not[%s];4:blue;4:circle
'λx.contains(x.o, filter(x.s, or[size3,triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, triangle), size1), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:circle
'λx.apply(blue,iota(filter(x.s, apply(same_shape,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nor[nor[triangle,size1],or[triangle,yellow]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:nor[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(or[yellow,or[blue,apply(same_shape,iota(x.s))]],iota(filter(x.s, and[circle,and[or[circle,green],and[blue,circle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:and[%s,%s];4:blue;4:circle
'λx.apply(not[size1],iota(filter(filter(x.s, size3), and[size1,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:size2
'λx.apply(size2,iota(filter(x.s, not[apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[circle,and[apply(same_size,iota(x.s)),blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[size3,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(filter(filter(x.s, nor[size3,and[blue,green]]), triangle), yellow), circle), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:and[%s,%s];4:blue;4:green;4:triangle;4:yellow;4:circle;4:rectangle
'λx.apply(nor[circle,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[circle,and[implies[size1,blue],triangle]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:implies[%s,%s];4:size1;4:blue;4:triangle;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, green), nand[nand[triangle,size3],rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:nand[%s,%s];4:triangle;4:size3;4:rectangle
'λx.apply(nor[size2,and[size2,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(iff[and[rectangle,circle],apply(size-lt,iota(filter(filter(x.s, and[rectangle,size2]), and[rectangle,green])))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(size-gt,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[and[not[size3],green],nor[and[or[blue,size1],apply(same_shape,x.o)],triangle]])), filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:green;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[apply(same_size,iota(filter(x.s, triangle))),apply(same_shape,iota(filter(x.s, iff[not[apply(same_size,x.o)],apply(size-lt,iota(x.s))])))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, apply(size-lt,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, rectangle), blue), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:triangle
'λx.apply(and[apply(same_size,x.o),triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, triangle), circle), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:triangle
'λx.apply(nand[yellow,blue],iota(filter(filter(filter(filter(filter(x.s, green), and[size1,size2]), green), nor[not[and[circle,circle]],not[not[or[green,apply(size-lt,x.o)]]]]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size1;4:size2;4:green;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:circle;4:not[%s];4:not[%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue
'λx.apply(and[size2,and[size3,and[size3,size1]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size2), size1), blue), and[or[rectangle,apply(same_size,iota(x.s))],and[and[and[apply(same_shape,iota(x.s)),blue],circle],triangle]]), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:blue;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:circle;4:triangle;4:size3
'λx.empty(filter(filter(filter(x.s, size3), or[size1,apply(same_shape,x.o)]), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), not[size2]), size1), circle), circle), blue), nand[nand[blue,circle],implies[circle,green]]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size2;4:size1;4:circle;4:circle;4:blue;4:nand[%s,%s];4:nand[%s,%s];4:blue;4:circle;4:implies[%s,%s];4:circle;4:green;4:size2
'λx.empty(filter(x.s, or[yellow,or[circle,rectangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(blue,iota(filter(x.s, and[apply(same_shape,x.o),blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[triangle,blue],iota(filter(filter(x.s, and[not[rectangle],triangle]), implies[or[not[size3],triangle],not[or[and[circle,circle],yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:triangle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:yellow
'λx.forall(apply(same_size,iota(filter(filter(x.s, yellow), green))),filter(filter(x.s, triangle), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(or[and[size1,and[apply(same_color,iota(x.s)),rectangle]],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, blue), size3), yellow), or[yellow,and[circle,blue]]), or[not[rectangle],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:yellow;4:or[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:blue;4:or[%s,%s];4:not[%s];4:rectangle;4:circle
'λx.apply(or[size1,or[yellow,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, apply(same_color,iota(x.s))), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(filter(x.s, circle), and[size2,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size2;4:green
'λx.apply(not[apply(same_size,iota(filter(x.s, or[size2,size1])))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(size-geq,x.o),apply(same_color,iota(filter(filter(x.s, size1), apply(same_shape,iota(filter(filter(x.s, and[and[iff[rectangle,circle],triangle],blue]), apply(same_color,x.o)))))))],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:circle;4:triangle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[not[not[triangle]],size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, triangle), size3), circle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:circle;4:size2
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(size-lt,iota(x.s))), and[triangle,blue]), circle), rectangle), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:circle;4:rectangle;4:size1
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, and[size2,green]), or[size3,size2]), not[yellow]), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green;4:or[%s,%s];4:size3;4:size2;4:not[%s];4:yellow;4:green
'λx.apply(yellow,iota(filter(filter(filter(x.s, implies[yellow,blue]), not[circle]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:blue;4:not[%s];4:circle;4:yellow
'λx.apply(not[apply(same_size,iota(x.s))],iota(filter(x.s, apply(same_color,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), not[rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:rectangle
'λx.apply(yellow,iota(filter(filter(x.s, and[apply(same_size,iota(filter(x.s, blue))),size2]), nor[size1,size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:nor[%s,%s];4:size1;4:size1
'λx.exists(or[circle,size1], filter(filter(filter(x.s, size3), size1), not[apply(same_shape,iota(filter(filter(filter(x.s, triangle), circle), size3)))]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:size3
'λx.apply(or[and[green,circle],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, yellow), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(size2,iota(filter(filter(x.s, yellow), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(size1,iota(filter(filter(x.s, yellow), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.contains(iota(x.s), filter(filter(filter(x.s, rectangle), blue), circle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:circle
'λx.apply(size3,iota(filter(filter(x.s, yellow), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(not[apply(size-geq,iota(filter(x.s, and[green,rectangle])))],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[or[triangle,and[size2,blue]],not[not[blue]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:blue;4:not[%s];4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[and[and[green,size2],size3],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[green,apply(same_size,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(filter(filter(filter(filter(x.s, circle), triangle), blue), blue), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:blue;4:blue;4:blue
'λx.exists(nand[triangle,triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(or[size3,not[triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(blue,iota(filter(filter(filter(x.s, rectangle), apply(same_shape,iota(filter(x.s, size3)))), apply(same_size,iota(filter(x.s, green))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(and[size2,apply(same_color,iota(x.s))], filter(filter(filter(x.s, yellow), rectangle), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:circle
'λx.forall(implies[yellow,circle],filter(x.s, apply(size-lt,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:implies[%s,%s];4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[circle,size2]), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:size3
'λx.forall(size2,filter(filter(filter(filter(filter(filter(filter(x.s, green), rectangle), rectangle), size3), rectangle), not[apply(same_shape,x.o)]), or[and[iff[yellow,and[yellow,circle]],nand[triangle,implies[not[size1],yellow]]],blue]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:rectangle;4:size3;4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:circle;4:nand[%s,%s];4:triangle;4:implies[%s,%s];4:not[%s];4:size1;4:yellow;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, not[not[not[green]]]), implies[blue,not[yellow]]), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:not[%s];4:green;4:implies[%s,%s];4:blue;4:not[%s];4:yellow;4:rectangle
'λx.apply(nand[triangle,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[rectangle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, apply(size-gt,iota(filter(x.s, size2)))), and[or[size1,and[iff[circle,blue],triangle]],apply(size-geq,iota(x.s))]), triangle), or[rectangle,and[size2,blue]]), nor[size2,green]), and[blue,nand[apply(same_color,iota(x.s)),size1]]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:iff[%s,%s];4:circle;4:blue;4:triangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:blue;4:nor[%s,%s];4:size2;4:green;4:and[%s,%s];4:blue;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(and[apply(same_color,iota(x.s)),blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(or[yellow,apply(same_shape,iota(filter(x.s, triangle)))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, apply(same_color,x.o)), and[green,size1]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:size1;4:circle
'λx.apply(not[or[and[circle,circle],apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[triangle,triangle],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[triangle,size2]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[size3],iota(filter(filter(x.s, triangle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(size1,iota(filter(filter(x.s, rectangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(implies[green,yellow],iota(filter(filter(filter(x.s, and[rectangle,circle]), rectangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:rectangle;4:yellow
'λx.apply(and[nand[rectangle,size1],apply(same_color,iota(filter(x.s, and[and[or[and[and[size3,not[blue]],yellow],yellow],size3],nor[size3,rectangle]])))],iota(filter(filter(x.s, rectangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:blue;4:yellow;4:yellow;4:size3;4:nor[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(and[circle,or[circle,and[green,not[and[or[apply(same_shape,iota(x.s)),circle],yellow]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:circle;4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,apply(same_color,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, iff[triangle,and[rectangle,size1]]), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:size1;4:green
'λx.apply(not[nor[and[size2,size2],apply(same_shape,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:size2;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(same_size,iota(filter(x.s, and[yellow,not[yellow]]))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:yellow
'λx.apply(and[triangle,and[yellow,apply(same_size,iota(filter(filter(x.s, circle), or[nand[and[circle,nand[blue,or[and[apply(size-lt,x.o),size3],green]]],triangle],triangle])))]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3;4:green;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(nand[circle,triangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[circle,iff[and[or[size3,and[size1,not[rectangle]]],size1],size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:not[%s];4:rectangle;4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), size3), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size3
'λx.exists(and[apply(same_size,x.o),triangle], filter(filter(x.s, apply(size-geq,iota(filter(filter(filter(x.s, size3), iff[size1,not[rectangle]]), yellow)))), or[circle,apply(same_color,iota(x.s))]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:size1;4:not[%s];4:rectangle;4:yellow;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,yellow],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[or[yellow,yellow],size3],iota(filter(filter(filter(filter(x.s, green), size3), and[size3,circle]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:and[%s,%s];4:size3;4:circle;4:circle
'λx.forall(triangle,filter(filter(filter(x.s, and[and[circle,apply(size-lt,iota(x.s))],apply(same_shape,x.o)]), size1), iff[blue,blue]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:iff[%s,%s];4:blue;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, apply(same_color,iota(x.s))), not[circle]), size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:size1
'λx.apply(or[green,blue],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[rectangle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(or[rectangle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[size2,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), yellow), and[yellow,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:and[%s,%s];4:yellow;4:blue
'λx.apply(and[yellow,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, or[blue,size3]), implies[and[rectangle,size3],size1]), implies[nand[triangle,apply(same_size,iota(x.s))],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size3;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:size1;4:implies[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green
'λx.forall(rectangle,filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(x.s, apply(same_shape,iota(filter(filter(x.s, size2), triangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(and[triangle,green],iota(filter(filter(filter(x.s, green), circle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size2
'λx.apply(implies[size3,apply(same_color,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size2,circle],apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[size1,yellow],iota(filter(x.s, not[not[size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3
'λx.forall(and[and[triangle,yellow],size3],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:size3;3:%s.s;2:x
'λx.apply(nor[size2,green],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(size-lt,iota(x.s)),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, blue), rectangle), iff[or[blue,or[green,triangle]],size3]), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:iff[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:triangle;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, or[triangle,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:triangle
'λx.apply(and[or[or[and[and[size2,or[size1,circle]],size3],yellow],triangle],and[size3,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:circle;4:size3;4:yellow;4:triangle;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, size3), or[nand[triangle,not[apply(size-gt,x.o)]],size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:nand[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.apply(and[size2,and[circle,size2]],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[and[yellow,circle],size2],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[blue,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(and[blue,apply(same_shape,x.o)],filter(filter(x.s, size1), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(nor[circle,not[blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, and[circle,not[not[apply(same_shape,iota(filter(filter(filter(filter(filter(x.s, blue), and[circle,green]), and[not[rectangle],not[size2]]), green), size1)))]]]), not[size1]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size2;4:green;4:size1;4:not[%s];4:size1
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[not[yellow]]), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:yellow;4:blue
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(green,filter(filter(x.s, size3), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.exists(apply(same_shape,iota(filter(x.s, size1))), filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(and[nand[rectangle,circle],triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:circle;4:triangle;3:%s.s;2:x
'λx.exists(blue, filter(filter(filter(x.s, size3), rectangle), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:size2
'λx.apply(not[and[apply(same_shape,iota(x.s)),triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[and[and[nand[circle,size2],blue],triangle],triangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:size2;4:blue;4:triangle;4:triangle
'λx.apply(and[implies[size2,and[triangle,size3]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size3;4:size1;1:%s.o;2:x
'λx.exists(size1, filter(filter(filter(x.s, blue), blue), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size3
'λx.empty(filter(filter(x.s, and[yellow,blue]), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:triangle
'λx.empty(filter(filter(x.s, triangle), and[rectangle,iff[size2,rectangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:size2;4:rectangle
'λx.forall(size3,filter(filter(x.s, blue), not[green]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:green
'λx.apply(apply(size-leq,x.o),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(triangle,iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(not[and[size2,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, size1))),iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, size3), green), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:size2
'λx.forall(blue,filter(x.s, and[or[rectangle,and[and[apply(same_size,iota(x.s)),triangle],size2]],yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:size2;4:yellow
'λx.apply(not[nor[or[green,iff[size1,triangle]],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:green;4:iff[%s,%s];4:size1;4:triangle;4:yellow;1:%s.o;2:x
'λx.exists(or[blue,apply(same_size,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, or[blue,triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, and[implies[size3,implies[or[green,green],green]],nand[blue,not[blue]]]), iff[apply(size-geq,x.o),size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size3;4:implies[%s,%s];4:or[%s,%s];4:green;4:green;4:green;4:nand[%s,%s];4:blue;4:not[%s];4:blue;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(x.s, size3), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.empty(filter(filter(x.s, size1), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(or[green,not[apply(same_size,iota(filter(filter(x.s, size2), apply(same_shape,iota(filter(x.s, triangle))))))]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,or[yellow,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nand[circle,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(filter(filter(x.s, triangle), blue), and[rectangle,nor[apply(same_shape,iota(x.s)),blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, blue), or[yellow,yellow]), size2), size3), implies[and[size1,circle],not[not[or[yellow,blue]]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:yellow;4:yellow;4:size2;4:size3;4:implies[%s,%s];4:and[%s,%s];4:size1;4:circle;4:not[%s];4:not[%s];4:or[%s,%s];4:yellow;4:blue
'λx.apply(nand[triangle,green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, green), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(and[triangle,circle],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(blue, filter(filter(x.s, size2), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(not[blue],iota(filter(x.s, and[nor[circle,triangle],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:circle;4:triangle;4:size2
'λx.forall(or[blue,size2],filter(filter(x.s, circle), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(and[circle,and[size3,size1]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[blue,and[circle,triangle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, iff[nand[triangle,size1],blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:triangle;4:size1;4:blue
'λx.empty(filter(filter(filter(x.s, size3), triangle), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:green
'λx.apply(iff[size1,size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, green), size1))),iota(filter(filter(filter(filter(filter(x.s, circle), size2), size1), size2), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size1;4:size2;4:triangle
'λx.apply(and[size1,not[triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[yellow,circle]],iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[size3,implies[size1,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:implies[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, implies[and[size2,size2],size1]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, green), size3), or[apply(same_color,x.o),and[nand[and[circle,size1],and[and[blue,size2],rectangle]],not[size2]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:size1;4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:rectangle;4:not[%s];4:size2
'λx.apply(nand[yellow,size2],iota(filter(x.s, and[green,and[green,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:green
'λx.exists(or[size1,implies[size2,circle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(and[size2,apply(same_shape,iota(filter(filter(x.s, size2), green)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, yellow), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(not[iff[triangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, not[or[and[yellow,or[nor[size2,nor[blue,triangle]],rectangle]],or[triangle,not[size3]]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:nor[%s,%s];4:size2;4:nor[%s,%s];4:blue;4:triangle;4:rectangle;4:or[%s,%s];4:triangle;4:not[%s];4:size3
'λx.apply(rectangle,iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[green,and[triangle,green]],iota(filter(filter(filter(filter(x.s, yellow), apply(same_color,iota(filter(x.s, not[blue])))), green), and[rectangle,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:green;4:and[%s,%s];4:rectangle;4:rectangle
'λx.exists(blue, filter(x.s, size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(blue, filter(x.s, size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(blue, filter(x.s, size1))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[blue,or[circle,size3]],iota(filter(x.s, and[or[yellow,green],or[or[and[not[size3],and[or[size2,apply(same_size,iota(x.s))],triangle]],yellow],nand[apply(same_size,x.o),circle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:yellow;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(and[yellow,not[not[circle]]],iota(filter(filter(x.s, triangle), or[and[and[not[rectangle],not[circle]],yellow],not[yellow]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:circle;4:yellow;4:not[%s];4:yellow
'λx.apply(or[not[size1],rectangle],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nand[size2,apply(size-lt,iota(filter(x.s, apply(same_shape,x.o))))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[yellow,or[size3,size3]],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, size1)))), size3), circle), apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(or[size1,circle],filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[yellow,not[nor[size2,apply(same_size,x.o)]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[circle,or[apply(same_size,iota(x.s)),and[size3,size3]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3
'λx.contains(iota(x.s), filter(x.s, apply(size-geq,iota(filter(x.s, size3)))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[circle,and[rectangle,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nor[size3,apply(size-lt,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[iff[size3,circle],size3],iota(filter(filter(filter(filter(x.s, rectangle), or[size2,blue]), green), and[apply(same_shape,x.o),blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size3;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size2;4:blue;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(not[or[blue,or[not[or[circle,rectangle]],and[size2,triangle]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(nor[iff[size1,yellow],and[green,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.forall(and[or[size2,rectangle],rectangle],filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[and[size3,size2],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:size2;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, yellow), nand[blue,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:blue;4:triangle
'λx.apply(not[triangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(x.s, and[and[size1,and[blue,implies[green,green]]],and[size1,and[circle,size1]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:implies[%s,%s];4:green;4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size1
'λx.apply(and[apply(size-gt,x.o),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, and[and[green,or[yellow,circle]],yellow]), and[blue,green]))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:yellow;4:circle;4:yellow;4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[not[yellow],apply(same_size,x.o)])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_color,iota(filter(x.s, blue)))), and[rectangle,green]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:rectangle;4:green
'λx.apply(triangle,iota(filter(x.s, iff[apply(same_shape,x.o),circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(implies[apply(size-gt,x.o),size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(same_color,iota(x.s))), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(implies[circle,or[not[size2],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, size2), and[triangle,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(x.s, rectangle), circle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:triangle
'λx.forall(green,filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(x.s, or[yellow,or[green,green]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:green;4:green;3:%s.s;2:x
'λx.apply(implies[circle,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, nand[and[size1,size1],and[or[size1,green],apply(same_color,iota(x.s))]]), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, apply(size-geq,x.o)), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:triangle
'λx.apply(and[and[triangle,size3],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:yellow;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, or[and[size2,not[yellow]],apply(same_shape,x.o)]), or[size3,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size3;4:circle
'λx.apply(or[nand[triangle,rectangle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:rectangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), and[size1,or[yellow,and[yellow,size2]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size2
'λx.apply(size3,iota(filter(filter(filter(x.s, rectangle), and[rectangle,and[not[yellow],size3]]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:yellow;4:size3;4:blue
'λx.forall(and[size1,or[green,circle]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.apply(or[green,rectangle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[apply(same_color,x.o),and[not[size2],size1]],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nor[circle,or[and[size3,apply(same_size,iota(x.s))],nor[and[green,triangle],rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:green;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[not[apply(same_color,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[or[or[rectangle,size1],triangle],rectangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:triangle;4:rectangle;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[triangle,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow
'λx.apply(iff[and[apply(same_color,x.o),nand[apply(same_color,x.o),circle]],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, not[size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(nand[rectangle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nand[rectangle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,apply(same_size,iota(filter(filter(x.s, size1), circle)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(and[rectangle,yellow], filter(filter(x.s, blue), green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.forall(or[circle,yellow],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[yellow,and[and[apply(same_size,iota(filter(x.s, size2))),rectangle],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, blue), circle), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:blue
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(x.s, implies[circle,circle]), or[and[blue,rectangle],size3]), triangle), blue))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:circle;4:or[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:size3;4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[or[yellow,green],yellow],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:yellow;3:%s.s;2:x
'λx.forall(and[blue,size1],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.forall(and[blue,size2],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(filter(filter(filter(filter(x.s, or[apply(same_shape,x.o),and[green,blue]]), size2), or[not[triangle],circle]), not[apply(same_shape,x.o)]))),and[triangle,size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:blue;4:size2;4:or[%s,%s];4:not[%s];4:triangle;4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[circle,yellow]), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:green
'λx.apply(apply(same_color,x.o),iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, size1), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.empty(filter(filter(x.s, size1), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.empty(filter(filter(x.s, size1), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.empty(filter(filter(x.s, size2), size3))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.empty(filter(filter(x.s, size3), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.empty(filter(filter(x.s, size2), green))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(and[size1,yellow],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, and[triangle,iff[yellow,circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:iff[%s,%s];4:yellow;4:circle
'λx.apply(green,iota(filter(filter(filter(filter(filter(filter(x.s, iff[blue,size2]), and[circle,triangle]), green), size2), size2), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:size2;4:and[%s,%s];4:circle;4:triangle;4:green;4:size2;4:size2;4:circle
'λx.apply(not[not[blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, size3), not[not[and[or[or[green,apply(same_shape,x.o)],rectangle],and[not[blue],and[size1,rectangle]]]]]), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:size1;4:rectangle;4:triangle
'λx.empty(filter(filter(filter(filter(filter(x.s, blue), rectangle), and[rectangle,or[not[and[and[green,triangle],implies[green,size1]]],and[and[circle,blue],triangle]]]), size3), and[apply(same_size,iota(filter(filter(filter(filter(filter(x.s, size3), size3), size2), not[triangle]), blue))),iff[size3,size3]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:implies[%s,%s];4:green;4:size1;4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:triangle;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:size2;4:not[%s];4:triangle;4:blue;4:iff[%s,%s];4:size3;4:size3
'λx.apply(implies[or[size1,blue],nand[circle,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size1;4:blue;4:nand[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[green,not[green]],size3],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(yellow,iota(filter(filter(x.s, green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(or[size1,and[and[rectangle,apply(size-lt,iota(filter(x.s, and[and[apply(same_shape,iota(x.s)),size2],apply(same_shape,x.o)])))],not[or[not[and[and[green,green],rectangle]],and[yellow,triangle]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:rectangle;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[green,or[size2,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, and[size3,size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3
'λx.apply(and[and[not[size2],apply(same_size,x.o)],and[size2,green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[or[apply(same_size,iota(x.s)),and[size2,size3]],apply(same_color,x.o)],nand[rectangle,not[triangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, iff[triangle,or[green,green]]), nand[or[and[size2,rectangle],and[or[implies[blue,size1],blue],not[size2]]],rectangle]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:or[%s,%s];4:green;4:green;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:blue;4:size1;4:blue;4:not[%s];4:size2;4:rectangle;4:size1
'λx.exists(not[and[green,blue]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(iff[green,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.exists(not[circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:circle;3:%s.s;2:x
'λx.forall(triangle,filter(x.s, and[implies[size1,green],green]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size1;4:green;4:green
'λx.apply(size2,iota(filter(x.s, not[not[or[apply(same_shape,iota(filter(filter(x.s, size1), size3))),size1]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:size1
'λx.apply(and[rectangle,or[blue,or[nand[or[green,or[green,size1]],circle],and[blue,rectangle]]]],iota(filter(x.s, or[rectangle,apply(same_size,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:green;4:size1;4:circle;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[circle,or[size3,apply(size-geq,x.o)]],rectangle],iota(filter(x.s, apply(size-geq,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, iff[blue,yellow]), size3), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:yellow;4:size3;4:green
'λx.apply(size2,iota(filter(x.s, not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(size1,iota(filter(x.s, not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(and[and[green,yellow],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(filter(filter(x.s, size2), triangle))),not[circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(circle,iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, and[rectangle,size3]), size2), not[and[size2,triangle]]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;4:size2;4:not[%s];4:and[%s,%s];4:size2;4:triangle;4:circle
'λx.contains(x.o, filter(filter(x.s, rectangle), and[green,or[and[green,apply(size-geq,iota(x.s))],rectangle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[circle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(size2,filter(x.s, and[not[and[not[apply(same_size,iota(filter(filter(filter(x.s, and[or[rectangle,blue],size1]), size2), size2)))],and[or[size3,apply(same_shape,x.o)],not[not[and[blue,nand[and[size2,size1],triangle]]]]]]],and[and[size1,size1],implies[size1,size1]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:size1;4:size2;4:size2;4:and[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:nand[%s,%s];4:and[%s,%s];4:size2;4:size1;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:implies[%s,%s];4:size1;4:size1
'λx.apply(and[nor[size1,circle],not[yellow]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size1;4:circle;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, yellow), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.empty(filter(filter(filter(filter(x.s, and[blue,size1]), apply(same_shape,iota(filter(x.s, yellow)))), and[size1,size3]), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size1;4:size3;4:size2
'λx.apply(apply(same_color,x.o),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[circle,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(not[and[circle,size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.forall(not[and[circle,implies[and[apply(same_size,iota(filter(x.s, nor[not[not[circle]],and[green,and[size1,size3]]]))),size1],implies[or[rectangle,circle],yellow]]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:not[%s];4:circle;4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:size3;4:size1;4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:yellow;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, and[size3,rectangle]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;4:blue
'λx.apply(and[triangle,rectangle],iota(filter(filter(filter(x.s, or[green,size1]), size1), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size1;4:size1;4:size3
'λx.forall(and[rectangle,size2],filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[rectangle,apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(apply(size-geq,iota(x.s)), filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[not[nor[apply(same_size,iota(x.s)),circle]],apply(same_color,iota(filter(x.s, blue)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,size3],iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(apply(same_color,iota(x.s)), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(nor[and[size3,and[circle,size2]],nand[green,implies[nand[size3,or[and[or[or[green,green],green],green],blue]],triangle]]],iota(filter(x.s, or[triangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size2;4:nand[%s,%s];4:green;4:implies[%s,%s];4:nand[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:green;4:green;4:green;4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2
'λx.forall(not[apply(size-gt,x.o)],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, implies[rectangle,or[or[size1,or[and[green,triangle],yellow]],yellow]]), size1), or[or[or[rectangle,size2],and[and[size3,apply(same_shape,iota(x.s))],green]],apply(same_color,x.o)]), apply(size-gt,iota(x.s))), triangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:yellow;4:yellow;4:size1;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.contains(iota(filter(x.s, size2)), filter(filter(x.s, size3), apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, yellow), not[green]), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:green;4:green
'λx.apply(and[blue,nand[yellow,and[yellow,green]]],iota(filter(filter(x.s, and[size3,blue]), nand[blue,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;4:nand[%s,%s];4:blue;4:circle
'λx.apply(and[size3,blue],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, apply(same_color,iota(x.s))), circle), nand[nand[blue,blue],apply(same_color,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[size1,blue],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, blue), blue), triangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[circle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(nor[circle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, green), circle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size1
'λx.apply(and[size1,implies[size3,blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:implies[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,size3],iota(filter(filter(filter(filter(x.s, yellow), yellow), yellow), and[green,apply(same_color,iota(x.s))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:yellow;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[or[green,or[or[and[nand[yellow,yellow],implies[size2,circle]],size3],and[size1,apply(same_size,iota(filter(filter(x.s, size2), and[size1,size2])))]]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:yellow;4:yellow;4:implies[%s,%s];4:size2;4:circle;4:size3;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size1;4:size2;4:size1;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(filter(x.s, implies[size2,apply(size-geq,x.o)]), and[size2,blue]), or[blue,circle]), nand[yellow,yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:size2;4:blue;4:or[%s,%s];4:blue;4:circle;4:nand[%s,%s];4:yellow;4:yellow
'λx.apply(not[green],iota(filter(x.s, not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(yellow,iota(filter(filter(x.s, blue), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.empty(filter(filter(x.s, triangle), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[apply(same_size,x.o),blue],iota(filter(x.s, nor[nor[blue,and[size3,or[implies[yellow,and[blue,yellow]],yellow]]],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:size3;4:or[%s,%s];4:implies[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:yellow;4:yellow;4:green
'λx.apply(green,iota(filter(x.s, not[yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(nand[size3,implies[or[green,circle],triangle]],iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:implies[%s,%s];4:or[%s,%s];4:green;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[nor[green,rectangle]],iota(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, apply(same_color,x.o)), size1)))), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2
'λx.apply(blue,iota(filter(filter(filter(x.s, and[and[rectangle,rectangle],yellow]), yellow), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:yellow;4:yellow;4:rectangle
'λx.apply(and[blue,blue],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(blue, filter(filter(filter(filter(filter(x.s, and[and[apply(same_shape,iota(filter(x.s, rectangle))),or[or[yellow,size1],nand[triangle,apply(size-leq,x.o)]]],yellow]), and[triangle,yellow]), yellow), yellow), size2))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:triangle;4:yellow;4:yellow;4:yellow;4:size2
'λx.apply(or[not[size2],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, yellow), circle), blue))),iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(filter(x.s, size2))),and[rectangle,or[and[circle,and[implies[yellow,rectangle],or[triangle,green]]],circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:triangle;4:green;4:circle;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(x.s, implies[size3,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:rectangle
'λx.empty(filter(filter(x.s, apply(size-gt,x.o)), size1))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.contains(iota(x.s), filter(x.s, and[and[apply(size-geq,iota(x.s)),not[size3]],blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;4:blue
'λx.apply(nor[and[size1,apply(same_shape,iota(x.s))],triangle],iota(filter(x.s, not[rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.exists(or[size2,circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(or[triangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(not[or[iff[yellow,size1],circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:yellow;4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, and[circle,rectangle]), implies[circle,triangle]), circle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:implies[%s,%s];4:circle;4:triangle;4:circle;4:rectangle
'λx.apply(and[and[size2,or[and[size2,green],size3]],apply(size-geq,iota(x.s))],iota(filter(filter(filter(x.s, size1), triangle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:triangle
'λx.exists(yellow, filter(filter(filter(x.s, size2), blue), circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, circle), and[yellow,rectangle]), and[size3,rectangle]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size3;4:rectangle
'λx.apply(implies[rectangle,implies[circle,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:implies[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(or[and[rectangle,apply(same_shape,iota(x.s))],nor[apply(size-leq,iota(filter(filter(x.s, rectangle), and[not[size2],apply(size-gt,iota(filter(filter(x.s, rectangle), triangle)))]))),circle]], filter(filter(x.s, apply(size-gt,iota(x.s))), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[circle,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), nor[circle,nor[apply(same_shape,x.o),and[and[and[green,apply(same_color,x.o)],yellow],green]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:green
'λx.apply(size3,iota(filter(filter(x.s, triangle), and[and[circle,yellow],size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:size3
'λx.apply(or[circle,and[nor[size3,size3],and[not[size1],rectangle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:nor[%s,%s];4:size3;4:size3;4:and[%s,%s];4:not[%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[apply(same_color,x.o)], filter(x.s, apply(same_shape,iota(x.s))))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, apply(size-gt,x.o))), filter(filter(filter(filter(filter(filter(filter(x.s, size2), apply(size-gt,iota(filter(x.s, triangle)))), size1), size3), circle), and[nand[apply(same_size,iota(x.s)),not[size3]],apply(same_color,x.o)]), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size3;4:circle;4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.contains(iota(filter(filter(x.s, circle), size3)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;3:%s.s;2:x
'λx.apply(not[not[or[triangle,rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(or[size1,circle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(and[size2,blue],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[size2,blue],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, and[green,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(and[yellow,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, green), size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(implies[triangle,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,nand[green,and[size3,size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:nand[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[nor[size2,and[size2,rectangle]],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:size2;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,apply(same_shape,iota(filter(x.s, blue)))],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, green), rectangle), apply(same_size,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(filter(filter(x.s, size2), circle), yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:yellow
'λx.forall(nand[size3,rectangle],filter(filter(x.s, rectangle), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(and[size3,and[green,triangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, size2))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(or[yellow,triangle],iota(filter(x.s, and[or[or[not[circle],and[nor[circle,and[or[size1,not[apply(same_color,iota(x.s))]],triangle]],size2]],triangle],apply(same_color,iota(filter(filter(x.s, or[size3,size1]), size1)))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:size2;4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size1;4:size1
'λx.apply(apply(size-gt,iota(filter(x.s, size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[and[not[circle],and[rectangle,circle]],triangle],iota(filter(filter(x.s, size2), nand[size3,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:rectangle;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:size3;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), size2), and[yellow,green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:and[%s,%s];4:yellow;4:green
'λx.apply(not[blue],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), or[rectangle,yellow]), rectangle), triangle), and[implies[size2,triangle],blue]), yellow), implies[rectangle,yellow]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:rectangle;4:yellow;4:rectangle;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:size2;4:triangle;4:blue;4:yellow;4:implies[%s,%s];4:rectangle;4:yellow;4:triangle
'λx.forall(apply(same_size,iota(filter(x.s, nor[triangle,size1]))),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size1), and[size1,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[triangle,rectangle],iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[not[not[apply(same_size,x.o)]]],iota(filter(filter(x.s, yellow), not[size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size3
'λx.forall(or[apply(size-geq,x.o),green],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.exists(and[blue,or[apply(same_shape,x.o),circle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size3), apply(size-geq,iota(filter(filter(filter(filter(filter(filter(x.s, size1), yellow), rectangle), size3), circle), size1)))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:rectangle;4:size3;4:circle;4:size1
'λx.apply(implies[yellow,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[green,circle],iota(filter(filter(x.s, and[and[blue,yellow],circle]), or[apply(same_shape,iota(filter(filter(x.s, blue), or[or[and[implies[and[triangle,nor[circle,size3]],size1],and[size1,size1]],rectangle],rectangle]))),implies[green,triangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:circle;4:size3;4:size1;4:and[%s,%s];4:size1;4:size1;4:rectangle;4:rectangle;4:implies[%s,%s];4:green;4:triangle
'λx.apply(size3,iota(filter(filter(filter(x.s, size2), iff[and[size1,size2],not[blue]]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:and[%s,%s];4:size1;4:size2;4:not[%s];4:blue;4:size3
'λx.apply(size3,iota(filter(filter(x.s, and[and[and[triangle,nand[size3,not[green]]],circle],and[rectangle,triangle]]), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size3;4:not[%s];4:green;4:circle;4:and[%s,%s];4:rectangle;4:triangle;4:rectangle
'λx.forall(blue,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:%s.s;2:x
'λx.forall(and[size1,yellow],filter(x.s, not[size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(or[size1,apply(same_color,iota(filter(filter(x.s, blue), blue)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.exists(iff[and[rectangle,and[rectangle,or[blue,size1]]],yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size1;4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, blue), size3), triangle), size3), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:triangle;4:size3;4:size3
'λx.empty(filter(filter(x.s, blue), triangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.exists(nand[size1,not[and[apply(same_shape,iota(x.s)),size1]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(implies[or[and[yellow,size3],yellow],size1],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, or[apply(same_color,x.o),green]), apply(same_color,iota(x.s))), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(not[size3],iota(filter(filter(filter(x.s, blue), blue), nand[apply(same_shape,iota(x.s)),apply(same_size,iota(filter(filter(filter(filter(x.s, size3), yellow), implies[blue,and[and[nand[rectangle,and[green,or[size1,triangle]]],rectangle],blue]]), or[not[triangle],size1])))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:implies[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:triangle;4:rectangle;4:blue;4:or[%s,%s];4:not[%s];4:triangle;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), rectangle), and[size1,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:and[%s,%s];4:size1;4:size2
'λx.apply(and[size3,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),nand[yellow,or[size2,size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(nor[and[blue,and[yellow,size2]],and[rectangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(x.s, and[rectangle,circle]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(nand[rectangle,apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[green,apply(same_size,x.o)],iota(filter(filter(filter(filter(x.s, size1), or[iff[and[blue,size1],size1],nand[size1,yellow]]), green), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size1;4:nand[%s,%s];4:size1;4:yellow;4:green;4:size2
'λx.empty(filter(filter(filter(x.s, size3), not[blue]), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue;4:circle
'λx.apply(circle,iota(filter(filter(x.s, blue), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(circle,iota(filter(filter(x.s, blue), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(circle,iota(filter(filter(x.s, blue), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(or[and[triangle,and[blue,yellow]],green],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), nand[yellow,size3]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:yellow;4:size3
'λx.apply(and[yellow,not[not[blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[circle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle
'λx.forall(and[yellow,circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(or[green,yellow],iota(filter(x.s, and[and[nand[blue,apply(same_size,iota(x.s))],triangle],circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:circle
'λx.exists(and[circle,blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, nor[green,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:size2
'λx.apply(and[size1,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_shape,iota(filter(x.s, size2))),filter(x.s, iff[circle,or[circle,circle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:or[%s,%s];4:circle;4:circle
'λx.forall(apply(same_color,iota(x.s)),filter(x.s, and[size2,triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(and[not[apply(same_size,iota(x.s))],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[apply(same_size,iota(x.s))],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size2,and[apply(size-lt,iota(x.s)),and[implies[size1,apply(same_color,x.o)],yellow]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(and[or[triangle,size1],nor[and[circle,triangle],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:nor[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(implies[blue,size1], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:implies[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(not[or[yellow,and[size3,and[size2,rectangle]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[rectangle,blue])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(apply(same_size,x.o),filter(x.s, green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), apply(same_shape,iota(x.s))), nand[yellow,nor[rectangle,circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:nor[%s,%s];4:rectangle;4:circle
'λx.exists(not[and[and[size2,circle],and[size2,green]]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.apply(and[size2,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(x.s, size2), yellow), apply(size-lt,x.o)), blue), green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;4:green;4:blue
'λx.forall(size3,filter(x.s, or[or[apply(same_color,iota(x.s)),circle],yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:yellow
'λx.exists(or[circle,yellow], filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, and[and[yellow,and[or[size2,and[and[circle,rectangle],size3]],circle]],yellow]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:size3;4:circle;4:yellow;4:triangle
'λx.forall(or[size1,triangle],filter(filter(x.s, rectangle), apply(same_size,iota(x.s))))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size1;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[apply(same_size,iota(x.s)),circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(or[size2,circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(nand[green,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[green,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(or[nand[and[not[yellow],or[not[and[size2,iff[size1,apply(same_shape,x.o)]]],and[green,rectangle]]],and[size3,circle]],and[apply(size-geq,x.o),size3]],filter(filter(filter(x.s, circle), apply(size-leq,iota(x.s))), rectangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(x.s, size3), size2), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:size3
'λx.forall(iff[rectangle,not[apply(same_shape,iota(filter(filter(x.s, size2), and[and[or[green,size1],apply(same_size,x.o)],triangle])))]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(nor[yellow,apply(size-geq,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[and[size1,triangle],size3], filter(x.s, blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, yellow), and[rectangle,nand[yellow,rectangle]]), yellow), and[and[rectangle,or[or[or[triangle,green],size3],size1]],size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:yellow;4:rectangle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:green;4:size3;4:size1;4:size1
'λx.forall(size3,filter(filter(x.s, or[apply(size-gt,iota(x.s)),or[and[and[circle,triangle],size3],triangle]]), nor[size3,triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size3;4:triangle;4:nor[%s,%s];4:size3;4:triangle
'λx.apply(or[triangle,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, green), triangle), not[circle]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:not[%s];4:circle;4:size2
'λx.apply(implies[or[and[and[triangle,not[triangle]],not[triangle]],green],or[nand[not[and[apply(same_size,iota(x.s)),triangle]],size1],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:triangle;4:not[%s];4:triangle;4:green;4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[circle,size3],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[size2,size2],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:circle;1:%s.o;2:x
'λx.exists(or[blue,iff[circle,rectangle]], filter(x.s, not[or[triangle,apply(same_size,iota(x.s))]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_color,iota(x.s)), filter(filter(filter(x.s, size2), size3), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size3
'λx.apply(size3,iota(filter(filter(x.s, yellow), not[and[and[circle,green],apply(same_shape,iota(x.s))]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[and[or[not[triangle],rectangle],not[circle]],size3],yellow],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:rectangle;4:not[%s];4:circle;4:size3;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size2,apply(same_shape,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, apply(size-geq,iota(filter(x.s, implies[size1,blue])))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:blue
'λx.apply(and[circle,size3],iota(filter(filter(filter(x.s, green), yellow), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1
'λx.apply(nor[circle,or[blue,rectangle]],iota(filter(filter(x.s, yellow), or[green,not[implies[rectangle,blue]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:green;4:not[%s];4:implies[%s,%s];4:rectangle;4:blue
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size3), and[and[size3,green],not[green]]), and[blue,rectangle]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:not[%s];4:green;4:and[%s,%s];4:blue;4:rectangle;4:size1
'λx.apply(or[or[nor[rectangle,triangle],or[blue,circle]],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, triangle), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, triangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(size2,iota(filter(filter(x.s, triangle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(size3,iota(filter(filter(x.s, triangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(size3,iota(filter(filter(x.s, triangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(size1,iota(filter(filter(x.s, triangle), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(and[or[triangle,size3],apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[and[triangle,and[blue,size1]],rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, green))),iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), rectangle), and[size2,and[implies[circle,triangle],size2]]), and[size1,apply(same_shape,x.o)]), yellow), not[green]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:circle;4:triangle;4:size2;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:not[%s];4:green;4:size2
'λx.forall(and[and[circle,blue],and[green,green]],filter(x.s, and[size3,and[size2,green]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:green;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:green
'λx.apply(or[iff[apply(same_size,iota(x.s)),rectangle],and[circle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[size2,size2],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(rectangle,filter(filter(x.s, nand[rectangle,not[size2]]), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:size2;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, size3), and[iff[apply(same_size,x.o),apply(same_size,x.o)],or[apply(same_size,iota(x.s)),size2]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.exists(circle, filter(filter(x.s, nand[size1,rectangle]), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:rectangle;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, size3), size2), green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:green
'λx.forall(green,filter(filter(filter(x.s, apply(same_color,iota(x.s))), size2), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:yellow
'λx.exists(size3, filter(filter(x.s, or[and[apply(same_size,x.o),and[and[triangle,nor[yellow,rectangle]],size3]],size2]), or[size3,triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:yellow;4:rectangle;4:size3;4:size2;4:or[%s,%s];4:size3;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, size2), rectangle), nand[rectangle,green]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:nand[%s,%s];4:rectangle;4:green
'λx.forall(size3,filter(filter(filter(x.s, size3), circle), or[size1,triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:or[%s,%s];4:size1;4:triangle
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, yellow), rectangle), and[nor[blue,not[apply(same_size,iota(filter(filter(x.s, blue), not[circle])))]],circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:circle;4:circle
'λx.exists(and[and[yellow,green],size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3;3:%s.s;2:x
'λx.forall(size2,filter(x.s, and[or[size3,size3],and[and[size1,triangle],nand[triangle,size1]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:nand[%s,%s];4:triangle;4:size1
'λx.apply(not[green],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[green],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[green],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[green,or[not[circle],green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(and[size1,nor[green,blue]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, blue), rectangle), apply(same_color,iota(x.s)))), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[green]), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size3
'λx.forall(or[rectangle,triangle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, triangle), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.forall(rectangle,filter(x.s, blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[rectangle,nand[apply(same_color,x.o),circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[and[or[circle,circle],yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[size1,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, not[not[rectangle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle
'λx.apply(and[nand[size1,size1],and[apply(size-geq,x.o),or[or[apply(same_shape,x.o),size1],rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size1;4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),apply(size-gt,x.o)],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, size1), triangle)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;3:%s.s;2:x
'λx.apply(or[iff[blue,size2],and[size1,or[rectangle,or[blue,size3]]]],iota(filter(filter(filter(filter(x.s, apply(size-geq,iota(filter(x.s, triangle)))), green), yellow), not[nand[size2,and[not[apply(same_size,x.o)],yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:size2;4:and[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:yellow;4:not[%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(not[and[apply(same_shape,x.o),size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.contains(iota(filter(filter(x.s, apply(same_shape,iota(x.s))), and[green,and[circle,triangle]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:triangle;3:%s.s;2:x
'λx.exists(apply(same_size,iota(filter(filter(x.s, or[rectangle,size2]), triangle))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2;4:triangle;3:%s.s;2:x
'λx.apply(and[size2,or[and[green,size2],nor[or[rectangle,circle],rectangle]]],iota(filter(filter(filter(filter(x.s, blue), and[triangle,blue]), green), and[and[not[yellow],blue],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:green;4:size2;4:nor[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:blue;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:blue;4:yellow
'λx.apply(and[nand[circle,or[size2,apply(same_color,iota(x.s))]],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size2), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(not[size1],iota(filter(filter(x.s, triangle), or[size1,and[blue,green]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size1;4:and[%s,%s];4:blue;4:green
'λx.exists(circle, filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(or[circle,size2], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.exists(or[circle,size3], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, not[green]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size1
'λx.forall(and[yellow,or[rectangle,apply(same_size,x.o)]],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[or[and[yellow,size3],triangle],and[implies[triangle,rectangle],green]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[apply(size-geq,iota(x.s)),size3],not[size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[yellow,apply(same_shape,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), and[size1,size3]), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:size3;4:circle
'λx.apply(or[green,apply(same_color,iota(filter(filter(filter(x.s, circle), blue), green)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:green;1:%s.o;2:x
'λx.apply(and[blue,not[or[circle,green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(and[and[size3,not[size3]],and[and[green,iff[green,yellow]],nor[size1,size3]]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:green;4:yellow;4:nor[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[nand[circle,yellow],size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, rectangle), size2), blue), yellow), size1), apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:blue;4:yellow;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[not[and[apply(same_shape,iota(filter(x.s, and[green,size1]))),and[apply(same_color,x.o),and[iff[rectangle,size3],iff[and[green,nand[yellow,size2]],rectangle]]]]],rectangle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:iff[%s,%s];4:and[%s,%s];4:green;4:nand[%s,%s];4:yellow;4:size2;4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[triangle,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, nor[apply(same_color,iota(filter(filter(filter(filter(x.s, triangle), size2), blue), size3))),or[triangle,rectangle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:blue;4:size3;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(and[and[not[triangle],and[and[triangle,size1],blue]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:blue;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size3), size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;1:%s.o;2:x
'λx.exists(and[size2,triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, and[triangle,or[blue,size3]]), circle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:size3;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[nand[or[size2,and[nor[apply(same_shape,iota(x.s)),circle],and[and[rectangle,or[size3,not[yellow]]],and[rectangle,circle]]]],and[size3,blue]],and[size3,blue]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:not[%s];4:yellow;4:and[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:size3;4:blue;4:and[%s,%s];4:size3;4:blue
'λx.apply(and[size2,rectangle],iota(filter(x.s, or[and[green,not[blue]],triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:blue;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, blue), and[apply(size-leq,iota(filter(x.s, triangle))),circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(and[rectangle,size1],iota(filter(x.s, and[implies[size1,nor[size3,size2]],rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size1;4:nor[%s,%s];4:size3;4:size2;4:rectangle
'λx.exists(blue, filter(x.s, and[and[blue,green],nor[apply(same_color,x.o),and[blue,triangle]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(and[green,not[blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[green,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.forall(green,filter(filter(filter(x.s, yellow), circle), triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:triangle
'λx.apply(and[or[rectangle,blue],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_size,x.o), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(size-gt,iota(x.s)),iota(filter(x.s, and[implies[size1,rectangle],and[and[size3,and[rectangle,circle]],size3]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size1;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:circle;4:size3
'λx.apply(and[size2,and[apply(same_color,iota(x.s)),iff[or[not[and[rectangle,blue]],size3],triangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:blue;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(iff[iff[nor[size3,size3],and[rectangle,size3]],and[and[blue,and[circle,yellow]],size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:size3;4:size3;4:and[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.exists(or[and[blue,blue],yellow], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:yellow;3:%s.s;2:x
'λx.apply(or[nand[yellow,size3],not[size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:yellow;4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.forall(nor[green,green],filter(x.s, size2))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:green;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[or[circle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.exists(or[size3,apply(same_color,iota(filter(x.s, or[blue,yellow])))], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, yellow), circle), size1), iff[or[and[triangle,circle],yellow],not[size1]]), blue)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:size1;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:yellow;4:not[%s];4:size1;4:blue;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, triangle), blue), not[triangle]), rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:not[%s];4:triangle;4:rectangle
'λx.apply(and[green,apply(size-leq,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(nor[green,apply(size-geq,x.o)],filter(filter(x.s, not[and[or[yellow,green],and[size1,and[blue,implies[green,not[not[or[and[or[iff[size1,rectangle],circle],triangle],rectangle]]]]]]]]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nor[%s,%s];4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:implies[%s,%s];4:green;4:not[%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:size1;4:rectangle;4:circle;4:triangle;4:rectangle;4:size3
'λx.forall(size1,filter(x.s, not[and[blue,rectangle]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:rectangle
'λx.apply(and[or[green,apply(size-leq,x.o)],apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[green,apply(same_color,x.o)],and[and[circle,iff[apply(same_size,x.o),yellow]],and[not[size3],circle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:not[%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size2,size3]],iota(filter(filter(filter(filter(x.s, or[not[or[green,yellow]],iff[triangle,size1]]), blue), blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:yellow;4:iff[%s,%s];4:triangle;4:size1;4:blue;4:blue;4:rectangle
'λx.apply(not[nor[implies[or[blue,or[or[size1,circle],yellow]],yellow],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:yellow;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(not[and[and[size1,yellow],size3]],iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[and[nand[size3,apply(same_size,iota(x.s))],size2],triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,size1],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[not[apply(same_shape,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(or[size2,nand[and[blue,yellow],size3]],filter(x.s, or[size2,and[size1,and[blue,size2]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size2;4:nand[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:size2
'λx.apply(size1,iota(filter(filter(x.s, circle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(implies[nand[or[yellow,size1],and[and[apply(size-geq,iota(filter(filter(filter(x.s, circle), and[triangle,green]), or[apply(size-gt,x.o),nand[and[green,size2],and[or[and[size3,not[size2]],yellow],size1]]]))),size2],size2]],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:triangle;4:green;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:nand[%s,%s];4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:size2;4:yellow;4:size1;4:size2;4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[green,and[blue,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[and[apply(size-gt,iota(filter(x.s, yellow))),size2],and[size1,rectangle]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(not[triangle],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(filter(x.s, not[circle]), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size1
'λx.apply(and[not[and[and[apply(same_shape,iota(filter(filter(x.s, rectangle), size1))),size1],or[nor[green,size1],not[apply(same_shape,x.o)]]]],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:size1;4:or[%s,%s];4:nor[%s,%s];4:green;4:size1;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, green), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(implies[not[green],rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size1,size2],and[rectangle,rectangle]],iota(filter(filter(filter(x.s, rectangle), rectangle), or[size2,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size2;4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:or[%s,%s];4:size2;4:size2
'λx.apply(implies[not[triangle],not[and[or[and[green,yellow],size3],iff[and[or[or[circle,green],size2],apply(same_size,iota(x.s))],and[rectangle,apply(same_size,x.o)]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:triangle;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size3;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:green;4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size2), not[size1]), circle), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size1;4:circle;4:circle
'λx.apply(and[rectangle,blue],iota(filter(filter(x.s, green), not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle
'λx.apply(circle,iota(filter(filter(x.s, circle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(nand[circle,triangle],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, implies[size1,apply(same_color,x.o)]), blue), green), size1), or[and[apply(same_shape,iota(x.s)),or[nor[green,yellow],rectangle]],blue]), iff[yellow,yellow]), triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:green;4:size1;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:green;4:yellow;4:rectangle;4:blue;4:iff[%s,%s];4:yellow;4:yellow;4:triangle;4:circle
'λx.apply(implies[size1,and[rectangle,rectangle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[yellow,size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[not[iff[not[circle],circle]],blue],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:not[%s];4:circle;4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(x.s, and[blue,circle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(and[apply(same_size,x.o),circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[yellow,or[and[or[and[and[and[blue,not[rectangle]],blue],and[rectangle,size2]],and[circle,yellow]],size3],circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:rectangle;4:blue;4:and[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:circle;4:yellow;4:size3;4:circle;1:%s.o;2:x
'λx.apply(iff[size2,triangle],iota(filter(filter(x.s, rectangle), and[size2,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(not[size2],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size3],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[iff[blue,blue],not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(iff[size1,circle],iota(filter(filter(x.s, or[and[yellow,green],blue]), not[rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:blue;4:not[%s];4:rectangle
'λx.exists(yellow, filter(x.s, not[triangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(filter(x.s, or[rectangle,size2]), or[blue,and[not[apply(same_size,x.o)],not[apply(same_color,iota(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, rectangle)))), triangle), size2)))]]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size2
'λx.apply(implies[or[and[triangle,circle],and[yellow,size2]],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:yellow;4:size2;4:blue;1:%s.o;2:x
'λx.apply(implies[triangle,implies[green,circle]],iota(filter(filter(filter(x.s, circle), blue), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:implies[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:yellow
'λx.apply(or[not[and[size1,size1]],triangle],iota(filter(x.s, size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(not[or[circle,rectangle]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[green,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.apply(size1,iota(filter(x.s, and[green,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.apply(size2,iota(filter(x.s, apply(size-gt,iota(x.s)))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_size,iota(x.s)), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, blue), triangle), not[and[rectangle,rectangle]]), and[rectangle,size3]), size1), and[apply(same_color,x.o),and[circle,iff[size1,size3]]]), size1), circle)), filter(x.s, size1))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:rectangle;4:size3;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:iff[%s,%s];4:size1;4:size3;4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[or[green,green],yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,green],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(rectangle, filter(x.s, circle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, blue), or[triangle,iff[apply(same_shape,iota(x.s)),size2]]), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:blue
'λx.exists(size2, filter(filter(x.s, size2), and[green,size1]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:size1
'λx.apply(and[size3,and[size3,apply(same_shape,x.o)]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[yellow,circle],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[and[size1,apply(size-leq,iota(x.s))],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, yellow), apply(same_size,x.o)), nor[circle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:circle;4:circle
'λx.apply(nor[size1,apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[green,size2],and[size2,triangle]],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:size2;4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size1,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:%s.s;2:x
'λx.forall(size2,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size2;3:%s.s;2:x
'λx.forall(size3,x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size3;3:%s.s;2:x
'λx.exists(not[triangle], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(and[blue,blue],iota(filter(x.s, and[size3,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, or[yellow,rectangle]), blue), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:rectangle;4:blue;4:yellow
'λx.apply(iff[and[rectangle,not[rectangle]],and[size1,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[or[triangle,size1],not[not[size2]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, blue), size3), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:circle
'λx.apply(and[blue,size1],iota(filter(filter(x.s, yellow), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(and[rectangle,circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, apply(same_size,iota(x.s))))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[yellow,or[rectangle,blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, apply(same_size,iota(filter(filter(filter(filter(x.s, green), yellow), size1), yellow)))))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1;4:yellow
'λx.forall(and[green,circle],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.apply(not[and[triangle,size2]],iota(filter(filter(x.s, apply(size-lt,x.o)), size1)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[not[size2],apply(same_color,x.o)]), and[size3,size3]), size1), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size3;4:size1;4:triangle
'λx.apply(nand[size1,and[yellow,or[and[nand[yellow,green],yellow],and[yellow,iff[and[circle,circle],or[not[triangle],or[and[yellow,rectangle],size1]]]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:yellow;4:green;4:yellow;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:and[%s,%s];4:circle;4:circle;4:or[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, iff[circle,size1]), and[rectangle,yellow]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size1;4:and[%s,%s];4:rectangle;4:yellow;4:yellow
'λx.forall(and[circle,iff[apply(same_shape,iota(x.s)),size1]],filter(filter(x.s, size1), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.exists(not[yellow], filter(x.s, green))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(and[blue,rectangle], filter(x.s, nand[and[size1,yellow],green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:green
'λx.forall(rectangle,filter(x.s, apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[circle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, apply(same_shape,x.o)), not[implies[triangle,blue]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:implies[%s,%s];4:triangle;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(x.s, nor[blue,or[triangle,blue]]), blue), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:blue;4:blue;4:green
'λx.contains(iota(filter(x.s, blue)), filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[circle,blue],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[triangle,implies[blue,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[triangle,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[or[green,green],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:green;4:size1;1:%s.o;2:x
'λx.apply(implies[green,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, green), or[or[blue,circle],size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:size1
'λx.contains(x.o, filter(filter(x.s, rectangle), iff[size2,iff[and[apply(same_size,iota(filter(filter(filter(filter(filter(x.s, circle), not[circle]), apply(same_color,x.o)), apply(same_shape,x.o)), size2))),yellow],or[rectangle,nor[circle,apply(same_color,x.o)]]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:yellow;4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[and[size3,circle],and[and[size1,size3],and[triangle,rectangle]]],iota(filter(filter(filter(filter(x.s, triangle), or[size1,blue]), apply(same_color,x.o)), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size1;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(not[iff[or[circle,not[not[rectangle]]],and[nand[not[size2],circle],and[and[nor[apply(size-gt,x.o),rectangle],rectangle],not[and[and[or[not[size2],apply(same_size,iota(x.s))],blue],size2]]]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:not[%s];4:rectangle;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:size2;4:circle;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;4:rectangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, or[apply(same_size,iota(filter(filter(x.s, and[triangle,or[nor[size1,size2],nor[not[rectangle],green]]]), and[triangle,circle]))),green]), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:nor[%s,%s];4:not[%s];4:rectangle;4:green;4:and[%s,%s];4:triangle;4:circle;4:green;4:triangle
'λx.forall(triangle,filter(filter(filter(x.s, triangle), blue), and[rectangle,size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(or[circle,apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(nor[circle,apply(size-lt,x.o)], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[triangle,size1],iota(filter(filter(filter(x.s, implies[size2,rectangle]), blue), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle;4:blue;4:size2
'λx.apply(and[size1,and[not[green],or[blue,rectangle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, size3), and[rectangle,size1]), rectangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:size1;4:rectangle;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, size3), and[circle,apply(same_shape,iota(filter(x.s, not[triangle])))])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[triangle,size3],iota(filter(filter(filter(x.s, apply(same_color,x.o)), implies[size2,or[size1,blue]]), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:size2;4:or[%s,%s];4:size1;4:blue;4:blue
'λx.exists(apply(same_shape,iota(x.s)), filter(x.s, not[rectangle]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(and[blue,blue],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[nand[and[green,yellow],and[size2,not[triangle]]],implies[size2,not[blue]]],or[triangle,not[nor[apply(same_color,iota(filter(x.s, nand[size2,circle]))),or[or[iff[rectangle,size3],and[apply(same_size,iota(x.s)),circle]],blue]]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:yellow;4:and[%s,%s];4:size2;4:not[%s];4:triangle;4:implies[%s,%s];4:size2;4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:circle;4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size1,apply(same_color,x.o)],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[yellow,nor[or[blue,and[yellow,nand[circle,implies[apply(same_size,iota(x.s)),and[or[and[and[circle,apply(same_size,x.o)],and[and[rectangle,size3],or[green,rectangle]]],nor[green,implies[green,size3]]],triangle]]]]],and[not[iff[rectangle,yellow]],or[rectangle,size1]]]], filter(filter(x.s, size3), size3))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:nor[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:green;4:rectangle;4:nor[%s,%s];4:green;4:implies[%s,%s];4:green;4:size3;4:triangle;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(or[yellow,or[apply(same_color,x.o),iff[size1,size2]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, rectangle), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[implies[size2,rectangle],or[blue,implies[blue,circle]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:blue;4:implies[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, implies[size2,blue]), size1), yellow), rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:blue;4:size1;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, rectangle), not[size2]), green), rectangle), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size2;4:green;4:rectangle;4:yellow
'λx.apply(and[size2,circle],iota(filter(x.s, and[rectangle,rectangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle
'λx.forall(or[blue,not[and[circle,apply(same_color,iota(x.s))]]],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), and[apply(size-geq,iota(filter(x.s, size3))),not[or[blue,size1]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:or[%s,%s];4:blue;4:size1
'λx.apply(and[triangle,and[yellow,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[blue,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, or[blue,and[iff[and[size1,not[or[yellow,not[size3]]]],and[and[size3,green],and[yellow,yellow]]],and[size3,and[apply(same_size,iota(x.s)),yellow]]]]), nand[green,yellow])))), size2)))), nor[size3,not[size2]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:yellow;4:not[%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:green;4:yellow;4:size2;4:nor[%s,%s];4:size3;4:not[%s];4:size2
'λx.apply(and[circle,rectangle],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(x.s, apply(same_shape,x.o)))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size3,and[or[circle,green],not[green]]],iota(filter(filter(filter(filter(filter(filter(x.s, triangle), size3), green), and[size3,nor[or[size1,and[blue,rectangle]],not[rectangle]]]), size2), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:green;4:and[%s,%s];4:size3;4:nor[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:blue;4:rectangle;4:not[%s];4:rectangle;4:size2;4:blue
'λx.empty(filter(filter(x.s, yellow), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), not[not[yellow]]), apply(same_shape,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[triangle,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[size1,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(and[circle,and[rectangle,circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[size3,and[size2,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size1,and[size2,size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.forall(not[triangle],filter(filter(x.s, or[blue,size3]), size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size3;4:size3
'λx.apply(or[triangle,or[blue,not[or[circle,apply(same_size,x.o)]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[green,size2],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.forall(blue,filter(filter(x.s, or[size1,size3]), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3;4:yellow
'λx.empty(filter(x.s, and[size2,size1]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(and[blue,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, blue), circle), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3
'λx.empty(filter(filter(filter(x.s, rectangle), and[implies[yellow,yellow],green]), apply(same_color,x.o)))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:yellow;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(nand[yellow,and[nor[green,apply(same_shape,iota(x.s))],nand[triangle,apply(same_color,iota(filter(filter(x.s, size2), apply(same_shape,x.o))))]]],filter(filter(x.s, iff[green,circle]), and[not[nand[circle,size3]],circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:circle;4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:circle;4:size3;4:circle
'λx.apply(and[size3,and[green,and[size3,apply(size-gt,iota(filter(x.s, and[triangle,not[nand[and[apply(same_size,x.o),or[nor[yellow,triangle],not[blue]]],size3]]])))]]],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:nor[%s,%s];4:yellow;4:triangle;4:not[%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[and[and[size1,size1],apply(same_shape,iota(filter(x.s, yellow)))],or[apply(same_size,iota(x.s)),size1]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.forall(blue,filter(x.s, not[size3]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(apply(same_color,iota(x.s)),iota(filter(filter(filter(filter(filter(filter(x.s, size1), not[rectangle]), circle), and[not[and[not[apply(size-gt,x.o)],size3]],and[blue,iff[not[green],size3]]]), blue), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;4:and[%s,%s];4:blue;4:iff[%s,%s];4:not[%s];4:green;4:size3;4:blue;4:rectangle
'λx.apply(or[not[size1],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), not[size2]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size2
'λx.apply(nand[apply(same_color,iota(x.s)),yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(filter(x.s, size3), and[apply(size-leq,x.o),and[circle,not[size1]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:circle;4:not[%s];4:size1
'λx.apply(and[not[triangle],and[size2,and[size1,and[green,size3]]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(iff[circle,size2],iota(filter(filter(x.s, size1), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(and[apply(same_color,x.o),size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, or[iff[or[blue,triangle],and[rectangle,and[apply(same_color,x.o),yellow]]],green])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:green
'λx.apply(or[yellow,apply(same_color,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, triangle), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(triangle,iota(filter(x.s, and[not[blue],and[and[or[apply(same_color,x.o),blue],circle],implies[not[triangle],green]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:circle;4:implies[%s,%s];4:not[%s];4:triangle;4:green
'λx.apply(and[triangle,triangle],iota(filter(filter(x.s, triangle), or[nor[size3,or[triangle,size2]],size3])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:nor[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:size2;4:size3
'λx.apply(nor[blue,size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(nor[rectangle,green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[or[yellow,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), and[and[not[not[not[or[rectangle,not[green]]]]],size1],rectangle]), apply(same_shape,iota(filter(filter(x.s, not[apply(same_color,x.o)]), rectangle))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:or[%s,%s];4:rectangle;4:not[%s];4:green;4:size1;4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[green,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size3,not[size2]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(iff[or[apply(same_size,x.o),and[size3,size1]],size2],iota(filter(filter(x.s, green), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.exists(blue, filter(filter(filter(x.s, size1), green), triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:triangle
'λx.contains(iota(filter(x.s, not[yellow])), filter(x.s, green))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size3,and[triangle,and[or[rectangle,and[not[and[or[size3,yellow],green]],or[triangle,size3]]],apply(size-leq,x.o)]]],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:green;4:or[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[size3,size3],green],iota(filter(x.s, triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[size2,triangle],iota(filter(filter(x.s, rectangle), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.forall(rectangle,filter(filter(x.s, yellow), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.empty(filter(filter(filter(x.s, size3), size1), yellow))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:yellow
'λx.apply(or[green,blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), yellow), blue))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue
'λx.apply(not[and[triangle,size2]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,yellow],iota(filter(filter(x.s, green), and[size3,and[and[size1,size1],and[not[size2],triangle]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:not[%s];4:size2;4:triangle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, yellow), size3), apply(size-leq,x.o)), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.apply(and[or[blue,size1],size3],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(blue,iota(filter(x.s, and[or[or[rectangle,rectangle],green],blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:green;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(x.s, apply(same_size,x.o)), green), green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:green
'λx.apply(triangle,iota(filter(x.s, circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, yellow), not[size1]), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size1;4:rectangle
'λx.apply(not[nor[green,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(filter(filter(x.s, size3), size1), triangle))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:triangle;3:%s.s;2:x
'λx.apply(or[or[size1,size1],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[size3,yellow]), size2), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:size2;4:size2
'λx.apply(or[blue,triangle],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[yellow,yellow],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,triangle],iota(filter(filter(x.s, or[nand[circle,apply(same_size,iota(filter(x.s, blue)))],size2]), and[and[circle,iff[yellow,yellow]],size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:yellow;4:yellow;4:size2
'λx.forall(or[size3,iff[and[and[circle,size3],not[nor[size2,size2]]],apply(size-gt,x.o)]],filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size3;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:not[%s];4:nor[%s,%s];4:size2;4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(apply(same_shape,iota(x.s)),x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), rectangle), and[not[not[size2]],yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:and[%s,%s];4:not[%s];4:not[%s];4:size2;4:yellow
'λx.forall(green,filter(x.s, and[and[green,blue],yellow]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:blue;4:yellow
'λx.apply(not[and[yellow,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[nor[or[apply(same_shape,x.o),apply(size-lt,iota(x.s))],or[and[blue,blue],triangle]],not[circle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:triangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, green), circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(and[triangle,apply(same_shape,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, triangle), yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.exists(size3, filter(filter(filter(x.s, apply(same_size,iota(x.s))), green), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:rectangle
'λx.exists(size3, filter(x.s, or[or[size2,yellow],not[nand[nand[apply(same_color,iota(filter(x.s, size2))),apply(same_shape,x.o)],rectangle]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:not[%s];4:nand[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(apply(size-geq,iota(filter(x.s, apply(size-gt,iota(x.s))))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),apply(same_size,iota(x.s))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[size2,iff[size2,blue]],green],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:iff[%s,%s];4:size2;4:blue;4:green;1:%s.o;2:x
'λx.forall(yellow,filter(filter(filter(x.s, rectangle), green), and[and[not[size3],size3],size1]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:size3;4:size1
'λx.apply(not[and[apply(same_shape,x.o),size3]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(x.s, iff[circle,nand[rectangle,implies[green,triangle]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:nand[%s,%s];4:rectangle;4:implies[%s,%s];4:green;4:triangle
'λx.contains(x.o, filter(filter(x.s, and[size2,or[and[not[size3],rectangle],or[implies[apply(same_color,iota(x.s)),triangle],green]]]), apply(same_color,iota(x.s))))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:rectangle;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(size-lt,iota(x.s)),or[iff[size2,and[apply(same_shape,iota(filter(x.s, size1))),or[triangle,triangle]]],rectangle]],iota(filter(x.s, and[size2,or[circle,circle]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:triangle;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:circle
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, nor[size1,size3]), circle), iff[yellow,and[triangle,yellow]]), blue), implies[apply(size-geq,x.o),size3]), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:size3;4:circle;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:yellow;4:blue;4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3;4:rectangle
'λx.forall(nand[size2,rectangle],filter(x.s, triangle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(filter(x.s, rectangle), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(or[size2,size1],iota(filter(x.s, and[size3,yellow])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(or[not[size1],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(implies[and[size1,apply(same_color,x.o)],and[size2,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(implies[iff[blue,nor[size1,rectangle]],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:blue;4:nor[%s,%s];4:size1;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,rectangle],iota(filter(filter(filter(filter(x.s, and[blue,circle]), yellow), size3), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:yellow;4:size3;4:rectangle
'λx.apply(and[and[or[green,circle],and[yellow,yellow]],rectangle],iota(filter(x.s, not[size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:circle;4:and[%s,%s];4:yellow;4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[size1,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, and[size2,blue]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.exists(and[iff[or[rectangle,iff[green,green]],not[triangle]],or[and[apply(same_size,iota(filter(filter(x.s, size2), and[blue,triangle]))),triangle],green]], filter(filter(filter(x.s, yellow), blue), or[not[blue],implies[and[size3,size3],nand[nor[blue,iff[implies[blue,not[yellow]],blue]],and[green,not[rectangle]]]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:green;4:green;4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:blue;4:triangle;4:triangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:or[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:and[%s,%s];4:size3;4:size3;4:nand[%s,%s];4:nor[%s,%s];4:blue;4:iff[%s,%s];4:implies[%s,%s];4:blue;4:not[%s];4:yellow;4:blue;4:and[%s,%s];4:green;4:not[%s];4:rectangle
'λx.forall(triangle,filter(filter(filter(filter(filter(x.s, or[apply(same_shape,iota(x.s)),triangle]), implies[and[rectangle,not[and[yellow,yellow]]],circle]), or[apply(same_shape,iota(filter(x.s, yellow))),not[blue]]), size3), and[green,blue]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:yellow;4:yellow;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:blue;4:size3;4:and[%s,%s];4:green;4:blue
'λx.contains(iota(x.s), filter(filter(x.s, yellow), yellow))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.contains(iota(filter(x.s, iff[circle,size2])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.apply(implies[and[and[not[nand[implies[rectangle,size2],not[triangle]]],nand[yellow,size3]],circle],size2],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:size2;4:not[%s];4:triangle;4:nand[%s,%s];4:yellow;4:size3;4:circle;4:size2;1:%s.o;2:x
'λx.apply(implies[yellow,yellow],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.exists(or[triangle,not[not[rectangle]]], filter(filter(filter(x.s, not[green]), blue), or[or[or[not[apply(same_color,x.o)],yellow],yellow],nor[size2,green]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:not[%s];4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:blue;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:yellow;4:nor[%s,%s];4:size2;4:green
'λx.apply(or[size3,circle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, triangle), rectangle), rectangle))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[not[not[size2]]],implies[triangle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:size2;4:implies[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size2), nand[rectangle,size2]), blue), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:rectangle;4:size2;4:blue;4:size2
'λx.apply(and[and[circle,yellow],green],iota(filter(x.s, size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(rectangle,filter(x.s, and[triangle,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.contains(iota(filter(filter(filter(x.s, and[size2,nor[not[iff[blue,size2]],yellow]]), and[not[apply(same_shape,iota(filter(filter(x.s, and[blue,green]), and[triangle,blue])))],triangle]), blue)), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:nor[%s,%s];4:not[%s];4:iff[%s,%s];4:blue;4:size2;4:yellow;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;4:and[%s,%s];4:triangle;4:blue;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_color,iota(filter(x.s, apply(size-gt,x.o)))))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nor[size2,not[blue]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[nor[or[blue,or[green,and[size2,blue]]],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:and[%s,%s];4:size2;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), not[triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle
'λx.apply(iff[or[green,size3],and[blue,triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:green;4:size3;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[and[apply(same_shape,x.o),blue],rectangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[green,rectangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.exists(or[and[size1,circle],blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:blue;3:%s.s;2:x
'λx.apply(not[nor[size1,circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nand[yellow,blue],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:yellow;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[yellow,and[size1,yellow]],iota(filter(x.s, green)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, and[circle,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(implies[green,triangle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(and[not[iff[size1,rectangle]],triangle],filter(x.s, and[circle,triangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:size1;4:rectangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle
'λx.exists(and[size3,rectangle], filter(filter(x.s, not[rectangle]), or[or[not[triangle],size1],green]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:size1;4:green
'λx.exists(apply(same_color,iota(filter(filter(x.s, rectangle), blue))), x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, green), blue))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, blue), circle), or[blue,implies[size1,implies[blue,apply(same_shape,iota(x.s))]]]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:or[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(x.s, size2), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.exists(or[blue,and[blue,triangle]], filter(filter(filter(filter(filter(filter(x.s, circle), size3), blue), size1), circle), rectangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:blue;4:size1;4:circle;4:rectangle
'λx.apply(and[and[not[blue],not[or[triangle,size1]]],size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:or[%s,%s];4:triangle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(x.s, triangle), green), blue), size2), apply(same_color,x.o)), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:blue;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(yellow,iota(filter(x.s, apply(same_color,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, triangle), and[not[circle],size1]), and[circle,not[not[yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:circle;4:size1;4:and[%s,%s];4:circle;4:not[%s];4:not[%s];4:yellow
'λx.apply(or[size1,apply(same_size,iota(filter(filter(filter(x.s, apply(size-geq,iota(x.s))), size1), green)))],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1;4:green;1:%s.o;2:x
'λx.forall(iff[triangle,yellow],filter(x.s, nand[size3,circle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:iff[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:circle
'λx.exists(and[triangle,size3], filter(x.s, or[size3,size1]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size1
'λx.forall(or[not[yellow],yellow],x.s)'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.exists(size3, filter(filter(filter(filter(x.s, circle), and[and[size2,size1],green]), rectangle), and[rectangle,and[or[green,rectangle],not[and[and[or[size2,triangle],and[yellow,size2]],and[and[triangle,yellow],apply(same_size,x.o)]]]]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:green;4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[nor[size1,and[green,and[apply(size-geq,iota(filter(x.s, size1))),size3]]],and[rectangle,size3]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:size1;4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, not[or[green,implies[not[blue],yellow]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:green;4:implies[%s,%s];4:not[%s];4:blue;4:yellow
'λx.exists(yellow, filter(filter(x.s, rectangle), triangle))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.forall(green,filter(filter(filter(filter(filter(x.s, size2), and[size3,apply(same_size,iota(filter(x.s, yellow)))]), circle), and[and[not[size2],size1],or[rectangle,nand[yellow,size1]]]), blue))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:size1;4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:yellow;4:size1;4:blue
'λx.apply(and[yellow,triangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size2,triangle],filter(filter(x.s, size3), green))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.empty(filter(filter(filter(filter(x.s, blue), size3), not[and[yellow,triangle]]), size2))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:not[%s];4:and[%s,%s];4:yellow;4:triangle;4:size2
'λx.apply(not[blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[and[and[size3,apply(same_color,x.o)],green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[blue,not[not[apply(same_shape,x.o)]]]), rectangle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.exists(size1, filter(x.s, not[and[yellow,apply(size-gt,x.o)]]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(or[size3,size2],filter(x.s, size3))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:or[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, apply(same_color,iota(x.s))), and[green,triangle]), circle), yellow), rectangle), and[not[not[green]],apply(same_color,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:circle;4:yellow;4:rectangle;4:and[%s,%s];4:not[%s];4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, green), blue), triangle), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), blue), apply(same_size,x.o))))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),size1],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[and[size1,size1],size1],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-lt,x.o),filter(x.s, yellow))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[nor[size2,and[apply(same_size,x.o),not[or[size2,apply(same_size,x.o)]]]],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[or[size1,or[blue,circle]],rectangle],iota(filter(x.s, size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:blue;4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[apply(same_color,x.o),blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), rectangle)), filter(filter(x.s, not[blue]), size3))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3
'λx.apply(or[and[blue,triangle],nand[triangle,apply(size-lt,x.o)]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), not[circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:circle
'λx.exists(nand[size1,blue], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:nand[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.forall(and[triangle,and[apply(same_size,iota(filter(filter(filter(x.s, size1), circle), size1))),implies[size3,not[nand[yellow,nor[triangle,nand[blue,rectangle]]]]]]],filter(filter(x.s, size3), and[green,rectangle]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:size1;4:implies[%s,%s];4:size3;4:not[%s];4:nand[%s,%s];4:yellow;4:nor[%s,%s];4:triangle;4:nand[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:rectangle
'λx.apply(or[green,triangle],iota(filter(filter(filter(filter(x.s, green), circle), size3), not[size1])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size3;4:not[%s];4:size1
'λx.apply(or[yellow,rectangle],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,triangle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(apply(same_shape,iota(filter(filter(filter(filter(x.s, not[not[blue]]), triangle), triangle), size3))),x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue;4:triangle;4:triangle;4:size3;1:%s.o;2:x
'λx.exists(and[nor[and[triangle,circle],yellow],circle], filter(x.s, and[circle,blue]))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(size3,iota(filter(x.s, and[apply(same_color,iota(filter(filter(filter(x.s, not[not[blue]]), triangle), yellow))),apply(size-lt,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue;4:triangle;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, yellow)))), size2), and[not[not[apply(same_shape,x.o)]],nor[rectangle,not[not[apply(same_color,iota(filter(x.s, size1)))]]]]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[rectangle,size3],iota(filter(x.s, nor[apply(size-lt,iota(x.s)),and[and[and[and[circle,rectangle],circle],size2],implies[yellow,yellow]]])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:circle;4:size2;4:implies[%s,%s];4:yellow;4:yellow
'λx.empty(filter(filter(filter(x.s, triangle), yellow), not[and[size3,blue]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:blue
'λx.apply(and[circle,not[and[yellow,green]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[and[not[green],size2],yellow]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:size2;4:yellow
'λx.contains(iota(x.s), filter(x.s, rectangle))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(or[blue,not[size3]], x.s)'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:or[%s,%s];4:blue;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(and[not[apply(same_shape,iota(x.s))],rectangle],iota(filter(x.s, implies[rectangle,size2])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:size2
'λx.apply(and[apply(same_shape,iota(x.s)),triangle],iota(filter(filter(x.s, apply(same_size,x.o)), triangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.contains(iota(filter(x.s, or[blue,and[triangle,apply(same_color,x.o)]])), x.s)'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[not[triangle],circle],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, yellow), apply(same_shape,iota(x.s))), size3)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(and[triangle,and[iff[size3,or[and[and[triangle,size1],triangle],circle]],triangle]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:iff[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:triangle;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[implies[rectangle,circle],nand[triangle,not[blue]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:circle;4:nand[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[blue,blue]))'	0.000000	0.000000	0.000000	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue
'λx.apply(and[iff[triangle,size3],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(nand[green,and[blue,and[triangle,nor[triangle,and[circle,rectangle]]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:green;4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), and[circle,circle])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:circle
'λx.empty(filter(filter(x.s, or[and[triangle,green],nor[size3,or[green,or[apply(same_shape,iota(x.s)),blue]]]]), circle))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:nor[%s,%s];4:size3;4:or[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(or[blue,not[or[green,circle]]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, and[size3,size2]), and[green,triangle]), yellow)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:green;4:triangle;4:yellow
'λx.apply(not[not[or[size1,implies[green,apply(same_size,iota(x.s))]]]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:size1;4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, apply(same_size,x.o)))'	0.000000	0.000000	0.000000	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[not[yellow],size3],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[size1,apply(same_size,x.o)])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[apply(same_color,iota(x.s)),and[yellow,green]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(nand[apply(same_shape,x.o),circle],filter(filter(x.s, blue), or[and[and[rectangle,apply(same_shape,x.o)],and[and[nor[blue,size1],blue],and[apply(size-leq,x.o),size1]]],apply(same_shape,iota(filter(filter(filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), nor[size3,green]), rectangle), rectangle), size2), apply(same_shape,x.o)), not[yellow])))]))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:size1;4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:size3;4:green;4:rectangle;4:rectangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.forall(blue,filter(filter(x.s, blue), size1))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(implies[and[size2,and[implies[size2,size1],blue]],or[circle,yellow]],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:size2;4:size1;4:blue;4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(not[nor[and[rectangle,implies[size1,and[yellow,size2]]],circle]],iota(x.s))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), triangle), rectangle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size3), yellow), circle), implies[size2,and[size1,size1]]), size1), size3), triangle), apply(size-leq,iota(filter(filter(x.s, yellow), triangle)))), size3), blue)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:circle;4:implies[%s,%s];4:size2;4:and[%s,%s];4:size1;4:size1;4:size1;4:size3;4:triangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:size3;4:blue
'λx.apply(nand[size3,and[size1,rectangle]],iota(filter(filter(x.s, and[not[size3],yellow]), size2)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:yellow;4:size2
'λx.apply(not[size3],iota(filter(filter(x.s, triangle), circle)))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(or[not[size2],blue],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, nand[size1,blue])))'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:blue
'λx.apply(or[triangle,apply(same_size,x.o)],x.o)'	0.000000	0.000000	0.000000	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(and[size2,blue],filter(x.s, circle))'	0.000000	0.000000	0.000000	0:forall(%s,%s);4:and[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, size2), not[and[yellow,yellow]]), and[not[or[and[yellow,green],size3]],rectangle]), blue), iff[green,green]), or[circle,iff[and[and[green,or[nand[apply(same_color,x.o),rectangle],circle]],apply(same_shape,iota(filter(filter(x.s, and[yellow,size3]), apply(same_shape,iota(filter(x.s, rectangle))))))],triangle]]))'	0.000000	0.000000	0.000000	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3;4:rectangle;4:blue;4:iff[%s,%s];4:green;4:green;4:or[%s,%s];4:circle;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle

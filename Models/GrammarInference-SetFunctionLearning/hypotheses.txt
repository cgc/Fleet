'λx.exists(and[rectangle,or[circle,apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(size3, filter(x.s, nor[rectangle,green]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:green
'λx.true'	0:true
'λx.empty(filter(x.s, implies[size2,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle
'λx.exists(apply(same_size,x.o), filter(x.s, or[size3,size2]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2
'λx.apply(implies[nand[triangle,blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:triangle;4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, or[blue,apply(same_color,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[iff[not[blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(implies[blue,not[circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(or[green,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[size3,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.forall(circle,filter(x.s, apply(same_color,iota(filter(x.s, yellow)))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[size2,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(or[not[circle],not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.exists(or[size3,yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[triangle]), apply(same_size,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[yellow,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nor[not[circle],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(iff[green,rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, and[green,apply(same_color,x.o)]), or[green,size2]), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:green;4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[implies[blue,size1],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:size1;4:circle;1:%s.o;2:x
'λx.forall(or[not[circle],blue],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[size3,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.exists(iff[rectangle,size3], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.forall(iff[apply(same_shape,x.o),rectangle],filter(x.s, yellow))'	0:forall(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[not[blue],or[triangle,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, or[not[circle],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:size1
'λx.exists(and[apply(same_color,x.o),size3], filter(x.s, or[triangle,blue]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:blue
'λx.forall(or[yellow,size2],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(or[green,triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[triangle,iff[and[size2,circle],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:iff[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[green,or[not[circle],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-leq,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow
'λx.apply(iff[green,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(not[and[rectangle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(or[rectangle,or[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(and[apply(same_size,iota(x.s)),blue],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size3,filter(x.s, size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size1,filter(x.s, size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size2,filter(x.s, green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size1,filter(x.s, green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(filter(filter(x.s, and[yellow,rectangle]), or[and[triangle,blue],green]), nor[rectangle,or[circle,and[triangle,and[apply(same_color,x.o),green]]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:green;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(and[blue,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[triangle,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[nor[blue,and[not[triangle],not[circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, rectangle), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(filter(x.s, circle), size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:blue
'λx.apply(nand[not[apply(same_shape,x.o)],green],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(x.s, green), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.exists(or[size2,yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:yellow;3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:rectangle
'λx.apply(apply(same_size,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(iff[apply(same_shape,iota(filter(x.s, and[not[green],size1]))),and[circle,size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:size1;4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, blue)))), yellow), size3), implies[size2,size2]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:size3;4:implies[%s,%s];4:size2;4:size2;4:green
'λx.apply(not[size2],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[and[triangle,triangle],implies[size2,and[yellow,or[apply(same_size,iota(filter(filter(x.s, blue), triangle))),yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:implies[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, triangle), size3), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size3
'λx.exists(or[and[apply(same_shape,x.o),not[blue]],circle], filter(x.s, or[rectangle,and[triangle,triangle]]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(blue,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, and[not[apply(same_color,x.o)],apply(same_shape,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[rectangle,apply(same_color,x.o)],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(size3,filter(x.s, not[apply(same_color,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(circle,filter(x.s, or[circle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[and[rectangle,size2],apply(same_color,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), and[rectangle,not[size2]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:rectangle;4:not[%s];4:size2;3:%s.s;2:x
'λx.exists(green, filter(filter(filter(x.s, not[triangle]), nand[size2,circle]), apply(size-leq,x.o)))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:nand[%s,%s];4:size2;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, nor[circle,blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:blue
'λx.forall(apply(same_shape,iota(filter(x.s, blue))),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, circle), blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.empty(filter(filter(x.s, apply(size-gt,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.forall(apply(same_color,x.o),filter(x.s, size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size2, filter(filter(x.s, or[blue,size3]), or[triangle,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size3;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[not[and[or[and[nand[size1,size3],not[circle]],blue],or[or[green,circle],yellow]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:size3;4:not[%s];4:circle;4:blue;4:or[%s,%s];4:or[%s,%s];4:green;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(nor[and[not[size2],blue],and[circle,not[size1]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:blue;4:and[%s,%s];4:circle;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(and[apply(same_color,x.o),triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.forall(not[and[apply(same_shape,x.o),or[circle,blue]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[iff[triangle,implies[rectangle,green]],not[size3]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:implies[%s,%s];4:rectangle;4:green;4:not[%s];4:size3
'λx.apply(apply(same_size,iota(filter(x.s, and[triangle,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), size3), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(not[circle],x.s)'	0:forall(%s,%s);4:not[%s];4:circle;3:%s.s;2:x
'λx.exists(and[and[green,rectangle],or[apply(same_shape,x.o),size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(or[size2,not[and[not[size3],apply(same_size,x.o)]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), circle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:circle
'λx.forall(size3,filter(filter(x.s, or[size3,apply(size-leq,x.o)]), not[rectangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.empty(filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, size3), apply(same_color,x.o)))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[size2,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.forall(apply(size-gt,x.o),filter(filter(x.s, circle), or[size2,yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size2;4:yellow
'λx.exists(triangle, filter(x.s, and[nand[not[green],not[and[yellow,size2]]],triangle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:green;4:not[%s];4:and[%s,%s];4:yellow;4:size2;4:triangle
'λx.apply(implies[circle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(nand[blue,not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[size1,apply(same_size,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(and[apply(same_shape,x.o),not[yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(nand[and[circle,yellow],not[size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[circle,apply(same_shape,iota(filter(x.s, rectangle)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(or[blue,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[green,size3]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:size3
'λx.apply(not[size1],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[size1],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[blue,size1],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, nand[blue,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:blue
'λx.apply(nand[not[blue],nor[size3,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:nor[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.exists(blue, filter(x.s, triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[or[green,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[or[size3,iff[blue,circle]],circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:circle;4:circle
'λx.apply(nand[not[blue],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(and[circle,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.forall(not[apply(same_size,x.o)],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(not[yellow], filter(filter(x.s, implies[apply(size-geq,x.o),nor[yellow,apply(same_color,x.o)]]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), apply(same_color,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(green,x.s)'	0:forall(%s,%s);4:green;3:%s.s;2:x
'λx.apply(or[green,and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[triangle,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green
'λx.exists(or[circle,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(or[and[circle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[yellow,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[circle,blue],and[or[triangle,rectangle],not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[not[nor[yellow,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nor[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), implies[apply(size-lt,x.o),circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle
'λx.apply(or[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[blue,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[rectangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(not[and[or[green,yellow],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[implies[circle,or[size1,size3]],or[circle,and[or[blue,triangle],apply(same_size,x.o)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:or[%s,%s];4:size1;4:size3;4:or[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[or[size1,triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:blue;1:%s.o;2:x
'λx.exists(or[blue,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(not[and[size1,not[triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:triangle;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, and[size2,nand[apply(size-lt,iota(filter(filter(x.s, circle), yellow))),blue]]), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:nand[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:blue;4:circle
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_size,x.o)), nor[blue,size3]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:size3
'λx.forall(not[size1],filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.forall(green,filter(x.s, circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.empty(filter(filter(x.s, size1), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.empty(filter(filter(x.s, size3), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:blue
'λx.contains(x.o, filter(x.s, or[and[triangle,blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:circle
'λx.contains(x.o, filter(filter(x.s, size3), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.forall(not[apply(same_shape,x.o)],filter(filter(x.s, yellow), size3))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(iff[not[size3],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[size1,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[circle,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(x.s, apply(same_size,x.o)), rectangle), not[green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:not[%s];4:green
'λx.empty(filter(filter(x.s, yellow), iff[size2,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:size2;4:blue
'λx.contains(x.o, filter(filter(x.s, yellow), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(and[and[blue,circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(nand[yellow,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), not[circle]), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size1), green), and[and[triangle,or[iff[and[not[triangle],size2],apply(same_color,iota(filter(x.s, circle)))],green]],size3]), size2), and[rectangle,size2]), blue), green), rectangle), apply(same_color,iota(filter(x.s, size1)))), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:size3;4:size2;4:and[%s,%s];4:rectangle;4:size2;4:blue;4:green;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(nor[yellow,nor[and[size3,size2],not[apply(same_color,x.o)]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:size3;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[rectangle,nand[triangle,apply(same_color,iota(filter(filter(x.s, triangle), size3)))]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, not[and[blue,not[circle]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:circle
'λx.apply(or[nor[triangle,implies[blue,and[blue,size3]]],and[triangle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:triangle;4:implies[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size3;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nor[and[and[size1,not[triangle]],size1],size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:size1;4:size2
'λx.empty(filter(filter(x.s, or[and[not[nor[not[green],rectangle]],green],apply(same_shape,x.o)]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:not[%s];4:green;4:rectangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(apply(same_shape,x.o),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[triangle,apply(same_shape,x.o)], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(triangle, filter(filter(x.s, green), size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(or[yellow,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[and[and[apply(same_size,x.o),not[and[size2,not[rectangle]]]],size3],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size2;4:not[%s];4:rectangle;4:size3;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(size-gt,x.o)), iff[size3,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:iff[%s,%s];4:size3;4:green
'λx.apply(size2,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(size3,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(green,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.contains(iota(filter(filter(x.s, yellow), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;3:%s.s;2:x
'λx.apply(and[rectangle,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[blue,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nand[yellow,and[size3,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, rectangle), blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.exists(blue, filter(x.s, not[size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.exists(blue, filter(x.s, not[size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(circle,iota(filter(filter(x.s, apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(and[iff[yellow,yellow],iff[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(x.s))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(or[and[and[circle,circle],apply(same_shape,x.o)],and[apply(same_shape,x.o),blue]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.forall(not[and[yellow,apply(same_color,x.o)]],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[apply(size-geq,x.o),rectangle], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[nand[blue,blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[or[and[rectangle,green],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, and[blue,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(filter(x.s, apply(same_shape,x.o)), triangle)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(size1,iota(filter(x.s, apply(same_color,iota(filter(x.s, size1))))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(circle,x.o)'	0:apply(%s,%s);4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), not[apply(same_color,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, and[apply(same_size,x.o),apply(same_shape,x.o)]), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), or[not[apply(same_shape,x.o)],triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, blue), size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:rectangle
'λx.exists(apply(same_color,x.o), filter(filter(filter(x.s, circle), apply(same_shape,x.o)), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(triangle,iota(filter(x.s, not[and[not[size2],or[not[green],size3]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:not[%s];4:green;4:size3
'λx.forall(size1,filter(filter(filter(x.s, size2), blue), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:circle
'λx.empty(filter(x.s, not[apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[size1,and[blue,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(not[and[not[blue],and[triangle,apply(same_color,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[blue,and[blue,not[circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size2
'λx.apply(apply(same_color,iota(filter(filter(x.s, size3), or[yellow,triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(filter(filter(filter(x.s, apply(same_color,x.o)), size3), yellow))),filter(filter(filter(x.s, triangle), and[size2,size1]), and[size1,triangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:size1;4:triangle
'λx.forall(size1,filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,x.o)), circle), apply(same_size,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[size3,and[circle,green]], filter(x.s, size2))'	0:exists(%s, %s);4:nor[%s,%s];4:size3;4:and[%s,%s];4:circle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(filter(filter(x.s, nor[size2,iff[triangle,circle]]), blue), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:iff[%s,%s];4:triangle;4:circle;4:blue;4:blue
'λx.apply(size1,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(and[blue,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, or[green,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow
'λx.apply(or[blue,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[blue,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[blue,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),or[not[circle],or[blue,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[triangle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:rectangle
'λx.apply(iff[not[yellow],implies[rectangle,size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:implies[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(not[rectangle], filter(x.s, or[apply(same_shape,x.o),rectangle]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.contains(iota(x.s), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(x.s, or[rectangle,or[blue,size2]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size2
'λx.contains(iota(filter(x.s, or[apply(same_shape,x.o),and[green,yellow]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(nor[apply(size-lt,x.o),size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), rectangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:rectangle
'λx.forall(yellow,filter(filter(x.s, triangle), not[or[green,size3]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:or[%s,%s];4:green;4:size3
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size3), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(green,iota(filter(filter(filter(x.s, green), size3), apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, size1), apply(same_size,x.o)))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, size2), apply(same_size,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[and[size3,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(nor[not[or[yellow,circle]],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(iff[not[circle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(or[not[triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(implies[size1,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,or[and[blue,yellow],implies[blue,yellow]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:implies[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[yellow,size1],iota(filter(filter(x.s, size3), not[size2])))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2
'λx.apply(nand[size2,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(nand[size3,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(and[nor[triangle,size1],size2],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[size2,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, rectangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[size1,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.exists(triangle, filter(x.s, not[yellow]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(apply(size-lt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size2), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;1:%s.o;2:x
'λx.apply(or[size1,not[circle]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(x.s, blue), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;3:%s.s;2:x
'λx.forall(or[triangle,not[size1]],filter(x.s, yellow))'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[size3,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[size2,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(nand[yellow,yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, size3), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:rectangle
'λx.apply(and[yellow,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), nand[blue,implies[circle,circle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.apply(iff[rectangle,and[blue,size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, apply(same_color,x.o)), blue), or[size3,size2]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:or[%s,%s];4:size3;4:size2
'λx.apply(and[apply(same_color,iota(filter(x.s, rectangle))),or[size3,nand[triangle,not[size3]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size3;4:nand[%s,%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.exists(and[size3,or[triangle,yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.forall(not[and[size1,rectangle]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(or[blue,and[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, apply(size-leq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.empty(filter(filter(x.s, rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(or[rectangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),or[size2,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.forall(not[size2],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size2), yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(and[not[and[circle,size2]],implies[size3,apply(size-leq,iota(filter(filter(x.s, size2), yellow)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:size2;4:implies[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, implies[blue,size2]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size2
'λx.contains(iota(filter(filter(filter(x.s, blue), nor[not[blue],rectangle]), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:not[%s];4:blue;4:rectangle;4:circle;3:%s.s;2:x
'λx.exists(size2, filter(x.s, yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(x.s, yellow))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size3, filter(x.s, yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[size3,not[or[size1,size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[blue]), or[rectangle,yellow]), not[apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:yellow;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[iff[and[circle,and[apply(same_color,x.o),circle]],apply(same_size,x.o)],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(or[blue,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(nor[size2,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, implies[or[apply(same_color,x.o),size1],circle]), blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:circle;4:blue
'λx.apply(and[or[size1,size2],not[and[not[rectangle],green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size2;4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(nor[size1,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.exists(and[green,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[circle,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, size2), apply(same_color,x.o)), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(not[circle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[or[blue,size1],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:blue;4:size1;4:rectangle;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, nand[circle,not[size3]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:not[%s];4:size3
'λx.contains(iota(filter(x.s, size1)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[implies[blue,circle],or[or[blue,triangle],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:or[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), and[apply(same_color,x.o),yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, green), apply(same_color,x.o)), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.empty(filter(x.s, and[apply(same_color,x.o),yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(implies[circle,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(implies[circle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[green,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.apply(nor[not[blue],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(nor[size3,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, triangle), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, rectangle), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.forall(not[blue],x.s)'	0:forall(%s,%s);4:not[%s];4:blue;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), filter(filter(x.s, apply(same_color,x.o)), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(and[green,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[green,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(iff[green,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(nor[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(size-gt,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[nor[and[rectangle,rectangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[or[circle,yellow]]), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:yellow;4:not[%s];4:size2
'λx.apply(nand[size2,triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),triangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size3
'λx.apply(size3,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), nor[blue,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:size1
'λx.apply(nand[not[triangle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.forall(or[apply(same_size,x.o),triangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(not[and[size1,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[nand[rectangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(filter(x.s, size1), blue))),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[green,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(or[blue,not[triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(not[and[rectangle,size1]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(nand[triangle,iff[circle,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:iff[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(implies[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.empty(filter(filter(x.s, rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.empty(filter(filter(x.s, rectangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(x.s, rectangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.contains(x.o, filter(x.s, or[size1,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:blue
'λx.apply(or[or[circle,and[yellow,circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:circle;4:blue;1:%s.o;2:x
'λx.forall(or[yellow,apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), and[or[size3,not[size1]],not[and[triangle,yellow]]]), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:size1;4:not[%s];4:and[%s,%s];4:triangle;4:yellow;4:not[%s];4:size1
'λx.apply(circle,iota(filter(x.s, implies[iff[circle,green],circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:circle;4:green;4:circle
'λx.exists(and[blue,or[and[yellow,yellow],apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[triangle]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(implies[nor[green,green],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:green;4:green;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, not[blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, circle), or[size2,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size2;4:green
'λx.apply(or[rectangle,circle],iota(filter(x.s, implies[triangle,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size3
'λx.apply(not[or[and[green,circle],and[circle,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[yellow,blue],iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[or[triangle,size1]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.apply(not[not[iff[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[or[blue,nor[rectangle,size1]],nor[size3,green]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:rectangle;4:size1;4:nor[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, yellow), circle), not[size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[yellow,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[rectangle,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:green;1:%s.o;2:x
'λx.apply(or[size3,triangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[size2,triangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(not[blue], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[rectangle,implies[triangle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(circle,filter(x.s, green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, not[size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.contains(x.o, filter(x.s, not[size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.contains(x.o, filter(x.s, not[size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.exists(not[apply(same_size,x.o)], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.forall(apply(same_shape,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, blue), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.exists(and[or[size2,yellow],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[apply(same_color,x.o)]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(apply(size-geq,x.o),filter(x.s, size2))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(filter(x.s, circle)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_size,x.o)), circle), green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:green;4:circle
'λx.exists(triangle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[or[circle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(not[or[circle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(iff[not[circle],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[triangle,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, green), not[triangle])))), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle;4:size1
'λx.apply(or[size1,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:size3;1:%s.o;2:x
'λx.false'	0:false
'λx.apply(implies[green,size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), not[blue]), implies[green,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:implies[%s,%s];4:green;4:rectangle
'λx.apply(size1,iota(filter(x.s, and[size1,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.forall(circle,filter(filter(filter(filter(filter(x.s, rectangle), and[implies[apply(same_color,iota(x.s)),rectangle],blue]), size2), and[circle,green]), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:blue;4:size2;4:and[%s,%s];4:circle;4:green;4:size1
'λx.empty(filter(filter(x.s, and[implies[size2,and[apply(same_size,iota(x.s)),not[green]]],yellow]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;4:yellow;4:triangle
'λx.exists(blue, x.s)'	0:exists(%s, %s);4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nand[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[not[size2],or[circle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, triangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[circle,not[triangle]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[or[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(apply(size-gt,x.o),filter(filter(x.s, size1), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, or[green,yellow]), not[circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow;4:not[%s];4:circle
'λx.apply(and[not[size2],implies[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), or[triangle,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(iff[triangle,not[not[and[green,triangle]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(nand[circle,not[yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[nand[yellow,yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:yellow;4:yellow;4:green;1:%s.o;2:x
'λx.forall(nor[green,rectangle],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:green;4:rectangle;3:%s.s;2:x
'λx.forall(circle,x.s)'	0:forall(%s,%s);4:circle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.contains(iota(filter(filter(x.s, blue), size1)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[nand[triangle,not[iff[blue,triangle]]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:not[%s];4:iff[%s,%s];4:blue;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[yellow,size3],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(blue,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:blue
'λx.empty(filter(x.s, apply(size-gt,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[nor[size3,and[triangle,size2]],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:size2;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[rectangle,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.exists(triangle, filter(filter(x.s, not[green]), circle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:circle
'λx.empty(filter(x.s, and[yellow,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[triangle,triangle],iota(filter(filter(x.s, and[not[yellow],size3]), and[apply(same_size,x.o),or[size2,not[rectangle]]])))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size2;4:not[%s];4:rectangle
'λx.apply(not[nor[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(not[apply(same_size,x.o)], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(size-leq,iota(filter(x.s, circle))),iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(not[green],x.o)'	0:apply(%s,%s);4:not[%s];4:green;1:%s.o;2:x
'λx.forall(or[blue,iff[and[apply(same_color,x.o),or[triangle,or[rectangle,rectangle]]],blue]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:rectangle;4:blue;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, size2), and[green,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[blue,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, rectangle), blue), circle), apply(same_color,iota(filter(x.s, size3)))), apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, or[and[size2,rectangle],size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:size1
'λx.apply(and[apply(same_size,x.o),not[circle]],iota(filter(filter(filter(x.s, size2), iff[size1,circle]), not[yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:size1;4:circle;4:not[%s];4:yellow
'λx.contains(iota(filter(x.s, size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(not[or[circle,green]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(apply(same_color,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[and[triangle,green]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_color,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, or[size1,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:yellow
'λx.apply(or[blue,or[circle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nand[yellow,green],iota(filter(x.s, or[triangle,not[size2]])))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:size2
'λx.exists(green, filter(filter(x.s, apply(same_shape,x.o)), iff[rectangle,apply(same_size,x.o)]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[or[apply(size-lt,x.o),size1],yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(or[size1,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[blue,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(or[yellow,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.exists(or[blue,yellow], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[size1,nor[rectangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), nand[size1,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:size1;4:green
'λx.apply(implies[yellow,blue],iota(filter(filter(x.s, triangle), and[size1,implies[circle,circle]])))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:circle
'λx.exists(circle, filter(x.s, rectangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, or[size3,rectangle]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle;4:yellow
'λx.exists(and[or[green,size2],apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:green;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[size2,triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(blue,iota(filter(filter(x.s, apply(same_shape,x.o)), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.exists(triangle, x.s)'	0:exists(%s, %s);4:triangle;3:%s.s;2:x
'λx.apply(rectangle,iota(x.s))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[blue,apply(same_color,x.o)],filter(x.s, and[or[size2,apply(same_shape,x.o)],or[rectangle,triangle]]))'	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:triangle
'λx.apply(iff[size1,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, and[yellow,apply(size-leq,iota(filter(x.s, blue)))]), size2), implies[yellow,size1]), triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:implies[%s,%s];4:yellow;4:size1;4:triangle;4:blue
'λx.forall(and[circle,blue],filter(x.s, not[size1]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(blue,iota(filter(x.s, and[circle,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(nand[yellow,iff[triangle,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, size1), yellow), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(and[apply(size-lt,iota(filter(x.s, and[or[apply(same_shape,x.o),triangle],blue]))),and[size1,yellow]],filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:blue;4:and[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(not[and[green,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[not[size2],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(yellow, x.s)'	0:exists(%s, %s);4:yellow;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[size1,triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.apply(or[blue,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.exists(yellow, filter(x.s, or[size2,triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:triangle
'λx.apply(or[green,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(not[nand[yellow,not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[rectangle,nand[green,not[apply(same_shape,x.o)]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,nand[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[triangle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(not[and[iff[rectangle,blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(filter(x.s, green), nor[apply(same_color,x.o),apply(size-lt,x.o)]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green
'λx.exists(circle, filter(filter(x.s, apply(same_shape,x.o)), green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(or[size3,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, or[size2,blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:blue
'λx.apply(or[apply(same_shape,iota(filter(filter(x.s, circle), green))),rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), and[size1,not[blue]]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:and[%s,%s];4:size1;4:not[%s];4:blue;4:size1
'λx.apply(and[not[blue],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, apply(same_size,x.o)), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(not[yellow],x.o)'	0:apply(%s,%s);4:not[%s];4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, and[circle,apply(size-gt,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nor[not[rectangle],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, not[size1]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:green
'λx.exists(rectangle, filter(filter(filter(x.s, apply(same_color,x.o)), rectangle), rectangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:rectangle
'λx.contains(iota(filter(filter(filter(x.s, apply(same_size,x.o)), green), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:green;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(or[triangle,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(and[triangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[blue,iff[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[or[blue,circle],and[size3,circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[size3]), apply(same_color,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(and[or[rectangle,apply(same_shape,iota(x.s))],green],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_color,iota(filter(filter(x.s, blue), implies[size2,apply(same_color,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(filter(filter(x.s, blue), circle))),filter(filter(x.s, nor[rectangle,blue]), blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:blue;4:blue
'λx.forall(triangle,filter(filter(x.s, not[size2]), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.exists(and[or[blue,apply(same_size,x.o)],implies[rectangle,blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.exists(or[apply(same_size,x.o),size3], filter(x.s, not[and[size3,size3]]))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:size3
'λx.apply(or[or[size3,size2],not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(rectangle, x.s)'	0:exists(%s, %s);4:rectangle;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[green]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2
'λx.forall(or[not[rectangle],size2],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.exists(not[and[apply(same_size,x.o),or[green,not[blue]]]], filter(x.s, green))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:green;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(apply(same_color,iota(filter(x.s, green))),filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(green,filter(x.s, rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[apply(same_color,x.o),blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(nand[size1,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(not[nand[circle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, apply(size-geq,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[apply(size-lt,x.o)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[apply(size-lt,x.o)],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(not[size3],x.s)'	0:forall(%s,%s);4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(not[size1],x.s)'	0:forall(%s,%s);4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(nor[implies[apply(same_color,x.o),or[green,yellow]],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:green;4:yellow;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[circle,or[green,circle]]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:or[%s,%s];4:green;4:circle;4:triangle;3:%s.s;2:x
'λx.forall(not[apply(same_shape,x.o)],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size1,or[yellow,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(not[or[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[circle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nand[circle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), not[green]), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:green;4:blue
'λx.forall(apply(same_size,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size2), apply(same_color,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(apply(size-leq,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.exists(and[green,not[size2]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(or[triangle,or[green,iff[green,not[or[blue,triangle]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:green;4:iff[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[and[size1,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[rectangle,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, or[not[blue],not[circle]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:blue;4:not[%s];4:circle
'λx.apply(and[blue,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[not[size2],yellow],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size3), not[iff[size1,blue]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:iff[%s,%s];4:size1;4:blue
'λx.empty(filter(filter(x.s, triangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(x.s))'	0:apply(%s,%s);4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,or[not[nor[size3,rectangle]],size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:size3;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(nand[size3,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nand[size2,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.exists(green, filter(x.s, not[circle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.exists(blue, filter(x.s, and[blue,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, or[size1,green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green
'λx.contains(iota(filter(x.s, and[yellow,size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.exists(size2, filter(x.s, not[circle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.empty(filter(filter(x.s, and[not[circle],not[blue]]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[blue,iff[triangle,green]], filter(x.s, and[or[rectangle,size2],apply(size-geq,x.o)]))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:triangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.apply(nand[not[rectangle],implies[blue,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:implies[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(or[and[size3,green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(implies[or[green,yellow],size3], filter(x.s, apply(size-geq,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, size1), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(and[or[yellow,green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[iff[not[and[blue,size2]],rectangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size2;4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, size2), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(nand[or[yellow,green],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(and[or[or[and[blue,green],apply(same_size,iota(x.s))],apply(same_shape,x.o)],size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(or[or[and[triangle,yellow],apply(size-lt,x.o)],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, green), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[size1,rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(filter(x.s, size2), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.forall(circle,filter(filter(x.s, size3), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(or[rectangle,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), or[yellow,and[rectangle,green]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:green
'λx.apply(rectangle,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.forall(or[size3,and[size2,not[blue]]],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[circle]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:blue
'λx.exists(apply(same_color,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, blue), triangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.empty(filter(filter(x.s, yellow), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle
'λx.apply(yellow,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[yellow,apply(same_shape,x.o)], filter(x.s, or[rectangle,triangle]))'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle
'λx.apply(nor[nor[size1,blue],and[size3,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:size1;4:blue;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.forall(not[apply(same_shape,x.o)],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[iff[size1,circle]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(x.s, and[apply(same_shape,x.o),yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[circle,nand[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[size1,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:circle
'λx.empty(filter(filter(filter(x.s, blue), size1), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:circle
'λx.apply(and[yellow,rectangle],iota(filter(filter(x.s, not[apply(same_shape,x.o)]), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(size3,iota(filter(filter(filter(x.s, rectangle), nand[size3,apply(same_shape,x.o)]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(nand[rectangle,nand[rectangle,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:nand[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(implies[and[blue,not[size1]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[not[green],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(not[green],x.s)'	0:forall(%s,%s);4:not[%s];4:green;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, or[size2,circle]), and[nand[yellow,size1],or[and[and[green,yellow],size1],not[blue]]]), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle;4:and[%s,%s];4:nand[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size1;4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(implies[or[iff[circle,green],blue],blue], filter(x.s, size2))'	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:circle;4:green;4:blue;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[and[yellow,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(implies[nor[circle,and[blue,size1]],or[circle,and[rectangle,rectangle]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size1;4:or[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.exists(not[nand[rectangle,or[size2,and[size3,green]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.forall(size1,filter(x.s, not[apply(size-geq,x.o)]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.forall(rectangle,filter(filter(filter(x.s, circle), green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), or[size1,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, nor[apply(same_size,x.o),and[triangle,yellow]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:yellow
'λx.apply(or[size2,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),green],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(x.s), filter(filter(x.s, size3), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.forall(size1,filter(filter(x.s, green), triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.forall(size1,filter(filter(x.s, apply(same_size,x.o)), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(or[apply(same_shape,x.o),not[circle]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[triangle],iota(filter(x.s, and[blue,rectangle])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle
'λx.forall(blue,filter(filter(x.s, triangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[not[yellow],and[size2,triangle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:size2;4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(nand[not[size2],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), implies[size3,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:size1
'λx.apply(implies[yellow,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(or[not[yellow],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[iff[implies[rectangle,blue],green],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:blue;4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[or[yellow,blue],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(nand[circle,iff[triangle,and[blue,size2]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[and[not[size2],apply(size-geq,x.o)],and[and[apply(same_color,iota(filter(x.s, blue))),size2],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[not[blue],or[rectangle,triangle]]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.contains(iota(filter(x.s, circle)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[and[nor[triangle,or[blue,rectangle]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.exists(not[and[apply(same_color,x.o),triangle]], filter(filter(x.s, apply(same_shape,x.o)), not[green]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green
'λx.apply(blue,iota(filter(filter(x.s, blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(or[rectangle,size2],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[size1,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, size2), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[or[triangle,or[blue,apply(same_shape,iota(x.s))]],green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(and[circle,apply(same_size,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[blue,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(x.s))'	0:apply(%s,%s);4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(x.s))'	0:apply(%s,%s);4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(x.s))'	0:apply(%s,%s);4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size1,blue],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:size3;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, apply(same_shape,iota(filter(x.s, blue)))), apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[apply(same_color,x.o)]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.empty(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, triangle), blue)))), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:circle
'λx.apply(or[or[green,blue],size3],iota(filter(filter(filter(x.s, iff[and[size3,size1],green]), apply(same_shape,x.o)), or[blue,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size3;4:size1;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(or[rectangle,blue],iota(filter(filter(x.s, blue), nand[green,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:green;4:size2
'λx.exists(or[triangle,apply(same_size,x.o)], filter(x.s, circle))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[apply(same_color,iota(filter(x.s, triangle))),rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,not[circle]],iota(filter(filter(filter(x.s, iff[apply(same_shape,x.o),green]), green), green)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:green;4:green
'λx.exists(green, filter(filter(x.s, triangle), size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(not[and[circle,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(green,iota(x.s))'	0:apply(%s,%s);4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(size-geq,iota(filter(x.s, size3))), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(filter(x.s, or[apply(same_color,x.o),size1]), size2), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size2;4:rectangle;3:%s.s;2:x
'λx.apply(iff[and[size1,yellow],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[nor[blue,or[circle,circle]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:circle;4:circle;4:triangle;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, apply(same_size,x.o)), circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.exists(apply(same_color,x.o), filter(x.s, rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, or[green,not[yellow]]), not[size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:not[%s];4:yellow;4:not[%s];4:size3
'λx.apply(and[blue,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(implies[yellow,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(circle, filter(x.s, size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(yellow,filter(filter(x.s, blue), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.exists(circle, filter(x.s, green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[nand[implies[blue,size3],nor[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(filter(filter(x.s, blue), not[yellow]))),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.exists(not[not[not[circle]]], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), size1), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:yellow
'λx.apply(or[iff[blue,size3],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:size3;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[or[triangle,size2],green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:green
'λx.apply(iff[and[triangle,size2],blue],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, rectangle), size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.forall(or[not[blue],apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, nor[blue,triangle]), or[rectangle,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(or[blue,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.contains(x.o, filter(x.s, nor[circle,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:circle
'λx.contains(iota(filter(x.s, and[circle,apply(same_size,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, and[size3,iff[and[apply(same_shape,x.o),or[or[blue,size2],apply(same_size,x.o)]],size3]]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(circle,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(blue,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(not[and[green,not[size3]]], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_color,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[circle,implies[blue,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(not[not[apply(same_size,x.o)]],iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(and[and[green,circle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:size3;1:%s.o;2:x
'λx.exists(and[size2,not[yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:not[%s];4:yellow;3:%s.s;2:x
'λx.exists(iff[blue,apply(same_color,x.o)], filter(x.s, and[not[size1],blue]))'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:blue
'λx.apply(not[or[triangle,and[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(size2,filter(x.s, blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size1,filter(x.s, blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[not[blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue
'λx.apply(or[triangle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[apply(size-geq,x.o),triangle],iota(filter(x.s, nor[and[green,rectangle],size2])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:size2
'λx.exists(and[apply(same_shape,x.o),circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[yellow,yellow],iota(filter(filter(x.s, and[yellow,iff[circle,and[rectangle,green]]]), or[yellow,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:yellow;4:triangle
'λx.forall(blue,filter(filter(filter(x.s, triangle), size1), not[blue]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:not[%s];4:blue
'λx.forall(not[not[or[green,or[apply(size-leq,iota(filter(filter(x.s, apply(same_shape,x.o)), nand[green,size1]))),not[size3]]]]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:green;4:size1;4:not[%s];4:size3;3:%s.s;2:x
'λx.exists(size2, filter(filter(x.s, apply(same_size,iota(filter(x.s, size2)))), blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(size2,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.forall(circle,filter(x.s, circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[circle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.forall(and[yellow,green],filter(filter(filter(x.s, apply(same_shape,x.o)), and[or[apply(same_color,x.o),apply(same_color,x.o)],triangle]), not[and[triangle,blue]]))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:not[%s];4:and[%s,%s];4:triangle;4:blue
'λx.apply(nor[or[size2,rectangle],apply(same_shape,x.o)],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, not[rectangle]), green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:green;4:size1
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(size-gt,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, apply(size-lt,x.o)), or[triangle,green]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:green
'λx.apply(blue,iota(filter(filter(x.s, not[or[apply(same_color,x.o),apply(size-gt,x.o)]]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle
'λx.apply(or[not[rectangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(or[not[rectangle],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(nand[not[circle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(nand[yellow,size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(x.s, apply(same_shape,x.o)), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(nand[not[circle],size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(implies[or[circle,triangle],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, or[blue,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle
'λx.empty(filter(filter(filter(x.s, size1), apply(size-geq,iota(filter(x.s, green)))), iff[size1,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(apply(size-geq,x.o),filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, not[size2]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[blue,not[size3]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[size3,size1],yellow],iota(filter(filter(x.s, blue), and[implies[size2,size3],size3])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:implies[%s,%s];4:size2;4:size3;4:size3
'λx.apply(iff[and[not[size1],blue],and[circle,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:blue;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.empty(filter(filter(x.s, size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.forall(size2,filter(filter(x.s, apply(same_shape,iota(filter(x.s, size3)))), size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(not[and[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.exists(or[triangle,apply(same_color,x.o)], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, triangle)))), blue), blue), triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:blue;4:triangle;4:size3
'λx.contains(iota(filter(filter(filter(x.s, blue), blue), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(implies[yellow,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.forall(not[and[yellow,apply(same_shape,x.o)]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(not[or[apply(same_shape,x.o),circle]],filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(nand[and[triangle,triangle],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:green;1:%s.o;2:x
'λx.exists(iff[or[apply(same_color,x.o),size3],circle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:circle;3:%s.s;2:x
'λx.apply(implies[yellow,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[rectangle,nor[size1,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:nor[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.exists(iff[circle,blue], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(iff[iff[circle,and[blue,triangle]],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[rectangle,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[green,circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(iff[and[yellow,triangle],and[nor[blue,circle],rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[blue,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(or[size1,size2], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), apply(same_color,x.o)), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(circle,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(and[or[size1,yellow],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:not[%s];4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), or[size3,apply(same_shape,x.o)]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(and[apply(same_color,iota(filter(filter(x.s, circle), yellow))),yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, apply(same_size,x.o)), not[apply(size-gt,x.o)]), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2
'λx.forall(green,filter(x.s, nor[apply(same_size,x.o),size1]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.forall(apply(size-geq,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, green), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.contains(x.o, filter(x.s, not[iff[blue,nand[not[rectangle],circle]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:blue;4:nand[%s,%s];4:not[%s];4:rectangle;4:circle
'λx.apply(nand[circle,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(iff[triangle,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(not[yellow], x.s)'	0:exists(%s, %s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.exists(nand[size3,yellow], filter(x.s, circle))'	0:exists(%s, %s);4:nand[%s,%s];4:size3;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(apply(same_size,x.o),filter(x.s, or[size2,rectangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle
'λx.forall(circle,filter(x.s, yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[blue,apply(same_size,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[yellow,not[apply(same_color,x.o)]],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, rectangle), size1), apply(same_color,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[or[size3,and[size2,rectangle]],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[triangle,green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, or[size2,not[and[implies[circle,size1],yellow]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:circle;4:size1;4:yellow
'λx.apply(or[blue,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[nand[circle,blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.exists(iff[blue,apply(size-lt,x.o)], filter(x.s, triangle))'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[and[size3,not[blue]],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(not[nor[size1,or[size2,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_size,iota(filter(x.s, apply(size-lt,x.o)))))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(or[green,or[yellow,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, yellow))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(apply(size-gt,x.o),filter(filter(x.s, yellow), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(not[and[or[yellow,green],or[blue,not[size3]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:or[%s,%s];4:blue;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[size3],x.o)'	0:apply(%s,%s);4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[size1],x.o)'	0:apply(%s,%s);4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[size2],x.o)'	0:apply(%s,%s);4:not[%s];4:size2;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, rectangle), nand[yellow,size2]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nand[%s,%s];4:yellow;4:size2
'λx.empty(filter(filter(x.s, size1), apply(same_color,iota(filter(x.s, green)))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[green,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(implies[green,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(size1, filter(x.s, nor[and[yellow,triangle],circle]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:circle
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), not[apply(size-geq,x.o)]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(yellow,x.o)'	0:apply(%s,%s);4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[circle]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.exists(size1, filter(filter(x.s, or[apply(same_shape,x.o),yellow]), and[rectangle,blue]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:rectangle;4:blue
'λx.exists(rectangle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[blue,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.forall(blue,filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[blue,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[size1,and[apply(same_size,x.o),size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size3
'λx.apply(or[nand[blue,not[circle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[triangle,iff[size2,yellow]]), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:iff[%s,%s];4:size2;4:yellow;4:triangle
'λx.apply(implies[not[blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, or[size3,apply(size-leq,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[blue],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[not[green],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, circle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(not[and[apply(same_shape,x.o),circle]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.exists(and[not[yellow],apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nor[size1,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(not[or[yellow,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(not[and[and[blue,or[yellow,size2]],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:size2;4:size2;1:%s.o;2:x
'λx.apply(not[nand[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[not[circle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(iff[circle,apply(same_color,x.o)], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[circle,nor[rectangle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size1), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, or[rectangle,rectangle])))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle
'λx.forall(size1,filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[blue,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[blue,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[blue,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(iff[and[size2,blue],not[apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(not[yellow],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[yellow,triangle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(not[nor[size2,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[size3,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(implies[circle,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.exists(not[yellow], filter(filter(x.s, green), circle))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(and[triangle,apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[rectangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, yellow), size1), apply(same_shape,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(nand[apply(same_size,x.o),size3],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.forall(nand[apply(same_size,x.o),size1],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(or[or[blue,triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(size2, filter(x.s, not[apply(same_shape,x.o)]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[nor[size3,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[apply(size-lt,iota(filter(filter(x.s, rectangle), and[green,size2])))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[or[blue,rectangle],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:circle
'λx.apply(not[apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(apply(size-lt,iota(filter(filter(x.s, blue), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[or[yellow,green],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(iff[size1,not[blue]], filter(x.s, rectangle))'	0:exists(%s, %s);4:iff[%s,%s];4:size1;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, yellow), circle), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:circle
'λx.apply(not[not[and[green,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[circle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(blue, filter(x.s, nand[blue,not[apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[nor[blue,blue],iff[not[apply(same_shape,x.o)],or[and[size3,size2],circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:blue;4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:size2;4:circle;1:%s.o;2:x
'λx.exists(and[apply(same_color,x.o),not[or[circle,apply(same_shape,x.o)]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[circle]), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.exists(circle, filter(x.s, blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, x.s)'	0:contains(%s, %s);1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_size,iota(filter(x.s, size1)))), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(size2,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[green,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, green), apply(same_color,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[yellow,iff[size2,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.empty(filter(filter(filter(x.s, triangle), blue), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:blue
'λx.apply(and[not[circle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(or[iff[green,size3],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:green;4:size3;4:rectangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[yellow,blue]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.contains(x.o, filter(x.s, nand[not[blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:blue;4:circle
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_color,x.o)), size2), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:rectangle
'λx.apply(not[and[size1,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(and[size1,or[blue,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(filter(x.s, yellow), apply(same_size,x.o)), rectangle)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(not[and[size1,or[circle,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.exists(not[size3], filter(x.s, circle))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(not[size1], filter(x.s, circle))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[blue,size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size3;3:%s.s;2:x
'λx.apply(implies[blue,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.exists(and[apply(same_size,x.o),nand[yellow,size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[and[yellow,and[rectangle,apply(size-leq,iota(filter(x.s, blue)))]],circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.empty(filter(filter(x.s, size1), or[circle,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:triangle
'λx.apply(size2,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(triangle, filter(x.s, and[triangle,apply(same_color,iota(filter(filter(x.s, apply(same_size,x.o)), or[blue,size3])))]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size3
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), not[and[size3,and[rectangle,triangle]]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:triangle
'λx.empty(filter(filter(x.s, triangle), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[blue,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[triangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[implies[circle,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(and[size3,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[green,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[or[rectangle,size1],apply(same_color,iota(filter(x.s, size2)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(nand[not[rectangle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, not[circle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[size1,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[size2,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(x.s, circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[not[and[green,yellow]],apply(same_shape,iota(filter(x.s, blue)))],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[not[green]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[yellow,and[yellow,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, nor[blue,yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:yellow
'λx.apply(or[size1,or[green,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[or[blue,rectangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[yellow,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[yellow,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(or[green,implies[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(not[blue],filter(x.s, not[triangle]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(not[circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, blue), iff[size2,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:size2;4:circle
'λx.apply(or[or[rectangle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[or[triangle,size1],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[not[rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[yellow,size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[iff[yellow,size1],rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:size1;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, size2), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(triangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(blue,filter(x.s, yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, nor[size2,or[triangle,size1]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:size1
'λx.apply(nand[size2,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[rectangle,nor[circle,green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:nor[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(not[not[blue]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[or[size1,not[blue]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:blue;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[not[size3],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(implies[not[size2],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, or[size3,apply(same_size,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), or[and[size1,nor[apply(same_color,iota(filter(x.s, green))),size1]],circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size1;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, size1), or[green,not[or[triangle,triangle]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:triangle;4:triangle
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(x.s, and[and[size3,circle],circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:circle
'λx.apply(blue,iota(filter(x.s, or[apply(same_color,x.o),or[blue,size1]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size1
'λx.exists(nor[apply(same_color,x.o),and[or[triangle,blue],iff[yellow,size2]]], filter(filter(x.s, iff[triangle,yellow]), not[size3]))'	0:exists(%s, %s);4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:iff[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:yellow;4:not[%s];4:size3
'λx.exists(iff[apply(same_size,x.o),triangle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.forall(yellow,filter(x.s, rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[and[size2,size3],circle],iota(filter(x.s, apply(same_color,iota(filter(x.s, or[yellow,green]))))))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green
'λx.apply(nor[and[yellow,size1],and[and[and[not[triangle],blue],and[triangle,and[implies[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),triangle],size2]]],size1]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:blue;4:and[%s,%s];4:triangle;4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[or[triangle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(not[not[apply(size-geq,x.o)]],iota(filter(x.s, not[or[apply(same_color,x.o),circle]])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(or[size3,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(apply(same_color,iota(filter(filter(x.s, iff[size2,rectangle]), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:rectangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), or[and[size2,and[not[size2],apply(same_shape,x.o)]],not[not[not[apply(same_color,x.o)]]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, apply(same_size,x.o)), triangle), nand[nand[yellow,circle],yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:nand[%s,%s];4:nand[%s,%s];4:yellow;4:circle;4:yellow;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, not[blue]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3
'λx.contains(iota(filter(x.s, triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.exists(or[and[size1,triangle],yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:yellow;3:%s.s;2:x
'λx.exists(and[rectangle,apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[not[nor[circle,blue]],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:circle;4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[or[not[circle],triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[triangle,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[nor[and[green,circle],circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[size2]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.apply(iff[yellow,and[rectangle,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[not[triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:green;1:%s.o;2:x
'λx.exists(apply(size-lt,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[blue,rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(and[yellow,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, and[blue,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(and[circle,not[size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:yellow
'λx.apply(nand[iff[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.exists(size1, filter(x.s, or[yellow,not[circle]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:circle
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), or[size1,iff[blue,size2]]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size1;4:iff[%s,%s];4:blue;4:size2;4:size3
'λx.contains(x.o, filter(x.s, not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.exists(and[blue,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(nor[blue,size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(size3, filter(filter(x.s, circle), apply(same_size,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[and[circle,size2],and[not[size1],apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[size1,and[green,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, triangle))),iota(filter(x.s, and[triangle,or[apply(same_color,x.o),size3]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.exists(not[yellow], filter(x.s, and[not[circle],size2]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:size2
'λx.apply(or[circle,not[apply(same_size,x.o)]],iota(filter(x.s, or[and[triangle,green],green])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:green
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(nor[triangle,and[size3,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[nor[blue,triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), not[rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:rectangle
'λx.apply(and[not[blue],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[triangle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(not[not[or[not[size1],apply(size-lt,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, iff[or[triangle,rectangle],and[blue,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:blue;4:blue
'λx.apply(or[not[circle],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[not[circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[not[circle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[blue,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],iota(filter(x.s, or[apply(same_shape,x.o),triangle])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(implies[size1,size1],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.empty(filter(filter(filter(x.s, yellow), rectangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[and[not[and[size2,not[size3]]],size1],or[apply(same_size,x.o),apply(size-geq,x.o)]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:not[%s];4:size3;4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, rectangle), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), blue), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:blue
'λx.apply(and[nand[circle,blue],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), apply(size-gt,x.o)), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow
'λx.apply(implies[size1,or[size3,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(apply(same_color,iota(filter(x.s, not[blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[yellow,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, and[size1,iff[size3,and[apply(size-gt,x.o),size1]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:iff[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.apply(or[yellow,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(not[apply(same_shape,x.o)], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, green), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:circle
'λx.apply(not[and[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(and[circle,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.apply(implies[apply(size-lt,x.o),triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size1,and[blue,not[size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(nand[implies[blue,green],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:blue;4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[not[apply(size-gt,x.o)],rectangle]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;4:size1
'λx.contains(iota(filter(filter(x.s, triangle), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;3:%s.s;2:x
'λx.apply(iff[nor[circle,or[size3,and[size1,triangle]]],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(not[or[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[or[size1,or[yellow,not[circle]]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[rectangle,apply(same_size,iota(filter(x.s, triangle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.empty(filter(x.s, triangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(x.s, green), or[yellow,circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(circle,filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[and[triangle,apply(same_shape,x.o)],triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.empty(filter(filter(x.s, or[size1,apply(same_size,x.o)]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(apply(same_shape,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(size-geq,x.o),filter(x.s, or[triangle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[yellow,rectangle],iota(filter(filter(x.s, apply(same_size,x.o)), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, size1), apply(size-gt,iota(filter(filter(x.s, nand[yellow,apply(same_shape,x.o)]), and[apply(same_size,x.o),circle])))), apply(size-lt,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue
'λx.exists(nor[circle,size2], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[or[not[rectangle],blue],apply(same_size,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[and[apply(size-gt,x.o),size1],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.forall(yellow,filter(filter(x.s, size3), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.contains(iota(x.s), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size3,filter(x.s, or[size2,size1]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1
'λx.apply(or[size1,yellow],iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, apply(same_color,x.o)), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.exists(iff[not[size3],blue], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(iff[circle,circle],iota(filter(filter(filter(x.s, not[size3]), circle), apply(same_shape,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), apply(same_size,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, apply(same_shape,x.o)), green), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:circle
'λx.apply(size2,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.exists(blue, filter(x.s, circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(triangle, filter(x.s, or[size1,not[yellow]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:not[%s];4:yellow
'λx.apply(not[not[or[size1,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[apply(same_color,x.o)]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[green,size1],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[size2,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(and[size1,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(iff[size2,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[triangle], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(x.s, or[blue,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(or[circle,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(iff[size3,apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[or[rectangle,blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:circle
'λx.exists(and[apply(same_size,x.o),not[blue]], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(not[yellow], filter(x.s, or[apply(same_shape,x.o),yellow]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, rectangle), and[green,green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:green;4:green
'λx.apply(blue,iota(filter(x.s, iff[or[blue,not[triangle]],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[yellow,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:rectangle
'λx.forall(or[apply(same_shape,x.o),triangle],filter(x.s, not[size3]))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(blue,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(green, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[yellow],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[yellow],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size1, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size3, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[rectangle,size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(or[green,rectangle],filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_size,x.o)]))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, yellow), rectangle), not[size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:not[%s];4:size3
'λx.contains(x.o, filter(x.s, apply(same_color,iota(filter(filter(x.s, green), circle)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.contains(x.o, filter(x.s, nand[size2,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size2
'λx.exists(size3, filter(x.s, not[and[size3,rectangle]]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:rectangle
'λx.forall(triangle,filter(filter(filter(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, apply(same_size,iota(filter(x.s, blue))))))), and[size1,green]), size2), circle), yellow), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:green;4:size2;4:circle;4:yellow;4:yellow
'λx.exists(nand[size2,size2], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[size2]), rectangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle;4:not[%s];4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[circle,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle
'λx.apply(nand[not[circle],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(or[iff[green,size2],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:green;4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, not[size3]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(nand[blue,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[or[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[circle,rectangle],and[circle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(not[or[rectangle,nand[triangle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(implies[blue,or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(nand[not[green],triangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(x.s, apply(size-geq,x.o))), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, circle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(implies[size2,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(implies[size3,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(implies[size3,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(implies[size1,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(implies[size1,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, blue))),green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_color,iota(filter(x.s, size2))))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[apply(same_shape,x.o),not[yellow]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[or[and[triangle,green],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(size-gt,x.o)), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.apply(or[size1,apply(same_shape,x.o)],iota(filter(filter(x.s, circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[and[size3,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.exists(not[size3], filter(x.s, iff[circle,blue]))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:blue
'λx.exists(size2, filter(x.s, not[green]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(implies[yellow,triangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[or[green,yellow],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:green;4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(or[size2,circle],filter(x.s, not[yellow]))'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(x.s))), size3), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:size2
'λx.contains(iota(filter(filter(x.s, triangle), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;3:%s.s;2:x
'λx.apply(and[or[not[triangle],blue],nand[yellow,and[size2,and[rectangle,yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:blue;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(not[and[green,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[or[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[or[or[green,size2],rectangle],or[blue,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:size2;4:rectangle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size3,filter(x.s, triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(triangle,x.o)'	0:apply(%s,%s);4:triangle;1:%s.o;2:x
'λx.apply(and[circle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[green,apply(same_shape,x.o)],iota(filter(filter(x.s, not[triangle]), not[size2])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:not[%s];4:size2
'λx.contains(iota(filter(x.s, yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.forall(green,filter(x.s, and[size2,not[apply(size-gt,iota(filter(x.s, and[size1,not[not[circle]]])))]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:not[%s];4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, not[not[size1]]), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size1;4:blue
'λx.forall(size2,filter(filter(x.s, yellow), nand[and[yellow,apply(same_shape,x.o)],circle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, not[circle]), apply(same_shape,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(not[and[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[implies[nand[size1,implies[not[rectangle],green]],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:nand[%s,%s];4:size1;4:implies[%s,%s];4:not[%s];4:rectangle;4:green;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size3), blue), apply(same_color,x.o)), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[or[blue,not[not[size3]]],apply(same_size,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.forall(apply(size-geq,x.o),filter(filter(x.s, rectangle), green))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.exists(apply(same_color,x.o), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[not[apply(same_color,iota(filter(filter(x.s, blue), rectangle)))]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(iff[size3,and[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[nand[triangle,size1],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:triangle;4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size1), apply(same_shape,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[circle,and[size1,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), or[yellow,not[and[apply(same_shape,x.o),blue]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[blue,and[blue,apply(same_shape,x.o)]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), implies[size1,rectangle]), not[blue]), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:size1;4:rectangle;4:not[%s];4:blue;4:not[%s];4:blue
'λx.forall(apply(same_shape,x.o),filter(x.s, size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size3, filter(x.s, or[circle,yellow]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, yellow), implies[iff[rectangle,size2],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:iff[%s,%s];4:rectangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[size1,green],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size3,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[size1,triangle]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:triangle;4:blue
'λx.apply(or[and[blue,green],and[apply(same_size,x.o),iff[blue,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(iff[or[yellow,yellow],and[size2,size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(and[implies[nor[iff[circle,apply(same_shape,x.o)],yellow],green],or[circle,apply(same_color,x.o)]], filter(x.s, not[circle]))'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:green;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.exists(not[size2], filter(x.s, green))'	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_color,iota(filter(x.s, circle))),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(implies[circle,yellow], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[size1,blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, implies[triangle,blue]), not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:blue;4:not[%s];4:yellow
'λx.exists(size2, filter(x.s, iff[size3,rectangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:rectangle
'λx.apply(not[and[not[blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[blue,triangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(not[and[or[green,yellow],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_size,x.o)), nor[blue,triangle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:triangle
'λx.apply(or[nor[size2,size1],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size2;4:size1;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nor[yellow,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(or[or[or[triangle,blue],size2],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:size2;4:yellow;1:%s.o;2:x
'λx.exists(or[yellow,triangle], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[size1,and[rectangle,size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(implies[green,not[circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(triangle, filter(x.s, blue))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[or[size3,and[size1,triangle]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[not[rectangle],yellow]), not[circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:yellow;4:not[%s];4:circle
'λx.exists(implies[blue,circle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[yellow,yellow],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(circle, filter(x.s, not[yellow]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(implies[size1,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(implies[size3,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(implies[yellow,or[not[yellow],and[and[yellow,and[blue,yellow]],yellow]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(not[blue],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), not[size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size3
'λx.apply(not[blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size1],iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(triangle,iota(filter(x.s, or[green,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size2
'λx.apply(and[rectangle,blue],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[size2,or[green,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[blue,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[not[blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.empty(filter(filter(x.s, yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(blue,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[not[nand[and[not[or[blue,rectangle]],size1],size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:rectangle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, implies[green,blue]), size3), apply(size-geq,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:blue;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(blue, filter(x.s, and[not[and[size3,size1]],apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:blue
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:blue
'λx.apply(and[iff[blue,circle],implies[size1,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:implies[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[size3,yellow]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(nand[not[size2],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size2;4:yellow;1:%s.o;2:x
'λx.exists(and[triangle,apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), not[apply(size-gt,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(apply(same_color,iota(filter(x.s, apply(same_shape,iota(filter(x.s, blue)))))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(and[iff[nor[blue,circle],or[triangle,or[rectangle,not[blue]]]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:not[%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[iff[or[green,triangle],and[blue,triangle]],size1],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:green;4:triangle;4:and[%s,%s];4:blue;4:triangle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(not[and[triangle,circle]],iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, circle), blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.forall(yellow,x.s)'	0:forall(%s,%s);4:yellow;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[or[blue,circle]]), or[apply(same_color,x.o),blue]), not[apply(size-lt,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:blue;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size1,apply(same_size,iota(filter(filter(filter(x.s, apply(same_size,x.o)), green), size1)))]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:size1;4:size3
'λx.apply(not[triangle],x.o)'	0:apply(%s,%s);4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[yellow,size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(or[circle,or[rectangle,apply(same_size,iota(filter(x.s, or[and[apply(same_size,x.o),not[size2]],size1])))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2;4:size1;1:%s.o;2:x
'λx.forall(not[triangle],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[not[and[size2,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, or[rectangle,size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size1
'λx.apply(or[iff[apply(size-geq,x.o),circle],size1],iota(filter(x.s, and[circle,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3
'λx.forall(size3,filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(nor[size3,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), and[nand[circle,apply(same_color,x.o)],size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.exists(and[or[triangle,size2],yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:yellow;3:%s.s;2:x
'λx.forall(or[apply(same_shape,x.o),yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), size2), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size2
'λx.apply(not[and[rectangle,not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size1), blue), not[yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:not[%s];4:yellow
'λx.apply(implies[and[blue,green],size3],iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(implies[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[circle,size3],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[not[apply(same_color,x.o)]],iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(not[and[not[yellow],or[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(nand[circle,apply(same_size,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(not[yellow],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(nand[blue,iff[circle,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, and[blue,or[rectangle,circle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(implies[or[size2,size1],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size2;4:size1;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, circle), apply(same_shape,x.o)), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[yellow,not[apply(size-gt,x.o)]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(and[apply(same_size,x.o),circle], filter(filter(x.s, apply(same_shape,x.o)), not[blue]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue
'λx.apply(not[and[size1,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[nor[size1,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[and[size3,blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, and[apply(same_shape,x.o),and[yellow,apply(same_color,x.o)]]), triangle), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:triangle
'λx.forall(not[triangle],x.s)'	0:forall(%s,%s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(size1,filter(filter(x.s, green), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.forall(size2,filter(filter(x.s, yellow), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(not[blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(x.s, green))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, size1))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, size2))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, size3))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size2,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size3,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(size-leq,iota(filter(filter(x.s, blue), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), or[rectangle,size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:rectangle;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, or[nor[apply(same_color,x.o),apply(same_size,x.o)],size2]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:size1
'λx.apply(and[iff[blue,circle],or[green,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, apply(same_shape,x.o)), size2), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:yellow
'λx.apply(or[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, nor[circle,circle]), apply(same_size,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(nor[and[and[size3,or[and[blue,apply(size-gt,iota(filter(x.s, and[or[apply(same_color,x.o),triangle],and[rectangle,and[green,size1]]])))],size2]],triangle],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size1;4:size2;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nor[triangle,nor[and[blue,apply(same_size,iota(x.s))],size1]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:nor[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), size1), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:rectangle
'λx.apply(green,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(x.s, green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(triangle,filter(x.s, blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(filter(filter(x.s, size3), rectangle), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:triangle
'λx.apply(or[circle,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[circle,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[apply(same_size,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(green,filter(x.s, and[rectangle,size3]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3
'λx.apply(iff[not[circle],and[circle,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(green,x.o)'	0:apply(%s,%s);4:green;1:%s.o;2:x
'λx.apply(or[or[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.exists(not[apply(same_shape,x.o)], filter(x.s, or[apply(same_color,x.o),apply(same_shape,x.o)]))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[yellow,blue], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[size1,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, implies[size3,triangle])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:triangle
'λx.apply(and[circle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[yellow,not[size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, rectangle), size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.exists(triangle, filter(x.s, or[size1,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size3, filter(x.s, not[blue]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(or[green,or[size1,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(size2,x.o)'	0:apply(%s,%s);4:size2;1:%s.o;2:x
'λx.apply(size3,x.o)'	0:apply(%s,%s);4:size3;1:%s.o;2:x
'λx.apply(size1,x.o)'	0:apply(%s,%s);4:size1;1:%s.o;2:x
'λx.exists(and[or[apply(same_shape,x.o),rectangle],or[green,blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:or[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, not[circle]), implies[yellow,triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:implies[%s,%s];4:yellow;4:triangle
'λx.apply(nand[not[blue],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[iff[size2,or[yellow,size2]],green],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size2;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[yellow,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, and[size3,yellow])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(nand[and[apply(same_shape,x.o),nor[and[blue,blue],blue]],or[size2,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:blue;4:blue;4:blue;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(or[size2,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[rectangle,or[blue,size3]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size3;4:size3;1:%s.o;2:x
'λx.apply(not[and[blue,or[rectangle,not[circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.empty(filter(x.s, apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(or[triangle,rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, size3))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(yellow, filter(x.s, size1))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(yellow, filter(x.s, size2))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(circle,iota(filter(filter(x.s, not[not[or[circle,blue]]]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:blue;4:yellow
'λx.forall(size2,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size2), not[not[circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:not[%s];4:circle
'λx.apply(or[green,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,apply(same_shape,iota(filter(filter(x.s, size3), apply(same_shape,x.o))))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[yellow,circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[green,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(not[and[green,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(not[size2], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(not[size3], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[implies[and[size1,circle],green],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:circle;4:green;4:blue
'λx.apply(iff[or[blue,and[circle,apply(size-lt,iota(x.s))]],or[triangle,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, not[triangle]), green), or[and[yellow,size3],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:green;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[apply(size-geq,iota(filter(x.s, and[blue,size3]))),or[green,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[blue,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), circle), and[circle,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[green,not[and[size2,size2]]], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[green,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[implies[size2,apply(same_color,iota(filter(x.s, yellow)))],size1],iota(filter(filter(filter(x.s, green), not[size2]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size2;4:size1
'λx.apply(blue,iota(filter(x.s, not[nand[rectangle,rectangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:rectangle;4:rectangle
'λx.contains(iota(filter(filter(x.s, rectangle), apply(size-geq,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[size1,size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[triangle,apply(same_color,iota(filter(x.s, and[circle,triangle])))],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(not[iff[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[size3,size1],iota(filter(filter(x.s, blue), or[rectangle,and[blue,blue]])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:blue
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, and[triangle,apply(same_size,iota(x.s))]), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(nand[triangle,or[yellow,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, size1), apply(same_color,x.o)), apply(same_size,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[implies[not[not[and[circle,circle]]],size1],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:circle;4:circle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(implies[implies[size1,blue],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:size1;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[green,yellow],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.exists(or[or[blue,circle],rectangle], filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, and[or[apply(same_size,x.o),circle],size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size3
'λx.apply(or[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[circle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), blue), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue;4:size3
'λx.apply(nand[size3,size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[blue,or[triangle,rectangle]]), implies[blue,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;4:implies[%s,%s];4:blue;4:circle
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(apply(same_color,iota(filter(x.s, blue))),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, blue))),implies[blue,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(or[and[and[nor[size1,nor[iff[size1,triangle],apply(same_size,iota(filter(x.s, rectangle)))]],apply(same_color,x.o)],circle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:nor[%s,%s];4:iff[%s,%s];4:size1;4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[rectangle,and[yellow,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nor[blue,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(x.s, blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(blue, filter(filter(x.s, not[not[apply(same_shape,x.o)]]), not[apply(same_color,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), and[apply(same_shape,x.o),size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(or[size1,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[size1,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[size2,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[size2,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(implies[rectangle,green],iota(filter(filter(x.s, nor[or[apply(same_color,x.o),triangle],size3]), circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size3;4:circle
'λx.contains(iota(filter(x.s, green)), filter(filter(x.s, size1), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(rectangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(and[and[not[or[iff[apply(same_size,x.o),size3],size3]],not[circle]],yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size3;4:not[%s];4:circle;4:yellow;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, and[or[size2,circle],circle]), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:circle;4:circle;4:size3
'λx.apply(or[blue,and[circle,size1]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[iff[circle,and[rectangle,blue]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), or[size3,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size3;4:size2
'λx.apply(implies[circle,blue],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[not[circle],or[size3,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[blue]), and[or[size2,apply(same_color,x.o)],circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.forall(nand[rectangle,size1],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.exists(or[size1,and[circle,green]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:and[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(not[iff[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[apply(same_size,x.o)]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(size3,filter(x.s, yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size1,filter(x.s, yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[size2],iota(filter(filter(filter(x.s, blue), size3), blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:blue
'λx.apply(or[circle,size3],iota(filter(x.s, and[green,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(nand[or[and[size2,size2],size3],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[green,or[circle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(blue,x.o)'	0:apply(%s,%s);4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), not[yellow])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:yellow
'λx.forall(and[circle,apply(same_size,x.o)],filter(x.s, blue))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-gt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(x.s, apply(same_color,x.o)), rectangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[size3,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size3,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.empty(filter(filter(filter(x.s, green), size2), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[nand[size1,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:size1;4:yellow;4:circle;1:%s.o;2:x
'λx.forall(not[green],filter(x.s, triangle))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(filter(x.s, not[apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[circle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nand[size1,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[green,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[and[triangle,nand[size3,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(iff[and[rectangle,size2],and[size3,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(iff[or[or[circle,blue],blue],nand[size2,size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:blue;4:nand[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_shape,x.o),size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(apply(same_color,iota(filter(x.s, or[apply(size-leq,x.o),or[size3,size3]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(not[and[apply(same_shape,x.o),yellow]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(nand[yellow,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nand[yellow,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(nor[blue,not[circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(nand[yellow,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(x.s, implies[implies[or[yellow,rectangle],or[yellow,rectangle]],apply(same_shape,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:yellow;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(and[apply(same_shape,x.o),not[blue]], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[not[blue],and[circle,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, circle), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[implies[not[circle],and[blue,yellow]],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[not[blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(implies[or[circle,blue],or[green,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.exists(and[apply(same_color,x.o),triangle], filter(x.s, not[size2]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[not[yellow],not[and[size2,size1]]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(x.s, circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.exists(size1, filter(filter(x.s, implies[green,size2]), not[circle]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:size2;4:not[%s];4:circle
'λx.apply(apply(same_size,iota(filter(filter(x.s, size2), rectangle))),iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.forall(or[blue,green],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.exists(implies[size3,rectangle], filter(x.s, green))'	0:exists(%s, %s);4:implies[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(green,filter(filter(x.s, size2), apply(same_size,x.o)))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, not[blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.contains(iota(filter(filter(x.s, size2), not[green])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(x.s, circle), yellow)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,apply(same_color,iota(filter(x.s, not[yellow])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(implies[or[blue,circle],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:circle;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[circle,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.forall(blue,filter(filter(x.s, size1), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.contains(x.o, filter(filter(x.s, yellow), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.contains(x.o, filter(filter(x.s, yellow), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(or[yellow,nor[size1,rectangle]],iota(filter(filter(x.s, size3), nor[size1,blue])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nor[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:size1;4:blue
'λx.apply(and[not[size3],apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,not[circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, yellow), rectangle), or[rectangle,circle]), or[rectangle,size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:or[%s,%s];4:rectangle;4:circle;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(and[size3,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.forall(apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),filter(filter(filter(x.s, size1), circle), yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:yellow
'λx.exists(or[rectangle,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size2,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_size,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[size1,rectangle]), and[yellow,size1]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle;4:and[%s,%s];4:yellow;4:size1;4:yellow
'λx.apply(not[and[rectangle,apply(same_shape,iota(filter(x.s, size3)))]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[iff[size1,blue],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size1;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, nand[yellow,size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), implies[size3,blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:size3;4:blue
'λx.empty(filter(x.s, and[not[or[apply(same_color,x.o),and[size3,apply(same_size,x.o)]]],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.forall(size3,filter(x.s, circle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[blue,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.exists(or[blue,size2], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[or[triangle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), or[apply(same_shape,x.o),green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.apply(nand[triangle,nand[or[triangle,size3],blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:nand[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[circle,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[size3],iota(filter(filter(x.s, size2), or[blue,size3])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:blue;4:size3
'λx.apply(iff[blue,not[and[green,rectangle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[circle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size2,rectangle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:yellow
'λx.apply(or[triangle,and[size2,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size2), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(same_shape,x.o)), nor[and[size3,size2],circle]), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:size3;4:size2;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[size1,green],or[size3,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), blue), apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(or[blue,and[rectangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.forall(or[and[or[yellow,not[implies[rectangle,or[or[triangle,circle],apply(size-lt,iota(filter(x.s, green)))]]]],green],blue],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[not[rectangle],apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[or[size3,size2],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[circle,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, triangle), iff[blue,size1]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:iff[%s,%s];4:blue;4:size1
'λx.apply(not[and[green,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(iff[blue,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[and[and[nand[apply(same_size,x.o),blue],rectangle],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[size2,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1
'λx.contains(x.o, filter(x.s, or[size2,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size3
'λx.contains(x.o, filter(x.s, or[size3,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2
'λx.apply(nand[green,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[apply(same_shape,x.o)]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(implies[size2,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(green,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(green,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(and[apply(size-gt,x.o),size1],iota(filter(filter(x.s, or[blue,rectangle]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle;4:size1
'λx.apply(implies[size3,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(nand[circle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(size1,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(size1,iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(size2,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.exists(or[circle,apply(same_color,x.o)], filter(filter(filter(x.s, implies[green,blue]), size2), size2))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:blue;4:size2;4:size2
'λx.apply(iff[circle,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[not[circle],apply(same_size,x.o)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[size3,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle
'λx.empty(filter(x.s, and[apply(same_shape,x.o),not[and[circle,size2]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:circle;4:size2
'λx.exists(green, filter(x.s, nor[yellow,size2]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:size2
'λx.apply(or[rectangle,or[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nand[apply(same_color,iota(filter(x.s, blue))),size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.apply(nand[or[blue,circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[iff[triangle,or[not[triangle],or[yellow,green]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(not[green],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(x.s, or[circle,not[blue]]), nor[size3,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:blue;4:nor[%s,%s];4:size3;4:triangle
'λx.apply(circle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[and[blue,yellow],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[size3,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.apply(size1,iota(filter(x.s, and[size1,triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.empty(filter(filter(x.s, implies[apply(size-lt,x.o),size2]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;4:size3
'λx.apply(and[green,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_size,x.o)), not[size1]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size1
'λx.exists(blue, filter(filter(x.s, size1), not[iff[not[apply(same_size,x.o)],size3]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(apply(size-gt,x.o),filter(filter(filter(x.s, or[yellow,triangle]), yellow), size1))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle;4:yellow;4:size1
'λx.apply(or[triangle,implies[circle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, not[rectangle]), or[blue,blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:or[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.apply(and[circle,not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(not[and[yellow,and[size1,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.forall(nand[rectangle,or[apply(same_color,x.o),size2]],filter(x.s, blue))'	0:forall(%s,%s);4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[implies[and[size3,blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size3;4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, or[size3,rectangle]), apply(same_size,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, rectangle), not[size2]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(implies[size3,size2], filter(x.s, green))'	0:exists(%s, %s);4:implies[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[yellow,and[size3,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.forall(size3,filter(filter(x.s, yellow), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(nand[iff[circle,size3],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:circle;4:size3;4:yellow;1:%s.o;2:x
'λx.exists(blue, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[size2,circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:circle;4:size3;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, not[size3]), circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:circle
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(not[not[green]],iota(filter(x.s, and[blue,green])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green
'λx.apply(nand[rectangle,nor[blue,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:nor[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(implies[not[not[or[blue,circle]]],and[size2,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(implies[size1,apply(size-lt,iota(filter(x.s, size1)))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(nor[and[size3,size2],and[size3,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[green]), apply(same_color,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.exists(rectangle, filter(x.s, blue))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[size3,size1], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, circle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,nand[apply(same_shape,x.o),blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[size2],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(or[green,size2], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:green;4:size2;3:%s.s;2:x
'λx.apply(not[size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[circle,and[size1,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[or[size1,yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.forall(not[size1],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, blue), apply(same_color,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), or[circle,rectangle]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:rectangle;4:rectangle
'λx.apply(or[circle,rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(circle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(filter(x.s, blue), circle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(or[and[green,triangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, not[or[not[apply(size-leq,x.o)],not[blue]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(or[and[rectangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, circle), not[yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:yellow
'λx.apply(apply(size-geq,x.o),iota(filter(filter(filter(x.s, nand[triangle,yellow]), triangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:yellow;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[yellow,blue]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue;4:circle
'λx.apply(nand[triangle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nand[triangle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[rectangle,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, triangle), and[apply(same_shape,x.o),size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(or[or[size2,triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[yellow,yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[not[blue],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[or[and[circle,not[yellow]],rectangle],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:yellow;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[size3,circle],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), circle), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.forall(circle,filter(x.s, and[apply(same_size,x.o),and[nor[rectangle,nor[or[not[rectangle],apply(same_color,iota(filter(filter(x.s, blue), triangle)))],rectangle]],circle]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:rectangle;4:circle
'λx.apply(or[not[yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_size,x.o),size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(nand[yellow,size2],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, not[not[triangle]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:triangle
'λx.apply(and[blue,not[green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, blue), not[triangle]), not[triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:triangle;4:not[%s];4:triangle
'λx.forall(yellow,filter(x.s, triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), rectangle), implies[green,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle;4:implies[%s,%s];4:green;4:rectangle
'λx.apply(not[and[yellow,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(not[rectangle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_shape,x.o)), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.exists(implies[size2,blue], filter(filter(filter(x.s, apply(same_size,x.o)), or[apply(same_size,x.o),rectangle]), not[size1]))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:not[%s];4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), yellow), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:triangle
'λx.empty(filter(filter(x.s, and[size3,implies[not[size2],or[apply(same_shape,x.o),size1]]]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:implies[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(implies[iff[yellow,apply(same_shape,x.o)],triangle], filter(x.s, size3))'	0:exists(%s, %s);4:implies[%s,%s];4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[size1,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(or[yellow,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[apply(same_color,x.o)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[and[size1,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[green,nand[and[size3,yellow],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nand[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.exists(or[yellow,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.exists(or[yellow,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size3;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, and[apply(same_size,x.o),nand[yellow,size1]]), size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:size1;4:size2
'λx.apply(size1,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(size2,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(iff[circle,apply(same_shape,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(nand[triangle,triangle],iota(filter(filter(x.s, size1), apply(same_color,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(implies[size2,triangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.forall(triangle,filter(filter(filter(x.s, or[apply(same_shape,x.o),apply(same_color,x.o)]), size2), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:yellow
'λx.apply(or[nor[circle,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:green;1:%s.o;2:x
'λx.apply(and[and[not[and[triangle,apply(size-lt,x.o)]],circle],apply(same_size,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(triangle,iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.empty(filter(x.s, and[apply(same_shape,x.o),circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.contains(x.o, filter(x.s, or[blue,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green
'λx.contains(x.o, filter(filter(x.s, circle), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.exists(nor[circle,circle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[size3,green],circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[blue,or[triangle,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, blue))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(x.s, size1), or[apply(same_color,x.o),green]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:yellow
'λx.apply(or[and[size3,size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[apply(same_size,x.o),size3]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size1
'λx.forall(circle,filter(filter(x.s, apply(same_size,x.o)), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(nand[yellow,not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(nor[triangle,iff[apply(same_color,x.o),triangle]], filter(x.s, blue))'	0:exists(%s, %s);4:nor[%s,%s];4:triangle;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size1,nor[apply(same_color,iota(filter(x.s, blue))),blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.exists(or[rectangle,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(circle,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(size-leq,iota(filter(filter(x.s, size1), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), and[circle,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:size3
'λx.apply(not[green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[size1,and[yellow,size2]],iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), or[yellow,blue]), apply(same_color,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, apply(same_size,x.o)), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(implies[or[green,yellow],nand[triangle,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:green;4:yellow;4:nand[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size1,rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[apply(same_color,x.o),yellow]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.forall(size2,filter(filter(x.s, triangle), yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.forall(and[green,circle],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(triangle,iota(filter(x.s, nor[size2,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:green
'λx.apply(blue,iota(filter(x.s, or[rectangle,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:rectangle
'λx.apply(or[apply(same_shape,iota(filter(filter(x.s, size1), blue))),size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[iff[size3,triangle],or[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[and[or[size2,not[size1]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), not[size1]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size1
'λx.forall(not[and[blue,rectangle]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(not[apply(same_color,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, circle), circle), apply(same_color,iota(x.s))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(not[green],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(x.s, circle), or[apply(size-leq,x.o),and[size1,size3]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:size1;4:size3
'λx.apply(not[rectangle],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[rectangle,apply(same_shape,iota(filter(filter(x.s, blue), size2)))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.apply(nor[circle,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[yellow,size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[circle,nand[size1,size1]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nand[%s,%s];4:size1;4:size1
'λx.empty(filter(filter(x.s, and[apply(same_color,x.o),size1]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:yellow
'λx.exists(yellow, filter(x.s, circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size1,apply(same_shape,iota(filter(x.s, and[not[yellow],blue])))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(nor[circle,apply(same_shape,x.o)],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(blue, filter(x.s, iff[green,apply(same_color,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[and[triangle,size2],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[not[nand[not[blue],circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nand[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[rectangle,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(nand[and[blue,or[yellow,or[not[circle],green]]],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:circle;4:green;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, green), size2), apply(same_shape,x.o)), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.contains(iota(filter(x.s, green)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[apply(same_color,x.o),implies[apply(same_shape,x.o),and[yellow,blue]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, not[rectangle]), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size2
'λx.apply(implies[iff[blue,and[size3,green]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:blue;4:and[%s,%s];4:size3;4:green;4:circle;1:%s.o;2:x
'λx.apply(iff[rectangle,and[triangle,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(not[and[apply(same_color,x.o),yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, nor[and[size3,size3],apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size3;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[triangle,nor[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[size2,apply(size-lt,iota(x.s))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(and[apply(same_shape,x.o),or[blue,and[nand[nor[size2,triangle],and[apply(same_size,x.o),apply(same_shape,x.o)]],rectangle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.exists(or[yellow,and[apply(same_size,iota(x.s)),apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[apply(same_size,iota(filter(x.s, triangle)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[implies[size2,size3],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(filter(x.s, rectangle), blue), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[not[rectangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[size3,nor[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:nor[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[circle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[blue]), or[circle,apply(size-gt,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nand[size3,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(not[or[and[circle,and[blue,blue]],and[blue,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.forall(or[apply(same_size,x.o),apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[green,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[not[implies[circle,triangle]],nand[not[size1],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:circle;4:triangle;4:nand[%s,%s];4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, triangle), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[blue,and[rectangle,size2]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:size2;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, implies[apply(size-geq,x.o),circle]), rectangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;4:rectangle;4:green
'λx.exists(apply(same_shape,x.o), filter(x.s, and[apply(size-lt,x.o),or[green,size3]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:green;4:size3
'λx.apply(nand[size1,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[circle,or[not[blue],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[triangle,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, and[green,circle]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:size3
'λx.exists(blue, filter(x.s, apply(size-gt,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(rectangle,x.o)'	0:apply(%s,%s);4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[circle,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[circle,nand[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.contains(x.o, filter(filter(x.s, blue), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.contains(x.o, filter(filter(x.s, blue), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.contains(x.o, filter(filter(x.s, triangle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(apply(size-gt,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, and[size2,circle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(implies[size2,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(nand[circle,circle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.exists(and[and[apply(same_size,x.o),yellow],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(and[triangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(size-gt,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(triangle, filter(x.s, nand[green,size2]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size2
'λx.exists(yellow, filter(x.s, or[and[apply(same_shape,x.o),triangle],size2]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size2
'λx.apply(size2,iota(filter(x.s, and[circle,blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(or[apply(same_shape,iota(filter(x.s, and[blue,size1]))),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:circle;1:%s.o;2:x
'λx.apply(nor[nor[yellow,green],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, apply(same_color,x.o)), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(not[and[size1,yellow]],iota(filter(x.s, or[circle,blue])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue
'λx.apply(size3,iota(filter(filter(x.s, not[yellow]), and[or[size3,size1],size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:size3;4:size1;4:size3
'λx.apply(size3,iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(size2,iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(not[apply(same_size,iota(filter(x.s, size1)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(nor[yellow,and[rectangle,green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.exists(size3, filter(x.s, or[triangle,apply(same_color,x.o)]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[size3,or[triangle,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(green, filter(x.s, size2))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(iff[triangle,apply(size-gt,x.o)],iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(or[rectangle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(not[and[blue,not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.forall(apply(size-gt,x.o),filter(filter(x.s, rectangle), size1))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.exists(size1, filter(x.s, green))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size3, filter(x.s, green))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size2, filter(x.s, green))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[size2,and[yellow,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(x.s, apply(same_color,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[circle,nor[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(or[rectangle,blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[or[circle,blue],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:size3;1:%s.o;2:x
'λx.apply(implies[or[triangle,circle],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:triangle;1:%s.o;2:x
'λx.forall(not[size1],filter(x.s, not[blue]))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(or[size1,or[yellow,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, size3), rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:blue
'λx.apply(and[iff[circle,green],not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:green;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[size3,and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(not[or[apply(same_shape,x.o),triangle]],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(rectangle,filter(x.s, circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(x.s, size2), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.empty(filter(filter(x.s, circle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.forall(not[rectangle],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(iff[blue,size1], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(and[or[green,yellow],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[triangle,yellow]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:yellow
'λx.apply(and[circle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, nand[size1,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:circle
'λx.apply(apply(same_shape,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[blue,nor[size2,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(implies[triangle,and[rectangle,implies[and[not[apply(same_shape,iota(filter(filter(x.s, or[triangle,apply(same_shape,x.o)]), size1)))],size2],size1]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[circle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(or[and[triangle,size3],or[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[not[not[circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,nand[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(size1, filter(x.s, triangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(size3, filter(x.s, triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[and[yellow,circle],and[circle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, iff[or[not[yellow],green],and[yellow,and[not[rectangle],not[blue]]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:blue
'λx.contains(iota(filter(x.s, not[size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;3:%s.s;2:x
'λx.exists(green, filter(x.s, triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[circle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size1), apply(same_color,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), size3), yellow)))), green), size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:yellow;4:green;4:size2;4:size1
'λx.apply(implies[size1,apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[circle,size2],iota(filter(x.s, iff[size2,not[triangle]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:not[%s];4:triangle
'λx.apply(iff[and[triangle,rectangle],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(blue,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(not[triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(or[triangle,not[blue]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(nor[size3,apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[and[apply(same_color,x.o),and[not[size3],or[triangle,size1]]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:triangle;4:size1;4:blue;1:%s.o;2:x
'λx.apply(nand[yellow,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, or[size3,yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[yellow,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:yellow
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(or[implies[circle,not[apply(same_color,x.o)]],triangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,nand[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(apply(same_size,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[triangle,implies[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(iff[size2,apply(size-gt,iota(x.s))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[triangle,not[triangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[triangle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nand[rectangle,green],iota(filter(x.s, and[nor[rectangle,green],or[size1,circle]])))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:size1;4:circle
'λx.apply(implies[size1,circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), filter(x.s, triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[iff[triangle,or[circle,iff[rectangle,blue]]],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:iff[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[and[triangle,size2],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[size1,triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, and[circle,green]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.exists(blue, filter(x.s, and[rectangle,apply(same_size,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.exists(nor[implies[apply(same_shape,x.o),size3],circle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), apply(size-geq,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[or[blue,and[and[and[size3,size1],blue],circle]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:blue;4:circle;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[circle,size2]), not[green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:not[%s];4:green
'λx.exists(or[rectangle,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(nor[yellow,not[blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[size1,or[triangle,circle]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[rectangle,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.forall(implies[and[or[and[yellow,circle],blue],and[not[size2],size3]],triangle],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:blue;4:and[%s,%s];4:not[%s];4:size2;4:size3;4:triangle;3:%s.s;2:x
'λx.apply(or[and[triangle,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:circle;1:%s.o;2:x
'λx.forall(and[apply(same_size,x.o),circle],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(x.s, or[blue,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(and[green,not[nor[circle,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:nor[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(apply(same_shape,x.o), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, and[not[rectangle],green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:green
'λx.apply(and[nand[triangle,circle],not[and[circle,iff[triangle,blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:triangle;4:circle;4:not[%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(implies[circle,not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[blue,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(or[size2,size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:size1;3:%s.s;2:x
'λx.apply(nor[and[triangle,green],and[nor[green,and[blue,iff[yellow,circle]]],triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:and[%s,%s];4:nor[%s,%s];4:green;4:and[%s,%s];4:blue;4:iff[%s,%s];4:yellow;4:circle;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(x.s, blue), or[apply(same_color,x.o),yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.forall(size1,filter(x.s, and[apply(same_shape,x.o),and[blue,size3]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size3
'λx.apply(and[rectangle,not[and[size2,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.exists(implies[yellow,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[nor[not[triangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[green]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:triangle;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), circle), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:blue
'λx.forall(size1,filter(filter(x.s, and[apply(same_size,x.o),or[apply(same_color,x.o),yellow]]), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, not[rectangle]), size1), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size1;4:size1
'λx.apply(implies[not[apply(same_shape,x.o)],rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,not[or[size2,yellow]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size2,apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[nand[size1,size1],size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:size1;4:size1;4:size1;3:%s.s;2:x
'λx.apply(or[blue,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.exists(apply(same_size,iota(filter(filter(x.s, blue), triangle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;3:%s.s;2:x
'λx.forall(or[size3,or[apply(same_size,x.o),triangle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), iff[size1,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:iff[%s,%s];4:size1;4:blue
'λx.forall(blue,filter(filter(x.s, size3), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(nor[rectangle,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,yellow],iota(filter(filter(filter(x.s, blue), blue), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(not[rectangle],iota(filter(filter(x.s, or[yellow,or[size3,yellow]]), green)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:yellow;4:green
'λx.apply(and[not[circle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, implies[triangle,blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:blue
'λx.apply(or[nand[triangle,green],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:green;4:size3;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, not[apply(same_color,x.o)]), apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(implies[yellow,apply(same_color,x.o)],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(not[blue], filter(x.s, and[size1,apply(same_color,x.o)]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(and[triangle,not[apply(same_shape,x.o)]],filter(filter(filter(x.s, green), nand[circle,or[blue,apply(same_shape,x.o)]]), implies[rectangle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:circle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(green, filter(x.s, nor[blue,size3]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:size3
'λx.apply(or[not[circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(not[apply(size-lt,x.o)],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:green
'λx.exists(circle, filter(x.s, nand[size2,apply(same_shape,iota(x.s))]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[triangle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[not[triangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[or[apply(same_size,iota(filter(filter(filter(x.s, green), size3), triangle))),size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:triangle;4:size3;4:size2;1:%s.o;2:x
'λx.forall(blue,filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[and[circle,circle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[apply(size-lt,x.o),size3]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3
'λx.contains(x.o, filter(x.s, blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[iff[apply(same_color,x.o),or[circle,and[triangle,blue]]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), and[size2,green]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size2;4:green
'λx.forall(size1,filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,x.o)), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.exists(and[circle,circle], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),green],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[not[triangle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(implies[nor[iff[size3,yellow],triangle],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:size3;4:yellow;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(size-gt,iota(filter(x.s, blue))))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[and[apply(same_color,iota(filter(x.s, blue))),blue],apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.empty(filter(filter(x.s, triangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.empty(filter(filter(x.s, triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.empty(filter(filter(filter(x.s, yellow), nor[triangle,green]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[and[size2,yellow],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(implies[and[circle,green],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:green;4:triangle;1:%s.o;2:x
'λx.apply(not[and[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[green],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[nand[size1,size1],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.apply(nand[circle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[nor[green,size3],not[green]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:green;4:size3;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[or[apply(same_shape,x.o),apply(same_shape,x.o)],implies[apply(same_shape,x.o),blue]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(not[yellow], filter(x.s, or[apply(same_color,x.o),size2]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(not[yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[or[and[not[triangle],size2],apply(size-geq,x.o)]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[triangle,rectangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,and[apply(same_shape,x.o),apply(same_size,iota(filter(x.s, circle)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[triangle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:blue
'λx.apply(implies[triangle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[rectangle,size2]), rectangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, green))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(triangle, filter(x.s, size3))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(triangle, filter(x.s, size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), size3), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:circle
'λx.empty(filter(filter(filter(x.s, iff[size1,or[rectangle,apply(same_color,iota(filter(x.s, not[triangle])))]]), and[triangle,yellow]), and[yellow,not[size2]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:and[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:yellow;4:not[%s];4:size2
'λx.exists(not[nor[and[blue,implies[implies[green,yellow],apply(same_shape,x.o)]],apply(same_color,x.o)]], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:implies[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[iff[size2,or[and[or[size1,circle],and[not[size2],apply(same_color,x.o)]],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:circle;4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(nand[blue,size2],iota(filter(filter(x.s, apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(apply(same_color,iota(filter(x.s, size1))),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(or[apply(same_color,x.o),size3],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, and[apply(same_color,x.o),and[triangle,not[green]]])))), yellow), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:green;4:yellow;4:yellow
'λx.contains(x.o, filter(x.s, not[nor[blue,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:blue;4:circle
'λx.apply(or[or[rectangle,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(size-lt,x.o)), green), green), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:green;4:not[%s];4:rectangle
'λx.exists(or[rectangle,circle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[iff[size1,green],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:size1;4:green;4:yellow;1:%s.o;2:x
'λx.exists(not[green], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(apply(same_color,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[nand[size1,size3],apply(same_shape,x.o)],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, and[or[size3,rectangle],or[apply(same_shape,x.o),yellow]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, implies[not[triangle],triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:triangle;4:triangle
'λx.apply(not[and[not[blue],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(green, x.s)'	0:exists(%s, %s);4:green;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.exists(size1, x.s)'	0:exists(%s, %s);4:size1;3:%s.s;2:x
'λx.exists(size2, x.s)'	0:exists(%s, %s);4:size2;3:%s.s;2:x
'λx.exists(size3, x.s)'	0:exists(%s, %s);4:size3;3:%s.s;2:x
'λx.exists(circle, filter(x.s, and[iff[size1,green],blue]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size1;4:green;4:blue
'λx.apply(nand[circle,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.empty(x.s)'	0:empty(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[size3,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green
'λx.apply(not[blue],iota(filter(x.s, or[green,green])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:green
'λx.forall(yellow,filter(filter(x.s, triangle), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(not[and[circle,or[green,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(not[or[rectangle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, or[circle,not[size3]]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[and[size3,size2],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:size2;4:circle;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(circle,iota(filter(x.s, and[implies[rectangle,circle],yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:circle;4:yellow
'λx.contains(iota(filter(filter(x.s, blue), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, blue), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[triangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(and[size3,or[triangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), apply(same_color,x.o)), and[not[blue],apply(size-leq,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[not[size1],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[green,not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(or[apply(same_shape,x.o),size3],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, or[green,rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, nor[or[rectangle,green],rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:rectangle
'λx.forall(blue,filter(x.s, rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(triangle,filter(filter(x.s, or[apply(same_shape,x.o),circle]), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:rectangle
'λx.apply(and[apply(same_size,x.o),apply(same_size,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, triangle), size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:green
'λx.apply(nand[yellow,and[yellow,nor[green,green]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(circle,iota(x.s))'	0:apply(%s,%s);4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,x.s)'	0:forall(%s,%s);4:triangle;3:%s.s;2:x
'λx.apply(or[not[circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[or[yellow,circle],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), apply(same_color,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(nor[circle,blue], filter(filter(x.s, apply(same_shape,x.o)), apply(same_size,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(implies[apply(same_color,x.o),blue], filter(x.s, size2))'	0:exists(%s, %s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(not[blue],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[blue,implies[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[blue,size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.apply(not[and[not[blue],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,and[size2,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, or[triangle,apply(same_shape,iota(x.s))]), size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.forall(size3,filter(filter(filter(x.s, rectangle), green), apply(same_size,iota(x.s))))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,and[or[size1,not[blue]],triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[or[rectangle,triangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:size1;1:%s.o;2:x
'λx.forall(or[rectangle,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[and[blue,circle],implies[circle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[blue,and[rectangle,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(or[and[apply(same_size,x.o),blue],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, size3), size3), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:blue
'λx.contains(x.o, filter(x.s, or[not[yellow],size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:size3
'λx.apply(nand[nor[rectangle,blue],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[size2,or[blue,and[yellow,size3]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size2,not[size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[green,not[or[blue,apply(same_size,iota(filter(x.s, blue)))]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, apply(same_shape,x.o)), blue), apply(same_size,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[and[blue,apply(same_color,x.o)],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-gt,x.o)), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, apply(same_shape,x.o)), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(green,iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(green,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.exists(not[rectangle], filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, size1)))), size1), green))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:green
'λx.exists(triangle, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[blue,and[or[green,circle],not[rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:green;4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.contains(iota(filter(filter(x.s, size1), or[not[apply(same_size,x.o)],size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(rectangle,filter(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), triangle), not[blue]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:blue
'λx.forall(size1,filter(x.s, and[apply(same_color,x.o),implies[blue,size1]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:blue;4:size1
'λx.apply(apply(size-geq,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[green,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nor[or[triangle,blue],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[size2,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(iff[and[blue,circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(implies[circle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[or[rectangle,not[yellow]],size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:yellow;4:size3;3:%s.s;2:x
'λx.apply(not[and[blue,or[size2,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.forall(and[green,or[blue,circle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(x.s, apply(same_shape,x.o)), rectangle), size2))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:size2
'λx.exists(and[not[rectangle],size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(nor[rectangle,and[green,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, and[rectangle,and[rectangle,apply(same_shape,x.o)]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, apply(same_color,x.o)), not[green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:green
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size2,filter(x.s, not[blue]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.forall(and[size2,yellow],filter(x.s, triangle))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(apply(size-leq,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(or[blue,circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, or[yellow,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green
'λx.apply(and[rectangle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[apply(same_color,x.o),nand[size3,blue]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:blue;4:triangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, not[triangle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[apply(same_color,x.o),not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(implies[not[size1],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size3), and[blue,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:blue;4:size3
'λx.empty(filter(filter(filter(x.s, yellow), nand[not[size3],size1]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:not[%s];4:size3;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, blue), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(and[and[rectangle,blue],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, and[size2,or[apply(same_color,iota(x.s)),blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, blue), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(size2,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(size1,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.exists(and[apply(same_shape,x.o),blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), apply(size-gt,iota(filter(x.s, rectangle))))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[not[apply(same_size,iota(filter(filter(x.s, triangle), blue)))],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:size3;1:%s.o;2:x
'λx.apply(implies[and[apply(same_shape,x.o),blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:circle;1:%s.o;2:x
'λx.forall(not[triangle],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), not[yellow]), size3), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;4:size3;4:size3
'λx.apply(or[circle,and[iff[circle,yellow],or[triangle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:circle;4:yellow;4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[circle,not[yellow]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:yellow
'λx.apply(nand[nor[circle,green],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:circle;4:green;4:blue;1:%s.o;2:x
'λx.apply(nor[triangle,or[blue,size3]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.exists(and[size1,apply(size-geq,iota(filter(x.s, blue)))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(not[nor[circle,rectangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, rectangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(x.s, yellow), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.forall(or[apply(same_color,x.o),apply(same_color,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[blue,or[nor[circle,yellow],green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[apply(same_color,x.o)]), and[size1,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, or[triangle,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1
'λx.empty(filter(filter(filter(x.s, green), apply(same_shape,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(not[and[circle,nand[size1,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, and[iff[size3,triangle],green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:green
'λx.exists(not[apply(same_shape,iota(filter(x.s, yellow)))], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[rectangle,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(size-geq,iota(filter(x.s, blue))),apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[nor[implies[blue,circle],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(implies[rectangle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(not[triangle],filter(filter(x.s, or[apply(same_size,x.o),green]), size3))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:size3
'λx.apply(not[or[blue,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nor[blue,iff[blue,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:iff[%s,%s];4:blue;4:circle
'λx.exists(not[size2], x.s)'	0:exists(%s, %s);4:not[%s];4:size2;3:%s.s;2:x
'λx.exists(not[size3], x.s)'	0:exists(%s, %s);4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(iff[yellow,yellow],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), circle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(nor[blue,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[circle,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(not[and[yellow,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), x.s)'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(rectangle,filter(x.s, and[and[triangle,and[apply(same_shape,x.o),apply(same_shape,x.o)]],nor[apply(same_color,x.o),circle]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nand[size3,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(nor[green,and[circle,yellow]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(iff[triangle,not[blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[circle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[circle,blue],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size1,circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(or[iff[green,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(not[and[or[size1,apply(same_size,x.o)],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, not[blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, and[apply(same_color,x.o),yellow]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:size1
'λx.apply(nor[and[and[size2,green],green],apply(same_size,x.o)],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(nand[and[implies[circle,triangle],blue],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:circle;4:triangle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[implies[blue,circle],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:green;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, apply(same_shape,x.o)), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(or[blue,size2],iota(filter(filter(x.s, apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(or[not[size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(filter(filter(x.s, not[size1]), and[size3,size3]), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:and[%s,%s];4:size3;4:size3;4:green
'λx.empty(filter(x.s, nor[triangle,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[triangle,implies[size3,not[green]]],iota(filter(filter(x.s, yellow), not[apply(size-lt,iota(x.s))])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:size3;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(not[circle],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(iff[yellow,and[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(x.s, green), nor[apply(same_shape,x.o),circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(implies[yellow,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[yellow,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(implies[yellow,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(not[and[triangle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, not[green]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, blue), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(size2,iota(filter(x.s, and[not[triangle],blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:triangle;4:blue
'λx.apply(nand[size1,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[rectangle,implies[size2,yellow]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:size2;4:yellow
'λx.apply(iff[rectangle,nand[blue,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(and[circle,and[implies[size3,apply(same_color,x.o)],apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:and[%s,%s];4:implies[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[nor[and[size2,triangle],size1],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size1;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, not[circle]), or[blue,apply(same_shape,x.o)]), nor[blue,not[apply(same_color,x.o)]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[triangle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[circle,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:triangle
'λx.apply(and[apply(same_shape,x.o),green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[rectangle,blue],iota(filter(filter(filter(x.s, blue), or[not[circle],blue]), apply(same_color,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:not[%s];4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, size3))),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, or[rectangle,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(and[not[circle],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(circle,filter(filter(x.s, or[rectangle,size2]), implies[not[green],iff[apply(size-geq,x.o),blue]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2;4:implies[%s,%s];4:not[%s];4:green;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue
'λx.apply(not[yellow],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, triangle), or[and[apply(same_shape,x.o),green],rectangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:rectangle
'λx.exists(and[triangle,and[rectangle,iff[triangle,rectangle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.empty(filter(x.s, and[size3,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, and[size2,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[blue,green],filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[circle,apply(same_shape,iota(filter(x.s, and[nand[size2,rectangle],circle])))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:size2;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), not[yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:blue
'λx.apply(or[yellow,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[or[blue,circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[and[size2,or[size2,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.forall(not[apply(same_color,x.o)],filter(filter(x.s, yellow), size1))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(implies[and[blue,circle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(nand[or[yellow,size2],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:size2;1:%s.o;2:x
'λx.apply(nand[yellow,or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;3:%s.s;2:x
'λx.exists(and[apply(same_shape,x.o),blue], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_size,iota(filter(filter(x.s, rectangle), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[not[size2],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), or[triangle,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:green
'λx.forall(not[blue],filter(filter(x.s, or[rectangle,triangle]), apply(same_color,x.o)))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, iff[and[green,apply(same_size,iota(filter(x.s, blue)))],blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.exists(implies[iff[circle,and[rectangle,size1]],yellow], filter(x.s, blue))'	0:exists(%s, %s);4:implies[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(or[or[size3,not[or[apply(same_shape,x.o),apply(same_color,x.o)]]],size3],filter(x.s, yellow))'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[apply(same_shape,x.o),implies[implies[blue,size2],not[circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:implies[%s,%s];4:blue;4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[size2,or[size2,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[size3,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, or[triangle,not[nand[size3,nor[triangle,green]]]]), not[blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:nand[%s,%s];4:size3;4:nor[%s,%s];4:triangle;4:green;4:not[%s];4:blue
'λx.forall(blue,filter(filter(x.s, rectangle), nor[apply(size-geq,x.o),yellow]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow
'λx.forall(apply(same_color,x.o),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[triangle,circle],iota(filter(filter(filter(x.s, size1), iff[rectangle,and[yellow,triangle]]), not[blue])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:blue
'λx.apply(or[not[size2],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(not[and[or[yellow,rectangle],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:yellow;1:%s.o;2:x
'λx.exists(nor[rectangle,size3], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, triangle), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[green,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.apply(blue,iota(filter(x.s, and[nand[apply(same_size,x.o),nand[circle,rectangle]],size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:rectangle;4:size1
'λx.apply(blue,iota(filter(filter(x.s, blue), not[green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:green
'λx.forall(circle,filter(filter(x.s, iff[blue,apply(same_shape,x.o)]), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(or[triangle,yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.empty(filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[not[green],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(not[apply(size-gt,x.o)],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[or[rectangle,or[circle,size3]],not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(not[triangle], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[not[iff[size2,apply(same_size,iota(filter(x.s, blue)))]],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_color,iota(filter(x.s, size2))),or[circle,rectangle]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.contains(x.o, filter(x.s, yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(blue,filter(filter(x.s, green), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(nand[not[size1],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(size3,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(size2,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(and[blue,or[size2,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(implies[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],x.o)'	0:apply(%s,%s);4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(implies[circle,not[circle]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[rectangle], x.s)'	0:exists(%s, %s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(nand[not[size1],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[circle],x.o)'	0:apply(%s,%s);4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[blue,yellow]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow
'λx.apply(and[blue,iff[size3,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), size3), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size3
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), iff[circle,yellow]), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:circle;4:yellow;4:not[%s];4:size3
'λx.exists(size3, filter(x.s, and[iff[apply(same_shape,x.o),blue],triangle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:triangle
'λx.apply(or[size3,not[nor[implies[yellow,size3],size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:nor[%s,%s];4:implies[%s,%s];4:yellow;4:size3;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), size2), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size2;4:size2
'λx.contains(x.o, filter(filter(x.s, size3), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.contains(x.o, filter(filter(x.s, size2), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(or[not[or[and[triangle,yellow],rectangle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, and[triangle,size3])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3
'λx.apply(and[circle,apply(same_size,x.o)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[and[green,circle],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[triangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, not[iff[yellow,nor[not[and[and[not[triangle],apply(same_size,iota(filter(x.s, triangle)))],green]],size3]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:yellow;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size3
'λx.apply(and[triangle,green],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(nor[size1,and[size2,green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(nand[not[circle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(nor[and[green,size2],nor[blue,size3]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:size2;4:nor[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(iff[size1,and[size3,rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[nor[green,not[nor[yellow,not[circle]]]],nor[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:green;4:not[%s];4:nor[%s,%s];4:yellow;4:not[%s];4:circle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[rectangle,yellow]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow;4:size1
'λx.empty(filter(filter(x.s, or[nor[size1,blue],blue]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:size1;4:blue;4:blue;4:rectangle
'λx.apply(or[or[iff[size2,and[triangle,triangle]],triangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:triangle;4:triangle;4:triangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.forall(and[circle,and[size2,circle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.exists(blue, filter(x.s, and[nor[green,apply(same_size,x.o)],apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,size1],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), apply(same_color,x.o)), nand[not[size2],yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:not[%s];4:size2;4:yellow
'λx.apply(blue,iota(filter(x.s, and[blue,and[blue,triangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:triangle
'λx.contains(x.o, filter(x.s, and[apply(same_shape,x.o),apply(same_shape,iota(filter(x.s, blue)))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[triangle], filter(filter(x.s, blue), nand[or[green,nand[rectangle,size1]],rectangle]))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:or[%s,%s];4:green;4:nand[%s,%s];4:rectangle;4:size1;4:rectangle
'λx.forall(blue,filter(filter(filter(x.s, rectangle), size2), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:yellow
'λx.empty(filter(filter(x.s, rectangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:blue
'λx.exists(circle, filter(filter(x.s, circle), iff[apply(same_color,x.o),yellow]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(nand[blue,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[blue,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, rectangle), green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.exists(size2, filter(x.s, and[or[size2,size2],not[rectangle]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:size2;4:not[%s];4:rectangle
'λx.forall(or[or[triangle,blue],not[apply(same_shape,x.o)]],filter(x.s, size3))'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[and[yellow,size2],size1],iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.contains(iota(filter(x.s, circle)), filter(filter(x.s, apply(size-geq,x.o)), not[size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(iff[yellow,and[size1,size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.exists(or[apply(same_size,iota(x.s)),size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.forall(or[size2,triangle],filter(filter(x.s, blue), blue))'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(iff[circle,not[blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(iff[size2,rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, yellow), apply(size-geq,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, nand[apply(same_color,x.o),circle]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:size2;3:%s.s;2:x
'λx.apply(and[yellow,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, apply(same_shape,x.o)), and[rectangle,green]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:green
'λx.exists(and[size2,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), or[rectangle,apply(same_shape,x.o)]), not[iff[blue,circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:iff[%s,%s];4:blue;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, rectangle), green), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:green
'λx.apply(iff[not[apply(same_size,x.o)],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.exists(blue, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(not[circle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, yellow), apply(same_color,iota(x.s))), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.exists(and[blue,implies[size3,yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, not[size3]), apply(same_size,iota(x.s))), circle), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(not[rectangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size3,and[blue,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, green), apply(same_color,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.forall(nor[size2,apply(same_shape,x.o)],filter(x.s, size1))'	0:forall(%s,%s);4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(rectangle,filter(x.s, and[apply(same_size,x.o),blue]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.forall(circle,filter(filter(x.s, green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[circle,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.exists(or[size3,triangle], filter(x.s, yellow))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[and[blue,circle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[size2,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[circle,nor[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(and[blue,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.forall(size3,filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.forall(blue,filter(x.s, not[and[or[yellow,green],not[apply(same_color,x.o)]]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, and[apply(same_size,x.o),apply(same_shape,x.o)]), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(implies[and[size2,yellow],and[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(same_size,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[triangle,and[circle,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:blue
'λx.contains(iota(filter(filter(filter(x.s, size2), size2), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size1), green), not[rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:not[%s];4:rectangle
'λx.apply(nor[size1,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size1,not[blue]]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(not[implies[apply(same_color,x.o),and[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),and[size1,yellow]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow;3:%s.s;2:x
'λx.apply(not[iff[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[size1,apply(same_color,iota(x.s))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[green,or[not[circle],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.exists(and[blue,or[or[yellow,apply(same_color,x.o)],and[triangle,yellow]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.contains(iota(filter(x.s, apply(same_size,iota(filter(x.s, size3))))), filter(x.s, and[and[and[not[size2],apply(size-leq,x.o)],yellow],size3]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;4:size3
'λx.exists(apply(same_color,iota(filter(x.s, or[and[apply(same_shape,x.o),blue],rectangle]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:rectangle;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,iota(filter(x.s, triangle)))), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, green), iff[triangle,size3]), green), not[size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:triangle;4:size3;4:green;4:not[%s];4:size1
'λx.apply(not[size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(size2,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(size3,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.empty(filter(filter(x.s, not[size2]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.contains(x.o, filter(filter(x.s, not[blue]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle
'λx.contains(iota(filter(x.s, and[blue,size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[blue,size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(implies[blue,yellow],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(not[and[apply(size-gt,x.o),or[not[green],size2]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:green;4:size2;3:%s.s;2:x
'λx.forall(green,filter(filter(filter(x.s, circle), or[size3,blue]), apply(size-leq,x.o)))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(and[circle,and[not[green],circle]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.exists(size2, filter(x.s, rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(blue,filter(x.s, nor[blue,and[or[not[blue],green],not[apply(same_shape,x.o)]]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[blue,rectangle]), size1)), filter(x.s, apply(size-gt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(implies[size3,and[blue,size1]],filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[circle,implies[blue,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[or[size2,triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:green;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, circle), apply(same_size,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[green,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(and[not[and[triangle,triangle]],nor[apply(size-gt,iota(filter(x.s, green))),size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, size1), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(rectangle,x.s)'	0:forall(%s,%s);4:rectangle;3:%s.s;2:x
'λx.apply(or[blue,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[size3,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[circle,blue],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[size3],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[or[or[and[size1,circle],blue],circle],and[size3,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:blue;4:circle;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, not[yellow]), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3
'λx.apply(nor[size1,or[and[size3,size2],apply(size-lt,iota(filter(x.s, circle)))]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(nand[rectangle,and[size3,rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(iff[implies[blue,triangle],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:blue;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(nor[blue,or[blue,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(and[rectangle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[not[size2],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[triangle,circle],size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(nand[yellow,yellow], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, triangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;3:%s.s;2:x
'λx.exists(size2, filter(x.s, blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size3, filter(x.s, blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size1, filter(x.s, blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.forall(size3,filter(x.s, rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(size2,filter(x.s, rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(x.s), filter(filter(x.s, triangle), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.forall(not[apply(same_color,x.o)],filter(x.s, not[blue]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[apply(same_shape,iota(filter(x.s, triangle))),nand[triangle,green]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(green, filter(x.s, rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[and[circle,yellow],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[circle,rectangle]), and[yellow,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:yellow;4:size1
'λx.apply(iff[not[and[blue,not[size1]]],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:size1;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[triangle,or[green,yellow]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:yellow
'λx.apply(nand[size1,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(rectangle,filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(size1, filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(circle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, circle), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size3
'λx.apply(not[and[size1,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[size2,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, and[apply(size-leq,x.o),size2]), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;4:yellow
'λx.apply(rectangle,iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(iff[yellow,and[size2,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, and[not[apply(same_shape,x.o)],or[and[green,and[size3,size2]],nor[apply(same_shape,x.o),and[yellow,blue]]]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.apply(or[circle,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, rectangle), nand[yellow,rectangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nand[%s,%s];4:yellow;4:rectangle
'λx.forall(circle,filter(x.s, and[not[circle],apply(size-lt,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[not[or[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(x.s, not[blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[or[apply(same_shape,iota(x.s)),nor[size3,and[apply(same_size,iota(filter(x.s, size3))),not[apply(same_size,x.o)]]]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), blue), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:triangle
'λx.contains(x.o, filter(x.s, not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(iff[nor[blue,yellow],circle],iota(filter(filter(x.s, not[triangle]), not[size3])))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:blue;4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:not[%s];4:size3
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(not[not[and[yellow,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[apply(same_color,x.o),circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.forall(size3,filter(filter(x.s, and[rectangle,apply(same_color,x.o)]), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(or[rectangle,apply(same_size,x.o)], filter(x.s, circle))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(x.s, and[rectangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(or[and[green,triangle],nor[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nand[blue,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(not[rectangle],x.s)'	0:forall(%s,%s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(and[triangle,and[implies[and[size2,size1],blue],not[and[triangle,not[triangle]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:size1;4:blue;4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, apply(same_shape,x.o)), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(implies[yellow,green], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[size2,rectangle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:yellow;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, apply(same_size,x.o)))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(and[size3,yellow],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), or[not[apply(same_size,x.o)],size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.forall(triangle,filter(x.s, or[size2,and[size1,rectangle]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(nand[circle,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, not[size1]), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:circle
'λx.apply(or[triangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), nand[triangle,size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:triangle;4:size3;4:yellow
'λx.apply(apply(size-lt,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,or[or[blue,size3],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:circle;1:%s.o;2:x
'λx.apply(or[green,nand[size1,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nand[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(not[not[apply(same_size,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.forall(triangle,filter(x.s, size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(triangle,filter(x.s, size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(triangle,filter(x.s, green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[not[and[size2,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.exists(or[apply(size-gt,x.o),and[green,and[or[rectangle,green],yellow]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:yellow;3:%s.s;2:x
'λx.apply(or[size3,rectangle],iota(filter(filter(filter(x.s, nand[size1,green]), green), green)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:green;4:green;4:green
'λx.forall(and[not[apply(same_shape,x.o)],nand[triangle,circle]],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:triangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[triangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.exists(not[yellow], filter(filter(x.s, blue), size3))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.contains(x.o, filter(filter(x.s, and[size2,nand[blue,rectangle]]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:rectangle;4:rectangle
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, triangle), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:green
'λx.apply(and[implies[yellow,circle],nand[yellow,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:circle;4:nand[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[not[apply(size-gt,iota(filter(filter(x.s, size2), circle)))],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), nor[size1,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:nor[%s,%s];4:size1;4:blue
'λx.apply(not[yellow],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, rectangle), and[apply(same_shape,x.o),rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.forall(blue,filter(filter(x.s, triangle), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(and[blue,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,filter(x.s, and[apply(same_size,x.o),and[size1,yellow]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.exists(apply(same_shape,x.o), filter(x.s, not[rectangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.exists(not[circle], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(implies[triangle,rectangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[and[size1,apply(same_shape,x.o)],not[yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(iff[not[blue],nor[size1,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:blue;4:nor[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[and[blue,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[not[triangle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, or[triangle,apply(same_size,x.o)]), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.forall(circle,filter(x.s, and[or[blue,triangle],apply(same_shape,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[apply(same_size,x.o),yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),triangle],iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.exists(or[blue,size3], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[apply(same_shape,iota(filter(x.s, triangle))),green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;3:%s.s;2:x
'λx.exists(apply(same_size,x.o), filter(filter(filter(x.s, or[rectangle,size3]), apply(same_color,x.o)), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(triangle,filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(and[apply(same_color,x.o),size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.forall(size2,filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), green), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:green
'λx.forall(or[size1,not[blue]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size2
'λx.forall(rectangle,filter(x.s, green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(rectangle,filter(x.s, size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(rectangle,filter(x.s, size2))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[and[or[yellow,nand[blue,circle]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:nand[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, and[blue,apply(same_color,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, nor[circle,green]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:green
'λx.forall(blue,filter(x.s, green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(x.s, size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(x.s, size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(implies[and[iff[and[yellow,green],green],blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:green;4:green;4:blue;4:circle;1:%s.o;2:x
'λx.exists(or[circle,and[blue,nor[size1,size1]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:nor[%s,%s];4:size1;4:size1;3:%s.s;2:x
'λx.exists(nor[size2,blue], filter(filter(x.s, not[apply(size-gt,x.o)]), rectangle))'	0:exists(%s, %s);4:nor[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,or[size2,and[size1,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[circle,iff[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), not[circle]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:circle;4:size2
'λx.apply(or[circle,or[not[blue],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[not[apply(size-gt,x.o)],not[apply(same_size,x.o)]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, and[or[circle,blue],size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:size1
'λx.apply(not[not[triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[implies[and[size2,circle],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size1;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, triangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(apply(same_size,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[not[or[circle,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[size2]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:yellow
'λx.apply(and[triangle,and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[or[blue,blue],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(iff[and[nand[yellow,rectangle],rectangle],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:yellow;4:rectangle;4:rectangle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[nand[triangle,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:triangle;4:blue;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, triangle))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), nand[size1,size2])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:size1;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, green), and[size1,rectangle]), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size1;4:rectangle;4:yellow
'λx.apply(iff[apply(same_size,x.o),not[yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(x.s))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[green,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, size1))),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[blue,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, triangle), blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(or[implies[triangle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;3:%s.s;2:x
'λx.apply(and[size3,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(not[apply(size-leq,x.o)],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, green), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, not[circle]), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[size1,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(rectangle,iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[yellow,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(or[size3,rectangle], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[yellow,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[blue,implies[circle,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:rectangle
'λx.apply(or[not[blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[triangle,and[or[rectangle,rectangle],or[yellow,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[nand[iff[blue,and[rectangle,size2]],circle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:size2;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[green,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size3,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, circle), yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, iff[circle,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size2
'λx.apply(or[size1,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(implies[not[nand[circle,circle]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:nand[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[yellow,yellow],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[size1,triangle],and[iff[yellow,circle],rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, apply(same_shape,x.o)), blue), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue
'λx.exists(circle, x.s)'	0:exists(%s, %s);4:circle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, not[apply(size-geq,x.o)]), green), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green;4:size2
'λx.apply(not[not[implies[green,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size2, filter(filter(x.s, yellow), rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.contains(x.o, filter(x.s, and[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), nand[circle,apply(same_color,x.o)]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(implies[triangle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.exists(not[blue], x.s)'	0:exists(%s, %s);4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(and[and[circle,size3],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size1,and[and[green,triangle],size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[nand[green,rectangle],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[size1],not[blue]],iota(filter(filter(x.s, and[size3,size3]), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, iff[apply(same_size,x.o),not[blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue
'λx.forall(apply(same_color,x.o),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size3,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(iff[and[rectangle,circle],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:yellow;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[yellow,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[not[rectangle],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, yellow), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.empty(filter(x.s, nand[size2,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size2
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, green), and[triangle,or[rectangle,size3]])))), blue), size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:size3;4:blue;4:size2;4:yellow
'λx.forall(not[size3],filter(x.s, triangle))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[green,nand[size2,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_size,x.o)), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.forall(not[rectangle],filter(filter(x.s, apply(same_shape,x.o)), or[yellow,green]))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[blue,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[nand[circle,not[rectangle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(implies[apply(same_color,x.o),circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[green,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(not[green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, not[rectangle]), not[yellow]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:not[%s];4:yellow;4:size1
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[and[triangle,not[blue]],rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;4:rectangle
'λx.apply(or[implies[not[and[apply(same_size,x.o),rectangle]],triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(size1,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(nor[circle,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(iff[nand[iff[and[blue,yellow],not[yellow]],size1],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:not[%s];4:yellow;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(nor[circle,circle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.exists(not[not[apply(same_shape,x.o)]], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(blue,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[not[yellow],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[and[triangle,triangle]],or[apply(same_color,x.o),apply(same_color,iota(filter(x.s, rectangle)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), or[and[triangle,blue],rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:rectangle
'λx.apply(blue,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(not[nand[or[yellow,green],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[and[triangle,rectangle],nor[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[iff[size1,apply(size-lt,x.o)],size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3
'λx.apply(implies[size1,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[or[yellow,yellow],nand[triangle,circle]]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:nand[%s,%s];4:triangle;4:circle;4:triangle
'λx.apply(nand[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[green,size1],iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.contains(iota(filter(x.s, implies[implies[apply(same_size,x.o),nor[size1,rectangle]],size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(iff[or[and[circle,size2],yellow],iff[size2,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:size2;4:yellow;4:iff[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), apply(size-leq,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(not[rectangle], filter(filter(x.s, or[triangle,size2]), nand[apply(same_shape,x.o),triangle]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(iff[size2,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nand[blue,circle],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:circle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, iff[size2,yellow]), blue), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:yellow;4:blue;4:circle
'λx.exists(circle, filter(filter(x.s, not[size2]), green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:green
'λx.apply(nor[green,size1],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[nor[blue,apply(same_shape,x.o)],rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[implies[and[apply(same_size,x.o),or[rectangle,green]],circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:green;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[implies[blue,and[rectangle,yellow]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[rectangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[size2,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(nand[yellow,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, or[blue,rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.forall(size1,filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(apply(same_shape,iota(filter(x.s, blue))),filter(filter(x.s, blue), apply(size-geq,iota(filter(filter(x.s, size3), circle)))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(or[blue,or[nor[nand[green,triangle],circle],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:green;4:triangle;4:circle;4:circle;1:%s.o;2:x
'λx.apply(iff[size2,blue],iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(apply(size-lt,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[or[and[size2,triangle],size1],not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size1;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(nor[rectangle,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[yellow,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[and[rectangle,yellow],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size3,filter(filter(filter(x.s, circle), not[blue]), apply(same_color,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(not[or[size3,and[apply(same_size,x.o),size2]]],filter(x.s, size2))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[size1,nand[size2,rectangle]],iota(filter(x.s, and[green,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:nand[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, size1), triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(not[rectangle],iota(filter(filter(filter(x.s, size1), rectangle), rectangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:rectangle
'λx.exists(not[implies[blue,size3]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:blue;4:size3;3:%s.s;2:x
'λx.apply(or[and[blue,blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[and[blue,blue],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[yellow,nand[triangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,and[nor[size2,iff[size3,size1]],rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:nor[%s,%s];4:size2;4:iff[%s,%s];4:size3;4:size1;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(nor[rectangle,rectangle],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(size2,filter(filter(x.s, apply(same_color,x.o)), size3))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(nor[and[green,or[rectangle,and[green,triangle]]],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(not[and[not[circle],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(iff[not[circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[size1,apply(same_shape,x.o)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(or[apply(same_size,x.o),apply(size-gt,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.empty(filter(filter(x.s, size1), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(or[triangle,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, or[blue,triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(or[size2,size1],iota(filter(x.s, or[apply(size-lt,x.o),size1])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1
'λx.apply(implies[blue,size3],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(x.s, not[circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(nand[size1,blue],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[not[triangle],rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(not[and[triangle,implies[green,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:implies[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(filter(x.s, triangle), nand[size3,blue]))), filter(x.s, apply(same_shape,iota(filter(x.s, triangle)))))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[nand[apply(same_size,x.o),nor[size1,blue]],not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:blue;4:not[%s];4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[triangle,not[and[apply(same_color,x.o),circle]]]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:circle
'λx.contains(iota(filter(x.s, blue)), filter(filter(x.s, and[size1,apply(same_shape,x.o)]), size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.forall(green,filter(filter(filter(x.s, and[circle,apply(same_shape,iota(filter(x.s, and[or[blue,blue],size2])))]), circle), green))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:size2;4:circle;4:green
'λx.exists(blue, filter(x.s, size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(blue, filter(x.s, size3))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(blue, filter(x.s, size1))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(blue, filter(x.s, green))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[implies[and[blue,size3],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:size3;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, blue), circle), size3))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3
'λx.apply(or[not[apply(same_shape,iota(filter(x.s, size2)))],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;1:%s.o;2:x
'λx.apply(nand[not[size3],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[and[nor[size3,blue],not[circle]],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:blue;4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.exists(nor[and[and[circle,size1],blue],implies[apply(same_shape,x.o),circle]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:blue;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(rectangle,iota(filter(x.s, or[rectangle,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(apply(same_size,iota(filter(filter(filter(filter(filter(x.s, circle), or[apply(same_size,iota(filter(filter(x.s, not[implies[iff[apply(size-gt,x.o),apply(same_size,x.o)],green]]), triangle))),apply(same_color,x.o)]), size1), size1), nor[green,triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:size1;4:nor[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[yellow,not[size2]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:size2;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, blue), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(blue,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[circle,green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:circle;1:%s.o;2:x
'λx.apply(and[green,triangle],iota(filter(x.s, and[triangle,size1])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1
'λx.apply(and[implies[yellow,blue],or[not[size2],size2]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:not[%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(rectangle,filter(filter(x.s, apply(size-lt,x.o)), not[size1]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:size1
'λx.forall(green,filter(x.s, yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, circle), or[yellow,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:yellow;4:circle
'λx.apply(not[nor[circle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(not[nor[circle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, and[apply(same_color,x.o),circle]), and[blue,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[apply(same_shape,x.o),size1]), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, or[size2,rectangle]), apply(same_color,x.o))))), green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.empty(filter(filter(x.s, or[green,size2]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size2;4:circle
'λx.apply(nor[triangle,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[and[green,rectangle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,implies[or[blue,circle],and[triangle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nand[rectangle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nand[rectangle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(or[size3,rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[circle,not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(nand[circle,not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[blue,implies[circle,size3]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:size3
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[triangle,implies[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, or[size2,circle]), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:circle;4:size1
'λx.apply(and[rectangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(x.s, size1), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.empty(filter(filter(x.s, size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.empty(filter(filter(x.s, size2), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.empty(filter(filter(x.s, size3), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(nor[rectangle,nor[size1,or[blue,circle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:nor[%s,%s];4:size1;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, triangle), nor[blue,circle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:blue;4:circle
'λx.forall(size3,filter(filter(x.s, apply(same_size,x.o)), not[or[blue,triangle]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:triangle
'λx.apply(and[yellow,and[not[size3],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[yellow,and[triangle,or[size1,not[circle]]]],not[iff[rectangle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:not[%s];4:circle;4:not[%s];4:iff[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, yellow), size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.forall(rectangle,filter(filter(x.s, apply(size-lt,x.o)), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green
'λx.forall(and[or[nand[apply(same_shape,x.o),or[rectangle,triangle]],size3],yellow],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:size3;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(x.s, iff[apply(same_shape,x.o),green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(or[green,iff[yellow,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:iff[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(circle,filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(filter(x.s, or[blue,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(circle,iota(filter(filter(x.s, iff[yellow,not[size2]]), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:not[%s];4:size2;4:size2
'λx.empty(filter(filter(x.s, circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.empty(filter(filter(filter(x.s, triangle), and[size2,apply(same_shape,x.o)]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.forall(apply(size-geq,x.o),filter(x.s, rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(not[circle], x.s)'	0:exists(%s, %s);4:not[%s];4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nand[size3,or[rectangle,triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:triangle
'λx.empty(filter(filter(x.s, blue), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[or[blue,size1],not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[iff[nand[size3,rectangle],green],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:size3;4:rectangle;4:green;4:green;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size1), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(implies[circle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),implies[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[circle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(x.s, triangle), apply(same_color,x.o)), not[blue]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue
'λx.forall(green,filter(filter(x.s, yellow), apply(same_color,x.o)))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[iff[circle,apply(same_size,x.o)],or[circle,triangle]], filter(x.s, and[green,size1]))'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1
'λx.apply(size3,iota(filter(x.s, nor[not[or[or[and[blue,blue],size3],rectangle]],blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3;4:rectangle;4:blue
'λx.apply(and[not[triangle],implies[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[or[triangle,yellow],apply(same_size,x.o)]), apply(size-gt,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, apply(same_color,x.o)), size1), and[circle,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:and[%s,%s];4:circle;4:circle
'λx.apply(and[size3,blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(rectangle, filter(x.s, not[green]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(apply(same_size,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(green,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(rectangle, filter(x.s, not[size1]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(blue,iota(filter(filter(x.s, apply(same_size,x.o)), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[implies[or[yellow,size2],or[size1,blue]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:or[%s,%s];4:size1;4:blue
'λx.apply(nand[or[size3,size1],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size3;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(nor[and[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(not[not[not[yellow]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(circle,filter(filter(x.s, blue), apply(same_size,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(or[not[apply(same_color,iota(x.s))],not[green]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(or[triangle,circle],iota(filter(x.s, and[apply(same_shape,x.o),yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(not[nor[blue,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), apply(same_color,x.o)), and[size2,blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(and[circle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[or[yellow,green],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[size3,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[size1,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, circle), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;3:%s.s;2:x
'λx.apply(or[size2,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(not[rectangle],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_color,iota(filter(x.s, not[yellow])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.forall(and[circle,size3],filter(filter(x.s, nor[size3,not[and[apply(same_size,x.o),size2]]]), size2))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:size2
'λx.forall(size3,filter(filter(x.s, green), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.forall(size2,filter(filter(x.s, green), size3))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:size1
'λx.apply(or[rectangle,implies[size2,circle]],iota(filter(filter(x.s, apply(same_color,x.o)), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[nor[and[size2,blue],size3],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size2;4:blue;4:size3;4:green;1:%s.o;2:x
'λx.apply(or[yellow,or[size1,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[yellow,and[yellow,and[apply(same_shape,x.o),rectangle]]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.exists(iff[size3,apply(same_size,x.o)], filter(x.s, size1))'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[yellow,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[and[or[green,size3],circle],iff[apply(size-geq,x.o),blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:size3;4:circle;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue
'λx.apply(and[iff[green,circle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[blue,size2]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:blue
'λx.apply(iff[green,circle],iota(filter(filter(x.s, iff[triangle,and[size3,size1]]), size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:size1;4:size3
'λx.contains(x.o, filter(filter(x.s, or[and[and[blue,apply(same_color,iota(filter(x.s, and[green,triangle])))],green],iff[and[yellow,rectangle],rectangle]]), implies[size1,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:green;4:iff[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:rectangle;4:implies[%s,%s];4:size1;4:blue
'λx.forall(blue,x.s)'	0:forall(%s,%s);4:blue;3:%s.s;2:x
'λx.exists(iff[size3,yellow], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[apply(same_shape,x.o),and[rectangle,apply(same_size,x.o)]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[green,apply(same_color,x.o)],iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(nand[size1,green],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(and[size3,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(or[not[green],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(nand[green,nand[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:nand[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[triangle],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.forall(and[circle,or[rectangle,apply(same_color,x.o)]],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[not[size3],nor[triangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:nor[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(not[and[and[yellow,size1],not[apply(same_shape,x.o)]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(filter(x.s, not[green]), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size1
'λx.contains(x.o, filter(filter(x.s, or[size3,green]), and[blue,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green;4:and[%s,%s];4:blue;4:blue
'λx.apply(nor[size3,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.exists(or[triangle,rectangle], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[circle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size3), iff[apply(same_shape,x.o),not[apply(same_size,iota(filter(x.s, size3)))]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[size3,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[green,or[apply(same_shape,x.o),size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(or[nor[size3,size2],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[circle,not[nand[circle,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(iff[blue,circle],filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o)))'	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(apply(same_size,x.o),filter(x.s, size2))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(apply(same_size,x.o),filter(x.s, green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(size-lt,iota(filter(filter(x.s, and[green,size1]), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[not[circle],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[size2,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[blue,circle],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.forall(or[size2,circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:green
'λx.apply(nand[green,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_size,x.o)), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, green), nor[and[nor[blue,or[yellow,size3]],rectangle],size2]), iff[size2,yellow])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:size3;4:rectangle;4:size2;4:iff[%s,%s];4:size2;4:yellow
'λx.apply(not[and[and[yellow,green],yellow]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, or[or[size2,apply(same_color,x.o)],triangle]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.apply(nand[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[or[and[circle,blue],nor[and[size1,triangle],yellow]],and[rectangle,circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:yellow;4:and[%s,%s];4:rectangle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(implies[not[circle],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(not[and[size2,rectangle]],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[not[circle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[circle,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size3
'λx.apply(implies[green,not[triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(or[size1,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(implies[circle,and[apply(same_shape,iota(filter(x.s, and[green,rectangle]))),rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), not[or[blue,circle]]), or[circle,apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:circle;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[size1,implies[blue,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:implies[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[size2,or[yellow,apply(same_color,iota(filter(x.s, not[size2])))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(not[and[rectangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, apply(same_shape,x.o)), and[apply(same_color,x.o),blue]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(nand[iff[rectangle,blue],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_size,iota(x.s)),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),size3],iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(x.s, or[apply(same_shape,x.o),size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.forall(green,filter(filter(x.s, blue), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.exists(or[and[circle,apply(same_size,x.o)],and[rectangle,triangle]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), circle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:yellow
'λx.empty(filter(filter(x.s, and[yellow,apply(same_color,x.o)]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.forall(size3,filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.forall(size1,filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(nor[triangle,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,apply(same_size,x.o)]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(and[green,not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[or[not[circle],rectangle],apply(same_size,x.o)]), and[blue,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:blue
'λx.apply(and[not[iff[size3,green]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:size3;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(or[green,or[size2,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.exists(not[apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[triangle,nor[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(or[size2,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size1,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;3:%s.s;2:x
'λx.apply(implies[nor[blue,triangle],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:blue;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(and[rectangle,or[size3,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nand[not[green],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size1), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.forall(blue,filter(filter(x.s, size3), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.forall(blue,filter(filter(x.s, size2), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.forall(blue,filter(filter(x.s, size3), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(or[or[and[size3,triangle],circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:circle;4:blue;1:%s.o;2:x
'λx.exists(implies[size2,size1], filter(x.s, and[not[apply(same_color,x.o)],green]))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.forall(not[apply(size-gt,x.o)],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(not[yellow], filter(x.s, or[apply(same_color,x.o),apply(same_color,x.o)]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[or[triangle,size3],not[not[apply(size-geq,iota(filter(x.s, apply(same_shape,iota(filter(x.s, blue))))))]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(nand[not[size1],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), not[size1]), or[not[iff[and[and[yellow,circle],circle],and[size3,triangle]]],size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size1;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:circle;4:and[%s,%s];4:size3;4:triangle;4:size2;3:%s.s;2:x
'λx.apply(or[size1,size3],iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(and[triangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[and[size3,circle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size3;4:circle;4:blue
'λx.forall(triangle,filter(filter(x.s, size2), apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[triangle,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), circle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:size3
'λx.apply(and[circle,and[not[blue],apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[yellow,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(and[or[yellow,nor[blue,blue]],or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:blue;4:blue;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(or[or[triangle,size3],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:green;1:%s.o;2:x
'λx.apply(nor[circle,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[blue,rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(and[iff[size1,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size1;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, nor[triangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:blue
'λx.empty(filter(filter(filter(x.s, size2), triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:green
'λx.empty(filter(filter(x.s, green), implies[rectangle,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:rectangle;4:triangle
'λx.contains(x.o, filter(x.s, or[or[triangle,circle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:blue
'λx.apply(and[triangle,apply(same_size,iota(filter(filter(x.s, size3), blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;1:%s.o;2:x
'λx.exists(and[not[not[implies[not[and[size2,rectangle]],and[apply(same_color,x.o),or[blue,circle]]]]],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:not[%s];4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:blue;4:circle;4:blue;3:%s.s;2:x
'λx.apply(or[nor[size3,triangle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size3;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(blue, filter(x.s, and[circle,and[apply(same_size,x.o),circle]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(x.s, green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(circle,iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(circle,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(or[or[and[circle,size2],or[size3,size3]],and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:size2;4:or[%s,%s];4:size3;4:size3;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(and[circle,or[yellow,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[not[size1],nand[size2,and[not[blue],not[size1]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:nand[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(implies[rectangle,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[and[or[green,yellow],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[not[and[circle,not[size1]]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[apply(same_size,x.o),or[apply(same_size,iota(filter(filter(x.s, blue), circle))),size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,blue],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, size2), apply(size-geq,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, yellow), apply(same_color,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(iff[blue,circle], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:yellow
'λx.empty(filter(filter(filter(x.s, blue), rectangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size3
'λx.empty(filter(x.s, and[or[blue,green],or[not[apply(same_color,x.o)],blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[implies[or[yellow,green],green],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:green;4:size1;1:%s.o;2:x
'λx.exists(apply(same_size,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(blue,filter(x.s, not[or[apply(same_size,x.o),blue]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, green), or[triangle,and[size3,size1]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:size1
'λx.forall(yellow,filter(x.s, and[and[size2,and[rectangle,apply(same_shape,x.o)]],size2]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.exists(not[circle], filter(x.s, nand[blue,rectangle]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:rectangle
'λx.apply(and[triangle,blue],iota(filter(x.s, and[size2,or[circle,blue]])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:blue
'λx.contains(x.o, filter(x.s, and[circle,and[blue,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue
'λx.apply(not[and[yellow,or[rectangle,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[nand[blue,blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nand[or[size1,green],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size1;4:green;4:size1;1:%s.o;2:x
'λx.forall(size1,x.s)'	0:forall(%s,%s);4:size1;3:%s.s;2:x
'λx.forall(size2,x.s)'	0:forall(%s,%s);4:size2;3:%s.s;2:x
'λx.forall(size3,x.s)'	0:forall(%s,%s);4:size3;3:%s.s;2:x
'λx.exists(not[triangle], x.s)'	0:exists(%s, %s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), blue), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:rectangle
'λx.apply(and[circle,and[size2,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, or[blue,or[apply(same_color,x.o),and[yellow,green]]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:green
'λx.forall(size2,filter(x.s, and[apply(same_shape,x.o),circle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[or[triangle,blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[yellow,circle]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle;4:size2;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_shape,x.o)), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.forall(iff[size1,blue],filter(x.s, rectangle))'	0:forall(%s,%s);4:iff[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),iota(filter(filter(x.s, size3), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, or[apply(same_size,x.o),rectangle]), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:circle
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, not[circle]), yellow))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.apply(and[circle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, nor[triangle,nand[rectangle,size2]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:nand[%s,%s];4:rectangle;4:size2
'λx.apply(or[triangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[triangle,or[size1,green]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:green
'λx.apply(and[blue,nor[size3,yellow]],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nor[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[yellow,nand[size1,green]],iota(filter(filter(filter(x.s, or[green,yellow]), size3), or[size3,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow;4:size3;4:or[%s,%s];4:size3;4:size1
'λx.apply(apply(same_shape,iota(filter(x.s, apply(size-geq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, apply(same_size,x.o)), blue), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:circle
'λx.exists(implies[size2,apply(same_size,x.o)], filter(x.s, nand[circle,or[circle,circle]]))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:or[%s,%s];4:circle;4:circle
'λx.exists(nor[size3,circle], filter(x.s, size1))'	0:exists(%s, %s);4:nor[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[green,and[green,apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, apply(same_size,x.o)), not[circle]), not[size3]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle;4:not[%s];4:size3
'λx.forall(yellow,filter(x.s, and[rectangle,blue]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(triangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(rectangle, filter(x.s, yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, yellow), size1)))), triangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:triangle;4:circle
'λx.apply(and[circle,nand[green,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, yellow), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(nor[or[blue,blue],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[blue,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(size-lt,x.o)), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(blue,iota(filter(x.s, not[apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[nand[apply(same_color,x.o),circle],or[apply(same_size,x.o),rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), implies[size1,size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:size1;4:size3;4:yellow
'λx.apply(blue,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.forall(and[apply(same_color,x.o),circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,iota(x.s))), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(not[implies[blue,apply(same_color,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[and[and[and[circle,not[apply(same_color,iota(filter(filter(x.s, green), triangle)))]],triangle],circle],nor[size1,apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:triangle;4:circle;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(or[implies[yellow,blue],blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:yellow;4:blue;4:blue;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[apply(size-gt,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(implies[green,size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[or[blue,circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[size3,green],iota(filter(x.s, and[yellow,yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.exists(apply(same_shape,x.o), filter(x.s, not[size1]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(not[rectangle],iota(filter(filter(x.s, apply(same_color,x.o)), triangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.apply(and[size1,or[triangle,size1]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[not[size1],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(and[not[green],apply(size-leq,x.o)],filter(x.s, size2))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(or[apply(same_shape,x.o),apply(size-geq,x.o)],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, blue), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size2
'λx.exists(yellow, filter(x.s, triangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[not[and[circle,yellow]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, circle))),and[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(rectangle,iota(filter(x.s, and[blue,rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle
'λx.exists(nor[size1,blue], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, circle), blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(size1,iota(filter(x.s, or[yellow,circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle
'λx.apply(implies[size1,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(nor[triangle,and[rectangle,or[or[green,triangle],blue]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:green;4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-lt,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green
'λx.empty(filter(filter(x.s, apply(size-lt,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2
'λx.apply(nor[blue,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(iff[apply(same_size,x.o),nand[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, and[apply(same_shape,x.o),green]), apply(size-geq,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, circle), size3), or[yellow,and[nand[rectangle,or[apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),size2]],size3]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:or[%s,%s];4:yellow;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:size3
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(or[green,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[rectangle,or[size1,blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:blue
'λx.contains(x.o, filter(filter(x.s, circle), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(or[triangle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(not[and[triangle,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_color,iota(x.s)),green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[size3,and[size1,rectangle]],iota(filter(filter(x.s, circle), or[and[nor[rectangle,yellow],blue],not[apply(size-leq,x.o)]])))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:yellow;4:blue;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[circle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[yellow,yellow],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nand[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:blue
'λx.exists(nor[rectangle,not[size2]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:rectangle;4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(and[implies[size3,size2],or[size1,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:size2;4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.exists(and[apply(same_size,x.o),circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[size1,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.apply(not[and[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.exists(blue, filter(x.s, apply(size-geq,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, size2), yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.forall(not[green],filter(x.s, or[not[rectangle],blue]))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:blue
'λx.contains(x.o, filter(filter(x.s, implies[blue,yellow]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:yellow;4:circle
'λx.apply(or[and[size2,triangle],not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(size1, filter(x.s, and[green,green]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.contains(x.o, filter(x.s, nor[size2,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:size2
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, blue), blue), yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(or[not[size1],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(or[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, rectangle), apply(size-lt,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[size1,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[iff[circle,green],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[not[size2],and[and[green,or[yellow,circle]],size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:yellow;4:circle;4:size1;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[size2,apply(same_size,x.o)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[apply(same_shape,x.o),rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[size2,apply(same_color,x.o)],iota(filter(filter(x.s, not[size2]), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.apply(or[or[circle,size3],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[apply(same_shape,x.o),circle],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[circle,apply(same_color,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),yellow],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(nand[or[green,iff[blue,size2]],triangle],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:green;4:iff[%s,%s];4:blue;4:size2;4:triangle;3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),blue],iota(filter(x.s, and[apply(same_color,x.o),blue])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(implies[green,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), iff[apply(same_color,x.o),triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.apply(and[implies[rectangle,rectangle],not[size3]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[not[iff[blue,circle]],and[blue,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:blue;4:circle;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, size2), green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(and[blue,or[size1,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.empty(filter(x.s, and[triangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.apply(not[iff[green,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, nor[yellow,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:size3
'λx.exists(apply(same_color,x.o), filter(filter(x.s, size2), apply(same_size,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[blue],x.o)'	0:apply(%s,%s);4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, green), size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(iff[rectangle,rectangle],iota(filter(x.s, nand[triangle,size3])))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:size3
'λx.forall(apply(size-lt,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[size1,yellow],iota(filter(filter(filter(x.s, circle), blue), size3)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:size3
'λx.apply(implies[blue,rectangle],iota(filter(filter(x.s, triangle), not[and[green,size1]])))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:and[%s,%s];4:green;4:size1
'λx.apply(blue,iota(filter(x.s, and[blue,triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.forall(and[blue,rectangle],filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[rectangle,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[blue,and[size1,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), implies[size1,size2]), yellow), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:size1;4:size2;4:yellow;4:yellow
'λx.apply(green,iota(filter(x.s, and[implies[green,and[circle,and[nand[size2,apply(same_size,x.o)],not[triangle]]]],green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:circle;4:and[%s,%s];4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:triangle;4:green
'λx.exists(and[green,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:rectangle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(nor[size3,circle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[and[apply(same_shape,x.o),or[not[apply(same_color,x.o)],and[green,blue]]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.apply(implies[yellow,not[rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[blue,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(filter(x.s, yellow), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[size3],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[size2],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[size1],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(size3, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(size1, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, or[green,size2]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size2
'λx.apply(or[not[yellow],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[size1,green],iota(filter(filter(filter(x.s, apply(same_size,x.o)), size2), triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:triangle
'λx.apply(and[not[size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[and[size3,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[not[size2],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[blue,not[circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:circle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x

'λx.contains(iota(x.s), filter(x.s, and[or[yellow,and[triangle,circle]],green]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:circle;4:green
'λx.apply(and[not[curry[same_shape,x.o]],or[green,or[blue,yellow]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[or[not[size3],size3],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:size3;4:green;1:%s.o;2:x
'λx.apply(and[size2,or[size3,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(or[circle,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(and[size2,and[triangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.forall(and[and[not[or[size2,not[yellow]]],yellow],or[blue,size1]],filter(x.s, triangle))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:not[%s];4:yellow;4:yellow;4:or[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), or[triangle,blue]), curry[size-lt,iota(x.s)]), nand[size3,green]), circle), size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:blue;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:green;4:circle;4:size3;4:rectangle
'λx.apply(and[size1,size1],iota(filter(x.s, or[size2,nand[curry[same_size,x.o],curry[same_size,iota(x.s)]]])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[same_color,iota(filter(x.s, circle))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.exists(nor[circle,not[blue]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, or[yellow,rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:rectangle
'λx.apply(nand[size1,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(iff[triangle,triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(size1,filter(x.s, and[size1,size3]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.empty(filter(filter(x.s, triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.forall(or[circle,curry[same_size,x.o]],filter(x.s, size3))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, and[yellow,and[not[green],circle]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:green;4:circle
'λx.apply(and[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, curry[size-geq,x.o])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[curry[same_color,x.o],and[size3,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(iff[blue,rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, or[size2,size2]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size2
'λx.empty(filter(filter(filter(filter(x.s, green), green), size2), and[not[green],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:size2;4:and[%s,%s];4:not[%s];4:green;4:rectangle
'λx.apply(not[not[and[blue,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.exists(and[or[circle,rectangle],not[and[not[size1],curry[same_size,x.o]]]], filter(x.s, curry[size-lt,iota(x.s)]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(implies[size1,rectangle],iota(filter(filter(x.s, not[iff[curry[same_size,x.o],size2]]), size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size2;4:size3
'λx.contains(x.o, filter(x.s, and[triangle,and[blue,curry[same_size,iota(filter(x.s, and[nand[size3,not[size1]],size2]))]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:size3;4:not[%s];4:size1;4:size2
'λx.forall(circle,filter(filter(filter(x.s, size1), size3), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:blue
'λx.apply(blue,iota(filter(x.s, or[iff[blue,curry[same_shape,iota(filter(x.s, not[yellow]))]],curry[size-gt,x.o]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[and[size1,circle],nor[blue,and[curry[same_shape,iota(x.s)],size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:nor[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.empty(filter(x.s, not[or[and[rectangle,circle],iff[and[rectangle,or[nor[size2,nand[triangle,iff[rectangle,yellow]]],and[green,and[size1,or[and[size3,size3],blue]]]]],size3]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:size2;4:nand[%s,%s];4:triangle;4:iff[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:blue;4:size3
'λx.apply(or[green,curry[size-geq,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, iff[size2,and[yellow,or[size3,not[curry[same_shape,x.o]]]]]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1
'λx.forall(and[size2,size1],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:size1;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), nand[triangle,curry[same_shape,x.o]]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green
'λx.empty(filter(filter(filter(filter(x.s, or[curry[same_color,iota(filter(x.s, size1))],size2]), yellow), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:yellow;4:size1;4:rectangle
'λx.apply(or[size2,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, or[and[triangle,curry[size-lt,iota(x.s)]],size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size2
'λx.exists(triangle, filter(x.s, circle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(blue,filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size3), triangle), circle), and[curry[same_shape,iota(filter(x.s, rectangle))],curry[same_shape,iota(filter(filter(filter(x.s, blue), and[and[size2,green],circle]), or[size2,size2]))]]), blue), curry[same_size,x.o]), and[size3,size2]), size1), green), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:circle;4:or[%s,%s];4:size2;4:size2;4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size2;4:size1;4:green;4:size2
'λx.apply(rectangle,iota(filter(x.s, or[yellow,or[iff[not[circle],size1],rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:circle;4:size1;4:rectangle
'λx.empty(filter(x.s, yellow))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[circle,curry[size-lt,iota(x.s)]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(iff[not[triangle],size3],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[size-gt,iota(filter(filter(filter(x.s, not[triangle]), triangle), circle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[size-geq,iota(filter(x.s, blue))],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[blue,blue]), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:rectangle
'λx.apply(not[size1],iota(filter(x.s, curry[size-lt,x.o])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(or[nor[curry[same_color,x.o],size3],and[green,size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3;4:and[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[or[size3,size1],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size3;4:size1;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(and[size1,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(nand[or[yellow,size1],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:green;1:%s.o;2:x
'λx.forall(and[rectangle,curry[same_color,iota(filter(x.s, and[rectangle,size1]))]],filter(x.s, size1))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[size3,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(iff[and[curry[size-geq,iota(x.s)],size3],size3],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[implies[and[curry[same_color,iota(filter(filter(x.s, rectangle), blue))],curry[same_color,iota(x.s)]],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[triangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(not[not[not[yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,size2],iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(curry[same_color,iota(filter(filter(filter(x.s, curry[same_size,iota(x.s)]), circle), triangle))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:triangle;3:%s.s;2:x
'λx.apply(or[or[nand[iff[and[blue,size1],or[yellow,circle]],triangle],size3],green],iota(filter(filter(x.s, and[curry[same_shape,iota(filter(filter(filter(filter(x.s, nor[rectangle,size2]), yellow), or[not[curry[same_size,iota(x.s)]],nor[yellow,size1]]), triangle))],and[rectangle,size1]]), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:size1;4:or[%s,%s];4:yellow;4:circle;4:triangle;4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:size2;4:yellow;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:size1;4:triangle;4:and[%s,%s];4:rectangle;4:size1;4:rectangle
'λx.apply(curry[size-gt,iota(x.s)],iota(filter(filter(filter(x.s, curry[same_size,iota(x.s)]), size1), size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(curry[size-gt,iota(filter(x.s, and[size2,triangle]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[or[rectangle,not[blue]],circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[curry[same_size,iota(filter(filter(x.s, rectangle), rectangle))],size1], filter(x.s, size1))'	0:exists(%s, %s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[size2],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, circle), or[curry[same_size,iota(x.s)],rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, size1), or[blue,size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:size1
'λx.apply(implies[green,green],iota(filter(x.s, and[size1,and[circle,not[blue]]])))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:not[%s];4:blue
'λx.apply(and[not[circle],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,and[or[triangle,green],and[or[rectangle,size2],triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:triangle;4:green;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(and[or[nand[not[green],triangle],and[size1,circle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:green;4:triangle;4:and[%s,%s];4:size1;4:circle;4:circle;1:%s.o;2:x
'λx.apply(iff[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(filter(x.s, curry[same_color,iota(x.s)]), size3), size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(or[size3,curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[size3,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.apply(and[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(and[blue,and[not[and[and[circle,triangle],and[or[and[circle,blue],rectangle],blue]]],green]], filter(filter(filter(filter(x.s, curry[size-leq,iota(x.s)]), curry[same_shape,x.o]), and[rectangle,blue]), iff[yellow,blue]))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:rectangle;4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:blue;4:iff[%s,%s];4:yellow;4:blue
'λx.apply(and[blue,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[green,and[triangle,curry[same_color,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(iff[rectangle,yellow],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, green), circle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size2
'λx.contains(iota(filter(x.s, size1)), filter(filter(x.s, circle), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[rectangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nor[size2,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[nand[and[curry[size-lt,iota(filter(filter(x.s, size3), size1))],green],size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[yellow,size3], filter(filter(filter(x.s, or[yellow,size3]), blue), and[nor[triangle,and[rectangle,blue]],size2]))'	0:exists(%s, %s);4:iff[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3;4:blue;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:blue;4:size2
'λx.apply(and[size2,and[iff[not[or[and[circle,size2],triangle]],rectangle],yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:size2;4:triangle;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, rectangle), circle), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:rectangle
'λx.forall(circle,filter(x.s, size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size1, filter(x.s, triangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[blue,nor[curry[same_shape,x.o],green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(iff[size3,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.exists(size3, filter(filter(filter(filter(x.s, size2), curry[same_shape,x.o]), rectangle), curry[same_shape,x.o]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(curry[size-gt,x.o],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, or[circle,size3]), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size3;4:size1;4:rectangle
'λx.apply(nor[green,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(and[or[rectangle,nand[rectangle,triangle]],rectangle],iota(filter(filter(x.s, green), not[rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:rectangle;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:rectangle
'λx.forall(iff[size3,blue],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[green],x.o)'	0:apply(%s,%s);4:not[%s];4:green;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(filter(x.s, rectangle), size1), and[blue,size3]), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:and[%s,%s];4:blue;4:size3;4:size2
'λx.apply(curry[same_shape,x.o],iota(filter(filter(filter(x.s, size3), not[circle]), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:circle;4:rectangle
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), green), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size1
'λx.apply(and[and[size2,size3],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[nand[circle,size1],or[size1,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:size1;4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[and[size1,not[and[size2,yellow]]],triangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:size2;4:yellow;4:triangle
'λx.forall(nand[size2,circle],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(or[yellow,yellow],iota(filter(filter(filter(x.s, and[or[blue,circle],size2]), green), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:size2;4:green;4:blue
'λx.apply(nor[and[size2,size1],green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[green,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[green,curry[same_color,iota(x.s)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size1,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, green), and[curry[same_color,iota(filter(x.s, and[size1,triangle]))],size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle;4:size3
'λx.apply(nor[not[size2],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size2;4:green;1:%s.o;2:x
'λx.exists(and[size3,curry[same_size,x.o]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, nor[or[or[size3,yellow],triangle],size2]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:triangle;4:size2
'λx.forall(green,filter(x.s, or[circle,green]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:green
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), size3), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:yellow
'λx.apply(and[triangle,rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(curry[size-gt,x.o], filter(filter(filter(x.s, implies[size3,rectangle]), size1), size2))'	0:exists(%s, %s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:rectangle;4:size1;4:size2
'λx.apply(size3,iota(filter(filter(filter(x.s, and[size1,and[rectangle,circle]]), and[nor[circle,circle],and[rectangle,implies[and[curry[same_shape,iota(filter(x.s, triangle))],circle],yellow]]]), and[rectangle,size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:yellow;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(nor[size2,or[blue,size1]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.forall(size3,filter(x.s, size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(and[size3,or[circle,green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, nor[and[rectangle,size2],circle]), nand[and[triangle,yellow],curry[same_size,x.o]]), and[yellow,and[size1,size1]]), blue), yellow), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:circle;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:size1;4:blue;4:yellow;4:rectangle
'λx.apply(and[curry[same_size,x.o],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(nand[size3,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.exists(curry[same_size,iota(filter(x.s, size1))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.forall(size1,filter(x.s, size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(implies[curry[same_color,iota(x.s)],size1], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(or[size1,nor[curry[size-gt,iota(x.s)],size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[size1,not[implies[not[or[green,blue]],triangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,and[triangle,not[implies[size1,not[curry[same_size,x.o]]]]]],iota(filter(filter(filter(filter(filter(filter(x.s, circle), circle), size1), curry[same_shape,iota(filter(filter(filter(x.s, circle), implies[size2,size2]), triangle))]), circle), or[size2,rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:not[%s];4:implies[%s,%s];4:size1;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:size2;4:size2;4:triangle;4:circle;4:or[%s,%s];4:size2;4:rectangle
'λx.contains(iota(filter(x.s, size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(curry[size-leq,iota(filter(x.s, or[size1,implies[and[curry[same_color,iota(filter(x.s, size2))],size3],size2]]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:size2;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, and[circle,and[not[not[curry[same_size,x.o]]],not[blue]]]), or[curry[same_color,x.o],and[nand[size3,size3],implies[and[size1,triangle],or[curry[same_size,x.o],rectangle]]]]), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:nand[%s,%s];4:size3;4:size3;4:implies[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;4:circle
'λx.empty(filter(x.s, not[curry[same_size,iota(x.s)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[triangle,nand[triangle,curry[size-leq,iota(filter(filter(x.s, blue), green))]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:triangle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(and[and[iff[curry[same_color,iota(filter(filter(x.s, rectangle), size1))],circle],circle],and[green,nor[rectangle,or[implies[and[yellow,size2],triangle],yellow]]]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:circle;4:circle;4:and[%s,%s];4:green;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(yellow,iota(filter(x.s, or[curry[same_shape,x.o],blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[size3,and[size2,rectangle]],iota(filter(filter(x.s, circle), curry[size-gt,x.o])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size1)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(curry[same_shape,x.o],iota(filter(filter(x.s, yellow), curry[size-gt,iota(filter(x.s, not[triangle]))])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(not[triangle], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[nand[and[size1,or[size3,size1]],triangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:size1;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(nor[circle,rectangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(and[nor[yellow,circle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:circle;4:yellow;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[curry[size-lt,iota(filter(x.s, yellow))],not[not[curry[same_color,iota(x.s)]]]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[iff[or[triangle,and[or[yellow,or[blue,or[and[circle,not[size1]],green]]],blue]],green],blue],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size1;4:green;4:blue;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(not[and[or[or[blue,size1],yellow],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:size1;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(nand[and[green,not[or[size3,size2]]],not[circle]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:size3;4:size2;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, size2))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.forall(size3,filter(x.s, not[iff[triangle,and[and[or[and[yellow,curry[same_size,iota(filter(filter(x.s, triangle), and[or[rectangle,yellow],blue]))]],green],size2],blue]]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:blue;4:green;4:size2;4:blue
'λx.contains(x.o, filter(x.s, not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(size2,iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.exists(size1, filter(x.s, circle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size3,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, and[and[yellow,blue],blue]), nand[circle,size1]), curry[same_color,x.o])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:blue;4:nand[%s,%s];4:circle;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(and[or[green,blue],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, and[rectangle,green]), triangle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:triangle
'λx.exists(yellow, x.s)'	0:exists(%s, %s);4:yellow;3:%s.s;2:x
'λx.apply(and[rectangle,or[circle,and[nor[circle,yellow],size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:and[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[nor[and[size1,not[and[blue,circle]]],blue],and[triangle,nand[curry[same_color,iota(x.s)],and[and[blue,size1],iff[size1,or[yellow,size1]]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:blue;4:circle;4:blue;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:iff[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, and[and[and[green,size1],curry[same_color,iota(x.s)]],and[circle,rectangle]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle
'λx.contains(iota(filter(x.s, and[and[circle,and[size1,curry[size-gt,x.o]]],green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.apply(or[implies[circle,size1],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:size1;4:green;1:%s.o;2:x
'λx.forall(not[size3],filter(filter(x.s, triangle), or[not[size2],green]))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:not[%s];4:size2;4:green
'λx.apply(size2,iota(filter(filter(x.s, and[blue,nand[blue,or[triangle,size2]]]), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size2;4:green
'λx.apply(not[or[and[and[and[nor[and[and[yellow,triangle],not[circle]],rectangle],or[or[yellow,green],size1]],triangle],size2],curry[same_size,x.o]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:circle;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:yellow;4:green;4:size1;4:triangle;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[size1,size1],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:size1;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[blue,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(not[and[size2,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, size3), and[size2,size1]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size2;4:size1;4:size3;3:%s.s;2:x
'λx.apply(and[green,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(and[yellow,blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[size3,or[size3,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[curry[same_color,x.o],size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.exists(not[green], filter(filter(x.s, blue), size1))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(size1,iota(filter(filter(x.s, size3), not[circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:circle
'λx.forall(implies[and[and[implies[nor[curry[same_shape,iota(x.s)],size2],size1],triangle],curry[same_color,iota(x.s)]],iff[green,size3]],filter(x.s, size2))'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:size1;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[green,and[not[or[and[curry[same_size,iota(filter(x.s, not[and[triangle,circle]]))],and[and[curry[size-gt,iota(filter(filter(x.s, size3), not[iff[size1,yellow]]))],implies[rectangle,rectangle]],blue]],rectangle]],curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:iff[%s,%s];4:size1;4:yellow;4:implies[%s,%s];4:rectangle;4:rectangle;4:blue;4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, and[size1,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2
'λx.contains(iota(filter(filter(x.s, not[size3]), rectangle)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(rectangle,filter(filter(filter(x.s, size2), size3), curry[size-lt,iota(filter(x.s, triangle))]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(yellow,iota(filter(x.s, and[circle,size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, size1), and[yellow,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(or[and[size2,yellow],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, or[size3,curry[size-leq,x.o]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.forall(not[or[size3,yellow]],filter(filter(filter(filter(filter(filter(filter(filter(x.s, implies[size3,blue]), yellow), size2), green), and[size2,circle]), circle), and[size1,blue]), yellow))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:blue;4:yellow;4:size2;4:green;4:and[%s,%s];4:size2;4:circle;4:circle;4:and[%s,%s];4:size1;4:blue;4:yellow
'λx.forall(or[triangle,size2],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.apply(and[triangle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,yellow],iota(filter(filter(filter(filter(x.s, triangle), rectangle), and[size3,curry[size-gt,x.o]]), and[nand[curry[same_shape,iota(x.s)],or[not[yellow],green]],or[rectangle,iff[size3,circle]]])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:and[%s,%s];4:size3;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:green;4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:size3;4:circle
'λx.contains(x.o, filter(filter(x.s, blue), curry[same_color,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[rectangle,blue],yellow],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[rectangle,or[size1,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, green), or[and[size3,green],triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:triangle
'λx.apply(size1,iota(filter(filter(filter(x.s, size2), size1), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:blue
'λx.apply(not[circle],x.o)'	0:apply(%s,%s);4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, blue), blue), curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, nor[not[rectangle],curry[same_shape,iota(x.s)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, or[green,not[rectangle]]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:not[%s];4:rectangle;4:yellow
'λx.forall(triangle,filter(filter(filter(x.s, and[or[size3,curry[size-leq,iota(x.s)]],size2]), curry[same_shape,x.o]), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[size1,and[green,iff[or[circle,size3],blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:iff[%s,%s];4:or[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(implies[not[and[size1,curry[same_color,iota(filter(x.s, blue))]]],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.exists(nor[size1,circle], filter(x.s, circle))'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(not[and[blue,green]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(and[and[size1,size3],or[not[and[size2,and[and[yellow,rectangle],green]]],yellow]],iota(filter(filter(filter(x.s, blue), size3), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size2
'λx.forall(and[not[yellow],or[not[green],and[iff[nor[and[not[or[circle,size2]],rectangle],size2],rectangle],nand[or[circle,and[size1,and[or[and[triangle,yellow],triangle],and[yellow,or[triangle,triangle]]]]],triangle]]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:size2;4:rectangle;4:size2;4:rectangle;4:nand[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:triangle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:triangle;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, or[and[green,iff[blue,size3]],rectangle]), curry[size-leq,x.o]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:blue;4:size3;4:rectangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, and[blue,blue]), implies[blue,blue]), and[curry[same_size,x.o],not[size2]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:implies[%s,%s];4:blue;4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:size2
'λx.apply(blue,iota(filter(x.s, iff[and[size3,and[triangle,size1]],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:size1;4:rectangle
'λx.apply(and[and[yellow,rectangle],and[size1,or[and[implies[circle,yellow],yellow],curry[same_size,iota(x.s)]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:circle;4:yellow;4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[triangle,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(iff[size1,nor[rectangle,or[size1,nand[and[rectangle,yellow],iff[triangle,and[circle,or[size3,green]]]]]]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size1;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.forall(and[size3,curry[same_size,x.o]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[yellow,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[blue,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(curry[same_shape,iota(filter(x.s, size2))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.apply(curry[size-gt,iota(filter(x.s, and[blue,triangle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[and[and[rectangle,blue],circle],triangle],iota(filter(filter(filter(x.s, rectangle), yellow), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:size2
'λx.apply(not[size1],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(triangle,filter(x.s, and[and[circle,yellow],circle]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:circle
'λx.contains(iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), curry[size-lt,iota(x.s)]), and[or[rectangle,yellow],and[or[yellow,curry[same_size,x.o]],green]]), size1), nand[and[rectangle,blue],yellow]), not[or[not[rectangle],rectangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:size1;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:yellow;4:not[%s];4:or[%s,%s];4:not[%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(and[size3,and[or[not[blue],size1],curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[yellow,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(x.s, blue), yellow), yellow), and[size3,or[size1,not[circle]]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:yellow;4:and[%s,%s];4:size3;4:or[%s,%s];4:size1;4:not[%s];4:circle
'λx.apply(nor[rectangle,and[circle,size2]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[rectangle,implies[not[and[size3,not[yellow]]],nand[not[curry[same_color,iota(filter(x.s, not[triangle]))]],green]]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:not[%s];4:yellow;4:nand[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:green;4:size1;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, yellow))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(or[circle,yellow], filter(x.s, not[curry[same_shape,iota(filter(filter(filter(x.s, circle), rectangle), green))]]))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:green
'λx.apply(and[curry[same_color,iota(filter(filter(x.s, size2), rectangle))],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(filter(filter(x.s, rectangle), not[blue]), yellow))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:blue;4:yellow
'λx.apply(yellow,iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[curry[size-lt,iota(filter(x.s, blue))],rectangle]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(curry[size-geq,x.o],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[green,circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, rectangle), rectangle), nor[size1,circle]), blue), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:nor[%s,%s];4:size1;4:circle;4:blue;4:circle
'λx.apply(size1,iota(filter(x.s, or[size3,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size1
'λx.apply(size1,iota(filter(filter(filter(x.s, implies[not[rectangle],blue]), curry[same_size,x.o]), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:rectangle;4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3
'λx.apply(not[and[size3,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[not[size2],circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[yellow,curry[same_shape,x.o]],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, size2))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[blue,curry[same_size,iota(filter(filter(x.s, and[nor[circle,size1],triangle]), and[curry[same_color,iota(filter(x.s, size1))],not[and[iff[size3,triangle],size3]]]))]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:circle;4:size1;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[triangle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(size3, filter(filter(filter(filter(x.s, size1), size3), rectangle), yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:rectangle;4:yellow
'λx.apply(and[size3,triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(circle, x.s)'	0:exists(%s, %s);4:circle;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, nor[size2,and[or[triangle,size2],size3]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:size3
'λx.apply(not[or[size2,or[size1,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[yellow,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.apply(nand[and[nor[yellow,size3],blue],size2],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:yellow;4:size3;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[blue,curry[same_color,iota(filter(x.s, triangle))]], filter(filter(x.s, not[not[size3]]), not[iff[iff[nor[not[circle],rectangle],size3],rectangle]]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3;4:not[%s];4:iff[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:not[%s];4:circle;4:rectangle;4:size3;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, or[rectangle,size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size1
'λx.apply(yellow,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[iff[circle,curry[same_color,iota(filter(filter(filter(x.s, yellow), yellow), curry[same_shape,x.o]))]],or[size2,rectangle]],or[and[nand[triangle,green],or[circle,size2]],curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:triangle;4:green;4:or[%s,%s];4:circle;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[size2,or[yellow,and[and[rectangle,yellow],green]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:green
'λx.apply(curry[same_shape,iota(filter(filter(x.s, not[not[size2]]), yellow))],iota(filter(x.s, and[implies[and[triangle,green],curry[same_color,x.o]],green])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:triangle;4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green
'λx.apply(or[and[and[green,circle],nand[green,curry[size-leq,iota(filter(x.s, not[size2]))]]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:nand[%s,%s];4:green;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(nor[implies[iff[triangle,size3],size2],triangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[size-lt,x.o], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(size2,filter(x.s, size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size3,filter(x.s, size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(iff[implies[size3,or[triangle,blue]],blue], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:implies[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:blue;4:blue;3:%s.s;2:x
'λx.apply(or[triangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[green,curry[same_shape,iota(filter(x.s, not[rectangle]))]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(nand[rectangle,not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(nand[triangle,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(or[curry[same_shape,x.o],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, implies[size3,triangle]), triangle), implies[green,yellow]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:triangle;4:triangle;4:implies[%s,%s];4:green;4:yellow;4:blue
'λx.apply(not[green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[size2,size2],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[not[implies[size2,size2]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,or[yellow,not[size1]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, size3)), filter(filter(filter(x.s, nor[or[not[size1],green],nand[size1,circle]]), blue), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:green;4:nand[%s,%s];4:size1;4:circle;4:blue;4:blue
'λx.empty(filter(filter(x.s, yellow), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(green,iota(filter(filter(x.s, yellow), or[or[size2,and[curry[same_shape,x.o],nand[size3,green]]],size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:green;4:size1
'λx.apply(circle,iota(filter(filter(x.s, iff[triangle,circle]), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:circle;4:size2
'λx.apply(nand[or[size1,circle],and[not[not[green]],size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size1;4:circle;4:and[%s,%s];4:not[%s];4:not[%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(and[size1,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), size3)), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(iff[blue,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.forall(blue,filter(x.s, size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(curry[same_shape,iota(filter(x.s, nand[and[circle,green],size2]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:circle;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[curry[same_shape,iota(x.s)],or[triangle,size2]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, yellow), not[triangle]), size3), size1), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:triangle;4:size3;4:size1;4:size3
'λx.apply(and[circle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(green,iota(filter(x.s, and[circle,or[not[green],yellow]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:green;4:yellow
'λx.exists(size1, filter(x.s, size3))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[circle,curry[same_size,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[curry[same_color,x.o],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), and[yellow,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(yellow,iota(filter(x.s, or[size3,size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size3
'λx.apply(and[circle,curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(or[triangle,blue], filter(filter(x.s, triangle), and[size2,curry[same_size,iota(x.s)]]))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(filter(filter(x.s, green), not[triangle]), or[triangle,or[rectangle,green]]), rectangle), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:green;4:rectangle;4:circle
'λx.apply(and[and[size2,and[and[size3,not[curry[same_color,iota(x.s)]]],curry[size-leq,x.o]]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(and[circle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, not[and[rectangle,size2]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:size2
'λx.apply(and[and[yellow,nand[or[or[blue,curry[same_size,x.o]],circle],curry[same_shape,iota(x.s)]]],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[size1,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.apply(and[yellow,triangle],iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(curry[same_size,iota(filter(filter(x.s, size1), yellow))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;1:%s.o;2:x
'λx.forall(yellow,filter(filter(filter(filter(x.s, size3), triangle), implies[and[yellow,curry[size-geq,x.o]],curry[same_color,iota(filter(filter(x.s, size2), size2))]]), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:rectangle
'λx.apply(and[curry[same_size,x.o],curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size2), nor[size3,curry[same_size,x.o]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.apply(and[and[size3,rectangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), size2), curry[same_size,x.o])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, or[size2,curry[size-lt,x.o]]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size3
'λx.apply(curry[same_color,x.o],iota(filter(filter(filter(filter(x.s, size1), rectangle), blue), not[implies[not[size2],size3]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:blue;4:not[%s];4:implies[%s,%s];4:not[%s];4:size2;4:size3
'λx.apply(or[triangle,and[size1,curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[and[blue,size1],rectangle],nor[or[blue,rectangle],rectangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:size1;4:rectangle;4:nor[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, circle), size2))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.contains(iota(filter(x.s, and[or[size1,or[size1,size2]],yellow])), filter(filter(filter(x.s, curry[same_color,iota(filter(filter(filter(x.s, green), curry[same_size,x.o]), blue))]), blue), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:size1;4:size2;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;4:blue;4:size3
'λx.apply(not[and[size3,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(x.s, or[blue,size3])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size3
'λx.apply(iff[size2,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.exists(blue, filter(x.s, and[or[iff[circle,triangle],triangle],blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:circle;4:triangle;4:triangle;4:blue
'λx.apply(and[implies[size3,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[triangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,nor[not[size3],nor[and[circle,and[size1,or[circle,size3]]],or[yellow,blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:size3;4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.contains(iota(filter(filter(x.s, curry[same_color,x.o]), yellow)), filter(filter(x.s, and[circle,green]), implies[size3,yellow]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;4:implies[%s,%s];4:size3;4:yellow
'λx.contains(x.o, filter(filter(filter(filter(x.s, blue), size2), size3), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:size3;4:blue
'λx.empty(filter(filter(filter(x.s, blue), not[and[circle,size2]]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:circle;4:size2;4:size1
'λx.contains(iota(filter(x.s, and[curry[size-lt,iota(x.s)],not[triangle]])), filter(filter(x.s, blue), not[and[and[size1,and[circle,size3]],triangle]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size3;4:triangle
'λx.apply(or[and[green,and[size2,curry[same_shape,x.o]]],and[blue,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, nand[triangle,and[size3,circle]]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:circle;4:triangle
'λx.apply(or[curry[same_shape,x.o],triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, not[circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.forall(not[rectangle],filter(filter(x.s, size3), or[triangle,nand[not[blue],rectangle]]))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:not[%s];4:blue;4:rectangle
'λx.apply(or[rectangle,curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[blue,and[size1,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nor[and[and[triangle,green],size3],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:size3;4:yellow;1:%s.o;2:x
'λx.forall(curry[same_shape,x.o],filter(x.s, curry[size-lt,iota(filter(filter(x.s, green), or[blue,circle]))]))'	0:forall(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:blue;4:circle
'λx.exists(size1, filter(x.s, curry[same_color,iota(x.s)]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, and[size2,size3]), not[implies[size3,size1]]), size3), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:not[%s];4:implies[%s,%s];4:size3;4:size1;4:size3;4:blue
'λx.apply(implies[size3,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[implies[curry[size-lt,x.o],triangle],nand[rectangle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:triangle;4:nand[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[triangle,nand[not[size1],blue]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:nand[%s,%s];4:not[%s];4:size1;4:blue;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, green), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;3:%s.s;2:x
'λx.apply(and[nor[nand[or[and[not[implies[green,size3]],blue],size2],curry[same_size,x.o]],or[triangle,or[and[circle,triangle],and[size3,curry[same_color,iota(x.s)]]]]],and[or[size3,curry[same_size,iota(filter(filter(x.s, yellow), and[size2,circle]))]],size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:green;4:size3;4:blue;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size2;4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[iff[rectangle,iff[triangle,not[not[triangle]]]],not[rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:rectangle;4:iff[%s,%s];4:triangle;4:not[%s];4:not[%s];4:triangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(and[and[and[size3,and[and[and[green,blue],size2],yellow]],rectangle],and[and[yellow,size3],implies[and[size3,green],and[or[curry[same_color,iota(filter(filter(x.s, size1), not[nor[green,size2]]))],green],nor[size1,green]]]]], filter(filter(x.s, and[size2,or[size3,or[size1,size1]]]), or[green,blue]))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:blue;4:size2;4:yellow;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:implies[%s,%s];4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:nor[%s,%s];4:green;4:size2;4:green;4:nor[%s,%s];4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:size3;4:or[%s,%s];4:size1;4:size1;4:or[%s,%s];4:green;4:blue
'λx.apply(not[yellow],iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.empty(filter(filter(x.s, curry[same_color,x.o]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle
'λx.apply(or[size2,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(or[curry[same_color,x.o],size2], filter(filter(filter(filter(x.s, triangle), size1), size2), yellow))'	0:exists(%s, %s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size2;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.empty(filter(filter(x.s, yellow), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(and[circle,size2],iota(filter(x.s, or[circle,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle
'λx.forall(rectangle,filter(x.s, curry[same_size,x.o]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, curry[same_shape,x.o]), yellow), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;4:blue
'λx.apply(or[or[rectangle,green],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), yellow), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:size1
'λx.apply(or[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(or[triangle,size3],filter(x.s, size1))'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(green,x.s)'	0:forall(%s,%s);4:green;3:%s.s;2:x
'λx.forall(and[size2,curry[same_color,iota(x.s)]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, curry[size-lt,iota(x.s)]), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(filter(filter(x.s, nor[and[not[curry[same_shape,x.o]],size3],or[curry[same_size,iota(x.s)],circle]]), and[size1,implies[not[size1],size1]]), not[circle])), filter(x.s, not[triangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:implies[%s,%s];4:not[%s];4:size1;4:size1;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[or[size1,size1],triangle],iota(filter(x.s, and[size2,green])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green
'λx.apply(curry[same_size,iota(filter(filter(filter(x.s, rectangle), triangle), or[size2,green]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, or[size1,not[and[not[or[curry[same_color,iota(x.s)],triangle]],size1]]]), nor[curry[same_shape,iota(filter(filter(filter(x.s, circle), circle), size2))],not[yellow]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:size1;4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:size2;4:not[%s];4:yellow
'λx.exists(circle, filter(filter(x.s, size3), nor[yellow,size3]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:yellow;4:size3
'λx.apply(curry[same_size,iota(x.s)],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(x.s, not[circle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.contains(iota(filter(filter(x.s, yellow), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;3:%s.s;2:x
'λx.apply(nand[triangle,blue],iota(filter(x.s, curry[size-lt,x.o])))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(nor[nor[size1,and[size3,curry[same_shape,x.o]]],not[curry[same_shape,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:size1;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[not[yellow],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[rectangle]), and[size1,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(not[nand[size2,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.empty(filter(filter(x.s, size2), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.exists(size1, filter(filter(x.s, size2), size2))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(nor[curry[size-lt,iota(filter(filter(x.s, triangle), green))],and[triangle,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.forall(or[size1,and[circle,not[or[blue,blue]]]],filter(filter(x.s, curry[same_size,x.o]), and[or[or[or[curry[same_shape,x.o],and[triangle,size2]],and[curry[same_shape,iota(filter(x.s, triangle))],triangle]],green],triangle]))'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:green;4:triangle
'λx.contains(iota(filter(x.s, implies[circle,size3])), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[not[circle],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(filter(x.s, and[curry[same_color,x.o],green])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green
'λx.apply(or[not[yellow],green],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[triangle,blue],and[nor[triangle,yellow],and[green,nand[circle,circle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:green;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[curry[same_shape,iota(x.s)]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,or[and[size2,not[implies[green,curry[size-geq,x.o]]]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:implies[%s,%s];4:green;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[size2,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(nand[rectangle,size1],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[or[and[blue,implies[size3,size3]],yellow],size1],iota(filter(filter(filter(x.s, blue), or[and[implies[circle,curry[same_shape,x.o]],triangle],size2]), implies[triangle,yellow])))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:size3;4:size3;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:size2;4:implies[%s,%s];4:triangle;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, not[blue]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, not[circle]), not[size3]), curry[same_shape,iota(filter(filter(filter(filter(x.s, size2), size1), or[size2,circle]), rectangle))]), size1), or[rectangle,size2]), or[blue,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:not[%s];4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:or[%s,%s];4:size2;4:circle;4:rectangle;4:size1;4:or[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:blue;4:circle
'λx.apply(not[and[size1,size2]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[curry[size-geq,iota(filter(filter(filter(x.s, triangle), and[circle,blue]), or[triangle,or[not[triangle],rectangle]]))],and[not[rectangle],or[curry[same_size,x.o],and[size1,rectangle]]]],curry[same_size,iota(x.s)]],iota(filter(filter(filter(x.s, and[and[not[circle],not[yellow]],curry[same_size,iota(x.s)]]), or[and[green,circle],nor[size1,green]]), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:circle;4:blue;4:or[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:triangle;4:rectangle;4:and[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size1;4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:nor[%s,%s];4:size1;4:green;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.exists(triangle, filter(x.s, curry[same_shape,x.o]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, green), and[size3,size3]), implies[size1,not[size2]]), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size3;4:size3;4:implies[%s,%s];4:size1;4:not[%s];4:size2;4:circle
'λx.contains(iota(filter(x.s, curry[same_color,x.o])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(curry[size-leq,x.o],iota(filter(x.s, or[rectangle,nor[triangle,and[size3,implies[green,triangle]]]])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:implies[%s,%s];4:green;4:triangle
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), and[green,blue]), iff[or[triangle,green],and[size1,circle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:blue;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:green;4:and[%s,%s];4:size1;4:circle
'λx.forall(triangle,filter(x.s, iff[or[and[not[circle],size3],blue],not[yellow]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:size3;4:blue;4:not[%s];4:yellow
'λx.apply(size3,iota(filter(filter(filter(x.s, rectangle), and[curry[same_shape,iota(x.s)],circle]), nand[size2,curry[size-lt,x.o]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:size2;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(implies[circle,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[yellow,size2],filter(filter(x.s, yellow), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.contains(iota(x.s), filter(filter(filter(x.s, rectangle), blue), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:size2
'λx.apply(and[and[green,blue],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(x.s, size1))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[circle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.exists(curry[size-leq,x.o], filter(filter(x.s, yellow), triangle))'	0:exists(%s, %s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.empty(filter(x.s, green))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[nor[curry[size-lt,x.o],size3],and[yellow,triangle]],iota(filter(filter(x.s, and[not[implies[green,rectangle]],and[and[blue,size3],size2]]), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size3;4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:size2;4:rectangle
'λx.contains(iota(filter(filter(x.s, green), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, not[triangle]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(curry[same_shape,iota(x.s)],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size1,and[size3,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[curry[same_size,iota(x.s)],size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, green), and[triangle,circle]), yellow), size3), blue), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:triangle;4:circle;4:yellow;4:size3;4:blue;4:green
'λx.apply(curry[same_color,x.o],iota(filter(filter(x.s, or[blue,blue]), size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue;4:size1
'λx.apply(or[and[size3,green],iff[size1,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:iff[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[size-gt,x.o],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[green,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle
'λx.apply(curry[same_shape,iota(filter(x.s, curry[same_shape,iota(x.s)]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[triangle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,and[size2,size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, circle), green), size2)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(filter(filter(x.s, blue), size2), not[or[triangle,yellow]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:not[%s];4:or[%s,%s];4:triangle;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(or[and[size2,circle],and[not[yellow],and[size1,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.exists(not[and[size3,circle]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(x.s, curry[same_color,x.o]))],iota(filter(filter(x.s, not[triangle]), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, size1), yellow), size3), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size3;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(or[rectangle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[iff[rectangle,size3],or[triangle,curry[same_size,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[and[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[yellow,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green
'λx.apply(iff[size1,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(curry[size-geq,iota(filter(filter(filter(filter(x.s, size3), green), and[size1,green]), rectangle))],filter(filter(filter(filter(filter(filter(filter(x.s, triangle), and[curry[same_color,x.o],size1]), size1), or[rectangle,size2]), green), circle), rectangle))'	0:forall(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:and[%s,%s];4:size1;4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;4:size1;4:or[%s,%s];4:rectangle;4:size2;4:green;4:circle;4:rectangle
'λx.forall(size2,filter(filter(x.s, green), size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.forall(not[nand[and[nor[size1,rectangle],size2],not[size1]]],x.s)'	0:forall(%s,%s);4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:rectangle;4:size2;4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(not[and[blue,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[size1,size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[size3,and[rectangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[blue]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:yellow
'λx.apply(and[green,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, blue), nand[size1,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:size1;4:circle
'λx.forall(curry[same_shape,iota(x.s)],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(filter(filter(x.s, nor[triangle,and[not[blue],curry[size-geq,x.o]]]), size3), curry[size-geq,x.o])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:blue;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:size3;4:curry[%s,%s];5:size-geq;1:%s.o;2:x
'λx.apply(or[curry[same_shape,iota(x.s)],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(filter(x.s, curry[same_shape,x.o]), and[curry[size-gt,x.o],blue]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[nand[size1,or[yellow,and[or[yellow,size2],green]]],green],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[not[blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[size3,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), and[green,rectangle]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:green;4:rectangle;4:green
'λx.apply(green,iota(filter(filter(filter(x.s, size1), and[size1,size3]), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:size3;4:yellow
'λx.apply(nand[size3,not[not[yellow]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(or[iff[blue,or[and[triangle,rectangle],not[not[rectangle]]]],or[and[size3,circle],size3]], filter(x.s, or[nor[yellow,green],or[curry[same_size,x.o],or[circle,blue]]]))'	0:exists(%s, %s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:not[%s];4:not[%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:yellow;4:green;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:blue
'λx.apply(not[green],iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(yellow,iota(filter(x.s, and[nand[triangle,blue],and[curry[size-gt,x.o],blue]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:blue
'λx.contains(iota(filter(filter(filter(x.s, or[not[rectangle],iff[not[yellow],yellow]]), blue), triangle)), filter(filter(x.s, and[green,curry[same_color,iota(x.s)]]), triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:iff[%s,%s];4:not[%s];4:yellow;4:yellow;4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, not[yellow]), rectangle), triangle), implies[size3,size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:rectangle;4:triangle;4:implies[%s,%s];4:size3;4:size3
'λx.apply(implies[or[or[or[not[blue],circle],and[not[size1],circle]],yellow],implies[and[circle,circle],triangle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:circle;4:and[%s,%s];4:not[%s];4:size1;4:circle;4:yellow;4:implies[%s,%s];4:and[%s,%s];4:circle;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[blue,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[yellow,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size2
'λx.forall(yellow,filter(filter(filter(x.s, size2), size3), or[curry[same_color,iota(x.s)],size1]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(and[not[circle],curry[same_shape,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(curry[same_color,iota(filter(filter(x.s, and[size1,and[blue,iff[green,curry[same_shape,x.o]]]]), implies[and[green,yellow],blue]))],iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:iff[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:green;4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.forall(green,filter(filter(x.s, size1), blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[blue,or[not[yellow],not[size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, circle), and[rectangle,green]), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:rectangle;4:green;4:triangle
'λx.forall(nand[circle,size2],filter(x.s, and[green,or[green,or[circle,rectangle]]]))'	0:forall(%s,%s);4:nand[%s,%s];4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:rectangle
'λx.empty(filter(filter(x.s, implies[and[or[and[rectangle,triangle],size1],not[or[curry[same_size,iota(filter(x.s, yellow))],size3]]],implies[or[blue,and[blue,curry[size-gt,x.o]]],blue]]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:size1;4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:implies[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:blue;4:triangle
'λx.forall(or[not[size2],circle],filter(x.s, not[size2]))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.forall(size1,filter(x.s, size1))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[or[or[or[or[yellow,triangle],size2],and[implies[triangle,size1],yellow]],size1],triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:size2;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:size1;4:yellow;4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[yellow,triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nor[triangle,curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[triangle,and[rectangle,blue]],iota(filter(filter(filter(x.s, triangle), green), size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size2
'λx.apply(yellow,iota(filter(x.s, curry[same_size,iota(filter(filter(filter(filter(filter(x.s, triangle), size3), blue), blue), or[size2,or[and[not[rectangle],green],or[blue,rectangle]]]))])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:blue;4:blue;4:or[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(curry[same_color,x.o],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[size2,curry[same_color,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[yellow,implies[and[or[triangle,triangle],curry[same_shape,x.o]],and[size3,size2]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[and[implies[size3,curry[size-lt,x.o]],rectangle],curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(and[or[green,circle],yellow],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[circle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.forall(blue,filter(x.s, blue))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(x.s, and[triangle,and[not[or[and[yellow,or[or[implies[green,yellow],triangle],and[size3,circle]]],blue]],green]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:green;4:yellow;4:triangle;4:and[%s,%s];4:size3;4:circle;4:blue;4:green
'λx.apply(and[yellow,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, yellow), curry[size-gt,x.o]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[triangle,rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(x.s, not[triangle]), not[or[green,curry[same_color,x.o]]]), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:not[%s];4:or[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(x.s, yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(size1,iota(filter(x.s, and[circle,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2
'λx.apply(implies[size2,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), triangle), and[not[green],yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:and[%s,%s];4:not[%s];4:green;4:yellow
'λx.apply(and[and[or[and[and[size1,and[size3,circle]],rectangle],yellow],curry[same_color,x.o]],curry[same_size,iota(filter(x.s, curry[same_size,x.o]))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:circle;4:rectangle;4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[curry[same_size,x.o],circle]), nand[blue,size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:nand[%s,%s];4:blue;4:size1
'λx.apply(or[yellow,curry[same_shape,iota(filter(x.s, yellow))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(not[size1],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[curry[size-gt,iota(filter(x.s, not[size2]))],not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(and[blue,blue], filter(x.s, nor[size2,circle]))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:circle
'λx.apply(not[triangle],x.o)'	0:apply(%s,%s);4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(nor[rectangle,and[size2,size1]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[triangle,and[iff[size3,and[blue,circle]],and[size3,yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:iff[%s,%s];4:size3;4:and[%s,%s];4:blue;4:circle;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nor[blue,green],iota(filter(x.s, curry[size-gt,iota(filter(filter(x.s, size1), size3))])))'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.contains(iota(x.s), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(filter(filter(x.s, rectangle), curry[same_size,iota(x.s)]), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(or[or[curry[same_size,x.o],triangle],curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[yellow,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[and[size2,yellow],size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:size2
'λx.apply(size3,iota(filter(x.s, iff[size3,or[rectangle,and[triangle,not[not[or[blue,triangle]]]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:triangle
'λx.contains(iota(x.s), filter(filter(filter(x.s, blue), implies[size3,green]), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size3;4:green;4:yellow
'λx.contains(iota(x.s), filter(filter(x.s, blue), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(or[or[size2,rectangle],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), green), not[size1]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:not[%s];4:size1;4:yellow
'λx.apply(green,iota(filter(x.s, and[and[curry[same_shape,iota(x.s)],size3],and[size3,size3]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size3;4:size3
'λx.apply(or[or[triangle,size1],implies[triangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:implies[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.forall(or[yellow,implies[blue,and[yellow,curry[same_color,iota(x.s)]]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:implies[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(and[triangle,and[size1,rectangle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.forall(or[yellow,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:blue;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, not[and[rectangle,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:circle
'λx.forall(circle,filter(x.s, blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(rectangle,filter(x.s, yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(x.s, implies[size2,size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:size1
'λx.apply(size3,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.exists(green, filter(x.s, green))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[not[and[yellow,size3]],size2]), circle), and[rectangle,curry[same_color,iota(x.s)]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size3;4:size2;4:circle;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(or[nand[green,circle],yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:green;4:circle;4:yellow;3:%s.s;2:x
'λx.forall(size3,filter(x.s, and[or[nand[blue,blue],and[rectangle,and[green,yellow]]],and[triangle,not[size3]]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:yellow;4:and[%s,%s];4:triangle;4:not[%s];4:size3
'λx.apply(and[and[and[green,and[curry[same_size,iota(x.s)],rectangle]],nor[nand[and[size3,yellow],nor[blue,rectangle]],size2]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:nor[%s,%s];4:blue;4:rectangle;4:size2;4:green;1:%s.o;2:x
'λx.apply(not[or[green,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(and[curry[same_shape,iota(filter(filter(x.s, or[curry[same_size,x.o],size1]), green))],and[or[circle,blue],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1;4:green;4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(curry[size-gt,x.o], filter(x.s, blue))'	0:exists(%s, %s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(x.s, blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[size3,not[green]]],iota(filter(filter(filter(x.s, green), blue), not[rectangle])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:not[%s];4:rectangle
'λx.apply(or[not[triangle],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(filter(filter(filter(filter(filter(x.s, circle), and[and[circle,triangle],rectangle]), and[size1,and[triangle,blue]]), curry[same_shape,x.o]), not[size2])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:rectangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:size2
'λx.apply(and[circle,curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[rectangle,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3
'λx.apply(and[and[size2,rectangle],curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, curry[size-geq,iota(filter(x.s, yellow))])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(not[or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[or[or[yellow,circle],not[blue]],not[not[blue]]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:not[%s];4:blue;4:not[%s];4:not[%s];4:blue;4:yellow;1:%s.o;2:x
'λx.exists(not[circle], filter(x.s, not[rectangle]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(circle,iota(filter(filter(filter(x.s, nand[triangle,size2]), size1), and[size3,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:size2;4:size1;4:and[%s,%s];4:size3;4:triangle
'λx.contains(x.o, filter(filter(x.s, rectangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, blue), curry[size-leq,x.o])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(or[rectangle,rectangle],iota(filter(filter(filter(x.s, size2), or[and[size3,circle],curry[same_size,iota(x.s)]]), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.forall(size1,filter(filter(filter(x.s, curry[same_color,iota(filter(filter(filter(x.s, size2), rectangle), blue))]), size2), and[rectangle,rectangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:blue;4:size2;4:and[%s,%s];4:rectangle;4:rectangle
'λx.empty(filter(filter(filter(x.s, and[blue,and[not[blue],size1]]), not[size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:blue;4:size1;4:not[%s];4:size3;4:yellow
'λx.forall(and[green,and[curry[same_color,x.o],nand[size1,size1]]],filter(x.s, rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(implies[nand[size2,not[not[curry[same_size,iota(x.s)]]]],circle],filter(x.s, green))'	0:forall(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:size2;4:not[%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[size2,and[circle,not[blue]]],iota(filter(filter(x.s, and[yellow,not[yellow]]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:yellow;4:size2
'λx.apply(size1,iota(filter(x.s, and[circle,curry[same_color,iota(filter(filter(x.s, triangle), size1))]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(not[and[size2,and[green,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, not[not[rectangle]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, triangle), rectangle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:blue
'λx.contains(iota(filter(x.s, or[and[triangle,or[size3,and[blue,blue]]],and[or[circle,rectangle],size3]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:blue;4:and[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:size3;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size1), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.contains(iota(filter(filter(filter(x.s, circle), size2), rectangle)), filter(filter(x.s, size2), curry[same_color,x.o]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, implies[curry[same_shape,iota(x.s)],curry[size-geq,x.o]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x
'λx.apply(and[not[and[green,nor[size3,size3]]],and[curry[same_shape,x.o],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:size3;4:size3;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), implies[or[size3,size3],size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:or[%s,%s];4:size3;4:size3;4:size3
'λx.exists(size2, filter(filter(filter(filter(filter(x.s, size3), size1), nor[triangle,yellow]), or[rectangle,triangle]), triangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:nor[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:rectangle;4:triangle;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, yellow), green), not[size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:not[%s];4:size1
'λx.apply(implies[size1,and[and[and[circle,size3],circle],size1]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, rectangle), not[yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:yellow
'λx.apply(yellow,iota(filter(x.s, or[blue,circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(size2,iota(filter(filter(filter(x.s, curry[same_color,x.o]), curry[same_color,x.o]), not[and[size2,yellow]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size2;4:yellow
'λx.apply(or[blue,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(implies[yellow,iff[curry[size-leq,x.o],size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:iff[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, curry[same_size,x.o])), filter(filter(filter(x.s, curry[same_shape,x.o]), curry[same_shape,x.o]), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(blue,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size1,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(and[blue,size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(yellow,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(curry[size-lt,iota(filter(x.s, green))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nand[blue,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(not[or[green,yellow]],x.s)'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(and[nand[curry[same_color,x.o],and[size1,size2]],nand[yellow,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:size2;4:nand[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[triangle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, blue), and[circle,circle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:circle
'λx.apply(or[and[size3,and[circle,size1]],and[circle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size1;4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, size2), and[green,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:size1
'λx.empty(filter(filter(x.s, triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.forall(curry[same_size,iota(filter(x.s, and[blue,or[and[circle,size1],size3]]))],filter(x.s, and[yellow,or[blue,size2]]))'	0:forall(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:size2
'λx.apply(and[curry[size-leq,x.o],and[size1,implies[or[iff[nand[circle,curry[same_size,iota(x.s)]],size2],curry[same_color,iota(x.s)]],curry[size-lt,iota(filter(filter(x.s, size1), green))]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:size1;4:implies[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:nand[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, nand[triangle,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:rectangle
'λx.apply(circle,iota(filter(x.s, and[curry[same_shape,x.o],rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(curry[same_shape,iota(filter(x.s, size2))],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[yellow,or[circle,not[not[implies[iff[size2,blue],rectangle]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:not[%s];4:not[%s];4:implies[%s,%s];4:iff[%s,%s];4:size2;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(and[and[size3,size1],rectangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(or[or[curry[same_color,x.o],curry[same_shape,iota(x.s)]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, iff[size1,size3]), triangle), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size3;4:triangle;4:yellow
'λx.apply(nor[nor[rectangle,blue],size2],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:rectangle;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,yellow],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[and[blue,size2],blue],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:size2;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, not[size2]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(iff[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, and[green,yellow]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.apply(nor[size3,green],iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.exists(size2, filter(filter(x.s, size1), and[circle,curry[size-geq,x.o]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), or[size3,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size3;4:size2
'λx.apply(curry[size-geq,x.o],iota(filter(x.s, and[yellow,or[rectangle,rectangle]])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:rectangle
'λx.apply(green,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[iff[or[triangle,size3],blue],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[iff[nor[curry[same_color,iota(filter(x.s, and[circle,implies[not[green],size3]]))],not[rectangle]],circle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:implies[%s,%s];4:not[%s];4:green;4:size3;4:not[%s];4:rectangle;4:circle;4:size1;1:%s.o;2:x
'λx.apply(not[not[size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, or[yellow,triangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(size3,iota(filter(x.s, not[curry[same_shape,x.o]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, and[size2,or[curry[same_shape,x.o],size2]]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:blue
'λx.apply(implies[size2,and[blue,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[size2,or[size1,circle]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[triangle,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, or[and[and[blue,not[or[size2,green]]],not[green]],implies[and[and[or[nor[and[nor[size2,circle],and[yellow,yellow]],size2],size1],rectangle],not[curry[same_color,x.o]]],iff[and[size2,green],triangle]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:size2;4:green;4:not[%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size2;4:circle;4:and[%s,%s];4:yellow;4:yellow;4:size2;4:size1;4:rectangle;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:and[%s,%s];4:size2;4:green;4:triangle
'λx.apply(green,iota(filter(filter(x.s, or[or[blue,size3],size1]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:size1;4:size2
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, green), triangle), curry[same_color,x.o]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1
'λx.apply(or[size3,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, yellow), size1), and[and[and[size2,green],yellow],yellow])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[triangle,and[yellow,curry[same_color,iota(filter(x.s, rectangle))]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[triangle,size2],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(nor[size1,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(x.s, and[circle,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2
'λx.forall(size1,filter(filter(filter(filter(x.s, curry[same_size,iota(filter(filter(filter(filter(x.s, green), blue), and[or[and[size1,and[curry[same_shape,iota(x.s)],size2]],green],size2]), size3))]), and[yellow,nor[nand[rectangle,and[nand[circle,triangle],and[green,yellow]]],blue]]), not[size3]), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:green;4:size2;4:size3;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:nand[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:green;4:yellow;4:blue;4:not[%s];4:size3;4:green
'λx.apply(nand[circle,implies[size3,rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(curry[size-lt,iota(x.s)],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[or[and[or[iff[rectangle,triangle],circle],curry[same_color,x.o]],or[green,and[blue,size3]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:triangle;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[green,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:size3
'λx.forall(not[not[and[blue,circle]]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(x.s, and[size2,curry[same_size,iota(filter(filter(filter(x.s, blue), curry[same_size,iota(filter(x.s, circle))]), blue))]]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[and[size3,rectangle]]), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:rectangle;4:green
'λx.apply(circle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size1,filter(x.s, size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.contains(iota(x.s), filter(filter(filter(x.s, not[green]), yellow), nor[yellow,size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:yellow;4:nor[%s,%s];4:yellow;4:size1
'λx.apply(blue,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.contains(x.o, filter(filter(x.s, curry[same_color,iota(filter(x.s, blue))]), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(yellow,iota(filter(filter(x.s, size2), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.contains(iota(x.s), filter(filter(x.s, or[blue,not[rectangle]]), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:rectangle;4:triangle
'λx.apply(nand[and[blue,and[and[rectangle,size1],triangle]],and[rectangle,size2]],iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:triangle;4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[nand[iff[green,size1],yellow],triangle],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:green;4:size1;4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(curry[size-leq,x.o],iota(filter(filter(filter(x.s, size3), size1), nand[green,blue])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:nand[%s,%s];4:green;4:blue
'λx.apply(and[implies[rectangle,green],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, green), blue), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:size2
'λx.apply(size3,iota(filter(x.s, or[iff[size2,size3],and[triangle,green]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:size2;4:size3;4:and[%s,%s];4:triangle;4:green
'λx.exists(and[green,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.apply(and[size2,curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[green],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[or[circle,blue],and[nand[or[size1,size1],curry[size-lt,iota(filter(filter(filter(x.s, green), green), green))]],size3]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size1;4:size1;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:green;4:size3
'λx.apply(circle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nor[size3,yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, triangle), green), circle), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:circle;4:size3
'λx.apply(and[yellow,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, blue), and[or[size1,implies[curry[same_size,iota(filter(x.s, nand[green,rectangle]))],blue]],not[size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:size1;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:rectangle;4:blue;4:not[%s];4:size2
'λx.forall(circle,filter(filter(x.s, nor[circle,triangle]), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:triangle;4:size1
'λx.exists(and[and[and[blue,curry[same_shape,x.o]],blue],nor[size3,and[size2,or[circle,size1]]]], filter(x.s, triangle))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;4:nor[%s,%s];4:size3;4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[or[green,green],not[or[not[triangle],and[or[green,and[size3,nand[implies[nor[and[blue,size3],curry[size-lt,iota(x.s)]],yellow],curry[same_color,iota(x.s)]]]],not[curry[same_color,x.o]]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:not[%s];4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:nand[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:size3;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[not[size3],size1],iota(filter(filter(x.s, not[and[triangle,rectangle]]), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;4:size1
'λx.empty(filter(x.s, not[not[blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:blue
'λx.contains(iota(x.s), filter(filter(x.s, blue), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(not[not[size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[size1,and[not[implies[curry[same_color,iota(x.s)],circle]],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:circle;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, blue))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[and[blue,implies[curry[same_color,iota(x.s)],iff[triangle,and[size2,blue]]]],size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(and[rectangle,and[size1,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(or[not[size2],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(curry[size-gt,x.o],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, size1), rectangle), size2), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:size2;4:circle
'λx.apply(circle,iota(filter(filter(filter(x.s, or[size3,blue]), size2), curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:blue;4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, circle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(blue,filter(x.s, yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[curry[same_shape,iota(x.s)],and[size2,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[nand[blue,iff[size1,triangle]],yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:blue;4:iff[%s,%s];4:size1;4:triangle;4:yellow
'λx.contains(x.o, filter(filter(x.s, or[not[rectangle],curry[same_size,iota(x.s)]]), not[or[size1,yellow]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size1;4:yellow
'λx.forall(not[curry[same_shape,x.o]],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(filter(x.s, size1), and[circle,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:green
'λx.apply(curry[size-gt,x.o],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[circle,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.empty(filter(x.s, not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(and[or[curry[size-geq,iota(x.s)],not[green]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:green;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(or[triangle,and[or[circle,blue],green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, curry[same_color,x.o]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2
'λx.exists(or[circle,or[blue,and[nand[size3,curry[same_color,x.o]],green]]], filter(x.s, or[size3,curry[same_size,x.o]]))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:and[%s,%s];4:nand[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(and[size2,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[size1,and[or[rectangle,and[size3,and[yellow,size2]]],size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,or[triangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[green,and[size2,blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:blue
'λx.apply(nand[triangle,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, not[yellow]), size2), not[size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2;4:not[%s];4:size1
'λx.apply(iff[not[yellow],nand[and[circle,and[rectangle,circle]],size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:nand[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:circle;4:size1;1:%s.o;2:x
'λx.apply(nand[size2,green],iota(filter(filter(filter(x.s, not[triangle]), blue), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:blue;4:blue
'λx.empty(filter(filter(x.s, not[size2]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle
'λx.apply(and[nor[circle,blue],not[yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[same_shape,iota(x.s)], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[triangle,and[not[iff[implies[or[curry[same_color,x.o],triangle],and[and[triangle,not[size2]],triangle]],and[not[size2],blue]]],and[and[green,rectangle],or[size1,and[size2,triangle]]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:size2;4:triangle;4:and[%s,%s];4:not[%s];4:size2;4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:or[%s,%s];4:size1;4:and[%s,%s];4:size2;4:triangle
'λx.apply(curry[same_shape,iota(filter(filter(filter(filter(x.s, size1), rectangle), size1), green))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:size1;4:green;1:%s.o;2:x
'λx.apply(and[iff[size3,size3],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size3;4:size3;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(green,filter(filter(x.s, curry[same_size,iota(x.s)]), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(curry[same_shape,iota(filter(filter(x.s, not[and[yellow,iff[yellow,and[size3,not[size3]]]]]), size3))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:not[%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), nor[size2,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:size2;4:size2
'λx.apply(or[rectangle,curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(not[size3], filter(x.s, and[not[rectangle],and[triangle,nor[and[circle,rectangle],not[triangle]]]]))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:not[%s];4:triangle
'λx.forall(and[yellow,yellow],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.empty(filter(x.s, not[blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(iff[curry[size-leq,iota(filter(filter(x.s, and[rectangle,or[green,circle]]), nand[circle,size3]))],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:circle;4:nand[%s,%s];4:circle;4:size3;4:size3;1:%s.o;2:x
'λx.apply(implies[blue,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.forall(not[green],x.s)'	0:forall(%s,%s);4:not[%s];4:green;3:%s.s;2:x
'λx.apply(nand[curry[same_color,iota(x.s)],circle],iota(filter(filter(filter(filter(x.s, rectangle), not[triangle]), rectangle), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:triangle;4:rectangle;4:yellow
'λx.exists(triangle, filter(x.s, curry[size-leq,iota(x.s)]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.exists(and[not[blue],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(or[blue,yellow],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(triangle,x.o)'	0:apply(%s,%s);4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, blue), or[triangle,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:size1
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, rectangle), rectangle), and[size1,triangle]), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:and[%s,%s];4:size1;4:triangle;4:circle
'λx.apply(iff[size1,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size3), size2), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(or[size3,or[curry[same_shape,iota(x.s)],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[green,size2],iota(filter(x.s, and[yellow,and[and[not[size3],triangle],nor[size1,or[size3,curry[same_color,x.o]]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:triangle;4:nor[%s,%s];4:size1;4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.forall(not[triangle],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(filter(filter(x.s, blue), size2), rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:rectangle
'λx.apply(and[implies[circle,and[size1,curry[size-leq,x.o]]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:size1;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(not[iff[and[triangle,yellow],not[blue]]],filter(x.s, size2))'	0:forall(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(yellow, filter(x.s, curry[same_size,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, green), nor[triangle,size3]), circle), nor[rectangle,and[yellow,yellow]]), size3), size1), circle), size1), triangle), size3))]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:triangle;4:size3;4:circle;4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:yellow;4:size3;4:size1;4:circle;4:size1;4:triangle;4:size3
'λx.apply(not[and[circle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, nand[size2,and[blue,and[blue,circle]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:circle
'λx.exists(nand[circle,triangle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:circle;4:triangle;3:%s.s;2:x
'λx.apply(and[size3,nor[size1,not[curry[same_shape,x.o]]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nor[%s,%s];4:size1;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[curry[same_shape,x.o],iff[size2,and[green,size2]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size2;4:and[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[not[size3],and[green,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(filter(x.s, curry[same_shape,iota(x.s)]), rectangle), circle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:circle;4:rectangle
'λx.apply(blue,iota(filter(x.s, and[and[rectangle,size1],green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:green
'λx.apply(or[blue,triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[rectangle,and[size2,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[size1,or[not[not[not[yellow]]],and[curry[same_size,x.o],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[blue,iff[and[and[or[green,circle],not[yellow]],curry[same_size,iota(x.s)]],and[size3,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:circle;4:not[%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, or[and[rectangle,circle],size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size2
'λx.apply(size2,x.o)'	0:apply(%s,%s);4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,and[or[rectangle,yellow],curry[size-lt,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(curry[size-leq,x.o],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(x.s, or[blue,curry[same_shape,x.o]]), nand[and[green,rectangle],not[circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:not[%s];4:circle
'λx.apply(and[size2,and[curry[same_size,iota(filter(x.s, and[implies[iff[not[size3],yellow],size1],yellow]))],or[yellow,yellow]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:not[%s];4:size3;4:yellow;4:size1;4:yellow;4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[or[curry[same_shape,x.o],triangle],and[circle,size2]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, size3), or[size1,and[triangle,green]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:green
'λx.apply(curry[same_size,x.o],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[nor[size1,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[size3,nor[and[and[size2,size1],size1],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(filter(x.s, curry[same_size,x.o]), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(and[yellow,or[and[not[or[green,green]],and[yellow,curry[same_size,x.o]]],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:green;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, not[circle]), rectangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:rectangle;4:green
'λx.contains(iota(x.s), filter(x.s, curry[same_color,iota(filter(x.s, blue))]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(circle,iota(filter(x.s, and[curry[same_shape,iota(x.s)],triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[and[size1,curry[same_shape,x.o]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[size1,not[rectangle]]), size1), and[or[implies[and[size3,green],or[yellow,or[size1,implies[curry[same_size,iota(x.s)],size1]]]],circle],green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:rectangle;4:size1;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size3;4:green;4:or[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;4:green
'λx.contains(iota(x.s), filter(filter(x.s, and[yellow,blue]), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:size2
'λx.apply(nor[size1,size3],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(x.s, iff[and[size3,and[or[size2,triangle],size3]],not[size2]]), curry[same_color,x.o]), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:size3;4:not[%s];4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(and[yellow,yellow],iota(filter(filter(filter(x.s, curry[size-gt,iota(x.s)]), and[and[rectangle,size3],green]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:green;4:size1
'λx.forall(rectangle,filter(x.s, and[size2,and[curry[same_size,x.o],blue]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue
'λx.apply(nand[size1,or[circle,and[triangle,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, blue), size1), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, not[curry[same_shape,x.o]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, curry[same_shape,x.o]), and[rectangle,yellow]), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:yellow;4:triangle
'λx.contains(iota(filter(filter(x.s, and[triangle,size3]), nand[blue,rectangle])), filter(filter(filter(filter(filter(x.s, not[blue]), size3), size2), circle), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;4:nand[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3;4:size2;4:circle;4:green
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), not[not[or[curry[same_color,iota(x.s)],curry[size-gt,x.o]]]]), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:rectangle
'λx.apply(iff[or[blue,yellow],green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, not[circle]), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size2
'λx.apply(iff[and[blue,curry[same_shape,iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size1), green), and[green,size1]), blue), and[not[curry[same_shape,x.o]],rectangle]), circle), green), not[and[rectangle,rectangle]]), size1))]],size3],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:and[%s,%s];4:green;4:size1;4:blue;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:circle;4:green;4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_color,x.o],iota(filter(filter(x.s, curry[same_color,iota(x.s)]), circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(and[size1,circle],iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.forall(not[or[rectangle,circle]],x.s)'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, blue), and[size2,not[green]]), not[size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:not[%s];4:green;4:not[%s];4:size1
'λx.apply(and[circle,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[green,not[and[nand[green,size1],size1]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:size1;4:size1;3:%s.s;2:x
'λx.forall(iff[or[yellow,circle],green],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:green;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), iff[and[size3,curry[size-geq,x.o]],circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:and[%s,%s];4:size3;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:circle
'λx.forall(curry[same_shape,iota(filter(filter(filter(x.s, nand[curry[same_shape,iota(x.s)],implies[circle,curry[same_size,iota(x.s)]]]), or[blue,and[blue,rectangle]]), size3))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(or[blue,triangle],iota(filter(filter(filter(filter(x.s, or[rectangle,triangle]), and[blue,not[green]]), triangle), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:blue;4:not[%s];4:green;4:triangle;4:size3
'λx.apply(iff[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,or[yellow,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(x.s, curry[same_size,iota(x.s)]))],iota(filter(filter(x.s, or[and[and[iff[green,not[and[size1,green]]],or[blue,and[and[not[rectangle],size2],circle]]],size3],and[yellow,rectangle]]), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:size1;4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:size2;4:circle;4:size3;4:and[%s,%s];4:yellow;4:rectangle;4:rectangle
'λx.forall(and[not[circle],circle],filter(x.s, curry[same_shape,iota(filter(x.s, rectangle))]))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(x.s, yellow), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(not[or[green,triangle]],iota(filter(filter(filter(filter(x.s, size1), size1), size2), size3)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size2;4:size3
'λx.apply(nor[green,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, curry[same_color,x.o]), and[size3,not[curry[same_shape,iota(filter(filter(x.s, not[and[and[triangle,size2],size2]]), size2))]]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:size2;4:size2
'λx.apply(nor[nor[and[and[triangle,circle],green],yellow],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:green;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size2), triangle), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:triangle
'λx.apply(or[yellow,curry[same_shape,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, green), and[yellow,yellow]), green), curry[size-leq,x.o]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:yellow;4:yellow;4:green;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.forall(or[blue,yellow],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[size2,or[green,yellow]],iota(filter(x.s, or[size1,nor[blue,circle]])))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:nor[%s,%s];4:blue;4:circle
'λx.apply(size3,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.contains(x.o, filter(x.s, nor[green,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:size2
'λx.apply(green,iota(filter(x.s, and[curry[size-geq,x.o],circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:circle
'λx.apply(not[or[curry[same_size,x.o],size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[not[rectangle],size3],filter(filter(filter(filter(filter(filter(filter(filter(x.s, size2), and[triangle,green]), blue), circle), or[green,or[blue,curry[same_color,iota(x.s)]]]), circle), and[green,size1]), size2))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:green;4:blue;4:circle;4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:green;4:size1;4:size2
'λx.apply(not[not[rectangle]],iota(filter(x.s, and[and[curry[size-gt,iota(filter(x.s, size3))],curry[same_color,iota(x.s)]],nand[and[and[not[size3],green],triangle],and[and[size1,and[yellow,curry[size-gt,x.o]]],size2]]])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:green;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size2
'λx.apply(or[size3,curry[same_size,x.o]],iota(filter(filter(x.s, nor[blue,not[size3]]), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:not[%s];4:size3;4:size3
'λx.apply(triangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[size1,size3],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[and[and[and[or[curry[same_shape,x.o],circle],and[size3,nand[curry[same_color,iota(x.s)],size3]]],not[not[blue]]],circle],implies[and[yellow,and[size3,circle]],and[size2,yellow]]],or[nand[size2,blue],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:size3;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:not[%s];4:not[%s];4:blue;4:circle;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:nand[%s,%s];4:size2;4:blue;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, not[curry[same_color,iota(x.s)]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,and[yellow,and[green,yellow]]],iota(filter(filter(filter(filter(x.s, yellow), blue), green), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:green;4:circle
'λx.forall(triangle,filter(filter(x.s, triangle), not[or[or[or[triangle,size3],or[circle,size3]],and[yellow,and[circle,green]]]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:circle;4:size3;4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:green
'λx.apply(nor[curry[same_color,iota(x.s)],nand[size2,curry[same_color,x.o]]],iota(filter(x.s, and[yellow,curry[same_size,x.o]])))'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(nor[rectangle,size3],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, curry[same_shape,iota(filter(filter(filter(x.s, rectangle), size2), and[size3,and[implies[blue,size2],and[blue,triangle]]]))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:and[%s,%s];4:size3;4:and[%s,%s];4:implies[%s,%s];4:blue;4:size2;4:and[%s,%s];4:blue;4:triangle
'λx.contains(x.o, filter(x.s, curry[same_size,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, not[triangle]), size3), triangle), size2), size3), and[or[green,green],implies[size3,yellow]]), nor[triangle,blue]), blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size3;4:triangle;4:size2;4:size3;4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:implies[%s,%s];4:size3;4:yellow;4:nor[%s,%s];4:triangle;4:blue;4:blue
'λx.apply(implies[circle,not[triangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,green],iota(filter(filter(filter(x.s, curry[same_size,x.o]), circle), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:blue
'λx.apply(and[blue,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(curry[size-geq,iota(filter(x.s, green))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(and[size1,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[size3,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[triangle,and[triangle,size2]],yellow],iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.forall(and[blue,and[iff[size2,circle],blue]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:size2;4:circle;4:blue;3:%s.s;2:x
'λx.apply(and[rectangle,curry[same_color,x.o]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(blue,filter(x.s, size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(filter(x.s, not[implies[blue,size3]]), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:size3;4:triangle
'λx.apply(or[yellow,and[not[size2],and[curry[same_shape,x.o],curry[same_color,x.o]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(filter(x.s, size3), blue), triangle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:triangle
'λx.apply(nor[curry[same_size,x.o],size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[size2,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green
'λx.apply(and[or[and[blue,yellow],not[green]],and[yellow,and[and[not[circle],curry[same_shape,iota(x.s)]],or[or[size1,curry[same_shape,iota(x.s)]],not[blue]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:not[%s];4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[or[and[nand[green,and[not[nor[blue,yellow]],blue]],blue],and[triangle,rectangle]]],curry[size-geq,iota(filter(x.s, green))]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:blue;4:yellow;4:blue;4:blue;4:and[%s,%s];4:triangle;4:rectangle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[not[and[yellow,and[curry[same_size,iota(x.s)],size3]]],size3],curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[nor[size1,green],curry[same_shape,iota(filter(x.s, rectangle))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size1;4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[blue,triangle],size3],iota(filter(filter(x.s, size3), and[size1,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:size2
'λx.apply(not[triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(or[and[rectangle,implies[or[rectangle,not[triangle]],size1]],size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:triangle;4:size1;4:size1;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, iff[triangle,size1]), and[triangle,size2]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:triangle;4:size2
'λx.apply(and[iff[size1,not[not[iff[and[circle,yellow],iff[triangle,or[nor[size2,and[triangle,nand[size2,circle]]],and[and[and[triangle,curry[same_color,x.o]],nand[and[not[size1],rectangle],green]],and[not[size1],implies[and[yellow,size1],blue]]]]]]]]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size1;4:not[%s];4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:iff[%s,%s];4:triangle;4:or[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size2;4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:rectangle;4:green;4:and[%s,%s];4:not[%s];4:size1;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:blue;4:size3;1:%s.o;2:x
'λx.apply(not[curry[size-geq,iota(filter(x.s, and[iff[rectangle,implies[blue,and[curry[same_shape,iota(x.s)],rectangle]]],green]))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.forall(and[green,triangle],filter(filter(filter(x.s, circle), green), nor[and[nor[implies[not[yellow],blue],size1],and[iff[or[yellow,or[size1,blue]],size1],and[or[green,and[rectangle,iff[blue,blue]]],blue]]],size3]))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:nor[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:not[%s];4:yellow;4:blue;4:size1;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:blue;4:size1;4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:blue;4:blue;4:blue;4:size3
'λx.apply(and[iff[triangle,or[circle,not[and[blue,not[size2]]]]],size1],iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(not[or[rectangle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size3), size3), and[not[size2],triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:and[%s,%s];4:not[%s];4:size2;4:triangle
'λx.apply(not[curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[not[size2],iff[curry[same_color,iota(x.s)],blue]], filter(x.s, yellow))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size2;4:iff[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, curry[size-leq,x.o]), or[yellow,not[yellow]]), nand[curry[size-geq,iota(x.s)],or[nor[size3,size1],rectangle]])), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:yellow;4:nand[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:size3;4:size1;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[triangle,rectangle],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,circle],iota(filter(filter(filter(x.s, blue), not[and[rectangle,size2]]), green)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:rectangle;4:size2;4:green
'λx.apply(iff[circle,size1],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[curry[same_size,iota(x.s)],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size3), blue), not[size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:not[%s];4:size1
'λx.contains(iota(filter(x.s, triangle)), filter(filter(x.s, nand[nand[blue,yellow],size3]), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nand[%s,%s];4:blue;4:yellow;4:size3;4:green
'λx.apply(not[nor[green,size3]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[size2,and[nand[and[circle,size2],triangle],rectangle]],and[size1,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:size2;4:triangle;4:rectangle;4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(nor[circle,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(filter(x.s, nor[or[and[circle,not[blue]],size3],size3]), blue), circle), circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:size3;4:size3;4:blue;4:circle;4:circle
'λx.apply(nand[rectangle,curry[size-leq,x.o]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,and[yellow,and[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(iff[or[triangle,size2],nand[circle,blue]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:nand[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[and[green,curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[or[and[rectangle,curry[same_color,x.o]],curry[same_size,x.o]],and[not[size2],green]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, green), not[size2]), blue), size2), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size2;4:blue;4:size2;4:size3
'λx.apply(or[size3,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[triangle,not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.forall(blue,filter(x.s, curry[same_shape,x.o]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[nor[yellow,or[not[blue],size2]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:blue;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[green,size1],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, not[circle]), not[blue]), or[or[size2,size2],curry[same_color,x.o]]), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:not[%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:size2;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1
'λx.contains(iota(filter(filter(x.s, triangle), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;3:%s.s;2:x
'λx.apply(curry[same_color,iota(x.s)],iota(filter(filter(filter(filter(x.s, curry[same_size,x.o]), and[size2,circle]), size2), yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:circle;4:size2;4:yellow
'λx.apply(iff[green,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.forall(curry[size-leq,x.o],filter(x.s, size3))'	0:forall(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[size1,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[curry[size-leq,x.o],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.forall(triangle,filter(x.s, not[and[not[size3],triangle]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:triangle
'λx.apply(size2,iota(filter(filter(filter(x.s, and[rectangle,blue]), size2), curry[same_shape,x.o])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(implies[circle,curry[same_color,iota(filter(x.s, size2))]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[and[yellow,triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[size1,triangle],iota(filter(x.s, or[green,yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow
'λx.apply(not[or[size2,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(implies[and[yellow,yellow],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), not[green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:green
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, size1), green), size1), or[triangle,iff[or[or[green,yellow],size3],size3]]), and[implies[green,rectangle],size2]), implies[size1,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size1;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size3;4:size3;4:and[%s,%s];4:implies[%s,%s];4:green;4:rectangle;4:size2;4:implies[%s,%s];4:size1;4:size2
'λx.empty(filter(filter(x.s, triangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(curry[same_size,iota(filter(x.s, size1))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(size1,iota(filter(x.s, or[curry[same_color,iota(x.s)],triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(and[size2,and[circle,triangle]],iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(and[green,and[size2,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(and[green,or[rectangle,triangle]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(and[size2,size3],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:size3;3:%s.s;2:x
'λx.apply(and[green,circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[triangle,size2],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[rectangle,yellow]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow;4:circle
'λx.forall(and[and[yellow,or[green,or[green,circle]]],curry[same_shape,x.o]],filter(filter(filter(x.s, and[and[size2,curry[same_color,iota(x.s)]],yellow]), rectangle), nand[iff[nor[blue,size3],not[size2]],triangle]))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:green;4:or[%s,%s];4:green;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:rectangle;4:nand[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:blue;4:size3;4:not[%s];4:size2;4:triangle
'λx.apply(triangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[rectangle,triangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[curry[size-gt,iota(x.s)]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[nand[and[and[curry[same_color,iota(x.s)],green],curry[same_color,iota(filter(x.s, nand[size3,yellow]))]],yellow],curry[same_size,x.o]],iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:yellow;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(and[size3,circle],iota(filter(filter(filter(x.s, nand[circle,blue]), yellow), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:blue;4:yellow;4:rectangle
'λx.contains(iota(filter(x.s, size2)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(and[circle,iff[blue,curry[same_color,x.o]]],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, blue), not[and[size2,rectangle]]), not[curry[size-gt,x.o]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:size2;4:rectangle;4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.apply(and[size3,curry[same_shape,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, and[size2,and[curry[same_size,x.o],and[circle,or[green,blue]]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:blue
'λx.apply(or[size1,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, nand[and[nand[not[size1],and[size1,size2]],not[triangle]],circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:size1;4:size2;4:not[%s];4:triangle;4:circle
'λx.apply(and[not[size1],curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[rectangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[size-geq,iota(filter(filter(filter(x.s, circle), size1), curry[same_color,iota(x.s)]))],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(not[implies[or[size2,blue],implies[and[not[size3],blue],curry[same_shape,iota(x.s)]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:size2;4:blue;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(and[rectangle,not[and[curry[same_size,x.o],iff[or[size1,not[circle]],curry[same_color,iota(filter(x.s, green))]]]]], filter(x.s, implies[not[rectangle],and[blue,triangle]]))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:blue;4:triangle
'λx.forall(blue,filter(filter(x.s, not[yellow]), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size1
'λx.apply(not[size3],iota(filter(x.s, nand[implies[or[circle,blue],size2],nand[green,yellow]])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:circle;4:blue;4:size2;4:nand[%s,%s];4:green;4:yellow
'λx.apply(or[and[circle,size3],size1],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, green), and[size2,triangle]), triangle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size2;4:triangle;4:triangle;4:triangle
'λx.apply(circle,iota(filter(x.s, and[implies[iff[nor[and[circle,green],size1],blue],size2],blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:circle;4:green;4:size1;4:blue;4:size2;4:blue
'λx.empty(filter(filter(filter(x.s, iff[yellow,size2]), rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:size2;4:rectangle;4:green
'λx.apply(implies[green,curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[not[circle],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size1,nand[triangle,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:nand[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[and[yellow,yellow],and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[or[blue,curry[same_color,x.o]],yellow],iota(filter(filter(filter(x.s, rectangle), circle), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:size3
'λx.apply(and[and[curry[same_color,x.o],size2],or[size2,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(filter(x.s, size3), triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.forall(size3,filter(x.s, blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size2,filter(x.s, rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(not[blue],x.s)'	0:forall(%s,%s);4:not[%s];4:blue;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, green), triangle), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:circle;3:%s.s;2:x
'λx.apply(not[or[size1,blue]],iota(filter(x.s, and[triangle,and[size3,blue]])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:blue
'λx.contains(iota(filter(x.s, size1)), filter(x.s, not[size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(blue,iota(filter(filter(x.s, rectangle), not[size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size2
'λx.contains(iota(filter(filter(x.s, size1), yellow)), filter(filter(filter(x.s, triangle), and[size1,not[curry[same_shape,x.o]]]), or[size1,blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size1;4:blue
'λx.apply(or[blue,and[curry[same_color,iota(x.s)],size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(or[yellow,size2], filter(x.s, circle))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[blue],iota(filter(filter(filter(x.s, or[not[and[circle,not[size2]]],curry[same_size,x.o]]), and[circle,size1]), size3)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:size1;4:size3
'λx.apply(and[nand[implies[rectangle,or[blue,blue]],rectangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:blue;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[size1]), curry[same_size,x.o])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.forall(iff[curry[same_size,iota(filter(x.s, triangle))],triangle],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;3:%s.s;2:x
'λx.forall(triangle,filter(filter(filter(filter(x.s, size2), curry[same_size,x.o]), and[yellow,circle]), or[rectangle,implies[size2,nand[rectangle,blue]]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:circle;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:size2;4:nand[%s,%s];4:rectangle;4:blue
'λx.apply(and[and[size2,green],and[nor[yellow,size2],not[and[size2,size1]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:size2;4:not[%s];4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(x.s, green))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, blue), circle), size3), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3;4:size2
'λx.exists(and[and[blue,size1],size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size1;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, implies[not[and[yellow,rectangle]],not[circle]]), and[green,yellow]), size1), not[triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;4:not[%s];4:circle;4:and[%s,%s];4:green;4:yellow;4:size1;4:not[%s];4:triangle
'λx.apply(blue,iota(filter(x.s, curry[size-leq,x.o])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[or[and[size1,curry[same_shape,x.o]],circle],and[or[blue,or[yellow,not[circle]]],and[implies[blue,rectangle],green]]]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:not[%s];4:circle;4:and[%s,%s];4:implies[%s,%s];4:blue;4:rectangle;4:green;4:yellow
'λx.forall(or[green,size2],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:green;4:size2;3:%s.s;2:x
'λx.apply(and[and[triangle,or[yellow,or[nand[and[implies[size3,size1],and[or[circle,implies[curry[size-geq,iota(x.s)],size1]],or[circle,size1]]],triangle],size3]]],triangle],iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:size1;4:and[%s,%s];4:or[%s,%s];4:circle;4:implies[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:size1;4:triangle;4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(and[blue,size1],iota(filter(filter(filter(filter(filter(x.s, and[size1,or[or[green,not[triangle]],size1]]), size2), curry[same_size,x.o]), blue), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:triangle;4:size1;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;4:yellow
'λx.apply(and[size3,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(and[not[circle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[not[rectangle],and[size3,size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:size3;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, not[and[triangle,not[green]]]), and[blue,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:green;4:and[%s,%s];4:blue;4:green
'λx.forall(size3,filter(x.s, size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[not[curry[same_size,iota(filter(filter(filter(x.s, circle), yellow), size2))]],and[or[blue,blue],green]],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:size2;4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.empty(filter(filter(filter(x.s, yellow), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:rectangle
'λx.apply(and[size1,curry[size-lt,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, size2), rectangle), or[rectangle,or[size1,or[size1,size1]]]), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:or[%s,%s];4:size1;4:size1;4:circle
'λx.apply(not[size1],iota(filter(filter(filter(filter(filter(x.s, size2), yellow), and[curry[size-lt,x.o],size2]), yellow), size2)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size2;4:yellow;4:size2
'λx.forall(curry[same_size,iota(x.s)],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[yellow,and[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.exists(and[size2,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.apply(and[nor[size2,size1],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size2;4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[blue,curry[same_shape,x.o]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, rectangle), circle), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:yellow
'λx.apply(curry[same_size,iota(filter(x.s, iff[not[nor[yellow,and[circle,implies[size1,yellow]]]],and[size3,blue]]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:implies[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[size2,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(and[and[rectangle,not[size2]],and[or[circle,yellow],and[green,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[yellow,blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.apply(circle,iota(filter(x.s, and[size3,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.apply(iff[size2,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size1), green), and[yellow,curry[same_shape,x.o]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), not[nor[blue,or[and[and[rectangle,nor[not[size3],or[and[not[green],not[and[rectangle,green]]],circle]]],size3],iff[not[circle],size1]]]]), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:not[%s];4:and[%s,%s];4:rectangle;4:green;4:circle;4:size3;4:iff[%s,%s];4:not[%s];4:circle;4:size1;4:rectangle
'λx.apply(curry[size-lt,iota(filter(filter(x.s, curry[size-leq,x.o]), green))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(or[size1,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[or[and[size1,and[and[size3,green],implies[size2,rectangle]]],triangle],curry[same_color,iota(filter(x.s, nand[or[or[nand[size3,not[yellow]],circle],not[and[circle,size1]]],size2]))]],curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:implies[%s,%s];4:size2;4:rectangle;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:size3;4:not[%s];4:yellow;4:circle;4:not[%s];4:and[%s,%s];4:circle;4:size1;4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[triangle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[size3,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(and[rectangle,size3],iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(circle,iota(filter(x.s, nor[or[triangle,not[size1]],triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:size1;4:triangle
'λx.apply(curry[same_size,iota(filter(filter(x.s, rectangle), size2))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, iff[curry[same_shape,x.o],yellow]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(not[rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, and[not[blue],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:rectangle
'λx.apply(not[implies[circle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(filter(filter(filter(x.s, size2), triangle), curry[same_size,x.o]), nand[blue,and[curry[size-geq,x.o],triangle]]), iff[and[blue,yellow],blue])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:triangle;4:iff[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:blue
'λx.apply(size1,iota(filter(x.s, iff[size2,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:blue
'λx.forall(not[blue],filter(x.s, or[triangle,and[and[or[curry[same_color,x.o],size2],green],or[and[blue,triangle],rectangle]]]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;4:green;4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:rectangle
'λx.apply(and[size3,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,or[curry[same_color,iota(x.s)],not[size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[implies[and[iff[yellow,not[or[iff[size2,or[or[circle,circle],blue]],size3]]],rectangle],and[size3,size2]],nor[size2,and[green,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:circle;4:circle;4:blue;4:size3;4:rectangle;4:and[%s,%s];4:size3;4:size2;4:nor[%s,%s];4:size2;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,blue],iota(filter(x.s, nand[triangle,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:size3
'λx.apply(and[yellow,size2],iota(filter(filter(filter(x.s, yellow), circle), and[and[and[size1,and[circle,circle]],green],rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:circle;4:green;4:rectangle
'λx.apply(not[size3],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), yellow), nor[size3,not[circle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:nor[%s,%s];4:size3;4:not[%s];4:circle
'λx.contains(x.o, filter(x.s, and[yellow,and[or[blue,circle],rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:rectangle
'λx.apply(and[curry[same_color,x.o],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, yellow), blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(not[and[green,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(or[green,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.forall(and[triangle,size3],filter(x.s, size3))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(size3, filter(x.s, and[green,not[rectangle]]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:rectangle
'λx.exists(and[size1,circle], filter(x.s, and[size3,green]))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green
'λx.apply(not[blue],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size1,iota(filter(x.s, and[and[size2,rectangle],blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:blue
'λx.apply(not[curry[same_size,x.o]],iota(filter(filter(filter(x.s, or[size1,yellow]), size3), size3)))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:yellow;4:size3;4:size3
'λx.apply(and[and[size1,curry[same_color,iota(x.s)]],rectangle],iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(curry[same_size,iota(filter(filter(x.s, size1), nor[implies[blue,size3],rectangle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, size1), not[circle]), circle), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:circle;4:circle;4:size3
'λx.exists(not[rectangle], filter(x.s, curry[same_color,iota(x.s)]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[yellow,size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[size3,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, rectangle), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(size2,iota(filter(x.s, and[not[iff[size1,and[circle,and[size1,blue]]]],size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:blue;4:size1
'λx.apply(and[green,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(nand[rectangle,circle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(x.s, size2))],iota(filter(filter(filter(filter(x.s, green), and[size1,size1]), and[iff[iff[implies[green,and[triangle,size1]],triangle],size1],not[and[green,circle]]]), and[size3,nor[nor[or[not[blue],implies[size2,and[or[circle,triangle],curry[same_shape,x.o]]]],rectangle],curry[same_size,x.o]]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:iff[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:triangle;4:size1;4:triangle;4:size1;4:not[%s];4:and[%s,%s];4:green;4:circle;4:and[%s,%s];4:size3;4:nor[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, circle), size1), not[triangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:not[%s];4:triangle
'λx.apply(circle,iota(filter(filter(filter(x.s, or[and[and[yellow,size3],and[size1,curry[same_shape,iota(x.s)]]],green]), and[not[size2],and[size2,yellow]]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size2;4:yellow;4:green
'λx.apply(curry[same_size,x.o],iota(filter(x.s, and[curry[size-gt,x.o],size3])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size3
'λx.apply(green,iota(filter(filter(filter(x.s, blue), curry[size-lt,iota(x.s)]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size3
'λx.empty(filter(x.s, and[yellow,or[size1,and[or[circle,circle],rectangle]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:rectangle
'λx.apply(nand[or[size1,green],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size1;4:green;4:circle;1:%s.o;2:x
'λx.apply(implies[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[curry[size-lt,x.o],blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[circle,and[blue,implies[size2,curry[same_size,x.o]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:implies[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, nor[blue,blue]), nor[yellow,not[size3]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:blue;4:nor[%s,%s];4:yellow;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, yellow), size1), circle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[size2],x.o)'	0:apply(%s,%s);4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[rectangle]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size3
'λx.apply(not[implies[size1,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(implies[size3,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(not[curry[same_shape,iota(x.s)]],x.s)'	0:forall(%s,%s);4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[curry[size-geq,iota(filter(filter(x.s, yellow), or[blue,and[size1,yellow]]))],not[size3]],iota(filter(x.s, and[yellow,yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:yellow;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.empty(filter(x.s, and[size3,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, rectangle), blue), rectangle), and[yellow,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:rectangle;4:and[%s,%s];4:yellow;4:size3
'λx.forall(green,filter(filter(x.s, curry[same_color,iota(x.s)]), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(size3,iota(filter(x.s, curry[size-lt,x.o])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(and[blue,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(or[size3,iff[curry[same_size,x.o],and[yellow,and[and[and[size1,or[or[size2,size3],curry[same_size,iota(filter(filter(filter(x.s, triangle), and[yellow,size3]), or[and[green,not[size1]],not[curry[size-leq,x.o]]]))]]],rectangle],size1]]]],filter(x.s, implies[triangle,size3]))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:size2;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:yellow;4:size3;4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:size1;4:not[%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size3
'λx.apply(and[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, curry[same_color,x.o]), and[circle,not[yellow]]), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:not[%s];4:yellow;4:size3
'λx.apply(circle,iota(filter(filter(x.s, size2), curry[size-leq,iota(x.s)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,implies[curry[size-geq,iota(x.s)],green]],or[rectangle,curry[same_shape,x.o]]],iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(curry[same_size,iota(x.s)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[curry[same_size,x.o],blue], filter(x.s, and[rectangle,and[yellow,and[and[triangle,triangle],circle]]]))'	0:exists(%s, %s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:circle
'λx.apply(and[size3,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, rectangle), not[size2]), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size2;4:circle
'λx.apply(or[triangle,implies[size2,yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[green,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(x.s, not[size3]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size3
'λx.apply(nand[size2,size3],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size3,green],iota(filter(filter(filter(filter(x.s, yellow), rectangle), blue), not[circle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:blue;4:not[%s];4:circle
'λx.forall(implies[and[size2,size3],size1],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:size3;4:size1;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[circle,nand[triangle,triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nand[%s,%s];4:triangle;4:triangle
'λx.apply(and[rectangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(green,filter(x.s, not[size2]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.exists(not[rectangle], x.s)'	0:exists(%s, %s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[not[and[size3,rectangle]],and[iff[green,rectangle],size1]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:size1
'λx.apply(iff[and[curry[size-lt,iota(filter(filter(filter(filter(filter(filter(x.s, nor[size1,blue]), curry[same_color,iota(filter(x.s, blue))]), and[and[yellow,circle],nand[rectangle,and[and[or[blue,size3],size1],size1]]]), not[blue]), curry[same_shape,iota(filter(x.s, size1))]), curry[same_shape,iota(x.s)]))],size3],triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:size3;4:size1;4:size1;4:not[%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[or[blue,blue],curry[size-leq,iota(x.s)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(curry[same_color,x.o], filter(filter(filter(x.s, rectangle), triangle), size3))'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:size3
'λx.exists(size1, filter(x.s, implies[size2,circle]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:circle
'λx.apply(implies[blue,and[circle,and[and[and[rectangle,nor[curry[same_shape,x.o],green]],and[and[not[and[triangle,and[size3,size1]]],implies[and[not[curry[same_size,x.o]],curry[same_color,iota(x.s)]],size1]],circle]],green]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:size1;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;4:green;1:%s.o;2:x
'λx.apply(and[curry[same_color,x.o],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(or[iff[green,triangle],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:green;4:triangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, blue), curry[same_shape,x.o])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[not[yellow],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nor[triangle,and[green,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.forall(triangle,filter(x.s, or[size1,iff[curry[same_size,iota(x.s)],not[rectangle]]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.forall(blue,x.s)'	0:forall(%s,%s);4:blue;3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(filter(filter(filter(x.s, circle), not[circle]), and[green,not[not[green]]]), iff[blue,blue]), nand[nand[yellow,and[and[or[circle,and[curry[same_size,iota(x.s)],size3]],green],green]],blue]), triangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:circle;4:and[%s,%s];4:green;4:not[%s];4:not[%s];4:green;4:iff[%s,%s];4:blue;4:blue;4:nand[%s,%s];4:nand[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:green;4:green;4:blue;4:triangle
'λx.forall(curry[same_size,x.o],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size1,x.o)'	0:apply(%s,%s);4:size1;1:%s.o;2:x
'λx.apply(or[green,curry[size-lt,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(nor[size1,rectangle], filter(filter(x.s, and[size2,not[curry[same_color,x.o]]]), size2))'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), yellow), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:yellow
'λx.apply(not[and[curry[size-geq,x.o],not[triangle]]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[blue,yellow],iota(filter(x.s, green)))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(filter(filter(x.s, size3), circle), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:yellow
'λx.apply(or[and[not[circle],curry[same_shape,iota(x.s)]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(and[curry[size-lt,iota(x.s)],triangle],filter(filter(x.s, circle), nand[or[circle,size1],size2]))'	0:forall(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:or[%s,%s];4:circle;4:size1;4:size2
'λx.exists(iff[yellow,rectangle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:yellow;4:rectangle;3:%s.s;2:x
'λx.apply(not[curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[size2,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, and[rectangle,circle]), blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:blue;4:circle
'λx.apply(size2,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.forall(or[triangle,size1],filter(filter(x.s, circle), size2))'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.exists(and[rectangle,and[and[size1,or[curry[same_size,iota(x.s)],rectangle]],rectangle]], filter(x.s, yellow))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, green), blue), and[yellow,and[nand[blue,or[green,size3]],triangle]]), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:and[%s,%s];4:yellow;4:and[%s,%s];4:nand[%s,%s];4:blue;4:or[%s,%s];4:green;4:size3;4:triangle;4:rectangle
'λx.apply(not[green],iota(filter(filter(x.s, and[rectangle,circle]), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(rectangle,iota(filter(x.s, and[and[size3,size3],and[yellow,not[and[size3,circle]]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size3;4:circle
'λx.contains(iota(filter(x.s, and[green,green])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(curry[same_color,iota(filter(x.s, size2))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_shape,x.o],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(filter(filter(x.s, or[green,size1]), yellow), and[and[or[yellow,circle],yellow],circle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size1;4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(iff[yellow,size1],iota(filter(filter(x.s, yellow), curry[same_size,iota(filter(x.s, or[and[blue,circle],and[triangle,and[size3,size2]]]))])))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:size2
'λx.forall(not[size3],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size1,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(size2,iota(filter(x.s, and[size3,not[rectangle]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:rectangle
'λx.apply(iff[nand[and[rectangle,triangle],blue],not[blue]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:blue;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,not[size2]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, and[triangle,size1]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1;4:rectangle
'λx.apply(curry[same_size,iota(filter(filter(x.s, circle), circle))],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), size3), size2), implies[and[blue,blue],size2]), blue), size2), size3), or[blue,rectangle]), curry[same_shape,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size2;4:implies[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2;4:blue;4:size2;4:size3;4:or[%s,%s];4:blue;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(curry[same_size,iota(filter(x.s, size3))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.forall(size3,filter(x.s, nand[nor[circle,triangle],triangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:circle;4:triangle;4:triangle
'λx.exists(triangle, filter(filter(filter(filter(filter(x.s, implies[curry[size-gt,iota(x.s)],rectangle]), triangle), blue), curry[same_size,iota(filter(filter(x.s, iff[rectangle,curry[same_shape,iota(x.s)]]), not[circle]))]), size3))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle;4:triangle;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:size3
'λx.apply(nand[green,size1],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, blue), nand[size3,size3]), or[size2,size3]), not[size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:size3;4:size3;4:or[%s,%s];4:size2;4:size3;4:not[%s];4:size1
'λx.apply(and[triangle,and[size1,nor[curry[size-leq,iota(x.s)],yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:nor[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, iff[size1,curry[same_color,iota(x.s)]]), rectangle), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(and[nor[rectangle,rectangle],size3],iota(filter(x.s, or[rectangle,or[yellow,and[rectangle,yellow]]])))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:yellow
'λx.apply(and[and[size3,and[green,yellow]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(x.s, triangle), curry[size-gt,x.o]), not[rectangle]), triangle), iff[size3,and[size3,triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:not[%s];4:rectangle;4:triangle;4:iff[%s,%s];4:size3;4:and[%s,%s];4:size3;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, green), curry[same_color,x.o]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3
'λx.forall(and[size1,rectangle],filter(x.s, and[and[and[or[nor[size3,or[green,size2]],blue],not[triangle]],or[not[green],size1]],circle]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:size3;4:or[%s,%s];4:green;4:size2;4:blue;4:not[%s];4:triangle;4:or[%s,%s];4:not[%s];4:green;4:size1;4:circle
'λx.apply(curry[same_color,iota(filter(x.s, circle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(nand[rectangle,size1],iota(filter(filter(filter(x.s, size2), circle), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:blue
'λx.forall(size3,filter(filter(x.s, size3), iff[triangle,curry[same_size,x.o]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(or[triangle,implies[green,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(and[blue,or[green,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[or[blue,green],triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size2,or[nand[yellow,green],size1]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:nand[%s,%s];4:yellow;4:green;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[circle,rectangle],and[implies[or[size2,blue],circle],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:size2;4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[not[or[yellow,and[blue,nand[circle,curry[same_size,iota(filter(filter(x.s, size1), triangle))]]]]],curry[same_size,x.o]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,and[size1,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.forall(and[blue,rectangle],filter(filter(x.s, size1), size3))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.exists(implies[and[rectangle,not[not[size3]]],size2], filter(filter(filter(x.s, or[size3,triangle]), rectangle), circle))'	0:exists(%s, %s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:size3;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:rectangle;4:circle
'λx.apply(not[rectangle],iota(filter(filter(x.s, curry[same_size,iota(filter(x.s, size2))]), and[size2,size3])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:size3
'λx.empty(filter(filter(x.s, size1), curry[same_size,x.o]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, curry[same_shape,iota(x.s)]), circle), blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:blue
'λx.forall(circle,filter(filter(x.s, green), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.forall(and[rectangle,rectangle],filter(filter(filter(x.s, size2), curry[same_size,x.o]), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow
'λx.forall(triangle,filter(filter(x.s, iff[triangle,and[curry[same_shape,iota(filter(filter(filter(filter(x.s, not[and[and[yellow,size2],size2]]), size2), size3), size2))],blue]]), and[curry[same_color,iota(filter(x.s, curry[same_shape,x.o]))],size1]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:size2;4:size2;4:size3;4:size2;4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1
'λx.forall(blue,filter(filter(filter(x.s, size2), triangle), and[size1,circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:and[%s,%s];4:size1;4:circle
'λx.apply(and[blue,size2],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[green,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[circle,iff[rectangle,iff[size1,blue]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:iff[%s,%s];4:rectangle;4:iff[%s,%s];4:size1;4:blue
'λx.forall(and[and[size2,or[and[blue,size3],size2]],and[and[not[size3],and[or[triangle,size2],and[size3,blue]]],triangle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:blue;4:size3;4:size2;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:size3;4:blue;4:triangle;3:%s.s;2:x
'λx.apply(or[size2,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size3), rectangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:green
'λx.apply(and[curry[size-leq,iota(x.s)],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(curry[same_color,x.o],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[not[yellow],size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[circle,or[and[not[yellow],yellow],size3]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:yellow;4:size3;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(size1,iota(filter(filter(x.s, size1), not[and[size1,blue]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:size1;4:blue
'λx.apply(size3,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(circle,iota(filter(filter(x.s, or[triangle,green]), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green;4:size3
'λx.apply(and[size3,or[rectangle,and[circle,and[green,triangle]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[implies[yellow,yellow],or[blue,and[curry[same_size,iota(filter(filter(x.s, yellow), and[green,blue]))],nand[or[blue,not[or[or[and[size2,green],and[size1,size3]],size2]]],and[size1,rectangle]]]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:green;4:blue;4:nand[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:and[%s,%s];4:size1;4:size3;4:size2;4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,or[yellow,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, iff[size3,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:triangle
'λx.apply(not[rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[curry[same_shape,iota(filter(x.s, rectangle))],implies[green,size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[green,size1]],iota(filter(filter(filter(x.s, nor[size2,nand[rectangle,rectangle]]), rectangle), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:nand[%s,%s];4:rectangle;4:rectangle;4:rectangle;4:size3
'λx.exists(not[implies[curry[same_size,x.o],triangle]], filter(x.s, size3))'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nor[and[curry[size-gt,iota(x.s)],curry[same_color,iota(x.s)]],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.exists(implies[rectangle,curry[same_color,iota(x.s)]], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(nor[triangle,yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[size1,and[yellow,size3]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(x.s, size2), nand[green,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nand[%s,%s];4:green;4:rectangle
'λx.apply(not[nand[triangle,size1]],iota(filter(filter(filter(x.s, triangle), blue), iff[circle,rectangle])))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:iff[%s,%s];4:circle;4:rectangle
'λx.exists(or[blue,and[blue,and[iff[size3,size2],curry[same_color,x.o]]]], filter(x.s, rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:size3;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, curry[same_size,iota(filter(filter(x.s, green), size3))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(size1,iota(filter(x.s, and[green,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.apply(or[blue,or[yellow,curry[size-gt,iota(x.s)]]],iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(and[green,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, blue), size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), rectangle), rectangle), size1), yellow), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:rectangle;4:size1;4:yellow;4:size2
'λx.apply(blue,iota(filter(filter(x.s, size1), and[size2,not[green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size2;4:not[%s];4:green
'λx.apply(and[size1,implies[green,size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:implies[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[curry[same_size,iota(filter(x.s, size1))],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;1:%s.o;2:x
'λx.apply(curry[size-geq,iota(filter(filter(filter(x.s, or[size3,implies[rectangle,not[size2]]]), nor[yellow,and[yellow,green]]), size3))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:implies[%s,%s];4:rectangle;4:not[%s];4:size2;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size1,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, size3), yellow), rectangle), or[size3,and[not[rectangle],size3]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:rectangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:rectangle;4:size3
'λx.forall(or[blue,triangle],filter(filter(x.s, size3), and[circle,and[circle,size3]]))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:size3
'λx.apply(green,iota(filter(filter(x.s, nor[triangle,size3]), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:size3;4:circle
'λx.exists(and[green,or[not[rectangle],yellow]], filter(x.s, green))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, and[size3,blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, curry[same_shape,iota(filter(filter(filter(filter(x.s, not[size3]), nand[curry[same_color,x.o],nor[circle,and[not[and[circle,rectangle]],green]]]), yellow), or[size1,rectangle]))]), circle), and[yellow,or[size2,curry[same_shape,iota(filter(filter(x.s, not[or[triangle,rectangle]]), size2))]]]), not[yellow]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:rectangle;4:green;4:yellow;4:or[%s,%s];4:size1;4:rectangle;4:circle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;4:size2;4:not[%s];4:yellow;4:size1
'λx.apply(nand[rectangle,circle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, and[size2,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3
'λx.exists(yellow, filter(filter(x.s, or[size2,size1]), size2))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1;4:size2
'λx.apply(curry[size-leq,x.o],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(filter(filter(x.s, size1), yellow), and[blue,size3]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:and[%s,%s];4:blue;4:size3
'λx.forall(and[and[rectangle,or[green,circle]],curry[same_color,iota(filter(x.s, size1))]],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[size1,circle],iota(filter(filter(x.s, and[size1,rectangle]), size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle;4:size3
'λx.apply(or[yellow,or[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[triangle,and[triangle,or[size3,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, implies[blue,blue]), blue), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:blue;4:blue;4:blue
'λx.apply(or[blue,not[triangle]],iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.contains(iota(filter(filter(x.s, circle), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, green), size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, rectangle), size1), or[yellow,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:or[%s,%s];4:yellow;4:circle
'λx.exists(size3, filter(x.s, curry[same_size,iota(filter(filter(x.s, nand[triangle,yellow]), size2))]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:yellow;4:size2
'λx.apply(or[nand[curry[same_size,iota(x.s)],yellow],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(curry[size-lt,x.o],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, size1), and[circle,rectangle]), and[yellow,and[rectangle,curry[same_color,x.o]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(filter(filter(x.s, size1), or[circle,blue]), iff[size2,curry[same_size,iota(filter(filter(filter(x.s, and[not[size3],yellow]), size3), blue))]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:yellow;4:size3;4:blue
'λx.apply(and[not[and[size3,and[curry[size-lt,iota(x.s)],not[yellow]]]],curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(green,filter(x.s, rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, nor[yellow,yellow]), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:yellow;4:size1
'λx.forall(curry[size-geq,iota(x.s)],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(size1,filter(x.s, blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[triangle,nor[triangle,and[or[curry[same_color,iota(x.s)],yellow],or[or[or[not[or[or[nand[and[blue,circle],yellow],implies[yellow,rectangle]],yellow]],and[rectangle,or[size1,nand[yellow,and[rectangle,rectangle]]]]],size1],not[or[and[yellow,iff[triangle,green]],not[green]]]]]]],iota(filter(filter(filter(x.s, rectangle), size1), curry[same_color,x.o])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:blue;4:circle;4:yellow;4:implies[%s,%s];4:yellow;4:rectangle;4:yellow;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:rectangle;4:size1;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:triangle;4:green;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(iff[triangle,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[yellow,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[curry[same_size,x.o],curry[same_shape,x.o]],iota(filter(x.s, and[circle,and[blue,size2]])))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size2
'λx.apply(or[circle,green],iota(filter(filter(x.s, blue), curry[same_color,x.o])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.forall(triangle,filter(x.s, curry[same_shape,iota(x.s)]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, not[curry[same_size,iota(filter(filter(x.s, and[size3,green]), and[curry[same_shape,iota(x.s)],blue]))]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(not[nand[circle,size1]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(not[curry[same_color,iota(filter(x.s, circle))]], x.s)'	0:exists(%s, %s);4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(or[circle,and[not[or[yellow,blue]],iff[nor[size1,nand[implies[yellow,size3],triangle]],nand[size2,not[blue]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:blue;4:iff[%s,%s];4:nor[%s,%s];4:size1;4:nand[%s,%s];4:implies[%s,%s];4:yellow;4:size3;4:triangle;4:nand[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(or[curry[same_color,x.o],and[triangle,size1]], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[not[size2],or[green,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[circle,size2]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2
'λx.apply(and[not[yellow],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[size3,size3],iota(filter(filter(x.s, yellow), or[not[circle],size2])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:not[%s];4:circle;4:size2
'λx.apply(not[curry[size-gt,x.o]],iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(or[size1,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[yellow,size2],iff[blue,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:iff[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[green,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(curry[size-leq,x.o],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size1,blue], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[circle,or[triangle,curry[same_size,iota(filter(x.s, triangle))]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, green), size1), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:rectangle
'λx.apply(implies[size2,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(implies[green,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[or[circle,and[circle,rectangle]],green]],iota(filter(x.s, curry[same_color,iota(filter(x.s, blue))])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(green,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(filter(x.s, green), not[rectangle]), or[yellow,rectangle]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:rectangle;4:or[%s,%s];4:yellow;4:rectangle;4:size2
'λx.exists(and[curry[size-geq,x.o],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, rectangle), blue), size1), yellow), iff[not[or[and[and[not[rectangle],and[size3,yellow]],rectangle],curry[same_size,x.o]]],green]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:size1;4:yellow;4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:size3;4:yellow;4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:size2
'λx.apply(or[size2,blue],iota(filter(x.s, or[yellow,green])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green
'λx.empty(filter(filter(x.s, size3), and[rectangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(blue,iota(filter(filter(filter(x.s, yellow), and[triangle,rectangle]), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:triangle;4:rectangle;4:rectangle
'λx.apply(nand[green,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[and[circle,size3],size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:size3;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[or[circle,blue],curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, triangle), nand[and[or[and[rectangle,size2],blue],and[yellow,triangle]],size3]), implies[and[nand[green,not[yellow]],size3],green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:blue;4:and[%s,%s];4:yellow;4:triangle;4:size3;4:implies[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:green;4:not[%s];4:yellow;4:size3;4:green;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, size2), rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.empty(filter(x.s, and[nand[curry[same_size,iota(x.s)],implies[and[green,and[not[and[size2,green]],curry[size-lt,iota(x.s)]]],blue]],blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:green;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(and[iff[not[curry[same_color,x.o]],nor[rectangle,blue]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, yellow), size3), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:yellow
'λx.apply(not[and[circle,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nor[yellow,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(implies[and[rectangle,rectangle],not[or[and[blue,green],size2]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:size2;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, and[and[size1,and[not[triangle],rectangle]],or[size2,triangle]]), green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:triangle;4:rectangle;4:or[%s,%s];4:size2;4:triangle;4:green
'λx.apply(or[and[size3,triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[yellow,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size2,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(not[size3], filter(filter(x.s, not[iff[blue,triangle]]), or[and[size2,or[blue,and[rectangle,circle]]],and[size3,size2]]))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:circle;4:and[%s,%s];4:size3;4:size2
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), yellow), not[triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:not[%s];4:triangle
'λx.forall(blue,filter(x.s, green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(filter(x.s, iff[size3,size3]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:size3;4:size1
'λx.exists(green, filter(filter(x.s, not[and[size2,and[size2,and[size3,rectangle]]]]), and[triangle,not[size2]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:triangle;4:not[%s];4:size2
'λx.forall(size3,filter(x.s, green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[blue,size2],not[not[yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[not[and[implies[size2,green],size1]],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:size2;4:green;4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[triangle,curry[size-lt,x.o]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[green,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, and[size3,and[size1,rectangle]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(or[implies[triangle,nor[size2,circle]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:nor[%s,%s];4:size2;4:circle;4:rectangle;1:%s.o;2:x
'λx.exists(or[yellow,size1], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[circle,triangle],iota(filter(filter(filter(x.s, blue), size1), yellow)))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:yellow
'λx.apply(and[circle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[size3,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2
'λx.forall(curry[same_color,x.o],filter(filter(filter(filter(filter(x.s, size3), not[and[not[triangle],size1]]), size3), size2), and[rectangle,curry[same_size,x.o]]))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:and[%s,%s];4:not[%s];4:triangle;4:size1;4:size3;4:size2;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(and[implies[triangle,rectangle],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:triangle;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[yellow],iota(filter(filter(x.s, and[blue,size2]), rectangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:rectangle
'λx.contains(iota(filter(x.s, curry[size-gt,x.o])), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, blue), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(and[or[size2,triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), and[size1,rectangle]), curry[same_shape,iota(filter(filter(x.s, size1), size2))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size1;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.exists(size2, filter(x.s, and[circle,blue]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(or[curry[same_shape,x.o],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, curry[same_color,x.o]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, nand[rectangle,rectangle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[triangle,and[and[circle,green],yellow]],and[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:yellow;4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(nor[and[curry[same_shape,x.o],and[green,size3]],size3],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[green,and[or[or[rectangle,nor[size2,and[not[rectangle],and[curry[size-lt,iota(filter(filter(x.s, circle), or[green,triangle]))],curry[size-lt,x.o]]]]],blue],blue]],and[and[rectangle,iff[rectangle,triangle]],curry[same_size,x.o]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:green;4:triangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:blue;4:blue;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:rectangle;4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(or[blue,rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size1), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.contains(x.o, filter(filter(x.s, implies[rectangle,size3]), curry[same_color,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[size-geq,x.o],iota(filter(filter(x.s, not[blue]), size3)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3
'λx.contains(iota(filter(filter(x.s, nand[size2,circle]), triangle)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:circle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, nand[iff[curry[same_shape,iota(filter(x.s, or[size1,green]))],green],and[size3,blue]]), nor[yellow,and[nand[and[or[or[blue,rectangle],or[nand[or[blue,size2],iff[green,circle]],or[size2,rectangle]]],rectangle],size1],yellow]]), triangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:green;4:and[%s,%s];4:size3;4:blue;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:blue;4:size2;4:iff[%s,%s];4:green;4:circle;4:or[%s,%s];4:size2;4:rectangle;4:rectangle;4:size1;4:yellow;4:triangle;4:size1
'λx.contains(x.o, filter(filter(x.s, size1), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(and[rectangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(iff[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,curry[size-geq,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[iff[circle,size2],nor[and[curry[same_color,x.o],blue],and[rectangle,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:size2;4:nor[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[circle,curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,size2],iota(filter(filter(filter(filter(filter(x.s, green), and[triangle,rectangle]), or[or[blue,rectangle],size3]), green), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:triangle;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:size3;4:green;4:rectangle
'λx.apply(iff[or[or[or[curry[same_shape,iota(x.s)],not[nor[size3,not[triangle]]]],yellow],rectangle],not[circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:size3;4:not[%s];4:triangle;4:yellow;4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(and[and[circle,size3],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:circle;1:%s.o;2:x
'λx.apply(not[and[size2,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[blue,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.forall(curry[size-gt,iota(x.s)],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, iff[size1,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size1
'λx.contains(iota(x.s), filter(x.s, nand[curry[same_color,iota(x.s)],size3]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(and[and[or[yellow,size2],blue],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size2;4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(size1,iota(filter(filter(x.s, size3), and[size1,circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:circle
'λx.apply(size3,iota(filter(x.s, and[blue,yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(or[not[and[size1,triangle]],and[green,size3]],iota(filter(filter(x.s, size2), and[size3,curry[same_color,x.o]])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(and[size1,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(iff[circle,green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, size1))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[and[and[blue,green],curry[same_size,iota(x.s)]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[circle,size2],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,circle],iota(filter(x.s, or[and[blue,not[rectangle]],yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:rectangle;4:yellow
'λx.contains(iota(filter(x.s, or[nor[size2,curry[same_size,x.o]],implies[and[not[and[triangle,curry[size-lt,iota(x.s)]]],circle],or[blue,green]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(and[and[size3,triangle],triangle],iota(filter(x.s, implies[curry[same_size,iota(filter(x.s, size2))],and[rectangle,triangle]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(not[size3],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[rectangle,not[circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[curry[same_color,iota(filter(x.s, size1))],and[yellow,and[size2,size2]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:size2
'λx.contains(iota(x.s), filter(filter(filter(x.s, not[or[size3,circle]]), and[triangle,size3]), and[rectangle,green]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size3;4:circle;4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:rectangle;4:green
'λx.apply(or[curry[same_shape,x.o],blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(x.s, size2), and[blue,and[size1,curry[same_size,iota(filter(x.s, triangle))]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[curry[same_shape,iota(x.s)],iff[green,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;3:%s.s;2:x
'λx.apply(nor[green,yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[nor[blue,size1],size1],iota(filter(filter(x.s, rectangle), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:blue;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(or[and[and[implies[triangle,curry[size-gt,iota(x.s)]],not[not[rectangle]]],or[circle,blue]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:triangle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle;4:or[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), not[yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:yellow
'λx.apply(green,iota(filter(filter(x.s, curry[same_size,iota(filter(filter(x.s, yellow), or[green,blue]))]), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:green;4:blue;4:rectangle
'λx.empty(filter(filter(filter(x.s, curry[size-gt,x.o]), rectangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:rectangle;4:size1
'λx.apply(or[curry[same_size,x.o],and[circle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[yellow,triangle],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(and[yellow,or[circle,green]],filter(filter(x.s, implies[triangle,triangle]), not[rectangle]))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:triangle;4:not[%s];4:rectangle
'λx.apply(not[iff[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, and[and[green,triangle],size1]), implies[circle,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:size1;4:implies[%s,%s];4:circle;4:size1
'λx.apply(not[curry[size-geq,x.o]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(x.s, not[size1])), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(and[rectangle,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(and[blue,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size1,filter(x.s, not[or[size1,size1]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size1;4:size1
'λx.apply(size1,iota(filter(x.s, and[green,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(and[and[blue,or[blue,size1]],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(iff[not[curry[same_color,x.o]],or[iff[size3,size2],or[curry[same_color,x.o],or[size3,triangle]]]],iota(filter(x.s, not[or[nor[not[circle],size1],and[curry[size-gt,x.o],circle]]])))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:iff[%s,%s];4:size3;4:size2;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:circle;4:size1;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:circle
'λx.apply(and[and[circle,or[blue,circle]],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:blue;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(filter(filter(x.s, green), curry[same_shape,x.o]), green), rectangle), or[circle,or[triangle,triangle]]), triangle), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:rectangle;4:or[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:triangle;4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.forall(and[size1,triangle],filter(filter(x.s, blue), curry[same_color,iota(x.s)]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(x.s, size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(filter(filter(x.s, curry[same_size,iota(x.s)]), and[green,size3]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3;4:rectangle
'λx.apply(implies[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[size1,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, size3), curry[same_color,iota(filter(x.s, triangle))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(curry[same_size,iota(filter(x.s, not[triangle]))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(iff[curry[same_size,iota(x.s)],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(not[size1],iota(filter(filter(filter(x.s, not[and[size2,or[blue,size2]]]), rectangle), or[triangle,green])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:blue;4:size2;4:rectangle;4:or[%s,%s];4:triangle;4:green
'λx.apply(iff[nor[blue,rectangle],yellow],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:blue;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[or[size3,yellow]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[size2,triangle]), size1), and[triangle,rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:size1;4:and[%s,%s];4:triangle;4:rectangle
'λx.forall(or[green,curry[same_shape,x.o]],filter(x.s, rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(x.s, curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[same_size,x.o], filter(x.s, or[curry[same_size,x.o],yellow]))'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(nor[green,and[or[rectangle,size1],curry[same_shape,x.o]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, blue), implies[rectangle,yellow]), blue), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:rectangle;4:yellow;4:blue;4:size1
'λx.apply(implies[size3,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(iff[triangle,and[size1,not[size1]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:not[%s];4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[and[circle,size2]]), size2), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:size2;4:size2;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.empty(filter(filter(filter(x.s, circle), blue), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:green
'λx.apply(or[and[curry[same_size,iota(x.s)],and[size2,and[curry[size-gt,x.o],blue]]],curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[green,circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, curry[size-gt,iota(filter(x.s, yellow))]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(nor[size1,and[size1,size1]],iota(filter(x.s, and[green,curry[same_size,iota(x.s)]])))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), curry[same_color,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.exists(or[blue,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.forall(yellow,x.s)'	0:forall(%s,%s);4:yellow;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(yellow,iota(filter(x.s, and[yellow,iff[rectangle,green]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:rectangle;4:green
'λx.apply(and[curry[same_size,x.o],triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(curry[size-geq,iota(filter(x.s, size2))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.exists(not[yellow], x.s)'	0:exists(%s, %s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(not[curry[same_size,x.o]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(x.s, and[size3,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.apply(curry[same_shape,iota(filter(filter(x.s, curry[same_shape,x.o]), blue))],iota(filter(x.s, iff[and[and[green,nand[yellow,green]],blue],and[blue,and[not[or[size1,and[or[size3,yellow],size3]]],green]]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:nand[%s,%s];4:yellow;4:green;4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:size3;4:green
'λx.forall(curry[size-lt,x.o],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[curry[same_color,x.o],not[not[and[blue,blue]]]],iota(filter(filter(filter(filter(x.s, size1), circle), nand[nand[not[green],nor[not[triangle],yellow]],size3]), iff[and[circle,or[implies[size3,and[size2,size3]],size1]],rectangle])))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:nand[%s,%s];4:nand[%s,%s];4:not[%s];4:green;4:nor[%s,%s];4:not[%s];4:triangle;4:yellow;4:size3;4:iff[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:size2;4:size3;4:size1;4:rectangle
'λx.apply(and[curry[same_size,iota(x.s)],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[circle,and[and[curry[same_color,x.o],and[circle,size1]],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:size1;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[rectangle,and[and[green,size3],implies[or[rectangle,or[green,green]],or[circle,not[and[rectangle,and[size3,size3]]]]]]]), size3), yellow), or[green,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:green;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:size3;4:size3;4:yellow;4:or[%s,%s];4:green;4:green
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, yellow), and[circle,and[and[curry[size-geq,iota(x.s)],size3],curry[same_shape,x.o]]]), green), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:blue
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, curry[same_shape,iota(x.s)]), and[triangle,green]), rectangle), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green;4:rectangle;4:green
'λx.apply(not[or[green,circle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[size3]), or[green,iff[yellow,not[green]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:green;4:iff[%s,%s];4:yellow;4:not[%s];4:green
'λx.contains(iota(filter(filter(x.s, nand[size2,green]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:green;4:triangle;3:%s.s;2:x
'λx.exists(and[or[yellow,rectangle],rectangle], filter(x.s, rectangle))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, and[green,circle]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:yellow
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), rectangle), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:triangle
'λx.apply(and[or[implies[or[or[implies[size1,and[size1,not[blue]]],triangle],size1],circle],green],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:size1;4:and[%s,%s];4:size1;4:not[%s];4:blue;4:triangle;4:size1;4:circle;4:green;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, or[size2,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle
'λx.apply(and[curry[same_shape,iota(filter(filter(filter(x.s, size1), size2), rectangle))],and[size2,triangle]],iota(filter(filter(x.s, green), or[nand[or[and[not[or[size2,yellow]],not[and[or[size2,nor[blue,size3]],yellow]]],nor[not[curry[same_color,x.o]],green]],circle],size2])))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:rectangle;4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:yellow;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:nor[%s,%s];4:blue;4:size3;4:yellow;4:nor[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;4:circle;4:size2
'λx.apply(and[iff[and[curry[same_size,x.o],green],and[blue,nor[triangle,size2]]],implies[triangle,nor[green,size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:and[%s,%s];4:blue;4:nor[%s,%s];4:triangle;4:size2;4:implies[%s,%s];4:triangle;4:nor[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[green,triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(implies[iff[curry[size-geq,x.o],size3],curry[same_size,iota(x.s)]],filter(x.s, green))'	0:forall(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, and[not[circle],green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:green
'λx.apply(nand[rectangle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[or[implies[yellow,yellow],triangle],blue],iota(filter(x.s, and[iff[nor[and[or[size3,not[size1]],rectangle],size2],size3],rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:yellow;4:yellow;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:size1;4:rectangle;4:size2;4:size3;4:rectangle
'λx.contains(iota(filter(x.s, not[yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(and[curry[same_shape,iota(x.s)],and[size3,and[and[or[size1,size3],size2],curry[same_shape,iota(x.s)]]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:size3;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(curry[same_color,iota(x.s)],iota(filter(filter(x.s, triangle), and[green,triangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:triangle
'λx.apply(or[circle,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[and[curry[same_shape,iota(filter(x.s, triangle))],green],or[yellow,yellow]], filter(filter(filter(x.s, yellow), size2), blue))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:or[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:blue
'λx.apply(or[size2,not[implies[curry[size-geq,x.o],curry[same_size,x.o]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:implies[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[rectangle,curry[same_shape,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(x.s, rectangle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, size2), triangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(and[triangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[size2,curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, curry[same_color,iota(x.s)]), and[rectangle,or[circle,or[size3,not[and[green,circle]]]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:or[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:green;4:circle
'λx.exists(blue, filter(x.s, curry[same_size,x.o]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(and[blue,size3],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[and[size2,not[size2]],or[curry[same_size,x.o],or[triangle,size1]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:size2;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[circle,size2],not[not[curry[same_shape,iota(filter(x.s, and[blue,rectangle]))]]]],iota(filter(filter(filter(x.s, yellow), not[yellow]), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:size2;4:not[%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:yellow;4:rectangle
'λx.apply(or[and[or[not[yellow],blue],triangle],triangle],iota(filter(filter(filter(x.s, yellow), curry[size-leq,iota(x.s)]), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:blue;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(and[and[size1,green],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[green,nor[and[size1,size3],and[implies[and[circle,and[rectangle,and[or[circle,or[implies[and[circle,circle],yellow],circle]],size3]]],and[curry[same_size,x.o],blue]],rectangle]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:nor[%s,%s];4:and[%s,%s];4:size1;4:size3;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:circle;4:yellow;4:circle;4:size3;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, green), triangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size1
'λx.apply(rectangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size1, filter(x.s, curry[size-gt,iota(filter(filter(x.s, yellow), green))]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(implies[size1,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nand[blue,curry[same_size,iota(filter(filter(x.s, green), iff[or[or[curry[same_size,x.o],nor[rectangle,rectangle]],circle],triangle]))]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:rectangle;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[not[circle],size2],iota(filter(x.s, nor[yellow,curry[same_shape,iota(filter(x.s, triangle))]])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(and[size3,circle],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(x.s, or[yellow,nand[green,or[triangle,curry[same_size,x.o]]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:nand[%s,%s];4:green;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(size1,iota(filter(x.s, nand[rectangle,not[size3]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:not[%s];4:size3
'λx.apply(or[size3,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, triangle), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.empty(filter(filter(filter(x.s, rectangle), size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:green
'λx.forall(or[and[rectangle,green],size3],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:size3;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), or[green,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:green;4:yellow
'λx.apply(or[curry[same_shape,x.o],blue],iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), rectangle), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size1
'λx.apply(size2,iota(filter(filter(filter(x.s, curry[same_size,x.o]), size3), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;4:rectangle
'λx.apply(nor[size2,not[yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[green,curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(green,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(x.s, or[size2,curry[size-gt,x.o]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.apply(or[curry[same_color,x.o],size1],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(nand[and[rectangle,blue],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(nor[iff[curry[same_color,x.o],blue],green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[circle,and[iff[green,nor[triangle,curry[same_shape,iota(filter(filter(filter(filter(x.s, or[size3,nand[yellow,curry[size-lt,x.o]]]), and[size2,rectangle]), size1), size1))]]],green]],filter(filter(x.s, and[not[yellow],and[yellow,circle]]), size2))'	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:green;4:nor[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:nand[%s,%s];4:yellow;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:size2;4:rectangle;4:size1;4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:yellow;4:circle;4:size2
'λx.apply(or[size2,size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, yellow), not[and[circle,circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:circle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), blue), not[rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:not[%s];4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, nand[and[blue,circle],triangle]), size3), or[size3,curry[size-lt,iota(x.s)]]), blue), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:blue;4:circle;4:triangle;4:size3;4:or[%s,%s];4:size3;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(iff[and[nand[size2,and[yellow,or[and[implies[rectangle,size1],circle],and[iff[size1,yellow],size3]]]],size2],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size1;4:circle;4:and[%s,%s];4:iff[%s,%s];4:size1;4:yellow;4:size3;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(x.s))'	0:apply(%s,%s);4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, circle), yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.exists(not[curry[same_shape,x.o]], filter(filter(x.s, size3), size2))'	0:exists(%s, %s);4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(or[curry[same_size,x.o],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, circle)), filter(x.s, nor[nand[triangle,blue],green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nand[%s,%s];4:triangle;4:blue;4:green
'λx.contains(x.o, filter(filter(x.s, or[circle,or[not[or[not[not[rectangle]],size2]],nand[green,curry[same_color,iota(x.s)]]]]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:size2;4:nand[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.exists(size2, x.s)'	0:exists(%s, %s);4:size2;3:%s.s;2:x
'λx.forall(size1,filter(x.s, green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[size1,size1],iota(filter(filter(x.s, and[rectangle,rectangle]), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:triangle
'λx.empty(filter(x.s, or[curry[size-lt,iota(filter(x.s, blue))],green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), or[not[size1],size2]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:not[%s];4:size1;4:size2;4:blue
'λx.empty(filter(filter(filter(filter(x.s, size1), yellow), size3), implies[implies[blue,rectangle],implies[rectangle,curry[same_size,iota(x.s)]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size3;4:implies[%s,%s];4:implies[%s,%s];4:blue;4:rectangle;4:implies[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(triangle,iota(filter(x.s, and[not[not[circle]],blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:circle;4:blue
'λx.forall(and[yellow,not[triangle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[size2,triangle]), curry[same_color,iota(filter(filter(x.s, curry[same_shape,x.o]), not[triangle]))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:triangle
'λx.exists(not[curry[same_size,iota(x.s)]], filter(x.s, implies[rectangle,circle]))'	0:exists(%s, %s);4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:circle
'λx.apply(and[curry[same_shape,x.o],and[curry[same_color,x.o],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(and[blue,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[curry[same_color,x.o],and[and[or[yellow,circle],size1],blue]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:size1;4:blue
'λx.forall(not[circle],x.s)'	0:forall(%s,%s);4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(and[yellow,triangle],iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, not[triangle]), not[circle]), size1), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:not[%s];4:circle;4:size1;4:triangle
'λx.empty(filter(x.s, not[nand[triangle,blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:triangle;4:blue
'λx.apply(and[implies[implies[curry[same_shape,iota(x.s)],size2],size1],yellow],iota(filter(filter(filter(x.s, triangle), yellow), green)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:green
'λx.apply(or[circle,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[green,size3], filter(x.s, rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[size1,and[yellow,and[blue,green]]],not[triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:green;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, or[rectangle,and[curry[same_shape,x.o],triangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(not[curry[size-leq,iota(filter(filter(filter(filter(filter(x.s, iff[triangle,rectangle]), yellow), blue), size1), size2))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:rectangle;4:yellow;4:blue;4:size1;4:size2;1:%s.o;2:x
'λx.exists(size1, filter(x.s, size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nand[circle,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[same_size,iota(x.s)], filter(filter(filter(filter(x.s, yellow), size2), size3), blue))'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:size3;4:blue
'λx.exists(size1, filter(x.s, blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[or[circle,or[size3,size3]],and[not[circle],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:size3;4:size3;4:and[%s,%s];4:not[%s];4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[circle,not[implies[implies[circle,and[size3,rectangle]],circle]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:implies[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:size3;4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[size-gt,iota(x.s)],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[triangle,or[rectangle,or[rectangle,green]]],iota(filter(filter(filter(x.s, circle), green), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:triangle
'λx.apply(and[or[green,curry[same_color,x.o]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(nand[and[rectangle,circle],rectangle], filter(x.s, or[not[circle],not[or[rectangle,blue]]]))'	0:exists(%s, %s);4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:or[%s,%s];4:rectangle;4:blue
'λx.contains(iota(filter(filter(filter(x.s, green), nand[not[nor[size1,rectangle]],or[nor[rectangle,green],circle]]), circle)), filter(x.s, implies[or[nand[and[not[blue],size2],and[or[rectangle,rectangle],triangle]],green],and[size3,green]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:not[%s];4:nor[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:green;4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:triangle;4:green;4:and[%s,%s];4:size3;4:green
'λx.forall(or[yellow,yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(not[not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, curry[same_size,x.o]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[curry[same_shape,iota(x.s)],size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(or[size1,or[and[and[circle,triangle],size3],size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size3;4:size2;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, curry[size-lt,x.o]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size1
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size3,filter(filter(x.s, not[green]), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:green
'λx.apply(iff[curry[same_shape,iota(x.s)],rectangle],iota(filter(filter(x.s, and[nor[and[rectangle,circle],blue],and[and[and[green,green],triangle],and[and[size1,or[yellow,size1]],and[and[size3,blue],blue]]]]), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:triangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:blue;4:triangle
'λx.apply(and[yellow,size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(green,iota(filter(x.s, and[and[yellow,rectangle],rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:rectangle
'λx.apply(or[blue,curry[same_shape,iota(filter(filter(x.s, not[size3]), curry[same_shape,iota(x.s)]))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[size2,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[curry[same_color,iota(x.s)],and[rectangle,implies[iff[and[triangle,implies[size3,nand[circle,blue]]],green],green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:implies[%s,%s];4:size3;4:nand[%s,%s];4:circle;4:blue;4:green;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, curry[same_size,iota(filter(x.s, size2))]), or[blue,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:blue;4:circle
'λx.apply(circle,iota(filter(x.s, and[green,or[green,size1]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:size1
'λx.apply(curry[same_shape,x.o],iota(filter(filter(filter(filter(filter(x.s, size3), rectangle), rectangle), size1), and[size2,blue])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:rectangle;4:size1;4:and[%s,%s];4:size2;4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, green), yellow), or[and[size3,yellow],size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:size2
'λx.exists(curry[same_shape,iota(x.s)], filter(x.s, size2))'	0:exists(%s, %s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(curry[same_size,x.o],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, size3), curry[same_size,x.o]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(or[and[or[green,and[not[triangle],blue]],green],yellow],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:triangle;4:blue;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(not[size2], x.s)'	0:exists(%s, %s);4:not[%s];4:size2;3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, curry[same_size,iota(x.s)]), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[size3,not[and[green,circle]]],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:green;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, curry[same_color,x.o]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:rectangle
'λx.forall(or[size1,implies[curry[same_size,x.o],rectangle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(x.s, size2), and[rectangle,and[green,blue]]), blue), green), size1), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:blue;4:blue;4:green;4:size1;4:size3
'λx.apply(implies[circle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, size3), not[size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size3
'λx.exists(size1, filter(filter(filter(x.s, or[rectangle,green]), triangle), and[circle,yellow]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green;4:triangle;4:and[%s,%s];4:circle;4:yellow
'λx.apply(circle,iota(filter(x.s, nand[blue,and[curry[same_size,x.o],yellow]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(nand[triangle,not[and[circle,blue]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, not[and[not[yellow],rectangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:rectangle
'λx.apply(green,iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), yellow), or[triangle,curry[size-geq,x.o]]), nand[blue,not[yellow]]), rectangle), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:not[%s];4:yellow;4:rectangle;4:yellow
'λx.forall(yellow,filter(filter(filter(filter(filter(filter(x.s, not[circle]), size1), or[or[size1,blue],circle]), circle), size2), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size1;4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:circle;4:circle;4:size2;4:size3
'λx.apply(or[size2,curry[size-leq,iota(filter(x.s, size1))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[green,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[blue,not[curry[same_shape,x.o]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), rectangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:size3
'λx.apply(and[not[circle],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, or[or[size2,circle],curry[same_shape,iota(filter(x.s, blue))]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size2;4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[blue,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size3), rectangle), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:blue
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), nand[green,triangle]), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:green;4:triangle;4:size3
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, circle), yellow), size2), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:size2;4:size2
'λx.apply(size1,iota(filter(x.s, or[size3,iff[and[yellow,circle],size1]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:iff[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size1
'λx.apply(and[or[curry[same_color,iota(x.s)],implies[size2,size1]],not[circle]],iota(filter(filter(filter(filter(filter(x.s, and[or[and[curry[same_color,iota(filter(x.s, circle))],blue],rectangle],nor[circle,green]]), green), circle), iff[green,not[rectangle]]), and[not[and[rectangle,circle]],blue])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:size1;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:rectangle;4:nor[%s,%s];4:circle;4:green;4:green;4:circle;4:iff[%s,%s];4:green;4:not[%s];4:rectangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:circle;4:blue
'λx.forall(iff[yellow,and[curry[same_shape,x.o],and[size2,green]]],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.exists(and[size3,or[not[curry[same_color,iota(x.s)]],and[nand[circle,and[and[circle,curry[size-lt,x.o]],yellow]],rectangle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:yellow;4:rectangle;3:%s.s;2:x
'λx.exists(blue, filter(x.s, and[size3,triangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.apply(and[or[size3,green],rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[yellow,or[triangle,circle]],iota(filter(filter(filter(x.s, size3), rectangle), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:triangle
'λx.apply(iff[size1,green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(x.s, implies[size3,or[curry[size-geq,x.o],size1]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:size1
'λx.apply(green,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(circle,iota(filter(x.s, or[blue,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle
'λx.apply(or[size2,not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[circle,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(nor[curry[size-lt,iota(x.s)],size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, or[rectangle,green]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green
'λx.apply(and[not[green],triangle],iota(filter(filter(filter(filter(filter(x.s, size2), green), and[triangle,and[yellow,green]]), triangle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:green;4:triangle;4:circle
'λx.exists(curry[size-gt,iota(x.s)], filter(filter(filter(x.s, green), green), and[circle,not[yellow]]))'	0:exists(%s, %s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:and[%s,%s];4:circle;4:not[%s];4:yellow
'λx.apply(size1,iota(filter(x.s, and[rectangle,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(x.s, triangle), blue), and[curry[same_shape,iota(x.s)],or[and[and[not[and[size2,not[rectangle]]],triangle],not[nand[triangle,yellow]]],size2]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:not[%s];4:rectangle;4:triangle;4:not[%s];4:nand[%s,%s];4:triangle;4:yellow;4:size2
'λx.apply(blue,iota(filter(filter(filter(x.s, triangle), size2), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:yellow
'λx.apply(and[and[size1,and[size1,not[circle]]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:not[%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[green,iff[rectangle,and[curry[same_color,iota(filter(x.s, green))],size1]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, nor[green,or[blue,circle]])), filter(filter(filter(x.s, size2), curry[same_shape,iota(x.s)]), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(iff[implies[not[size1],green],rectangle],iota(filter(filter(x.s, and[rectangle,curry[same_shape,x.o]]), green)))'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:not[%s];4:size1;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green
'λx.apply(curry[same_size,iota(filter(x.s, green))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), and[triangle,not[size1]])), filter(x.s, or[and[size3,size1],rectangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:triangle;4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle
'λx.empty(filter(filter(filter(x.s, and[green,blue]), size3), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:blue;4:size3;4:size2
'λx.apply(iff[curry[same_size,iota(filter(filter(filter(x.s, size1), size2), rectangle))],blue],iota(filter(x.s, and[size3,blue])))'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(curry[same_size,iota(filter(x.s, yellow))],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size2,filter(x.s, and[and[yellow,size2],triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle
'λx.apply(and[circle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,not[not[green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, implies[and[not[size2],yellow],implies[curry[same_color,x.o],or[size3,green]]]), not[yellow]), nand[rectangle,size2]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:yellow;4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size3;4:green;4:not[%s];4:yellow;4:nand[%s,%s];4:rectangle;4:size2;4:yellow
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, yellow), rectangle), and[size2,or[or[size1,implies[not[curry[same_color,iota(filter(x.s, green))]],and[size2,triangle]]],or[green,blue]]]), size1), size1)), filter(filter(filter(filter(x.s, blue), yellow), curry[same_shape,x.o]), and[size2,not[size1]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:size1;4:implies[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size2;4:triangle;4:or[%s,%s];4:green;4:blue;4:size1;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size2;4:not[%s];4:size1
'λx.apply(size2,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.empty(filter(filter(filter(filter(x.s, or[yellow,yellow]), green), triangle), and[rectangle,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:yellow;4:green;4:triangle;4:and[%s,%s];4:rectangle;4:size3
'λx.contains(iota(filter(filter(x.s, triangle), and[nor[circle,and[iff[size1,circle],size3]],size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:nor[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:size1;4:circle;4:size3;4:size2;3:%s.s;2:x
'λx.apply(not[and[yellow,not[size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.exists(and[blue,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[yellow]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:blue
'λx.apply(iff[green,curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nand[circle,size1],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,x.o)'	0:apply(%s,%s);4:size3;1:%s.o;2:x
'λx.forall(circle,filter(x.s, yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(yellow,iota(filter(x.s, not[and[green,curry[same_size,iota(x.s)]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(x.s, circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size3],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,yellow],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(x.s, and[and[size2,and[size1,curry[same_shape,iota(x.s)]]],curry[same_shape,x.o]]), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green
'λx.apply(and[rectangle,iff[yellow,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size3), implies[and[rectangle,not[triangle]],size3])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:triangle;4:size3
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, and[not[size2],rectangle]), green), curry[same_size,x.o]), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:rectangle;4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle
'λx.apply(iff[triangle,and[curry[same_color,iota(x.s)],circle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,iota(filter(filter(x.s, triangle), circle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(x.s, curry[same_color,x.o]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), size3), and[size2,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:and[%s,%s];4:size2;4:circle
'λx.contains(iota(filter(filter(x.s, curry[size-leq,iota(filter(filter(x.s, rectangle), size2))]), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:blue;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, blue), iff[blue,green]), size3), curry[same_shape,iota(x.s)]), and[blue,yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:blue;4:green;4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(and[size1,yellow],iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(curry[same_color,iota(filter(x.s, and[not[or[blue,circle]],yellow]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, rectangle), circle), size1), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:size1;4:size1
'λx.apply(nor[not[triangle],and[or[green,yellow],implies[rectangle,size2]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:implies[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[iff[green,green],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:green;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), size1), and[triangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:and[%s,%s];4:triangle;4:size1
'λx.apply(not[and[and[and[size2,circle],size1],or[or[not[and[size2,size1]],green],green]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size1;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size1;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[size2,size3]), triangle), not[rectangle]), size1), and[size1,and[curry[same_size,x.o],and[and[and[yellow,or[blue,not[circle]]],not[green]],nor[curry[same_shape,x.o],green]]]]), rectangle), size3)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:triangle;4:not[%s];4:rectangle;4:size1;4:and[%s,%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:not[%s];4:circle;4:not[%s];4:green;4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:rectangle;4:size3
'λx.apply(or[and[iff[triangle,triangle],curry[same_shape,x.o]],and[not[or[triangle,yellow]],yellow]],iota(filter(filter(x.s, curry[same_color,iota(filter(filter(filter(filter(filter(x.s, and[green,size3]), circle), yellow), size3), and[triangle,and[green,yellow]]))]), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3;4:circle;4:yellow;4:size3;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:yellow;4:yellow
'λx.apply(and[iff[or[blue,triangle],circle],not[or[and[blue,blue],size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:circle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size3)), filter(x.s, not[curry[same_size,iota(x.s)]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[and[triangle,blue]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[blue,nand[or[circle,rectangle],not[and[size2,blue]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:not[%s];4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, green), or[curry[same_size,iota(filter(x.s, curry[same_color,iota(x.s)]))],yellow]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(and[nor[curry[same_size,iota(filter(filter(x.s, circle), size2))],curry[size-lt,iota(x.s)]],not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(x.s, not[rectangle]))],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[or[blue,rectangle],circle],iota(filter(filter(filter(filter(filter(x.s, green), green), blue), nand[yellow,size1]), and[blue,size1])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:blue;4:nand[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:blue;4:size1
'λx.apply(green,iota(filter(x.s, or[rectangle,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green
'λx.apply(or[blue,and[circle,and[green,iff[green,not[size3]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:green;4:iff[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(iff[triangle,implies[triangle,and[curry[size-geq,x.o],not[and[size1,and[size3,and[triangle,and[or[nand[and[not[yellow],triangle],not[nand[blue,size2]]],yellow],green]]]]]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:triangle;4:not[%s];4:nand[%s,%s];4:blue;4:size2;4:yellow;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), and[yellow,green]), curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:yellow;4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, yellow), size1), rectangle), not[green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:rectangle;4:not[%s];4:green
'λx.apply(not[and[circle,size3]],iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[not[nor[circle,size1]],curry[size-leq,iota(x.s)]]), size2), and[and[nor[triangle,rectangle],blue],yellow]), size1), size1), size3), curry[same_color,x.o])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:circle;4:size1;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:triangle;4:rectangle;4:blue;4:yellow;4:size1;4:size1;4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.exists(curry[same_size,iota(filter(x.s, and[and[circle,and[size2,and[rectangle,size1]]],triangle]))], filter(x.s, size2))'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size1;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(size1, filter(x.s, iff[not[size2],green]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:size2;4:green
'λx.apply(and[size3,or[circle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, curry[same_size,iota(x.s)]), blue), blue), blue), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:blue;4:blue;4:triangle
'λx.exists(blue, filter(x.s, and[or[size1,triangle],and[size1,triangle]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:size1;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, or[circle,not[iff[rectangle,and[curry[same_shape,iota(filter(filter(filter(x.s, triangle), circle), size2))],blue]]]]), implies[not[triangle],rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:size2;4:blue;4:implies[%s,%s];4:not[%s];4:triangle;4:rectangle
'λx.apply(curry[size-geq,iota(filter(x.s, or[blue,nand[blue,and[size3,size2]]]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:nand[%s,%s];4:blue;4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, blue), triangle), not[and[triangle,circle]]), not[size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:not[%s];4:and[%s,%s];4:triangle;4:circle;4:not[%s];4:size3
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, curry[size-gt,x.o]), triangle), rectangle), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:triangle;4:rectangle;4:yellow
'λx.apply(and[rectangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[and[green,green],size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:size1
'λx.apply(and[and[yellow,green],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size1;1:%s.o;2:x
'λx.apply(iff[and[size2,size3],curry[size-gt,iota(filter(filter(filter(x.s, and[rectangle,circle]), yellow), green))]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:size3;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[yellow,yellow],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.empty(filter(filter(x.s, size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.contains(iota(filter(x.s, and[size2,rectangle])), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[nor[not[blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, circle), size3), not[blue]), not[curry[same_shape,iota(x.s)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:not[%s];4:blue;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), and[yellow,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(triangle,iota(filter(x.s, implies[rectangle,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:green
'λx.apply(rectangle,iota(filter(x.s, curry[same_shape,iota(filter(filter(filter(x.s, nand[rectangle,triangle]), green), size2))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:triangle;4:green;4:size2
'λx.apply(and[not[circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, nor[yellow,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:blue
'λx.apply(and[size2,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[and[green,not[rectangle]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[green,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,and[curry[size-geq,iota(filter(x.s, not[and[or[or[nor[circle,size1],green],circle],size1]]))],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:circle;4:size1;4:green;4:circle;4:size1;4:size2;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(x.s, circle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, and[green,not[size2]]), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:size2;4:yellow
'λx.apply(implies[not[rectangle],nor[size2,size2]],iota(filter(x.s, iff[blue,or[and[circle,rectangle],yellow]])))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:yellow
'λx.apply(and[rectangle,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_size,iota(x.s)],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(nand[yellow,not[triangle]],iota(filter(filter(filter(x.s, or[yellow,or[blue,nand[blue,and[triangle,green]]]]), green), or[not[size1],size2])))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:blue;4:nand[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green;4:green;4:or[%s,%s];4:not[%s];4:size1;4:size2
'λx.apply(and[size2,circle],iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.contains(iota(x.s), filter(x.s, and[rectangle,circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(or[rectangle,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[size-leq,iota(x.s)],iota(filter(filter(x.s, curry[same_color,iota(filter(x.s, and[nor[blue,circle],curry[same_color,iota(x.s)]]))]), circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(or[blue,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size3), blue), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size3
'λx.apply(and[size1,curry[same_color,x.o]],iota(filter(filter(filter(x.s, size1), not[blue]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:blue;4:size1
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[and[triangle,circle],or[curry[same_shape,x.o],blue]]), or[triangle,or[not[curry[same_size,iota(filter(x.s, not[yellow]))]],and[and[and[and[and[blue,nor[and[curry[size-leq,x.o],and[triangle,size3]],nor[triangle,triangle]]],size3],size2],curry[size-lt,iota(x.s)]],green]]]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;4:or[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size3;4:nor[%s,%s];4:triangle;4:triangle;4:size3;4:size2;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:green;4:blue
'λx.apply(not[triangle],iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.forall(and[blue,size1],filter(filter(filter(x.s, size2), size2), nand[size2,size1]))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:nand[%s,%s];4:size2;4:size1
'λx.apply(curry[same_color,iota(filter(x.s, yellow))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(filter(filter(x.s, triangle), size1), size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size1
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(filter(x.s, yellow), and[or[triangle,size1],circle]), and[size1,size1]), green), triangle), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:circle;4:and[%s,%s];4:size1;4:size1;4:green;4:triangle;4:size1
'λx.apply(and[and[and[circle,and[yellow,size2]],circle],size1],iota(filter(x.s, not[curry[same_shape,iota(x.s)]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:size2;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(x.s, or[yellow,curry[same_shape,x.o]]), curry[same_shape,x.o]), circle), and[circle,curry[same_shape,x.o]]), and[and[not[or[nor[circle,size2],yellow]],curry[same_color,iota(x.s)]],yellow]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:nor[%s,%s];4:circle;4:size2;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(and[blue,and[size1,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.exists(and[blue,nand[size1,green]], filter(x.s, triangle))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:size1;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(x.s), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[implies[circle,green],yellow]), size2), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:circle;4:green;4:yellow;4:size2;4:circle
'λx.apply(curry[same_color,iota(filter(x.s, green))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[green]), not[triangle]), and[curry[same_color,iota(filter(filter(x.s, size3), size1))],green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:not[%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:green
'λx.apply(iff[size3,and[blue,triangle]],iota(filter(filter(filter(filter(x.s, and[blue,size3]), blue), triangle), not[rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:blue;4:triangle;4:not[%s];4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, circle), curry[same_color,iota(filter(filter(filter(x.s, and[and[rectangle,triangle],size2]), blue), rectangle))])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:size2;4:blue;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, and[size2,circle]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:size1
'λx.apply(size2,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(and[yellow,size3],iota(filter(x.s, and[iff[or[green,not[yellow]],triangle],or[size2,or[size1,size3]]])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:yellow;4:triangle;4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:size3
'λx.apply(and[and[circle,and[triangle,green]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:green;4:green;1:%s.o;2:x
'λx.apply(or[or[and[or[curry[same_size,x.o],and[size3,triangle]],blue],and[curry[size-gt,iota(filter(filter(x.s, size2), circle))],circle]],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:triangle;4:blue;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[not[green],triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(filter(filter(x.s, blue), iff[blue,circle]), green), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:blue;4:circle;4:green;4:size3;3:%s.s;2:x
'λx.apply(iff[size2,size1],iota(filter(x.s, iff[and[blue,triangle],rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:rectangle
'λx.apply(not[and[yellow,curry[size-geq,x.o]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[or[size2,rectangle],or[curry[size-gt,iota(filter(filter(filter(x.s, yellow), not[circle]), nand[circle,curry[same_shape,iota(filter(x.s, rectangle))]]))],curry[same_color,x.o]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:circle;4:nand[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[same_shape,iota(filter(x.s, nor[not[green],blue]))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:green;4:blue;3:%s.s;2:x
'λx.apply(nand[rectangle,implies[size2,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:implies[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[circle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,nand[triangle,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[rectangle],size1],iota(filter(filter(filter(x.s, size3), circle), not[triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:not[%s];4:triangle
'λx.exists(iff[triangle,not[and[or[and[not[triangle],rectangle],or[yellow,green]],rectangle]]], filter(x.s, curry[same_shape,x.o]))'	0:exists(%s, %s);4:iff[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:rectangle;4:or[%s,%s];4:yellow;4:green;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[size1,not[not[size1]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:not[%s];4:not[%s];4:size1
'λx.forall(curry[same_shape,x.o],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, and[blue,circle]), rectangle), or[iff[green,size2],size2]), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:green;4:size2;4:size2;4:size1
'λx.exists(triangle, filter(x.s, rectangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(x.s, yellow), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size2
'λx.exists(yellow, filter(filter(filter(filter(filter(x.s, size1), yellow), circle), rectangle), green))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:circle;4:rectangle;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, green), not[size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size1
'λx.apply(green,iota(filter(filter(x.s, triangle), and[size3,not[and[size1,curry[same_color,x.o]]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(or[blue,and[blue,nor[and[size1,blue],nor[rectangle,curry[same_color,iota(filter(filter(filter(filter(x.s, iff[size3,rectangle]), curry[size-leq,x.o]), rectangle), green))]]]]],iota(filter(filter(x.s, or[blue,size1]), and[implies[yellow,yellow],and[and[or[size2,nor[rectangle,size1]],not[green]],rectangle]])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:size1;4:blue;4:nor[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:rectangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size1;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:nor[%s,%s];4:rectangle;4:size1;4:not[%s];4:green;4:rectangle
'λx.contains(x.o, filter(x.s, iff[yellow,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:triangle
'λx.exists(circle, filter(filter(x.s, curry[same_size,x.o]), size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3
'λx.apply(and[implies[curry[size-leq,x.o],blue],rectangle],iota(filter(filter(x.s, rectangle), curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[rectangle,size3],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(and[size3,size3],iota(filter(filter(filter(x.s, size2), and[rectangle,or[or[size2,size1],size1]]), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size2;4:size1;4:size1;4:size3
'λx.exists(implies[not[size1],rectangle], filter(x.s, size3))'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:size1;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(nand[size3,circle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.apply(or[green,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[size2,and[green,curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, and[not[not[triangle]],green]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:green;4:size3
'λx.apply(curry[same_shape,iota(x.s)],iota(filter(filter(filter(filter(filter(filter(filter(x.s, and[size2,rectangle]), and[rectangle,yellow]), yellow), size2), and[curry[same_color,iota(x.s)],curry[same_size,iota(x.s)]]), yellow), yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:rectangle;4:yellow;4:yellow;4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(curry[size-gt,iota(filter(x.s, blue))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, triangle), triangle), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:size1
'λx.apply(not[triangle],iota(filter(x.s, not[and[curry[same_color,iota(x.s)],size1]])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, curry[same_size,iota(x.s)]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(x.s, triangle), rectangle)), filter(filter(x.s, yellow), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(circle,iota(filter(x.s, nor[triangle,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:circle
'λx.apply(implies[curry[same_size,x.o],yellow],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(and[or[or[green,size1],implies[green,size1]],or[circle,not[curry[size-gt,x.o]]]], filter(x.s, rectangle))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:size1;4:implies[%s,%s];4:green;4:size1;4:or[%s,%s];4:circle;4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[and[and[blue,size3],not[and[size3,triangle]]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:not[%s];4:and[%s,%s];4:size3;4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(or[green,size3], filter(filter(x.s, size3), yellow))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(and[size2,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size2,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[circle,not[and[size2,curry[same_color,x.o]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[not[and[size3,blue]],circle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[and[not[and[blue,circle]],circle],or[yellow,and[green,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;4:circle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.exists(nand[rectangle,rectangle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(not[iff[rectangle,blue]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[and[curry[same_size,x.o],yellow],circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(not[size1],filter(x.s, size2))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(iota(filter(filter(x.s, or[circle,rectangle]), nor[size3,yellow])), filter(filter(filter(filter(x.s, and[and[not[and[and[green,yellow],triangle]],blue],nor[yellow,not[and[rectangle,size2]]]]), rectangle), size3), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;4:nor[%s,%s];4:size3;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:triangle;4:blue;4:nor[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:rectangle;4:size2;4:rectangle;4:size3;4:size3
'λx.apply(curry[same_size,iota(filter(filter(x.s, blue), rectangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[size3,curry[size-lt,x.o]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[circle],iota(filter(filter(x.s, and[or[yellow,and[green,yellow]],circle]), triangle)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:green;4:yellow;4:circle;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(and[iff[blue,and[and[curry[same_color,iota(x.s)],curry[same_shape,x.o]],green]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[and[circle,blue]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(implies[size3,or[green,blue]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:or[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, rectangle), green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.contains(iota(filter(x.s, green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, circle), iff[size3,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:size3;4:size2
'λx.exists(and[or[and[not[size1],size3],iff[not[implies[size1,size3]],blue]],size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:size3;4:iff[%s,%s];4:not[%s];4:implies[%s,%s];4:size1;4:size3;4:blue;4:size1;3:%s.s;2:x
'λx.apply(not[and[curry[same_color,x.o],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[not[circle],or[and[not[size2],size2],and[size1,size1]]],iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:size2;4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(and[size2,circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, green), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(or[and[and[and[and[not[not[triangle]],blue],triangle],triangle],or[iff[triangle,and[rectangle,or[green,curry[same_shape,iota(x.s)]]]],circle]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:blue;4:triangle;4:triangle;4:or[%s,%s];4:iff[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[and[blue,curry[size-lt,x.o]],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[curry[same_color,iota(x.s)]],iota(filter(x.s, curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[or[and[blue,not[triangle]],and[rectangle,or[size1,size1]]],size1],not[blue]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:triangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:size1;4:size1;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,or[triangle,and[or[not[triangle],size1],curry[same_color,x.o]]]],iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(blue,iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(nor[implies[blue,circle],rectangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, size2), triangle), green)), filter(filter(filter(filter(x.s, rectangle), blue), circle), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:circle;4:size2
'λx.apply(or[and[nor[size3,curry[same_size,x.o]],rectangle],or[triangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[green,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.exists(blue, filter(x.s, triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[circle,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[circle,not[circle]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[or[curry[same_color,x.o],blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(nor[rectangle,and[green,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[size2,size1],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, yellow), size2), and[size2,and[rectangle,curry[size-leq,x.o]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(implies[nand[size3,and[circle,blue]],blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:size3;4:and[%s,%s];4:circle;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size3,rectangle],green],iota(filter(filter(filter(x.s, size1), green), and[and[rectangle,triangle],or[or[size1,not[and[blue,and[yellow,size1]]]],nand[size1,rectangle]]])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:size1;4:nand[%s,%s];4:size1;4:rectangle
'λx.empty(filter(x.s, and[size1,and[curry[same_color,iota(filter(x.s, blue))],size1]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(nor[blue,not[not[curry[same_color,x.o]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:not[%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,or[yellow,yellow]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[or[triangle,circle],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), rectangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:size1
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), size2), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:size1
'λx.apply(implies[or[yellow,green],curry[size-geq,iota(x.s)]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[triangle,and[green,and[implies[and[yellow,implies[blue,triangle]],and[rectangle,triangle]],or[nor[size3,and[blue,size2]],green]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:implies[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size2;4:green;1:%s.o;2:x
'λx.apply(and[and[blue,yellow],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, curry[same_size,iota(filter(x.s, triangle))])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[curry[same_color,iota(filter(filter(filter(x.s, rectangle), yellow), size1))],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), size2), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:rectangle
'λx.apply(or[blue,and[and[curry[same_size,iota(filter(x.s, size2))],size3],not[or[yellow,circle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:not[%s];4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, curry[same_size,iota(x.s)]), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(filter(x.s, size2), curry[same_color,x.o]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue
'λx.apply(size1,iota(filter(x.s, and[yellow,curry[same_shape,iota(x.s)]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[curry[size-gt,iota(filter(filter(x.s, not[curry[size-gt,iota(filter(x.s, curry[same_shape,iota(x.s)]))]]), green))],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:yellow;1:%s.o;2:x
'λx.empty(x.s)'	0:empty(%s);3:%s.s;2:x
'λx.apply(or[triangle,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(iff[size2,nor[circle,green]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size2;4:nor[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(implies[yellow,not[triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:not[%s];4:triangle;1:%s.o;2:x
'λx.exists(not[triangle], x.s)'	0:exists(%s, %s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, blue), size3), blue), and[rectangle,yellow]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:blue;4:and[%s,%s];4:rectangle;4:yellow
'λx.forall(green,filter(filter(x.s, yellow), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.forall(nor[green,curry[same_shape,x.o]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(curry[size-leq,iota(filter(filter(x.s, not[circle]), circle))],iota(filter(x.s, or[size2,nor[curry[same_size,x.o],green]])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green
'λx.apply(size3,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(or[blue,yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(or[size1,implies[size1,blue]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(filter(x.s, size2), green), size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:size3
'λx.empty(filter(filter(filter(filter(x.s, and[green,rectangle]), triangle), implies[nand[and[size3,blue],size1],or[not[rectangle],triangle]]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle;4:triangle;4:implies[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:blue;4:size1;4:or[%s,%s];4:not[%s];4:rectangle;4:triangle;4:rectangle
'λx.empty(filter(x.s, curry[size-gt,iota(filter(filter(filter(x.s, size2), green), yellow))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(or[size3,and[triangle,rectangle]],iota(filter(x.s, or[yellow,green])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green
'λx.apply(green,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(and[size1,curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(and[curry[size-gt,iota(filter(filter(x.s, and[triangle,or[size2,and[green,size1]]]), rectangle))],and[size2,yellow]], filter(x.s, and[curry[same_shape,iota(x.s)],and[green,green]]))'	0:exists(%s, %s);4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:size1;4:rectangle;4:and[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(and[size1,or[or[curry[same_size,x.o],size3],or[circle,rectangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size2,blue], filter(filter(filter(x.s, rectangle), size1), curry[size-gt,iota(filter(filter(x.s, circle), size3))]))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(and[curry[size-geq,x.o],or[and[triangle,or[size3,or[size1,size3]]],and[and[and[size3,triangle],green],size1]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:or[%s,%s];4:size1;4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size3],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(curry[size-leq,iota(filter(x.s, size3))],iota(filter(filter(x.s, and[iff[size1,circle],blue]), nand[size3,and[rectangle,blue]])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:size1;4:circle;4:blue;4:nand[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(not[size3],iota(filter(x.s, or[not[iff[size2,size1]],or[not[not[size2]],green]])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:size2;4:size1;4:or[%s,%s];4:not[%s];4:not[%s];4:size2;4:green
'λx.apply(and[not[not[curry[same_color,iota(x.s)]]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.forall(not[triangle],filter(x.s, curry[size-geq,x.o]))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), or[curry[same_size,iota(x.s)],or[yellow,circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle
'λx.apply(green,iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(and[circle,rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(curry[size-leq,x.o],iota(filter(x.s, implies[curry[size-leq,x.o],triangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:triangle
'λx.apply(curry[same_size,iota(filter(filter(filter(filter(filter(x.s, circle), curry[same_color,iota(x.s)]), size3), circle), and[circle,yellow]))],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:circle;4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[curry[size-geq,iota(x.s)],and[or[rectangle,and[yellow,size2]],size2]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:size2;4:size2;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, rectangle), rectangle), and[or[implies[circle,size1],yellow],rectangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:circle;4:size1;4:yellow;4:rectangle
'λx.exists(or[rectangle,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[or[size3,green],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, rectangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(nor[size2,and[blue,rectangle]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:size2;4:and[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(or[not[curry[same_color,iota(filter(x.s, and[size2,and[size1,triangle]]))]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[and[blue,not[not[triangle]]],size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:not[%s];4:triangle;4:size2
'λx.apply(size3,iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(implies[and[yellow,size1],iff[nor[or[green,circle],nor[triangle,curry[same_shape,x.o]]],size2]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:iff[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:green;4:circle;4:nor[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), filter(filter(x.s, size2), and[size2,nor[and[iff[blue,size1],rectangle],curry[same_shape,iota(x.s)]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:size1;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(x.s)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,implies[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(and[rectangle,not[curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(not[or[circle,blue]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(or[yellow,rectangle],iota(filter(filter(filter(x.s, green), green), implies[size1,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:implies[%s,%s];4:size1;4:rectangle
'λx.apply(and[not[circle],and[triangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, iff[size1,blue]), and[green,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:blue;4:and[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.apply(and[nor[blue,rectangle],blue],iota(filter(filter(filter(filter(x.s, size2), and[circle,or[size2,green]]), circle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:green;4:circle;4:circle
'λx.apply(yellow,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, size1), curry[same_color,x.o])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size2), size3)), filter(filter(filter(x.s, size2), rectangle), and[not[size1],triangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:and[%s,%s];4:not[%s];4:size1;4:triangle
'λx.apply(not[circle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[not[size1],and[blue,size1]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, or[and[or[and[rectangle,or[size2,and[curry[same_color,iota(x.s)],blue]]],nor[rectangle,and[rectangle,triangle]]],circle],yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:triangle;4:circle;4:yellow
'λx.apply(green,iota(filter(filter(filter(x.s, rectangle), or[rectangle,rectangle]), and[not[not[curry[same_color,x.o]]],curry[same_shape,iota(x.s)]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:not[%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(x.s, curry[same_shape,x.o]))],iota(filter(filter(filter(filter(x.s, triangle), size3), size2), size3)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size2;4:size3
'λx.empty(filter(x.s, rectangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(rectangle, filter(x.s, size1))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, and[triangle,curry[size-lt,x.o]]), circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:circle;4:blue
'λx.apply(not[blue],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[size2],and[curry[same_size,x.o],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[size3,rectangle]), curry[same_shape,x.o]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(blue,iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(not[size2],iota(filter(filter(x.s, curry[size-gt,iota(filter(x.s, circle))]), nor[green,size2])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:green;4:size2
'λx.apply(not[curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size1,not[and[size1,implies[circle,green]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(and[curry[same_size,iota(filter(x.s, triangle))],size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(x.s))'	0:apply(%s,%s);4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[or[size2,or[size1,size3]],size2],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:size3;4:size2;4:size2;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(filter(x.s, curry[same_size,x.o]), curry[same_color,x.o]), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue
'λx.apply(nand[blue,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, or[yellow,rectangle]), size2), and[circle,size1]), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:rectangle;4:size2;4:and[%s,%s];4:circle;4:size1;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, iff[size2,size2]), circle), and[rectangle,circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:size2;4:circle;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(and[or[not[triangle],rectangle],or[and[green,size1],circle]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(and[green,size1],filter(x.s, size3))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[size1,yellow],not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(not[not[green]], filter(filter(x.s, not[nand[triangle,green]]), not[yellow]))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:triangle;4:green;4:not[%s];4:yellow
'λx.exists(and[or[curry[same_shape,x.o],size1],not[size2]], filter(x.s, size1))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), and[triangle,yellow]), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:yellow;4:yellow
'λx.apply(implies[circle,size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), yellow), and[size3,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:and[%s,%s];4:size3;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, and[curry[same_shape,x.o],not[size1]]), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(not[and[or[not[size2],rectangle],nor[size1,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:rectangle;4:nor[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[blue,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(curry[same_size,iota(filter(filter(x.s, and[circle,triangle]), rectangle))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:rectangle;3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, and[size3,and[or[size3,and[curry[same_color,iota(filter(filter(x.s, curry[size-leq,x.o]), circle))],green]],green]]), curry[size-geq,x.o]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:circle;4:green;4:green;4:curry[%s,%s];5:size-geq;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[yellow,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:green
'λx.contains(x.o, filter(filter(filter(filter(x.s, size2), size2), curry[same_color,iota(x.s)]), and[blue,curry[same_size,x.o]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(and[curry[same_size,iota(filter(x.s, size1))],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[and[not[and[yellow,circle]],size2],blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:circle;4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(iff[not[and[size3,curry[same_color,x.o]]],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[nor[circle,circle],not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, size3), and[or[yellow,green],nor[and[and[blue,green],green],size1]]), green), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:green;4:size1;4:green;4:size1
'λx.apply(or[size3,and[or[and[circle,size2],and[blue,size1]],yellow]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:size2;4:and[%s,%s];4:blue;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[and[size2,curry[same_shape,iota(filter(x.s, curry[same_shape,iota(filter(x.s, or[size1,and[yellow,green]]))]))]],not[triangle]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:green;4:not[%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, curry[size-geq,iota(x.s)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[not[not[size2]],curry[same_shape,iota(x.s)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:not[%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[green,or[size2,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, not[circle]), and[green,rectangle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:green;4:rectangle
'λx.apply(and[or[and[curry[same_color,x.o],curry[same_color,x.o]],size1],curry[size-leq,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[yellow,green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size2,iota(filter(filter(x.s, size2), iff[size3,size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:size3;4:size2
'λx.contains(iota(x.s), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(curry[same_size,iota(x.s)],iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(yellow,iota(filter(x.s, curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, green))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size1), or[triangle,green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:triangle;4:green
'λx.apply(or[curry[size-leq,iota(x.s)],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[circle,size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1
'λx.forall(yellow,filter(filter(x.s, size2), implies[circle,size3]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:circle;4:size3
'λx.apply(curry[same_color,x.o],iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.forall(triangle,filter(x.s, size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(green,filter(x.s, size3))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size3,iota(filter(x.s, implies[size2,not[size2]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:not[%s];4:size2
'λx.apply(size1,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[not[circle],size1],iota(filter(filter(filter(x.s, circle), size2), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:blue
'λx.apply(nand[triangle,size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(nand[and[triangle,not[curry[same_color,iota(filter(x.s, and[curry[same_color,iota(filter(x.s, green))],and[green,and[and[and[not[size1],curry[same_size,iota(filter(filter(x.s, rectangle), and[implies[not[size3],yellow],curry[same_size,x.o]]))]],circle],size1]]]))]]],green], filter(x.s, and[or[implies[not[not[rectangle]],circle],size3],or[size2,rectangle]]))'	0:exists(%s, %s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:size3;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:size1;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:circle;4:size3;4:or[%s,%s];4:size2;4:rectangle
'λx.apply(and[implies[curry[same_color,iota(x.s)],green],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:triangle;1:%s.o;2:x
'λx.exists(and[rectangle,size1], filter(filter(x.s, curry[same_size,iota(x.s)]), curry[size-gt,x.o]))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), and[green,and[green,blue]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.exists(size2, filter(filter(filter(x.s, yellow), triangle), and[circle,nor[triangle,yellow]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:and[%s,%s];4:circle;4:nor[%s,%s];4:triangle;4:yellow
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, green), size1), blue), implies[size3,nand[size2,circle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:blue;4:implies[%s,%s];4:size3;4:nand[%s,%s];4:size2;4:circle
'λx.empty(filter(filter(filter(x.s, or[triangle,or[size3,circle]]), blue), curry[same_color,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:circle;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,and[green,not[size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[not[size3]]), green), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3;4:green;4:size3
'λx.apply(and[size2,and[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(nor[not[size1],size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size1;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, curry[size-leq,x.o]), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, triangle), size3), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:yellow
'λx.apply(or[green,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, curry[same_color,x.o]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(and[green,or[size2,and[blue,implies[rectangle,yellow]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:and[%s,%s];4:blue;4:implies[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(or[curry[size-leq,iota(filter(x.s, blue))],circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, iff[nand[and[or[circle,green],implies[curry[same_size,x.o],blue]],and[circle,rectangle]],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;4:and[%s,%s];4:circle;4:rectangle;4:green
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(x.s, triangle), triangle), rectangle), green), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:rectangle;4:green;4:blue
'λx.apply(yellow,iota(filter(filter(x.s, yellow), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(nor[rectangle,not[and[and[or[or[size3,blue],nand[and[size1,or[size3,nand[or[blue,and[blue,size3]],size3]]],iff[green,not[size2]]]],blue],and[size2,size3]]]],iota(filter(filter(filter(x.s, triangle), green), circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:blue;4:nand[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size3;4:size3;4:iff[%s,%s];4:green;4:not[%s];4:size2;4:blue;4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:circle
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, or[rectangle,green])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green
'λx.apply(iff[and[and[size1,triangle],size3],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size3;4:green;1:%s.o;2:x
'λx.apply(and[size2,or[or[yellow,yellow],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, not[size3]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size2
'λx.apply(not[curry[same_size,iota(filter(x.s, circle))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(or[size3,curry[same_shape,iota(filter(x.s, and[size3,size3]))]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, implies[blue,and[size3,size3]]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:and[%s,%s];4:size3;4:size3;4:blue
'λx.apply(nor[size1,triangle],iota(filter(filter(filter(x.s, iff[and[and[green,nand[curry[same_color,iota(filter(x.s, size2))],and[and[size1,curry[size-leq,x.o]],circle]]],and[not[circle],rectangle]],and[rectangle,size1]]), nor[and[and[and[or[iff[circle,curry[same_shape,x.o]],green],triangle],size1],size3],or[not[blue],yellow]]), curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:circle;4:and[%s,%s];4:not[%s];4:circle;4:rectangle;4:and[%s,%s];4:rectangle;4:size1;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:triangle;4:size1;4:size3;4:or[%s,%s];4:not[%s];4:blue;4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, and[size2,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2
'λx.apply(size2,iota(filter(filter(x.s, circle), or[blue,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:blue;4:green
'λx.empty(filter(filter(x.s, size3), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(yellow,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(and[size2,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nand[yellow,iff[size2,size3]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.exists(and[green,green], filter(filter(filter(x.s, not[size2]), and[circle,size1]), iff[green,nor[size3,and[size1,not[yellow]]]]))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:circle;4:size1;4:iff[%s,%s];4:green;4:nor[%s,%s];4:size3;4:and[%s,%s];4:size1;4:not[%s];4:yellow
'λx.exists(and[blue,not[size2]], filter(filter(x.s, and[yellow,iff[circle,curry[same_shape,iota(x.s)]]]), and[or[size2,rectangle],yellow]))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:yellow
'λx.exists(green, filter(filter(filter(filter(x.s, not[and[not[size3],blue]]), nand[yellow,size1]), implies[or[and[and[rectangle,curry[same_color,iota(x.s)]],circle],curry[same_size,x.o]],triangle]), circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:blue;4:nand[%s,%s];4:yellow;4:size1;4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;4:circle
'λx.apply(or[not[rectangle],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, iff[nor[not[and[curry[size-lt,iota(filter(x.s, triangle))],or[or[and[and[and[size1,or[curry[same_shape,x.o],triangle]],triangle],triangle],yellow],and[and[green,size1],triangle]]]],circle],or[not[green],blue]]), curry[same_shape,iota(x.s)]), and[rectangle,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:triangle;4:triangle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:triangle;4:circle;4:or[%s,%s];4:not[%s];4:green;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(and[and[curry[size-gt,x.o],circle],and[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:circle;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, curry[same_size,iota(filter(filter(filter(filter(x.s, circle), size1), size2), size2))]), or[or[yellow,triangle],circle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:size2;4:size2;4:or[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:circle
'λx.apply(size3,iota(filter(x.s, nand[green,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size1
'λx.apply(not[rectangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, not[size1]), rectangle), and[iff[size2,and[nand[triangle,nor[implies[and[size2,implies[triangle,size3]],blue],yellow]],or[size3,curry[same_shape,iota(x.s)]]]],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:nand[%s,%s];4:triangle;4:nor[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:implies[%s,%s];4:triangle;4:size3;4:blue;4:yellow;4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, yellow), curry[same_size,x.o])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[and[rectangle,and[size2,green]],or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:green;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(or[size2,size2],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[iff[blue,rectangle],not[blue]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:blue;4:rectangle;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(filter(x.s, circle), size2), size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size3
'λx.apply(not[or[yellow,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.exists(curry[same_color,iota(x.s)], filter(x.s, size1))'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size2,implies[curry[same_color,iota(filter(x.s, green))],and[curry[same_shape,iota(filter(x.s, rectangle))],not[not[curry[same_size,x.o]]]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, curry[same_shape,iota(x.s)]), and[rectangle,yellow]), size3), and[nand[size3,blue],yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow;4:size3;4:and[%s,%s];4:nand[%s,%s];4:size3;4:blue;4:yellow
'λx.apply(and[yellow,and[size3,curry[same_color,iota(x.s)]]],iota(filter(filter(x.s, nor[not[or[triangle,size1]],and[not[yellow],size2]]), or[size3,curry[same_color,iota(filter(x.s, yellow))]])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:not[%s];4:yellow;4:size2;4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[green,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(yellow,filter(filter(x.s, blue), yellow))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.contains(iota(filter(x.s, circle)), filter(filter(filter(filter(x.s, size1), triangle), size3), or[circle,size3]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:size3;4:or[%s,%s];4:circle;4:size3
'λx.forall(rectangle,filter(filter(filter(filter(filter(x.s, green), blue), nor[triangle,rectangle]), blue), or[circle,blue]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:nor[%s,%s];4:triangle;4:rectangle;4:blue;4:or[%s,%s];4:circle;4:blue
'λx.empty(filter(x.s, nand[green,size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size2
'λx.apply(size2,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(iff[triangle,size2],iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(or[rectangle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[or[blue,and[size1,not[size2]]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[and[or[triangle,and[and[and[blue,size3],rectangle],yellow]],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:rectangle;4:yellow;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(blue,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), not[rectangle]), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle;4:triangle
'λx.exists(size1, filter(x.s, size2))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(curry[same_color,iota(filter(x.s, green))],filter(filter(x.s, and[green,or[size1,size1]]), yellow))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:size1;4:yellow
'λx.apply(or[circle,not[size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[iff[size2,not[or[yellow,size3]]],iff[blue,blue]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:yellow;4:size3;4:iff[%s,%s];4:blue;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[not[green],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[yellow,not[circle]],iota(filter(x.s, and[circle,and[blue,size1]])))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:size1
'λx.apply(size1,iota(filter(x.s, and[circle,and[and[size3,size2],and[not[rectangle],size2]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:not[%s];4:rectangle;4:size2
'λx.apply(green,iota(filter(filter(filter(x.s, and[not[circle],not[and[circle,curry[size-gt,x.o]]]]), blue), not[green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:and[%s,%s];4:circle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:blue;4:not[%s];4:green
'λx.apply(nand[circle,or[yellow,and[size2,nand[size2,circle]]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:nand[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(or[not[blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(iff[or[green,blue],implies[rectangle,size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:green;4:blue;4:implies[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, green), yellow), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size1;4:rectangle
'λx.apply(and[iff[triangle,green],or[and[yellow,circle],and[blue,size3]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:green;4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[triangle,or[curry[same_size,x.o],size3]],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, rectangle), or[size1,not[size1]]), size2), or[iff[size2,circle],curry[same_color,iota(x.s)]]), size3), size3), size2), rectangle), rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size1;4:not[%s];4:size1;4:size2;4:or[%s,%s];4:iff[%s,%s];4:size2;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:size3;4:size2;4:rectangle;4:rectangle
'λx.apply(implies[implies[green,and[triangle,curry[same_color,x.o]]],and[yellow,size1]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[green,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[curry[size-leq,x.o]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[rectangle,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green
'λx.apply(and[size1,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, nor[not[curry[size-gt,x.o]],size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size1
'λx.contains(iota(x.s), filter(filter(filter(x.s, not[green]), and[and[size3,blue],not[size2]]), and[size2,or[nor[and[or[curry[same_shape,iota(filter(x.s, curry[same_color,x.o]))],circle],curry[size-geq,x.o]],triangle],and[not[not[not[size1]]],and[blue,nand[green,triangle]]]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:not[%s];4:size2;4:and[%s,%s];4:size2;4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:size1;4:and[%s,%s];4:blue;4:nand[%s,%s];4:green;4:triangle
'λx.contains(iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, green), size3), and[size3,not[yellow]]), curry[size-geq,iota(x.s)]), blue), triangle), not[blue]), yellow), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:and[%s,%s];4:size3;4:not[%s];4:yellow;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:blue;4:triangle;4:not[%s];4:blue;4:yellow;4:circle;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[circle,curry[same_color,x.o]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(or[circle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(and[size1,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, not[implies[blue,size1]]), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:size1;4:size2
'λx.apply(or[size2,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[size2,size1],not[circle]],iota(filter(filter(filter(filter(filter(x.s, not[nor[and[yellow,not[or[size1,curry[same_color,iota(filter(filter(x.s, green), green))]]]],or[rectangle,or[and[size2,yellow],and[and[size1,curry[size-leq,x.o]],not[size3]]]]]]), rectangle), triangle), nor[green,triangle]), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size1;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:not[%s];4:size3;4:rectangle;4:triangle;4:nor[%s,%s];4:green;4:triangle;4:circle
'λx.forall(and[curry[same_color,iota(x.s)],not[and[nor[curry[same_shape,x.o],rectangle],blue]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(or[triangle,blue],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[size1,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(curry[same_size,x.o],iota(filter(filter(x.s, size2), or[or[circle,size1],rectangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:or[%s,%s];4:circle;4:size1;4:rectangle
'λx.apply(not[nor[not[curry[same_color,iota(filter(filter(x.s, size1), or[or[yellow,implies[and[not[and[yellow,size2]],triangle],or[blue,and[green,rectangle]]]],size3]))]],blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:or[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:rectangle;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_size,iota(x.s)],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, and[size2,size2]), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2;4:yellow
'λx.apply(and[green,and[not[circle],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,and[yellow,nor[circle,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size3), size2), or[triangle,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:or[%s,%s];4:triangle;4:size1
'λx.apply(not[and[green,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[size2,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size2
'λx.apply(green,iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(or[circle,iff[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(rectangle, filter(filter(x.s, green), size3))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(nand[blue,circle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size3), and[and[blue,triangle],green]), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:green;4:yellow
'λx.contains(iota(filter(x.s, green)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(circle, filter(filter(x.s, green), and[blue,size3]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:blue;4:size3
'λx.empty(filter(filter(filter(filter(filter(x.s, blue), size1), and[not[size3],curry[same_size,iota(x.s)]]), green), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:and[%s,%s];4:not[%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(green,iota(filter(x.s, or[not[size1],triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size1;4:triangle
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(x.s, yellow), not[blue]), size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:blue;4:size2
'λx.apply(and[rectangle,triangle],iota(filter(filter(filter(x.s, yellow), size3), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:yellow
'λx.apply(curry[same_shape,iota(filter(filter(filter(x.s, size3), size3), or[not[or[circle,not[and[size1,size1]]]],green]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size1;4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,and[size3,curry[size-gt,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:size3;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[triangle,curry[same_color,x.o]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, curry[size-lt,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(x.s, rectangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, and[yellow,and[circle,or[size2,and[and[curry[same_color,iota(x.s)],rectangle],nor[triangle,yellow]]]]]), size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:triangle;4:yellow;4:size3
'λx.apply(or[size3,and[not[rectangle],size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(or[and[triangle,triangle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[and[size1,blue],and[yellow,yellow]]), and[curry[size-gt,iota(x.s)],size1])), filter(filter(filter(filter(filter(x.s, rectangle), blue), iff[size2,blue]), yellow), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:and[%s,%s];4:yellow;4:yellow;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:iff[%s,%s];4:size2;4:blue;4:yellow;4:rectangle
'λx.empty(filter(x.s, size3))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[size1,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[rectangle,nand[yellow,size2]],size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:yellow;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(x.s))'	0:apply(%s,%s);4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[not[curry[same_size,x.o]],blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, nor[and[green,implies[not[curry[same_color,x.o]],size1]],and[curry[size-lt,x.o],yellow]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:green;4:implies[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:yellow
'λx.empty(filter(x.s, blue))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[blue,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(iff[size2,not[and[nand[and[size2,yellow],and[nor[yellow,and[curry[same_shape,iota(x.s)],size1]],yellow]],rectangle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,circle],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.forall(or[circle,and[rectangle,curry[same_shape,iota(x.s)]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, and[or[blue,and[curry[size-leq,x.o],not[circle]]],curry[size-gt,iota(filter(x.s, size2))]]), green), and[blue,curry[same_color,x.o]]), or[and[implies[and[yellow,not[nand[or[size3,not[size1]],implies[triangle,size3]]]],rectangle],triangle],yellow]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:not[%s];4:circle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:not[%s];4:size1;4:implies[%s,%s];4:triangle;4:size3;4:rectangle;4:triangle;4:yellow;4:size2
'λx.apply(curry[size-geq,iota(x.s)],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, nor[rectangle,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:circle
'λx.empty(filter(filter(x.s, rectangle), or[yellow,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:yellow;4:triangle
'λx.empty(filter(filter(x.s, rectangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.empty(filter(x.s, not[yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(not[yellow],iota(filter(x.s, and[circle,circle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle
'λx.contains(iota(filter(filter(x.s, not[and[or[green,triangle],green]]), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:triangle;4:green;4:circle;3:%s.s;2:x
'λx.apply(and[yellow,nand[circle,triangle]],iota(filter(filter(filter(filter(filter(x.s, size1), yellow), size2), triangle), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size2;4:triangle;4:rectangle
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(filter(filter(filter(x.s, circle), and[or[size1,triangle],yellow]), nor[blue,not[and[nand[circle,size2],circle]]]), rectangle), and[size3,size2]), implies[yellow,circle]), size2), and[size3,and[green,or[size3,blue]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:yellow;4:nor[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:size2;4:circle;4:rectangle;4:and[%s,%s];4:size3;4:size2;4:implies[%s,%s];4:yellow;4:circle;4:size2;4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:or[%s,%s];4:size3;4:blue
'λx.apply(rectangle,iota(filter(x.s, implies[size2,not[or[not[curry[same_shape,x.o]],and[or[iff[circle,and[nand[size1,triangle],size3]],nor[or[triangle,size1],triangle]],curry[same_color,iota(x.s)]]]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:nand[%s,%s];4:size1;4:triangle;4:size3;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(curry[same_shape,iota(filter(x.s, size2))],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(size2,iota(filter(filter(x.s, rectangle), curry[same_shape,iota(filter(x.s, blue))])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[iff[curry[same_size,x.o],not[size3]],size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:size3;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, not[green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, green), triangle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size2
'λx.apply(blue,iota(filter(x.s, or[size2,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle
'λx.contains(iota(filter(x.s, circle)), filter(filter(filter(x.s, curry[same_size,x.o]), size3), and[or[triangle,circle],size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:size2
'λx.forall(and[not[circle],nand[size2,green]],filter(filter(x.s, green), curry[same_size,iota(x.s)]))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:nand[%s,%s];4:size2;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, and[circle,nand[rectangle,size3]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:nand[%s,%s];4:rectangle;4:size3
'λx.apply(or[rectangle,triangle],iota(filter(filter(filter(x.s, or[size3,green]), circle), nor[and[triangle,curry[same_shape,x.o]],curry[same_color,iota(filter(x.s, and[triangle,circle]))]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green;4:circle;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.forall(not[blue],filter(x.s, triangle))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(curry[size-gt,x.o],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(curry[size-gt,x.o],filter(filter(x.s, not[size3]), or[and[green,curry[same_color,iota(filter(x.s, rectangle))]],or[green,size2]]))'	0:forall(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:green;4:size2
'λx.apply(and[yellow,not[triangle]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(or[size1,not[not[size3]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:not[%s];4:size3;3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, curry[same_color,x.o]), green))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green
'λx.apply(nor[triangle,blue],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(or[and[or[size3,circle],green],size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:green;4:size1;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, size2), rectangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[and[yellow,or[and[blue,green],iff[size3,blue]]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:iff[%s,%s];4:size3;4:blue;4:triangle;1:%s.o;2:x
'λx.exists(or[not[yellow],and[curry[same_size,x.o],yellow]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(filter(x.s, iff[circle,or[size3,not[or[and[curry[same_size,iota(filter(filter(x.s, size2), blue))],triangle],and[green,size2]]]]]), and[green,circle]), not[size2]), size3)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:or[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:triangle;4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:green;4:circle;4:not[%s];4:size2;4:size3
'λx.apply(not[not[not[size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(or[size3,and[size3,rectangle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(and[not[and[curry[same_size,x.o],size2]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size2;4:size1;1:%s.o;2:x
'λx.exists(not[size2], filter(filter(filter(filter(filter(x.s, rectangle), size2), rectangle), size2), and[yellow,and[green,size2]]))'	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:rectangle;4:size2;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:size2
'λx.apply(and[green,or[size2,curry[same_size,iota(filter(x.s, or[and[circle,implies[green,yellow]],curry[same_size,iota(filter(filter(filter(x.s, curry[same_size,x.o]), green), triangle))]]))]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:implies[%s,%s];4:green;4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:triangle;1:%s.o;2:x
'λx.exists(not[and[or[and[and[green,size1],rectangle],size2],and[or[yellow,and[triangle,size2]],triangle]]], filter(filter(filter(x.s, and[not[and[implies[and[curry[same_color,iota(x.s)],blue],not[or[size1,nor[yellow,size1]]]],not[triangle]]],circle]), yellow), blue))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:rectangle;4:size2;4:and[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:size2;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:not[%s];4:or[%s,%s];4:size1;4:nor[%s,%s];4:yellow;4:size1;4:not[%s];4:triangle;4:circle;4:yellow;4:blue
'λx.apply(and[green,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(and[and[size2,and[size3,nand[size2,yellow]]],and[not[green],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:nand[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:not[%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(iff[curry[size-geq,x.o],size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[iff[not[curry[same_color,x.o]],and[nor[and[green,blue],size1],blue]],curry[same_size,iota(filter(x.s, yellow))]],iota(filter(filter(x.s, and[and[size1,not[not[not[size1]]]],green]), or[rectangle,green])))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:blue;4:size1;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:not[%s];4:not[%s];4:size1;4:green;4:or[%s,%s];4:rectangle;4:green
'λx.exists(yellow, filter(filter(filter(x.s, size1), size2), blue))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:blue
'λx.apply(or[circle,size1],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(curry[same_color,iota(x.s)],iota(filter(filter(filter(x.s, yellow), triangle), green)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:green
'λx.contains(iota(x.s), filter(filter(filter(x.s, yellow), triangle), nor[and[implies[curry[same_color,iota(filter(x.s, triangle))],green],and[size3,or[triangle,and[triangle,nor[size2,not[size1]]]]]],and[size1,and[not[circle],size3]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:size2;4:not[%s];4:size1;4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:circle;4:size3
'λx.empty(filter(filter(x.s, rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(size1,iota(filter(filter(filter(x.s, or[curry[same_shape,x.o],size1]), size3), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;4:size3;4:triangle
'λx.exists(size2, filter(x.s, or[not[and[and[size3,and[circle,size3]],yellow]],triangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size3;4:yellow;4:triangle
'λx.apply(iff[not[yellow],and[curry[same_color,iota(filter(x.s, not[circle]))],green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(nand[not[yellow],size1],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size3],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, curry[same_shape,x.o]), size2))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(green,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.forall(implies[blue,curry[same_shape,iota(x.s)]],filter(x.s, blue))'	0:forall(%s,%s);4:implies[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(iff[not[yellow],nand[yellow,green]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:yellow;4:nand[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.empty(filter(x.s, and[size1,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3
'λx.apply(and[rectangle,nand[yellow,rectangle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(yellow, filter(filter(x.s, and[blue,size2]), triangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:triangle
'λx.apply(and[or[not[curry[same_color,x.o]],size2],green],iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.contains(x.o, filter(filter(filter(filter(x.s, circle), and[and[size2,size1],implies[triangle,and[circle,circle]]]), and[triangle,curry[same_shape,x.o]]), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:and[%s,%s];4:size2;4:size1;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:circle;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green
'λx.apply(or[blue,size3],iota(filter(filter(filter(filter(filter(x.s, and[and[circle,nand[circle,blue]],and[or[green,not[rectangle]],and[rectangle,size3]]]), yellow), blue), size3), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:circle;4:blue;4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:rectangle;4:and[%s,%s];4:rectangle;4:size3;4:yellow;4:blue;4:size3;4:size1
'λx.contains(x.o, filter(filter(x.s, and[and[size3,and[and[green,not[size2]],blue]],size3]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:size2;4:blue;4:size3;4:circle
'λx.forall(and[rectangle,not[implies[size3,green]]],filter(filter(filter(x.s, and[or[or[not[yellow],green],yellow],size1]), yellow), or[iff[yellow,blue],size3]))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:implies[%s,%s];4:size3;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:green;4:yellow;4:size1;4:yellow;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:blue;4:size3
'λx.apply(nand[size1,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(implies[and[and[not[size1],size2],not[curry[size-leq,iota(filter(x.s, or[implies[or[triangle,blue],rectangle],and[triangle,yellow]]))]]],nand[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:size2;4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:rectangle;4:and[%s,%s];4:triangle;4:yellow;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[size1,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, curry[same_shape,x.o]), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[blue,not[and[triangle,green]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(nand[and[not[green],and[size2,rectangle]],blue],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:size2;4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(filter(x.s, and[and[or[circle,size2],circle],nor[curry[same_shape,x.o],or[rectangle,size3]]]), size3), rectangle), circle), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size2;4:circle;4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:size3;4:size3;4:rectangle;4:circle;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, iff[blue,green]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:green;4:blue
'λx.apply(and[blue,and[or[blue,triangle],and[not[and[yellow,blue]],not[size1]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(nand[curry[same_shape,iota(x.s)],green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[size2,and[size2,or[size1,green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, not[and[curry[size-gt,iota(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size2), rectangle), circle), size3), circle), and[green,circle]), and[and[size1,size1],yellow]), size2))],yellow]]), size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:circle;4:size3;4:circle;4:and[%s,%s];4:green;4:circle;4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:yellow;4:size2;4:yellow;4:size1
'λx.apply(size2,iota(filter(filter(x.s, green), and[size3,rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size3;4:rectangle
'λx.exists(and[not[size3],nand[size3,size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size3;4:nand[%s,%s];4:size3;4:size3;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, and[circle,and[size2,or[or[size2,size3],or[size3,yellow]]]]), size3), circle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:size2;4:size3;4:or[%s,%s];4:size3;4:yellow;4:size3;4:circle
'λx.apply(or[not[green],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:green;1:%s.o;2:x
'λx.apply(nor[and[blue,and[curry[same_size,iota(x.s)],yellow]],or[curry[size-gt,x.o],and[and[size1,size3],yellow]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[not[green],blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,curry[size-leq,iota(filter(x.s, size1))]],iota(filter(filter(filter(filter(x.s, green), size1), triangle), and[size2,green])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:triangle;4:and[%s,%s];4:size2;4:green
'λx.apply(or[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(not[size1], filter(filter(x.s, size3), curry[same_color,iota(x.s)]))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[implies[circle,implies[curry[same_shape,x.o],curry[same_color,iota(filter(filter(x.s, size3), implies[or[rectangle,triangle],and[size1,circle]]))]]],not[iff[size1,green]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:circle;4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:size1;4:circle;4:not[%s];4:iff[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(or[implies[and[or[nand[curry[size-leq,iota(x.s)],circle],and[curry[same_size,x.o],and[and[curry[same_size,iota(filter(filter(x.s, blue), yellow))],size2],and[rectangle,size3]]]],or[green,implies[curry[same_shape,iota(x.s)],curry[same_size,x.o]]]],rectangle],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:size2;4:and[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:green;4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(nor[curry[same_size,iota(filter(filter(filter(filter(filter(x.s, green), curry[same_size,x.o]), not[nand[nor[circle,curry[same_shape,iota(x.s)]],triangle]]), not[blue]), curry[same_shape,x.o]))],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:nand[%s,%s];4:nor[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, triangle), curry[size-lt,x.o]), size1), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size1;4:triangle
'λx.apply(and[triangle,not[size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[green],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[not[rectangle],triangle],and[blue,blue]],and[triangle,circle]],iota(filter(x.s, implies[yellow,size2])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;4:and[%s,%s];4:blue;4:blue;4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:size2
'λx.apply(and[or[circle,yellow],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(yellow,iota(filter(x.s, and[size2,circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle
'λx.apply(yellow,iota(filter(filter(x.s, nand[curry[same_color,iota(filter(x.s, size1))],blue]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:size3
'λx.contains(x.o, filter(x.s, circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(filter(filter(x.s, rectangle), and[blue,triangle]), and[size1,or[green,size1]]), implies[yellow,triangle]), curry[same_shape,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:green;4:size1;4:implies[%s,%s];4:yellow;4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[not[nor[not[curry[size-lt,x.o]],blue]]],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:nor[%s,%s];4:not[%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[yellow,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.exists(iff[curry[same_shape,iota(x.s)],and[circle,green]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(or[size2,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(nand[and[triangle,rectangle],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[curry[same_size,x.o],triangle],iota(filter(filter(x.s, size3), or[and[yellow,rectangle],yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:yellow
'λx.forall(blue,filter(filter(x.s, size2), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(yellow,x.o)'	0:apply(%s,%s);4:yellow;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(x.s, and[rectangle,and[size3,circle]]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, or[and[and[size2,size2],rectangle],rectangle]), size2), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:rectangle;4:rectangle;4:size2;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.contains(iota(filter(x.s, curry[size-geq,iota(x.s)])), filter(x.s, curry[same_shape,iota(filter(filter(filter(x.s, and[circle,circle]), or[rectangle,curry[size-leq,iota(x.s)]]), green))]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, circle), triangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:size2
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, size2), circle), or[and[size1,yellow],triangle]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:triangle;4:size3
'λx.apply(circle,iota(filter(x.s, and[rectangle,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.forall(yellow,filter(filter(filter(x.s, triangle), triangle), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:triangle
'λx.apply(not[green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[not[not[and[and[rectangle,yellow],size1]]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[and[size2,triangle],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(x.s, not[circle]))],iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.forall(size2,filter(x.s, nand[or[curry[size-gt,iota(filter(x.s, size3))],size3],rectangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:rectangle
'λx.exists(and[and[and[yellow,and[curry[same_color,x.o],nor[blue,size3]]],yellow],blue], filter(filter(x.s, yellow), triangle))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:size3;4:yellow;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(not[and[and[not[or[size3,curry[same_size,x.o]]],or[triangle,green]],green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:green;4:green;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(filter(x.s, rectangle), green))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, or[curry[same_size,iota(x.s)],circle]), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(and[rectangle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), and[and[size1,yellow],blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:blue
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, and[size2,not[blue]]), rectangle), implies[and[rectangle,blue],size2]), blue), blue), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:blue;4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:size2;4:blue;4:blue;4:triangle
'λx.empty(filter(filter(filter(x.s, or[or[yellow,triangle],nor[size2,green]]), size1), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:nor[%s,%s];4:size2;4:green;4:size1;4:triangle
'λx.apply(not[circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[rectangle,rectangle],iota(filter(filter(x.s, or[curry[size-lt,x.o],and[curry[same_size,x.o],curry[same_shape,x.o]]]), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(green,iota(filter(filter(filter(x.s, nor[size3,green]), size3), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:green;4:size3;4:circle
'λx.apply(or[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), size2), and[or[circle,size3],yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:yellow
'λx.exists(and[size1,curry[same_size,iota(x.s)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, size1), and[size1,not[size2]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:not[%s];4:size2
'λx.empty(filter(filter(x.s, size2), and[and[blue,yellow],blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:blue
'λx.forall(size2,filter(filter(filter(x.s, size2), size3), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:circle
'λx.apply(or[or[triangle,green],or[size3,and[rectangle,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:green;4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[yellow,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:circle
'λx.exists(and[green,rectangle], filter(filter(x.s, and[yellow,curry[size-geq,iota(filter(filter(x.s, triangle), green))]]), or[circle,curry[size-lt,iota(x.s)]]))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:or[%s,%s];4:circle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_color,iota(x.s)],iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.forall(nand[triangle,and[curry[same_color,x.o],blue]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(curry[size-lt,iota(filter(x.s, and[and[green,size2],circle]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[size-leq,iota(x.s)], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.exists(or[yellow,size1], filter(x.s, curry[same_size,x.o]))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(not[not[size3]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, green), or[or[blue,circle],curry[same_size,x.o]]), circle), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:rectangle
'λx.apply(yellow,iota(filter(filter(x.s, implies[size3,size2]), and[size2,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:size2;4:and[%s,%s];4:size2;4:green
'λx.apply(and[nand[not[rectangle],not[circle]],and[rectangle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:circle;4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, blue), yellow), yellow), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:yellow;4:blue
'λx.empty(filter(filter(filter(filter(x.s, circle), and[iff[and[triangle,and[triangle,not[green]]],and[size1,nor[size1,circle]]],and[green,curry[same_color,iota(filter(x.s, triangle))]]]), or[size3,rectangle]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:not[%s];4:green;4:and[%s,%s];4:size1;4:nor[%s,%s];4:size1;4:circle;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size3;4:rectangle;4:size2
'λx.contains(iota(filter(x.s, iff[not[yellow],blue])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(green,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(triangle,iota(filter(x.s, curry[same_size,iota(filter(x.s, yellow))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(curry[size-gt,iota(filter(x.s, triangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[size3,triangle]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:blue
'λx.apply(nand[nand[size1,size1],size2],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:size1;4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(x.s, and[circle,not[and[yellow,and[green,or[blue,and[green,curry[same_shape,iota(x.s)]]]]]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[size3,size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(implies[size1,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(not[iff[or[green,rectangle],yellow]],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(or[blue,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[curry[same_shape,x.o],size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(nand[yellow,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, circle), and[not[and[circle,and[and[curry[same_size,x.o],not[size2]],size2]]],green]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:size2;4:size2;4:green;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), green), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:blue;3:%s.s;2:x
'λx.apply(and[size2,or[size2,and[not[blue],size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, not[rectangle]), green), curry[size-geq,x.o]), or[and[nor[circle,blue],and[and[or[nor[size3,circle],or[triangle,nand[size3,triangle]]],triangle],yellow]],triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:green;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:size3;4:circle;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:size3;4:triangle;4:triangle;4:yellow;4:triangle
'λx.apply(and[circle,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, nor[size3,circle])), filter(filter(x.s, green), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(or[circle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,nor[size2,and[blue,curry[same_size,x.o]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:size2;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[size3,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[green,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(yellow, filter(filter(filter(filter(x.s, yellow), green), and[triangle,curry[same_shape,x.o]]), implies[or[size1,or[green,size1]],rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:green;4:size1;4:rectangle
'λx.apply(nor[or[green,size3],size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:green;4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, blue), size2), green), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:green;4:size3
'λx.apply(iff[triangle,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.exists(yellow, filter(filter(filter(filter(filter(x.s, size3), circle), iff[yellow,size1]), triangle), and[size1,size2]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:iff[%s,%s];4:yellow;4:size1;4:triangle;4:and[%s,%s];4:size1;4:size2
'λx.apply(curry[same_size,iota(filter(filter(x.s, curry[same_size,iota(filter(x.s, yellow))]), and[size1,triangle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.empty(filter(x.s, or[and[curry[same_color,iota(filter(filter(x.s, not[circle]), blue))],and[circle,circle]],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:blue;4:and[%s,%s];4:circle;4:circle;4:rectangle
'λx.exists(and[triangle,not[circle]], filter(filter(filter(x.s, yellow), rectangle), or[size3,and[circle,not[circle]]]))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:not[%s];4:circle
'λx.apply(not[curry[same_color,iota(filter(x.s, and[curry[same_color,iota(filter(x.s, rectangle))],and[green,and[and[and[rectangle,yellow],blue],not[yellow]]]]))]],iota(filter(filter(filter(x.s, blue), circle), curry[same_shape,x.o])))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:blue;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(nand[size2,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[and[and[triangle,size3],green],size3]), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:green;4:size3;4:circle
'λx.apply(and[iff[blue,size3],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), blue), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:size2
'λx.apply(not[and[not[size2],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(iff[size2,curry[same_shape,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(and[or[yellow,circle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,size3],iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.empty(filter(filter(filter(filter(filter(x.s, green), implies[circle,triangle]), yellow), triangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:circle;4:triangle;4:yellow;4:triangle;4:circle
'λx.apply(nand[curry[size-lt,x.o],iff[size3,yellow]],iota(filter(filter(filter(filter(filter(x.s, green), not[triangle]), size2), or[and[size3,yellow],nor[not[implies[and[rectangle,green],or[size3,blue]]],yellow]]), green)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:iff[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle;4:size2;4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:nor[%s,%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:size3;4:blue;4:yellow;4:green
'λx.forall(size1,filter(x.s, yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[nor[yellow,and[rectangle,size1]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, rectangle), and[circle,size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:circle;4:size1
'λx.exists(or[size3,size1], filter(filter(x.s, curry[same_size,iota(x.s)]), triangle))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(nand[or[circle,yellow],and[circle,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.exists(and[and[nand[and[and[size2,triangle],and[nor[and[blue,size1],size3],yellow]],triangle],green],not[yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size3;4:yellow;4:triangle;4:green;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, or[and[green,and[yellow,rectangle]],size2]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:rectangle;4:size2;4:size1
'λx.forall(curry[same_size,iota(filter(filter(filter(x.s, circle), size3), size2))],filter(x.s, size2))'	0:forall(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(blue, filter(filter(x.s, nand[curry[same_color,iota(filter(x.s, rectangle))],size3]), size1))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size1
'λx.apply(nand[circle,and[green,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.forall(triangle,filter(x.s, rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(curry[same_shape,x.o],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.forall(or[nor[or[circle,and[green,yellow]],size3],circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:green;4:yellow;4:size3;4:circle;3:%s.s;2:x
'λx.apply(and[triangle,iff[implies[green,curry[same_shape,iota(x.s)]],and[and[circle,triangle],size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:implies[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[or[green,yellow],and[and[triangle,or[not[and[curry[same_shape,x.o],green]],not[and[rectangle,size1]]]],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:not[%s];4:and[%s,%s];4:rectangle;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(iff[circle,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[curry[same_color,x.o],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(or[not[curry[size-lt,x.o]],circle], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[yellow,nor[and[iff[curry[same_size,iota(filter(filter(x.s, size3), not[size2]))],size3],or[size3,and[yellow,triangle]]],and[blue,triangle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2;4:size3;4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, curry[same_shape,iota(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), and[and[curry[same_color,x.o],size1],size2]), size2), and[yellow,blue]), size1), or[and[or[and[not[or[green,yellow]],blue],yellow],blue],nor[and[triangle,size3],size1]]), and[curry[size-lt,x.o],green]))])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;4:size2;4:size2;4:and[%s,%s];4:yellow;4:blue;4:size1;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:yellow;4:blue;4:yellow;4:blue;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:size1;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:green
'λx.apply(size1,iota(filter(filter(x.s, or[size1,blue]), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:blue;4:blue
'λx.apply(nand[size2,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size2,size1])), filter(x.s, curry[same_shape,x.o]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(nor[green,curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(yellow, filter(filter(filter(filter(x.s, triangle), implies[yellow,nor[size1,rectangle]]), triangle), and[size1,and[rectangle,curry[same_shape,iota(x.s)]]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:yellow;4:nor[%s,%s];4:size1;4:rectangle;4:triangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(filter(filter(filter(x.s, blue), and[yellow,green]), size1), rectangle), rectangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:yellow;4:green;4:size1;4:rectangle;4:rectangle
'λx.apply(or[or[blue,green],size3],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(circle,iota(filter(x.s, curry[same_size,iota(filter(x.s, triangle))])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(blue, filter(filter(filter(x.s, curry[same_shape,x.o]), size3), size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;4:size2
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size2, filter(filter(filter(x.s, yellow), nor[not[or[green,rectangle]],size3]), rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:rectangle;4:size3;4:rectangle
'λx.apply(and[rectangle,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(filter(filter(filter(x.s, yellow), rectangle), and[or[nand[rectangle,curry[same_shape,iota(x.s)]],blue],green]), and[size2,blue]), not[size3]), triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:green;4:and[%s,%s];4:size2;4:blue;4:not[%s];4:size3;4:triangle
'λx.apply(implies[size3,green],iota(filter(filter(filter(x.s, and[triangle,size2]), green), circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;4:green;4:circle
'λx.apply(or[implies[and[size1,blue],not[size1]],iff[triangle,blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size1;4:blue;4:not[%s];4:size1;4:iff[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, yellow), size3), size2), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size2;4:green
'λx.exists(green, filter(filter(x.s, size3), size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.exists(nand[curry[same_shape,x.o],yellow], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(not[iff[and[triangle,blue],and[size2,and[yellow,and[yellow,blue]]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size1,not[not[size1]]],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:not[%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(and[curry[same_color,x.o],green],iota(filter(filter(filter(filter(filter(x.s, size1), circle), curry[size-lt,x.o]), and[yellow,and[or[size3,or[blue,size2]],circle]]), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:blue;4:size2;4:circle;4:triangle
'λx.apply(and[size2,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,green],iota(filter(x.s, or[circle,curry[same_size,x.o]])))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(nand[triangle,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[and[or[implies[implies[size1,rectangle],curry[same_color,iota(x.s)]],not[size3]],size1],size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:size1;4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;4:size1;4:size3;3:%s.s;2:x
'λx.forall(size2,filter(filter(filter(x.s, green), not[curry[same_size,x.o]]), not[and[implies[iff[and[blue,implies[size2,and[circle,size1]]],curry[same_color,iota(x.s)]],circle],yellow]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(not[blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[size1,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size3), rectangle), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:triangle
'λx.apply(not[implies[blue,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[yellow,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, or[size3,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, and[size2,size3]), and[triangle,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:triangle;4:triangle
'λx.apply(triangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(filter(x.s, triangle), curry[same_shape,iota(filter(x.s, curry[same_size,x.o]))])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(not[and[size2,green]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, circle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(and[and[size2,nand[size1,not[triangle]]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:nand[%s,%s];4:size1;4:not[%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(not[nor[size1,rectangle]],iota(filter(filter(filter(x.s, circle), size2), curry[size-leq,x.o])))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(and[circle,size3],iota(filter(filter(filter(x.s, blue), triangle), not[blue])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:not[%s];4:blue
'λx.forall(nand[size1,not[not[and[size2,triangle]]]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:not[%s];4:and[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.apply(and[curry[same_color,iota(filter(filter(x.s, rectangle), and[not[triangle],and[or[and[or[circle,size3],size3],curry[same_shape,x.o]],curry[size-gt,iota(x.s)]]]))],curry[size-leq,x.o]],iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.empty(filter(filter(x.s, not[yellow]), curry[same_color,x.o]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(and[curry[same_color,x.o],curry[size-gt,iota(filter(x.s, green))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(and[size3,circle],iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(size1,iota(filter(filter(filter(x.s, not[yellow]), size3), and[curry[size-geq,iota(filter(filter(x.s, triangle), rectangle))],curry[same_color,iota(x.s)]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[iff[or[nor[or[not[green],blue],or[curry[same_size,iota(filter(filter(filter(filter(x.s, size1), size2), curry[same_color,iota(x.s)]), rectangle))],blue]],circle],implies[green,and[not[and[and[triangle,or[yellow,green]],or[rectangle,or[blue,not[rectangle]]]]],not[iff[circle,and[green,circle]]]]]],size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:blue;4:circle;4:implies[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:green;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:not[%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:green;4:circle;4:size2;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[circle,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle
'λx.apply(curry[same_size,iota(filter(filter(filter(filter(x.s, green), green), or[size1,size1]), not[rectangle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:or[%s,%s];4:size1;4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[green,size3]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.apply(and[yellow,or[nor[curry[size-lt,x.o],rectangle],nor[size2,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:rectangle;4:nor[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[or[nand[circle,and[and[yellow,and[and[iff[rectangle,size3],green],and[rectangle,or[or[green,not[and[rectangle,not[circle]]]],circle]]]],size1]],size2],and[green,curry[size-lt,x.o]]]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:green;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:circle;4:circle;4:size1;4:size2;4:and[%s,%s];4:green;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, yellow), and[and[curry[same_color,iota(filter(filter(x.s, implies[or[size2,rectangle],blue]), and[iff[circle,size1],curry[same_size,iota(x.s)]]))],size1],curry[same_color,iota(filter(x.s, or[and[curry[same_shape,x.o],size3],blue]))]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:blue;4:and[%s,%s];4:iff[%s,%s];4:circle;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;4:blue
'λx.apply(and[and[curry[same_color,iota(filter(filter(x.s, yellow), and[or[blue,triangle],curry[size-geq,x.o]]))],size1],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:size1;4:green;1:%s.o;2:x
'λx.apply(curry[same_color,iota(x.s)],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(filter(x.s, or[yellow,green])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green
'λx.apply(and[rectangle,not[curry[same_color,iota(filter(filter(x.s, yellow), rectangle))]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(x.s, not[curry[same_color,x.o]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, triangle), circle), blue), curry[same_size,iota(x.s)]), and[size1,or[blue,size2]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size2
'λx.apply(and[rectangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), curry[same_size,iota(x.s)]), iff[or[yellow,green],curry[same_shape,x.o]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:yellow;4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(or[triangle,not[size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, yellow), and[or[size3,and[rectangle,size3]],circle]), circle), or[triangle,size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:size3;4:circle;4:circle;4:or[%s,%s];4:triangle;4:size2
'λx.apply(implies[size2,blue],iota(filter(x.s, and[triangle,triangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle
'λx.forall(size1,filter(filter(x.s, yellow), or[size1,blue]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size1;4:blue
'λx.contains(iota(filter(x.s, curry[same_size,x.o])), filter(filter(x.s, not[size1]), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:circle
'λx.apply(size2,iota(filter(x.s, implies[yellow,and[not[or[implies[green,rectangle],nor[size3,triangle]]],implies[circle,size2]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:green;4:rectangle;4:nor[%s,%s];4:size3;4:triangle;4:implies[%s,%s];4:circle;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, blue), circle), curry[size-geq,iota(x.s)]), green), blue), or[and[not[not[triangle]],size2],size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;4:blue;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:size2;4:size1
'λx.contains(iota(x.s), filter(filter(x.s, curry[same_shape,x.o]), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(nor[and[rectangle,size3],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[nand[triangle,rectangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, yellow), and[green,and[not[size1],circle]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:size1;4:circle
'λx.apply(and[size3,and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[rectangle,nor[triangle,size3]],iota(filter(filter(filter(filter(x.s, yellow), or[size3,rectangle]), size3), nor[circle,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size3;4:rectangle;4:size3;4:nor[%s,%s];4:circle;4:rectangle
'λx.apply(or[or[yellow,nor[size2,yellow]],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:size2;4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[and[yellow,size1],size2],and[size3,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:size2;4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(x.s, or[circle,rectangle]))],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, curry[size-leq,x.o]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:rectangle
'λx.exists(or[size1,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), and[or[not[green],size3],size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:size3;4:size1
'λx.forall(blue,filter(filter(x.s, and[circle,yellow]), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:yellow
'λx.apply(or[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[circle,yellow],filter(filter(x.s, curry[same_color,x.o]), green))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green
'λx.empty(filter(filter(x.s, and[iff[or[not[curry[same_size,x.o]],rectangle],size1],or[nand[or[nor[not[not[and[curry[same_shape,iota(filter(x.s, rectangle))],or[curry[same_shape,iota(x.s)],blue]]]],curry[same_shape,x.o]],yellow],and[yellow,triangle]],nand[curry[same_size,iota(filter(x.s, size3))],blue]]]), and[and[blue,blue],size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;4:size1;4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:yellow;4:triangle;4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3
'λx.apply(or[nor[triangle,curry[same_shape,iota(x.s)]],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[and[rectangle,circle],size3],size3],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size3;4:size3;4:circle;1:%s.o;2:x
'λx.exists(and[size2,rectangle], filter(filter(x.s, circle), size1))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(and[iff[yellow,green],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:green;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, size2), rectangle), triangle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:triangle;4:green
'λx.apply(and[nor[triangle,size2],green],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(not[size1],iota(filter(filter(x.s, size1), size2)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.forall(and[or[triangle,triangle],not[or[curry[same_size,iota(x.s)],nor[curry[same_color,iota(x.s)],and[and[and[yellow,blue],nor[and[size2,triangle],or[and[blue,rectangle],yellow]]],nand[and[size2,rectangle],nor[or[triangle,size1],curry[same_size,iota(filter(x.s, size3))]]]]]]]],filter(filter(filter(x.s, size1), and[blue,size3]), blue))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:nor[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:yellow;4:nand[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:size3;4:blue
'λx.apply(and[nand[green,curry[same_shape,iota(filter(x.s, yellow))]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(filter(filter(filter(x.s, or[circle,size1]), size2), triangle), or[curry[same_color,iota(x.s)],curry[size-geq,iota(filter(filter(x.s, yellow), yellow))]]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1;4:size2;4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size2
'λx.apply(and[curry[same_color,iota(filter(x.s, not[and[size3,not[size1]]]))],and[size3,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:not[%s];4:size1;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, iff[and[or[and[curry[size-geq,x.o],iff[yellow,and[iff[curry[same_shape,x.o],triangle],blue]]],triangle],curry[same_shape,x.o]],triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:blue;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(nand[size3,blue],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,x.o],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(filter(x.s, yellow), and[rectangle,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(and[green,implies[curry[same_size,iota(x.s)],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.forall(curry[same_color,iota(filter(x.s, green))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(and[yellow,or[nand[triangle,circle],not[circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:nand[%s,%s];4:triangle;4:circle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[size2,iff[and[and[and[size2,green],nand[size2,size3]],rectangle],or[rectangle,size3]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:nand[%s,%s];4:size2;4:size3;4:rectangle;4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[not[circle],rectangle],iota(filter(filter(filter(x.s, or[circle,size1]), blue), not[size3])))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1;4:blue;4:not[%s];4:size3
'λx.apply(not[and[yellow,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,iff[or[or[size1,size2],and[green,or[size2,or[blue,not[size2]]]]],not[curry[same_size,iota(x.s)]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:size2;4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:or[%s,%s];4:blue;4:not[%s];4:size2;4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(filter(filter(filter(filter(x.s, and[nor[yellow,not[yellow]],curry[size-geq,x.o]]), curry[same_color,iota(filter(x.s, size1))]), not[size3]), rectangle), yellow), and[not[size1],and[blue,blue]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:not[%s];4:yellow;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size3;4:rectangle;4:yellow;4:and[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:blue;4:blue
'λx.apply(not[or[curry[size-geq,iota(filter(filter(x.s, triangle), and[or[blue,blue],blue]))],circle]],iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.empty(filter(filter(filter(x.s, rectangle), and[circle,curry[size-lt,iota(x.s)]]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:circle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, and[circle,and[circle,yellow]]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:yellow;4:triangle
'λx.apply(and[curry[same_color,x.o],or[green,yellow]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[rectangle,triangle],iff[triangle,curry[size-leq,x.o]]],iota(filter(filter(x.s, implies[size3,size2]), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:iff[%s,%s];4:triangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:size2;4:rectangle
'λx.apply(iff[triangle,not[size2]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,x.o],iota(filter(x.s, curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(implies[green,rectangle],iota(filter(filter(x.s, iff[size3,rectangle]), size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:rectangle;4:size2
'λx.forall(size3,filter(filter(x.s, not[size2]), and[size1,yellow]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:size1;4:yellow
'λx.apply(size1,iota(filter(filter(filter(x.s, and[triangle,blue]), triangle), not[circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:triangle;4:not[%s];4:circle
'λx.apply(triangle,iota(filter(x.s, and[not[yellow],or[green,blue]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:green;4:blue
'λx.apply(size3,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[circle,curry[size-gt,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[size2,curry[size-lt,iota(x.s)]],curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,size2],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[size2,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.forall(curry[size-geq,iota(filter(x.s, size2))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size3), curry[size-lt,x.o])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(or[size2,and[size3,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, and[triangle,not[rectangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:rectangle
'λx.empty(filter(x.s, not[and[rectangle,or[yellow,yellow]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:yellow
'λx.apply(implies[yellow,size3],iota(filter(filter(filter(x.s, circle), triangle), not[size2])))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:not[%s];4:size2
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size1), size3), rectangle), size2), nor[and[blue,curry[same_size,iota(filter(x.s, green))]],and[size2,curry[same_size,iota(x.s)]]]), and[blue,blue]), yellow), not[size2]), not[rectangle]), green), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:rectangle;4:size2;4:nor[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:yellow;4:not[%s];4:size2;4:not[%s];4:rectangle;4:green;4:rectangle
'λx.forall(blue,filter(filter(x.s, triangle), or[rectangle,triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:rectangle;4:triangle
'λx.apply(implies[or[circle,rectangle],size3],iota(filter(x.s, or[curry[same_size,iota(filter(filter(filter(x.s, blue), or[not[size1],size3]), size2))],size3])))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:not[%s];4:size1;4:size3;4:size2;4:size3
'λx.apply(or[circle,curry[same_shape,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[triangle,size2],iff[triangle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:iff[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[or[rectangle,and[size2,size1]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[size2,not[implies[curry[same_shape,x.o],curry[same_shape,x.o]]]]), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(or[size1,triangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.apply(and[yellow,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[curry[size-leq,iota(filter(filter(filter(filter(filter(filter(filter(x.s, circle), green), triangle), and[curry[same_size,iota(x.s)],blue]), yellow), blue), size1))]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:yellow;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(filter(x.s, green), size2))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.exists(implies[triangle,triangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size1), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.forall(size2,x.s)'	0:forall(%s,%s);4:size2;3:%s.s;2:x
'λx.apply(and[nand[size3,curry[same_size,iota(x.s)]],and[rectangle,and[or[and[blue,triangle],green],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size3,not[and[and[and[size1,triangle],and[blue,rectangle]],and[curry[same_size,iota(filter(filter(x.s, blue), size3))],size1]]]],iota(filter(x.s, implies[size1,and[yellow,size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size3
'λx.exists(curry[same_color,iota(x.s)], filter(x.s, circle))'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[yellow,not[circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, blue), size2), curry[size-lt,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), curry[size-leq,x.o])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nor[size2,size3],iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(and[circle,and[triangle,yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[implies[implies[yellow,yellow],curry[size-lt,iota(filter(x.s, size1))]]],green],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:yellow;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(green,filter(filter(x.s, or[size3,triangle]), green))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:green
'λx.apply(and[size2,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, rectangle), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(filter(filter(x.s, and[size2,triangle]), triangle), triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:triangle;4:triangle;4:size3
'λx.apply(nand[and[triangle,rectangle],size3],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, blue), size3), blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:blue;4:circle
'λx.contains(x.o, filter(filter(x.s, not[not[nand[green,size3]]]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:nand[%s,%s];4:green;4:size3;4:blue
'λx.apply(nor[or[and[rectangle,curry[same_color,iota(x.s)]],size3],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:rectangle;1:%s.o;2:x
'λx.forall(and[yellow,or[size1,blue]],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, nand[and[and[and[triangle,not[not[or[triangle,not[or[size1,blue]]]]]],circle],circle],size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:not[%s];4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:size1;4:blue;4:circle;4:circle;4:size3
'λx.apply(and[yellow,green],iota(filter(filter(x.s, or[or[not[not[and[rectangle,size3]]],or[not[and[curry[same_color,x.o],triangle]],size3]],green]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;4:size3;4:green;4:size2
'λx.apply(and[size2,and[blue,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(and[green,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[triangle,not[green]]), size1), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:green;4:size1;4:blue
'λx.apply(nand[curry[size-gt,iota(x.s)],implies[and[green,green],nand[circle,size1]]],iota(filter(filter(filter(filter(x.s, green), size2), blue), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:green;4:green;4:nand[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:blue;4:yellow
'λx.apply(or[not[size2],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(or[circle,circle],iota(filter(filter(filter(x.s, not[green]), blue), or[rectangle,and[circle,green]])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:blue;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:green
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, green), circle), rectangle), not[green]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:rectangle;4:not[%s];4:green;4:size1
'λx.apply(or[curry[same_size,iota(x.s)],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(nor[green,curry[size-geq,iota(x.s)]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[and[triangle,size1]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, green), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(curry[same_size,iota(x.s)],iota(filter(filter(filter(x.s, not[triangle]), blue), size3)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:blue;4:size3
'λx.apply(and[or[yellow,curry[same_shape,x.o]],and[rectangle,nor[iff[curry[same_shape,iota(filter(x.s, size3))],not[blue]],or[not[nand[size1,size3]],curry[same_size,x.o]]]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue;4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:size1;4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(blue, filter(x.s, curry[same_color,x.o]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(curry[size-lt,iota(filter(x.s, size1))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.exists(iff[or[blue,and[size2,not[circle]]],rectangle], filter(x.s, implies[not[or[green,triangle]],and[curry[same_color,iota(x.s)],nand[circle,size3]]]))'	0:exists(%s, %s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size2;4:not[%s];4:circle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:size3
'λx.apply(not[iff[size3,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.exists(not[or[yellow,rectangle]], filter(filter(filter(filter(filter(x.s, rectangle), size1), green), and[size2,curry[same_shape,iota(x.s)]]), yellow))'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:yellow;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:green;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(and[size1,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.forall(size3,filter(filter(filter(filter(x.s, green), green), green), circle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:green;4:circle
'λx.apply(size2,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size2,not[blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), or[size1,and[size3,curry[same_size,iota(x.s)]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,circle],iota(filter(filter(x.s, and[circle,size3]), nor[blue,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3;4:nor[%s,%s];4:blue;4:triangle
'λx.exists(implies[and[size1,not[triangle]],circle], filter(filter(filter(filter(x.s, or[triangle,not[yellow]]), circle), size1), curry[same_shape,iota(filter(filter(x.s, green), yellow))]))'	0:exists(%s, %s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:yellow;4:circle;4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(and[size3,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[iff[nor[circle,size2],rectangle],nand[not[triangle],and[size3,rectangle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:circle;4:size2;4:rectangle;4:nand[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(not[curry[size-lt,iota(filter(filter(x.s, rectangle), size1))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[not[size2],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(curry[same_color,x.o],iota(filter(filter(filter(filter(x.s, or[yellow,curry[same_color,iota(x.s)]]), triangle), implies[green,iff[and[yellow,or[size2,and[and[green,circle],size1]]],or[size2,size2]]]), circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:green;4:iff[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:size1;4:or[%s,%s];4:size2;4:size2;4:circle
'λx.apply(and[rectangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, and[size2,rectangle]), circle), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:circle;4:size3
'λx.contains(iota(filter(filter(filter(x.s, circle), triangle), blue)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(not[or[triangle,or[implies[curry[same_size,x.o],size3],green]]],x.s)'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;4:green;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[curry[size-geq,x.o],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:rectangle
'λx.apply(curry[size-leq,iota(x.s)],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, blue), circle), curry[size-leq,x.o]), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:yellow
'λx.apply(circle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[size1,rectangle], filter(x.s, and[rectangle,curry[same_shape,iota(x.s)]]))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(implies[not[circle],green],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(or[and[yellow,rectangle],and[size1,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nand[green,nor[or[and[or[green,yellow],and[or[rectangle,nor[blue,blue]],triangle]],iff[size2,size3]],size3]],iota(filter(filter(filter(filter(filter(x.s, and[circle,green]), not[and[blue,yellow]]), yellow), and[size3,yellow]), triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:blue;4:blue;4:triangle;4:iff[%s,%s];4:size2;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;4:not[%s];4:and[%s,%s];4:blue;4:yellow;4:yellow;4:and[%s,%s];4:size3;4:yellow;4:triangle
'λx.empty(filter(x.s, nor[green,curry[same_shape,x.o]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(x.s, size1))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.exists(and[rectangle,size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.exists(size1, filter(x.s, green))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[triangle,and[size3,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(filter(x.s, not[size3]), not[triangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:not[%s];4:triangle
'λx.apply(or[circle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[and[triangle,and[circle,triangle]],not[rectangle]],iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:triangle;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(or[size2,yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[triangle,and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nor[rectangle,not[rectangle]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(filter(filter(x.s, nor[and[size1,triangle],blue]), triangle), circle), triangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:blue;4:triangle;4:circle;4:triangle;4:rectangle
'λx.empty(filter(filter(filter(x.s, size2), yellow), iff[rectangle,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:iff[%s,%s];4:rectangle;4:triangle
'λx.apply(blue,iota(x.s))'	0:apply(%s,%s);4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, circle), green), yellow), or[circle,nor[and[and[triangle,yellow],blue],not[size3]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:yellow;4:or[%s,%s];4:circle;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:blue;4:not[%s];4:size3
'λx.exists(and[and[size3,size3],rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(and[and[circle,iff[size2,curry[same_color,iota(x.s)]]],yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[curry[same_color,iota(x.s)],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, not[size2]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(triangle,iota(filter(filter(filter(x.s, yellow), size1), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:green
'λx.apply(and[and[yellow,triangle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(rectangle,iota(filter(x.s, and[size2,curry[size-geq,x.o]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:curry[%s,%s];5:size-geq;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, implies[green,and[size1,blue]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:and[%s,%s];4:size1;4:blue
'λx.apply(and[implies[not[and[and[size1,blue],green]],not[size1]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:green;4:not[%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[green,circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[rectangle,curry[same_shape,x.o]],green],iota(filter(filter(x.s, not[blue]), nand[size3,triangle])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:nand[%s,%s];4:size3;4:triangle
'λx.apply(or[triangle,not[size1]],iota(filter(filter(x.s, circle), or[blue,or[not[nand[rectangle,size3]],and[curry[same_size,iota(filter(filter(x.s, rectangle), curry[size-lt,iota(x.s)]))],yellow]]])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.forall(size3,filter(x.s, rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(blue,filter(x.s, rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(x.s, or[nor[size1,size2],or[circle,size3]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:or[%s,%s];4:circle;4:size3
'λx.exists(rectangle, filter(filter(filter(x.s, size2), circle), rectangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:rectangle
'λx.contains(iota(filter(filter(filter(x.s, size1), blue), not[triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:not[%s];4:triangle;3:%s.s;2:x
'λx.forall(or[or[not[circle],yellow],blue],filter(x.s, curry[same_color,x.o]))'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.exists(circle, filter(x.s, curry[same_shape,x.o]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(filter(filter(filter(filter(filter(filter(x.s, green), nor[and[not[triangle],yellow],not[curry[same_shape,iota(x.s)]]]), or[size1,nand[curry[same_shape,iota(filter(filter(x.s, green), green))],size1]]), size2), curry[same_size,x.o]), curry[size-leq,iota(x.s)]), size3))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:yellow;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:size1;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[nor[iff[and[blue,iff[green,size3]],size3],yellow],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:iff[%s,%s];4:green;4:size3;4:size3;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nand[triangle,size2],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, yellow), triangle), and[circle,curry[same_shape,x.o]]), blue), blue), size1), implies[not[blue],curry[same_color,iota(filter(filter(x.s, and[and[yellow,size1],size1]), blue))]]), size2), and[size1,size3])))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;4:blue;4:size1;4:implies[%s,%s];4:not[%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:size1;4:blue;4:size2;4:and[%s,%s];4:size1;4:size3
'λx.apply(or[and[yellow,nor[blue,size1]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:blue;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(curry[same_size,x.o],iota(filter(filter(filter(filter(x.s, rectangle), size1), yellow), triangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:yellow;4:triangle
'λx.exists(not[blue], filter(x.s, or[size2,implies[curry[same_shape,iota(x.s)],not[blue]]]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, nor[and[implies[size1,curry[same_size,iota(x.s)]],and[blue,size3]],rectangle]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:rectangle;4:size3
'λx.contains(x.o, filter(filter(x.s, size3), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(and[not[size2],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(and[blue,circle], filter(filter(x.s, size3), not[blue]))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue
'λx.forall(size1,filter(x.s, circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), rectangle), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:circle
'λx.empty(filter(filter(x.s, rectangle), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:rectangle
'λx.apply(triangle,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(and[not[rectangle],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(x.s, and[not[and[green,blue]],size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:blue;4:size3
'λx.apply(nor[size1,triangle],iota(filter(filter(filter(filter(x.s, blue), and[size1,green]), yellow), blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:green;4:yellow;4:blue
'λx.apply(and[green,curry[same_shape,iota(filter(x.s, triangle))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(or[size2,curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(nand[and[and[yellow,blue],size1],yellow],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size1;4:yellow;3:%s.s;2:x
'λx.apply(iff[and[green,implies[size2,blue]],and[green,size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:implies[%s,%s];4:size2;4:blue;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.forall(and[size1,size1],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:size1;3:%s.s;2:x
'λx.apply(nor[and[blue,green],size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:green;4:size3;1:%s.o;2:x
'λx.apply(not[curry[same_size,iota(filter(filter(x.s, rectangle), size1))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), rectangle), curry[same_color,x.o])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, curry[same_color,iota(filter(filter(x.s, not[yellow]), size2))]), blue), and[implies[blue,size2],size1]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2;4:blue;4:and[%s,%s];4:implies[%s,%s];4:blue;4:size2;4:size1;4:size3;3:%s.s;2:x
'λx.apply(and[blue,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size2), nor[implies[yellow,green],triangle]), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:implies[%s,%s];4:yellow;4:green;4:triangle;4:size3
'λx.apply(or[size3,rectangle],iota(filter(filter(filter(x.s, not[blue]), size2), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size2;4:size3
'λx.apply(and[iff[and[circle,and[and[circle,rectangle],circle]],yellow],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:circle;4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[and[and[curry[same_color,x.o],curry[size-gt,iota(filter(filter(filter(x.s, yellow), curry[same_size,x.o]), and[implies[and[not[rectangle],curry[size-gt,x.o]],size2],rectangle]))]],and[blue,triangle]],and[size3,nand[size3,size2]]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size2;4:rectangle;4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:size3;4:nand[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(x.s, not[size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.empty(filter(filter(filter(filter(x.s, size3), yellow), curry[size-gt,x.o]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:rectangle
'λx.apply(or[or[size1,rectangle],circle],iota(filter(x.s, nand[nor[blue,blue],rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:blue;4:blue;4:rectangle
'λx.apply(size2,iota(filter(x.s, or[yellow,size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size1
'λx.apply(not[nor[green,or[implies[and[rectangle,and[and[not[and[circle,and[not[green],blue]]],and[nor[rectangle,and[and[yellow,not[and[size2,green]]],circle]],nor[and[curry[same_size,iota(filter(filter(x.s, curry[same_shape,iota(filter(x.s, rectangle))]), blue))],and[yellow,yellow]],or[blue,blue]]]],green]],rectangle],curry[same_size,x.o]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:green;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:blue;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size2;4:green;4:circle;4:nor[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:and[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:blue;4:blue;4:green;4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, or[size3,size2]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2
'λx.exists(not[green], filter(filter(filter(filter(x.s, size2), and[nor[size1,size2],blue]), circle), circle))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:blue;4:circle;4:circle
'λx.apply(and[and[rectangle,not[or[blue,circle]]],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:blue;4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(not[size3], filter(filter(filter(x.s, triangle), not[yellow]), implies[triangle,circle]))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:yellow;4:implies[%s,%s];4:triangle;4:circle
'λx.contains(x.o, filter(x.s, curry[same_size,x.o]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(not[not[triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(nor[yellow,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), rectangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:size3
'λx.forall(and[triangle,or[curry[same_shape,iota(filter(filter(x.s, not[circle]), curry[same_color,iota(filter(x.s, blue))]))],size3]],filter(x.s, rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[blue,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[and[triangle,rectangle],size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:size3
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(x.s, green), yellow), blue), yellow), size1), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:blue;4:yellow;4:size1;4:rectangle
'λx.apply(nor[triangle,size1],iota(filter(filter(filter(x.s, or[or[not[nor[iff[curry[size-geq,iota(filter(x.s, curry[same_color,x.o]))],curry[same_size,iota(x.s)]],yellow]],circle],triangle]), curry[same_size,iota(filter(x.s, blue))]), not[rectangle])))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:circle;4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:rectangle
'λx.forall(rectangle,filter(filter(x.s, yellow), curry[same_color,x.o]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(and[size3,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), rectangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:circle
'λx.apply(and[and[circle,rectangle],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, curry[same_shape,x.o]), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, not[rectangle]), size3), size1), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size3;4:size1;4:circle
'λx.empty(filter(filter(filter(x.s, curry[size-gt,iota(x.s)]), rectangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(nand[blue,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[nand[not[blue],triangle]]), triangle)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:not[%s];4:blue;4:triangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(green,filter(filter(x.s, or[and[blue,triangle],or[green,curry[same_size,x.o]]]), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(nand[not[curry[same_shape,x.o]],and[blue,green]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, curry[same_shape,iota(x.s)]), size2), rectangle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:rectangle;4:size2
'λx.contains(iota(filter(x.s, circle)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(x.s, blue), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, yellow), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(size1,iota(filter(filter(x.s, and[and[and[and[triangle,and[nand[or[and[not[circle],and[not[curry[same_size,x.o]],size1]],circle],size2],and[size2,triangle]]],size2],and[or[curry[same_size,x.o],or[triangle,or[rectangle,and[size1,green]]]],not[blue]]],blue]), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1;4:circle;4:size2;4:and[%s,%s];4:size2;4:triangle;4:size2;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:green;4:not[%s];4:blue;4:blue;4:circle
'λx.exists(size2, filter(x.s, and[or[size2,size1],yellow]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:size1;4:yellow
'λx.empty(filter(filter(x.s, nor[rectangle,yellow]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:yellow;4:yellow
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, green), blue), and[yellow,green]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:and[%s,%s];4:yellow;4:green;4:rectangle
'λx.contains(iota(filter(x.s, and[triangle,size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.forall(curry[same_color,iota(filter(x.s, size1))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, green), rectangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(nand[circle,and[size1,yellow]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[blue,curry[same_shape,x.o]],rectangle],iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(not[curry[size-gt,x.o]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[not[size3]],curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[rectangle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, curry[same_color,iota(filter(x.s, size1))]), and[or[green,and[yellow,curry[same_color,iota(x.s)]]],yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(x.s, and[curry[size-gt,iota(filter(x.s, rectangle))],size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(iff[size2,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[triangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), not[not[or[size2,circle]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:not[%s];4:or[%s,%s];4:size2;4:circle
'λx.forall(and[size1,curry[same_size,iota(x.s)]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[size2,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(curry[same_color,iota(filter(filter(x.s, yellow), curry[same_shape,iota(filter(x.s, yellow))]))],iota(filter(filter(filter(x.s, triangle), and[and[rectangle,size2],rectangle]), or[and[blue,blue],blue])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:blue
'λx.contains(x.o, filter(x.s, or[and[or[and[circle,nand[size1,or[nand[and[curry[same_color,x.o],nor[yellow,size2]],size1],implies[not[circle],implies[and[triangle,size3],blue]]]]],curry[same_shape,iota(filter(x.s, size3))]],triangle],and[yellow,and[green,or[rectangle,size2]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:size1;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:yellow;4:size2;4:size1;4:implies[%s,%s];4:not[%s];4:circle;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(not[and[size3,rectangle]],iota(filter(filter(filter(filter(filter(filter(x.s, rectangle), not[yellow]), green), green), and[or[and[size2,yellow],green],green]), rectangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:yellow;4:green;4:green;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:green;4:green;4:rectangle
'λx.apply(or[triangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[size1,curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), not[and[nor[nand[and[curry[same_color,x.o],or[not[not[size1]],yellow]],and[circle,yellow]],rectangle],or[green,circle]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:size1;4:yellow;4:and[%s,%s];4:circle;4:yellow;4:rectangle;4:or[%s,%s];4:green;4:circle
'λx.apply(nor[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(curry[same_color,iota(filter(filter(x.s, and[size1,curry[same_shape,iota(x.s)]]), rectangle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, curry[same_shape,iota(filter(x.s, size3))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[yellow,triangle],nand[circle,size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(x.s, blue))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[yellow,not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size2), and[size1,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size1;4:triangle
'λx.apply(or[or[size2,and[yellow,yellow]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:yellow;4:size1;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(x.s, curry[same_size,iota(x.s)]), rectangle), size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(implies[size3,and[curry[size-geq,iota(x.s)],green]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, rectangle), curry[size-lt,x.o])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(and[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, or[or[or[size1,circle],size3],triangle]), size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:size3;4:triangle;4:size1
'λx.apply(iff[nor[not[nand[rectangle,and[circle,yellow]]],triangle],not[circle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:not[%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:yellow;4:triangle;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(x.s, curry[same_shape,iota(filter(filter(filter(filter(x.s, green), triangle), rectangle), green))]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:rectangle;4:green
'λx.apply(nand[size3,green],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size2,not[size3]]],iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(or[and[yellow,yellow],size2],iota(filter(filter(x.s, nor[iff[blue,triangle],yellow]), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:yellow;4:size2
'λx.empty(filter(filter(x.s, green), curry[same_size,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[green,or[not[curry[same_shape,iota(filter(filter(x.s, size2), and[triangle,size3]))]],blue]],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:size3;4:blue;4:green;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, rectangle), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(blue,iota(filter(filter(filter(x.s, triangle), or[circle,nor[yellow,size3]]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:circle;4:nor[%s,%s];4:yellow;4:size3;4:blue
'λx.forall(and[implies[size3,and[size2,rectangle]],or[size3,circle]],filter(x.s, and[circle,size1]))'	0:forall(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1
'λx.exists(and[size2,and[yellow,or[triangle,triangle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(or[rectangle,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, size3))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(not[and[green,size2]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(curry[same_color,iota(filter(x.s, and[rectangle,and[and[and[triangle,nand[and[size2,blue],or[curry[same_shape,iota(x.s)],blue]]],and[size1,yellow]],circle]]))],filter(filter(filter(filter(filter(filter(filter(x.s, or[and[rectangle,circle],size3]), size1), circle), blue), size1), size2), and[not[implies[blue,size1]],size1]))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:and[%s,%s];4:size2;4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:yellow;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size3;4:size1;4:circle;4:blue;4:size1;4:size2;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:blue;4:size1;4:size1
'λx.forall(and[triangle,size1],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.apply(and[or[size1,not[triangle]],nand[size3,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:triangle;4:nand[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, blue), circle), implies[size1,triangle]), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:implies[%s,%s];4:size1;4:triangle;4:size1;3:%s.s;2:x
'λx.apply(curry[same_shape,iota(x.s)],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[blue,circle],iota(filter(filter(x.s, circle), implies[size1,size2])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:size1;4:size2
'λx.apply(nand[size2,size2],iota(filter(filter(filter(filter(filter(filter(filter(x.s, or[green,triangle]), yellow), circle), blue), or[nor[not[yellow],rectangle],blue]), and[triangle,circle]), or[not[yellow],green])))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:triangle;4:yellow;4:circle;4:blue;4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:yellow;4:rectangle;4:blue;4:and[%s,%s];4:triangle;4:circle;4:or[%s,%s];4:not[%s];4:yellow;4:green
'λx.apply(not[circle],iota(filter(filter(filter(filter(filter(x.s, blue), implies[yellow,rectangle]), curry[size-gt,iota(filter(x.s, and[not[rectangle],yellow]))]), rectangle), circle)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:yellow;4:rectangle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:yellow;4:rectangle;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, circle), or[size1,and[blue,and[green,curry[same_color,x.o]]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size1;4:and[%s,%s];4:blue;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(implies[size2,size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[size2,green],yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[blue,and[triangle,curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size3, x.s)'	0:exists(%s, %s);4:size3;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, green), size2), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:yellow
'λx.apply(size2,iota(filter(x.s, curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, nand[nor[rectangle,and[rectangle,rectangle]],implies[or[circle,not[curry[size-geq,iota(x.s)]]],nand[yellow,and[blue,blue]]]]), green), blue), circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:blue;4:green;4:blue;4:circle;4:blue
'λx.apply(size2,iota(filter(filter(filter(x.s, and[size1,blue]), curry[same_shape,iota(x.s)]), not[triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(x.s, and[green,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.forall(and[rectangle,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.empty(filter(x.s, not[size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(size1,iota(x.s))'	0:apply(%s,%s);4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.forall(iff[size2,green],filter(filter(filter(x.s, green), iff[curry[size-leq,x.o],triangle]), size3))'	0:forall(%s,%s);4:iff[%s,%s];4:size2;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:triangle;4:size3
'λx.apply(not[nand[curry[same_shape,iota(x.s)],not[yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[and[yellow,green],size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3
'λx.apply(and[not[blue],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[yellow,and[size3,or[triangle,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, circle), implies[yellow,circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:yellow;4:circle
'λx.exists(or[nand[or[size3,blue],circle],not[circle]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:blue;4:circle;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(not[curry[same_size,iota(filter(x.s, blue))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, curry[same_shape,x.o]), or[circle,blue]), not[yellow]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(and[and[yellow,and[circle,implies[rectangle,and[rectangle,and[nor[size3,circle],blue]]]]],nor[blue,and[or[blue,triangle],size2]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:size3;4:circle;4:blue;4:nor[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:size2;3:%s.s;2:x
'λx.apply(or[circle,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(x.s, size1), iff[and[size1,curry[size-gt,x.o]],size2]), circle), or[and[curry[size-lt,iota(x.s)],green],and[rectangle,rectangle]]), size2), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size2;4:circle;4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:green;4:and[%s,%s];4:rectangle;4:rectangle;4:size2;4:size1
'λx.apply(and[curry[same_shape,iota(filter(x.s, size2))],curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[triangle,and[and[iff[yellow,and[triangle,size2]],or[yellow,size3]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:yellow;4:size3;4:yellow;1:%s.o;2:x
'λx.exists(iff[blue,and[and[size1,size2],not[nor[and[size1,blue],triangle]]]], filter(filter(x.s, and[or[nor[yellow,size3],implies[nand[blue,green],blue]],green]), not[rectangle]))'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:yellow;4:size3;4:implies[%s,%s];4:nand[%s,%s];4:blue;4:green;4:blue;4:green;4:not[%s];4:rectangle
'λx.apply(or[nand[triangle,not[or[size3,yellow]]],and[green,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(not[and[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size2,and[not[size3],not[rectangle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size3;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nand[yellow,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(yellow, filter(filter(filter(x.s, green), size3), rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:rectangle
'λx.empty(filter(filter(filter(x.s, and[rectangle,and[nor[blue,not[size2]],green]]), rectangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:blue;4:not[%s];4:size2;4:green;4:rectangle;4:yellow
'λx.exists(size3, filter(x.s, or[circle,blue]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue
'λx.apply(and[size2,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), curry[size-leq,x.o])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, iff[circle,and[rectangle,size1]]), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:size1;4:green
'λx.apply(curry[size-gt,x.o],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[size2,size3],and[not[size2],and[size1,yellow]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_shape,x.o],size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(circle, filter(x.s, size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[not[size1],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[blue,and[curry[same_shape,iota(x.s)],blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_size,iota(x.s)],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[size2,green],size1],iota(filter(filter(x.s, blue), or[green,size3])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:green;4:size3
'λx.apply(blue,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(curry[same_color,iota(filter(filter(filter(filter(x.s, circle), iff[curry[same_size,x.o],and[size3,and[circle,implies[blue,blue]]]]), size2), blue))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:blue;4:size2;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[size1,size2]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;4:size1
'λx.forall(circle,filter(filter(x.s, and[size2,triangle]), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:size3
'λx.exists(size3, filter(x.s, circle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[curry[same_shape,x.o],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, green))],iota(filter(x.s, green)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size1,size2],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(and[and[size2,yellow],or[size3,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.forall(not[or[curry[same_size,iota(x.s)],triangle]],filter(filter(x.s, size2), size2))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(iff[green,curry[same_size,iota(filter(filter(filter(x.s, and[and[circle,nand[curry[same_shape,iota(x.s)],yellow]],green]), blue), circle))]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:green;4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, curry[same_color,iota(x.s)]), circle), triangle), curry[same_shape,iota(filter(x.s, implies[size3,rectangle]))])), filter(filter(filter(filter(filter(x.s, yellow), and[curry[same_shape,iota(x.s)],size2]), size2), yellow), and[or[size2,size3],size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:size2;4:yellow;4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:size1
'λx.empty(filter(filter(filter(x.s, size1), nand[blue,circle]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:blue;4:circle;4:rectangle
'λx.apply(and[blue,yellow],iota(filter(filter(x.s, not[size3]), and[yellow,blue])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:and[%s,%s];4:yellow;4:blue
'λx.apply(and[or[rectangle,circle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[iff[curry[size-gt,iota(filter(filter(x.s, yellow), circle))],or[not[blue],circle]],and[and[not[blue],size1],circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:or[%s,%s];4:not[%s];4:blue;4:circle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(and[curry[same_shape,iota(x.s)],and[not[rectangle],green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:green;3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[curry[same_shape,iota(filter(filter(filter(x.s, nor[size1,and[triangle,yellow]]), rectangle), blue))]]), nand[green,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:yellow;4:rectangle;4:blue;4:nand[%s,%s];4:green;4:rectangle
'λx.contains(iota(x.s), filter(filter(filter(filter(filter(filter(filter(filter(x.s, and[size3,size2]), size3), size1), size2), and[size1,not[triangle]]), and[circle,size1]), green), and[size2,size1]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2;4:size3;4:size1;4:size2;4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:and[%s,%s];4:circle;4:size1;4:green;4:and[%s,%s];4:size2;4:size1
'λx.apply(or[blue,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(filter(filter(filter(x.s, size3), curry[same_size,iota(x.s)]), green), size2), not[and[curry[same_shape,iota(x.s)],size3]]), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:size2;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(or[yellow,nor[blue,nor[implies[or[not[and[and[iff[and[or[green,size3],size2],and[not[triangle],curry[size-lt,x.o]]],green],curry[same_size,x.o]]],blue],size1],or[size3,curry[same_color,x.o]]]]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nor[%s,%s];4:blue;4:nor[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:size3;4:size2;4:and[%s,%s];4:not[%s];4:triangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;4:size1;4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[triangle,size3],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(x.s, blue)), filter(x.s, or[size1,size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2
'λx.empty(filter(filter(x.s, triangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.contains(iota(filter(filter(filter(x.s, circle), triangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:blue;3:%s.s;2:x
'λx.apply(or[size1,yellow],iota(filter(filter(x.s, not[rectangle]), iff[or[or[green,or[circle,or[not[triangle],circle]]],and[nand[not[curry[same_color,iota(x.s)]],iff[blue,circle]],circle]],yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:triangle;4:circle;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:circle;4:circle;4:yellow
'λx.apply(nand[rectangle,blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(filter(x.s, curry[same_color,iota(x.s)]), yellow), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(nand[size2,or[triangle,curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(or[and[rectangle,green],curry[size-lt,iota(x.s)]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, curry[same_shape,iota(x.s)]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[and[size2,and[rectangle,yellow]],green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(filter(x.s, curry[same_shape,x.o]), curry[same_size,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[curry[same_shape,x.o],circle],size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[triangle,and[circle,yellow]], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size3,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[and[green,triangle],and[rectangle,iff[or[and[size3,yellow],size3],triangle]]]), and[size1,and[or[and[and[circle,size1],size3],triangle],curry[same_color,iota(filter(x.s, curry[same_color,x.o]))]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:size3;4:triangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size1;4:size3;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(filter(filter(filter(x.s, or[curry[same_color,iota(x.s)],and[triangle,circle]]), size1), green), or[triangle,yellow]), triangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:size1;4:green;4:or[%s,%s];4:triangle;4:yellow;4:triangle
'λx.forall(and[yellow,size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(and[curry[same_color,iota(x.s)],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.forall(not[not[triangle]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(or[and[and[size3,size2],and[iff[and[and[nand[implies[curry[same_color,iota(x.s)],blue],not[circle]],size1],not[size3]],triangle],and[size1,size2]]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:not[%s];4:circle;4:size1;4:not[%s];4:size3;4:triangle;4:and[%s,%s];4:size1;4:size2;4:size3;1:%s.o;2:x
'λx.empty(filter(x.s, size2))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, blue), size3), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:yellow
'λx.apply(implies[yellow,curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, not[size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(or[size1,curry[same_size,x.o]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[nand[curry[same_size,iota(x.s)],not[blue]],or[and[or[circle,green],green],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, size2))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(not[blue],filter(filter(x.s, curry[same_size,iota(x.s)]), size1))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[circle,circle],iota(filter(x.s, nor[size3,green])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:green
'λx.empty(filter(filter(x.s, green), and[triangle,and[green,rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:rectangle
'λx.apply(and[nor[yellow,size1],and[size1,and[yellow,or[circle,size2]]]],iota(filter(filter(filter(filter(x.s, and[rectangle,curry[same_shape,iota(x.s)]]), size1), curry[same_size,iota(x.s)]), not[and[curry[same_color,iota(x.s)],size2]])))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(and[curry[size-leq,iota(x.s)],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[not[curry[size-gt,x.o]],blue])), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[blue,and[and[not[green],green],size1]],iota(filter(x.s, implies[triangle,and[rectangle,blue]])))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:blue
'λx.empty(filter(filter(x.s, size1), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[yellow,curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(and[circle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(nand[circle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(not[and[blue,green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[and[rectangle,curry[same_size,iota(filter(x.s, size3))]],size2],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,x.o],iota(filter(filter(filter(filter(filter(x.s, blue), curry[same_color,iota(filter(filter(x.s, size1), size3))]), or[size1,or[size3,or[not[rectangle],size1]]]), size2), size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:or[%s,%s];4:size1;4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:rectangle;4:size1;4:size2;4:size2
'λx.empty(filter(x.s, nor[size3,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:rectangle
'λx.empty(filter(filter(filter(x.s, green), circle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:size3
'λx.apply(curry[size-lt,iota(x.s)],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[size2,size2],iota(filter(filter(x.s, and[or[size3,blue],not[blue]]), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:not[%s];4:blue;4:size3
'λx.apply(and[green,yellow],iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(and[or[curry[same_size,x.o],or[and[yellow,rectangle],green]],not[triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:green;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[same_size,x.o], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nor[size1,triangle],iota(filter(x.s, and[circle,curry[same_color,iota(filter(x.s, and[yellow,not[size1]]))]])))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:size1
'λx.exists(size1, filter(filter(x.s, curry[same_shape,iota(x.s)]), circle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle
'λx.forall(curry[same_color,x.o],filter(filter(x.s, circle), and[circle,not[curry[same_size,x.o]]]))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:circle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(implies[circle,triangle],iota(filter(filter(filter(x.s, size3), size3), or[not[rectangle],size2])))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:or[%s,%s];4:not[%s];4:rectangle;4:size2
'λx.apply(or[blue,or[blue,size2]],iota(filter(filter(filter(x.s, blue), and[circle,and[and[green,size2],and[blue,or[curry[size-leq,iota(x.s)],iff[circle,yellow]]]]]), curry[same_color,iota(filter(filter(x.s, triangle), size3))])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:blue;4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(and[size2,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[circle,size3]), triangle), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size3;4:triangle;4:not[%s];4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, size2), rectangle), size2), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size2;4:triangle
'λx.exists(and[size2,size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(x.s, implies[curry[same_color,x.o],curry[size-leq,iota(x.s)]])), filter(filter(x.s, size2), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.forall(or[and[and[triangle,and[and[nor[and[circle,and[curry[same_size,x.o],not[and[and[size1,yellow],and[and[not[size1],triangle],curry[size-leq,iota(filter(filter(filter(filter(x.s, rectangle), and[or[size2,yellow],curry[size-geq,x.o]]), rectangle), triangle))]]]]]],green],and[yellow,circle]],circle]],triangle],not[blue]],filter(x.s, size1))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:triangle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:rectangle;4:triangle;4:green;4:and[%s,%s];4:yellow;4:circle;4:circle;4:triangle;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), nor[triangle,iff[blue,triangle]]), not[nor[yellow,not[size1]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:triangle;4:iff[%s,%s];4:blue;4:triangle;4:not[%s];4:nor[%s,%s];4:yellow;4:not[%s];4:size1
'λx.forall(not[circle],filter(filter(x.s, curry[same_color,iota(filter(filter(filter(x.s, curry[same_size,iota(filter(filter(filter(filter(x.s, rectangle), not[not[triangle]]), circle), size2))]), size1), not[and[not[and[triangle,triangle]],size1]]))]), and[and[triangle,blue],blue]))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:not[%s];4:triangle;4:circle;4:size2;4:size1;4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:size1;4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:blue
'λx.apply(or[nor[or[circle,triangle],not[implies[yellow,blue]]],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:not[%s];4:implies[%s,%s];4:yellow;4:blue;4:size2;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[green,not[triangle]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:triangle
'λx.forall(yellow,filter(filter(x.s, size3), size1))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(and[green,curry[same_size,x.o]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[yellow,and[triangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[iff[triangle,implies[not[curry[same_shape,iota(x.s)]],green]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:implies[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:green;1:%s.o;2:x
'λx.apply(and[not[size3],size2],iota(filter(filter(x.s, or[curry[same_size,iota(x.s)],blue]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(and[circle,size2],iota(filter(x.s, or[implies[and[and[circle,triangle],not[triangle]],and[size3,circle]],or[circle,circle]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:not[%s];4:triangle;4:and[%s,%s];4:size3;4:circle;4:or[%s,%s];4:circle;4:circle
'λx.apply(and[green,yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(curry[same_color,x.o],filter(filter(filter(x.s, circle), nor[size1,green]), rectangle))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:size1;4:green;4:rectangle
'λx.exists(or[triangle,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, and[or[curry[size-gt,x.o],green],green]), green), not[blue]), and[circle,blue]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:green;4:green;4:green;4:not[%s];4:blue;4:and[%s,%s];4:circle;4:blue
'λx.forall(not[yellow],filter(filter(x.s, triangle), rectangle))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.empty(filter(filter(filter(filter(filter(x.s, size2), triangle), circle), curry[same_shape,x.o]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[circle,or[rectangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, circle), not[blue]), yellow), size2), blue), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue;4:yellow;4:size2;4:blue;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, blue), size3), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size3
'λx.apply(and[blue,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(x.s, rectangle), size3), and[and[rectangle,triangle],iff[and[triangle,and[green,green]],size1]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:green;4:size1
'λx.contains(iota(filter(filter(x.s, curry[same_size,iota(filter(x.s, green))]), yellow)), filter(filter(filter(filter(x.s, and[circle,size1]), size1), and[rectangle,and[iff[circle,circle],and[rectangle,curry[same_size,iota(filter(x.s, and[size3,yellow]))]]]]), nand[size1,blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size1;4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:circle;4:circle;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:nand[%s,%s];4:size1;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, curry[same_color,x.o]), yellow), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;4:size1
'λx.apply(or[curry[same_size,x.o],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(filter(x.s, blue), size3))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, or[rectangle,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2
'λx.contains(iota(filter(x.s, nor[and[and[curry[size-lt,x.o],and[and[size1,circle],blue]],blue],circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:blue;4:blue;4:circle;3:%s.s;2:x
'λx.false'	0:false
'λx.empty(filter(x.s, curry[same_size,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(and[blue,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[curry[same_shape,x.o],implies[triangle,green]]), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:triangle;4:green;4:size1
'λx.apply(curry[same_color,iota(filter(x.s, size2))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[and[yellow,and[and[rectangle,blue],size1]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:size1;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[or[green,or[triangle,blue]],implies[rectangle,green]]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:triangle;4:blue;4:implies[%s,%s];4:rectangle;4:green;4:size3
'λx.apply(and[or[curry[size-lt,x.o],or[size3,and[green,or[green,size1]]]],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:or[%s,%s];4:green;4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[size3,nand[not[circle],and[rectangle,triangle]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:nand[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,or[not[triangle],not[and[curry[size-gt,iota(filter(x.s, size1))],and[blue,curry[same_size,x.o]]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:triangle;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,or[green,or[size2,size1]]],iota(filter(filter(filter(filter(filter(x.s, implies[size3,blue]), size1), implies[blue,rectangle]), or[curry[same_color,x.o],not[curry[same_size,x.o]]]), curry[same_size,x.o])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:green;4:or[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:blue;4:size1;4:implies[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(not[implies[and[rectangle,blue],size3]],iota(filter(x.s, and[curry[same_color,x.o],not[not[size1]]])))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:not[%s];4:size1
'λx.apply(or[triangle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, blue), size2), green), and[size2,rectangle]), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:green;4:and[%s,%s];4:size2;4:rectangle;4:rectangle
'λx.apply(not[curry[size-lt,iota(filter(filter(x.s, or[or[size1,or[size2,green]],size1]), circle))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:size2;4:green;4:size1;4:circle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(curry[same_shape,iota(x.s)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(not[nor[green,size1]],filter(filter(x.s, green), size3))'	0:forall(%s,%s);4:not[%s];4:nor[%s,%s];4:green;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(implies[circle,not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.forall(rectangle,filter(filter(x.s, not[triangle]), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1
'λx.apply(nor[or[size2,and[green,curry[size-geq,x.o]]],or[yellow,and[or[blue,not[triangle]],and[and[or[curry[same_color,iota(x.s)],circle],green],size1]]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(and[and[not[circle],blue],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size3), curry[same_color,iota(x.s)]), size2), green), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:green;4:green
'λx.contains(iota(filter(x.s, and[green,yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(filter(x.s, nand[curry[same_color,x.o],size1]), size2))],iota(filter(x.s, or[rectangle,not[or[yellow,size1]]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:yellow;4:size1
'λx.apply(not[and[triangle,not[size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[circle,yellow],iota(filter(x.s, and[rectangle,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle
'λx.apply(not[yellow],x.o)'	0:apply(%s,%s);4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(implies[circle,and[curry[same_shape,iota(filter(x.s, and[size2,size1]))],green]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;4:green;1:%s.o;2:x
'λx.apply(nand[circle,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), size2), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:size3
'λx.apply(and[blue,size2],iota(filter(x.s, and[or[size2,rectangle],yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:yellow
'λx.apply(and[green,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[or[curry[size-leq,x.o],yellow],iff[curry[same_shape,iota(x.s)],size2]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:yellow;4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, circle), circle), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:size3
'λx.exists(and[or[circle,size3],green], filter(x.s, size3))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nor[not[size1],or[and[green,not[and[yellow,yellow]]],size3]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:yellow;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(nor[curry[same_size,x.o],not[circle]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), curry[size-leq,x.o]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[yellow,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[yellow,and[and[or[and[rectangle,triangle],or[not[curry[same_size,x.o]],yellow]],yellow],blue]],and[not[and[size3,yellow]],blue]],iota(filter(x.s, and[size2,size1])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;4:yellow;4:blue;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, implies[size3,blue]), yellow), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:blue;4:yellow;4:triangle
'λx.apply(or[yellow,or[and[size3,and[size1,circle]],or[and[or[green,or[size3,and[yellow,and[circle,yellow]]]],green],size3]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:circle;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:yellow;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(curry[same_color,x.o], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(curry[same_color,iota(x.s)],iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(nor[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, and[or[or[circle,size3],blue],or[yellow,circle]]), blue), blue), implies[blue,or[and[triangle,green],yellow]]), curry[same_color,x.o])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:size3;4:blue;4:or[%s,%s];4:yellow;4:circle;4:blue;4:blue;4:implies[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[size2,nor[or[green,and[size2,not[rectangle]]],green]],iota(filter(filter(filter(filter(filter(x.s, size3), size2), triangle), triangle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:nor[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size2;4:not[%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:triangle;4:triangle;4:circle
'λx.apply(circle,iota(filter(filter(x.s, nand[circle,triangle]), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:triangle;4:rectangle
'λx.apply(or[yellow,and[curry[same_shape,iota(filter(x.s, size1))],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[iff[curry[same_shape,x.o],implies[not[blue],and[size1,or[size3,blue]]]],or[curry[same_size,x.o],not[size3]]]), curry[size-leq,iota(filter(filter(filter(x.s, not[not[and[triangle,curry[same_size,x.o]]]]), not[nand[triangle,triangle]]), blue))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:size3;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:nand[%s,%s];4:triangle;4:triangle;4:blue
'λx.contains(iota(filter(filter(x.s, green), circle)), filter(x.s, curry[same_shape,x.o]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, yellow), green), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:triangle
'λx.forall(not[curry[size-geq,iota(x.s)]],x.s)'	0:forall(%s,%s);4:not[%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(implies[size3,not[triangle]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:size3;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(and[blue,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, and[nor[and[blue,size1],and[nor[yellow,size2],blue]],curry[size-leq,iota(filter(x.s, size3))]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:size1;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:size2;4:blue;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(x.s), filter(x.s, not[circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[and[iff[blue,and[rectangle,size1]],or[not[circle],not[rectangle]]],circle],iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:size1;4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(iff[and[curry[same_size,x.o],circle],green],iota(filter(x.s, not[and[and[circle,circle],triangle]])))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:triangle
'λx.contains(iota(filter(filter(filter(x.s, yellow), implies[circle,size1]), or[or[yellow,size3],blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:circle;4:size1;4:or[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:blue;3:%s.s;2:x
'λx.apply(not[not[blue]],iota(filter(x.s, curry[size-geq,iota(filter(x.s, and[and[blue,or[blue,rectangle]],size1]))])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:rectangle;4:size1
'λx.apply(or[green,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[circle,and[size1,not[triangle]]],iota(filter(filter(filter(x.s, iff[nor[size2,not[circle]],yellow]), blue), blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:size1;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nor[%s,%s];4:size2;4:not[%s];4:circle;4:yellow;4:blue;4:blue
'λx.apply(nand[rectangle,nand[and[blue,blue],curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:blue;4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), not[and[yellow,green]])), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(triangle,iota(filter(x.s, implies[yellow,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:size2
'λx.forall(and[size1,rectangle],filter(filter(filter(filter(x.s, rectangle), size3), size3), and[circle,size3]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:size3;4:and[%s,%s];4:circle;4:size3
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(filter(x.s, nand[not[green],and[and[curry[size-leq,x.o],green],rectangle]]), green), curry[same_size,iota(x.s)]), blue), triangle), size1), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:green;4:rectangle;4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:triangle;4:size1;4:rectangle
'λx.apply(and[not[not[curry[same_shape,x.o]]],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[triangle,curry[size-leq,iota(x.s)]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[or[circle,or[green,nand[curry[size-lt,x.o],rectangle]]],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:green;4:nand[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size2,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size3)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[yellow,curry[size-leq,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, size3), and[size1,green]), green), and[and[rectangle,rectangle],or[green,triangle]]), curry[same_color,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:green;4:green;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:or[%s,%s];4:green;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, curry[same_shape,x.o]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.exists(not[size3], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[blue,and[rectangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), rectangle), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:green
'λx.apply(curry[size-leq,x.o],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, and[or[and[green,green],yellow],size2]), or[curry[same_color,iota(filter(x.s, and[and[blue,size3],and[triangle,curry[same_color,x.o]]]))],circle]), triangle), curry[same_color,iota(x.s)]), implies[curry[size-gt,iota(filter(filter(x.s, circle), rectangle))],rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:yellow;4:size2;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:rectangle
'λx.forall(size1,filter(x.s, triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[yellow], filter(filter(x.s, circle), curry[size-lt,x.o]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(and[and[blue,size3],and[size1,and[yellow,and[green,and[circle,blue]]]]],iota(filter(filter(filter(x.s, circle), size2), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size3
'λx.forall(and[blue,rectangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(iff[yellow,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, or[size2,triangle]), and[size1,not[blue]]), not[circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:size1;4:not[%s];4:blue;4:not[%s];4:circle
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, circle), triangle), curry[same_color,x.o]), curry[same_color,x.o])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(implies[and[size2,not[yellow]],not[and[triangle,size3]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size1), size1), size1)), filter(filter(x.s, blue), size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.exists(and[size1,yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:yellow;3:%s.s;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(and[rectangle,triangle],iota(filter(x.s, or[green,and[size1,and[triangle,and[not[curry[same_size,iota(filter(x.s, circle))]],size2]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.exists(iff[green,and[or[size3,and[implies[circle,green],yellow]],green]], filter(filter(x.s, size3), and[size1,or[rectangle,blue]]))'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:implies[%s,%s];4:circle;4:green;4:yellow;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:blue
'λx.exists(or[size2,or[size3,green]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[triangle,and[size2,circle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:circle
'λx.apply(circle,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.empty(filter(filter(filter(x.s, rectangle), triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:green
'λx.apply(triangle,iota(filter(filter(x.s, yellow), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(not[size2],iota(filter(filter(x.s, and[or[curry[size-leq,iota(filter(x.s, green))],triangle],blue]), green)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:blue;4:green
'λx.apply(and[size3,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[and[rectangle,and[green,size3]]],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[size-geq,x.o],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[not[size1],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[curry[same_shape,x.o],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(and[blue,size1],filter(filter(filter(x.s, and[and[triangle,size3],blue]), and[nand[size2,or[yellow,size3]],and[and[size2,nor[and[yellow,green],rectangle]],green]]), size2))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:blue;4:and[%s,%s];4:nand[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:green;4:rectangle;4:green;4:size2
'λx.apply(or[blue,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,or[and[iff[and[yellow,blue],green],blue],or[circle,and[curry[size-lt,iota(filter(x.s, size1))],and[yellow,curry[same_color,x.o]]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:green;4:blue;4:or[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, triangle), blue), nor[yellow,and[circle,circle]]), yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:circle;4:yellow;4:size2
'λx.apply(implies[triangle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, yellow), curry[same_color,iota(filter(filter(filter(x.s, or[curry[same_color,x.o],not[triangle]]), or[curry[size-leq,x.o],and[nand[curry[same_shape,x.o],green],implies[size2,implies[green,yellow]]]]), and[curry[same_size,iota(filter(x.s, not[size2]))],rectangle]))])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:implies[%s,%s];4:size2;4:implies[%s,%s];4:green;4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.forall(and[triangle,size1],filter(x.s, size1))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[and[blue,triangle],and[size2,not[circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, circle), size3), size2)), filter(filter(x.s, triangle), implies[not[iff[green,size2]],curry[size-lt,x.o]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:size2;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[size3,iff[nor[green,yellow],rectangle]]), and[circle,blue]), implies[size3,yellow])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:iff[%s,%s];4:nor[%s,%s];4:green;4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:blue;4:implies[%s,%s];4:size3;4:yellow
'λx.apply(not[and[or[size1,curry[same_size,x.o]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(or[nor[size3,nor[blue,blue]],curry[size-lt,iota(x.s)]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:nor[%s,%s];4:size3;4:nor[%s,%s];4:blue;4:blue;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(x.s, blue))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[curry[same_color,iota(x.s)],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.exists(and[size1,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, rectangle), triangle), green), and[and[rectangle,size1],yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:green;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:yellow
'λx.apply(and[rectangle,not[or[curry[same_size,iota(x.s)],or[implies[nand[triangle,size1],size1],or[triangle,size1]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:triangle;4:size1;4:size1;4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.forall(nand[and[and[circle,rectangle],size1],or[or[size2,rectangle],blue]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:size1;4:or[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:blue;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[circle,triangle])), filter(filter(x.s, or[and[and[green,rectangle],size3],yellow]), size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:size3;4:yellow;4:size1
'λx.apply(and[and[yellow,green],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,size1],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[or[green,size1],or[curry[same_shape,iota(x.s)],iff[size3,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:size1;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,nand[yellow,size2]],iota(filter(filter(filter(x.s, size3), green), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nand[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:circle
'λx.empty(filter(filter(x.s, size2), curry[same_color,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_color,x.o],iota(filter(filter(x.s, green), or[size3,and[green,rectangle]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:rectangle
'λx.apply(or[or[size2,yellow],and[size3,or[triangle,not[blue]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,rectangle],iota(filter(x.s, iff[or[size2,yellow],triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:triangle
'λx.apply(not[rectangle],iota(filter(filter(filter(filter(x.s, implies[rectangle,yellow]), rectangle), not[and[circle,size3]]), nor[and[size2,curry[same_size,iota(x.s)]],size1])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:yellow;4:rectangle;4:not[%s];4:and[%s,%s];4:circle;4:size3;4:nor[%s,%s];4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(x.s, and[curry[same_size,iota(filter(filter(filter(filter(filter(x.s, size3), green), nand[or[and[triangle,rectangle],yellow],triangle]), size3), size2))],rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:yellow;4:triangle;4:size3;4:size2;4:rectangle
'λx.apply(or[not[triangle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(or[implies[iff[green,rectangle],nand[and[circle,yellow],or[size1,implies[circle,and[rectangle,green]]]]],and[and[curry[same_size,iota(x.s)],or[rectangle,and[size1,rectangle]]],not[curry[same_size,x.o]]]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(curry[same_size,x.o],iota(filter(filter(filter(x.s, yellow), size2), size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:size2
'λx.apply(and[yellow,implies[and[blue,curry[same_size,iota(x.s)]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, iff[nand[curry[size-leq,iota(filter(filter(filter(filter(x.s, triangle), rectangle), circle), size3))],iff[not[rectangle],green]],size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:circle;4:size3;4:iff[%s,%s];4:not[%s];4:rectangle;4:green;4:size1
'λx.apply(and[size1,curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), and[circle,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:size1
'λx.apply(implies[size3,curry[same_size,iota(x.s)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(curry[size-leq,x.o],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, size1), or[size3,not[not[circle]]]), not[yellow]), size3), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size3;4:not[%s];4:not[%s];4:circle;4:not[%s];4:yellow;4:size3;4:yellow
'λx.forall(triangle,filter(filter(filter(x.s, size3), size3), and[green,size1]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:and[%s,%s];4:green;4:size1
'λx.apply(not[triangle],iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.forall(implies[blue,green],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(not[and[size1,blue]],iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.empty(filter(filter(x.s, size2), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(and[triangle,and[yellow,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, curry[same_shape,x.o]), green), circle), green), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:circle;4:green;4:green
'λx.forall(and[not[size2],triangle],filter(x.s, size3))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[nand[blue,and[and[and[or[triangle,curry[same_color,x.o]],curry[same_shape,x.o]],rectangle],triangle]],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[curry[size-leq,x.o],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.exists(or[blue,triangle], filter(filter(filter(x.s, size2), green), curry[same_shape,iota(x.s)]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[and[triangle,triangle],curry[same_color,iota(filter(filter(x.s, yellow), size2))]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;1:%s.o;2:x
'λx.exists(or[yellow,iff[triangle,and[and[green,rectangle],blue]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:iff[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:blue;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, not[curry[same_color,iota(filter(x.s, rectangle))]]), green), blue), yellow), curry[same_color,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:blue;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.exists(or[green,size2], filter(filter(x.s, yellow), and[and[rectangle,size1],size1]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:size1
'λx.apply(or[size2,not[and[green,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, curry[size-gt,iota(x.s)]), and[curry[same_size,x.o],size3]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3
'λx.apply(or[size3,curry[same_color,iota(filter(x.s, triangle))]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[blue,triangle],iota(filter(filter(filter(x.s, implies[iff[blue,size3],implies[rectangle,or[or[and[or[size2,yellow],size3],curry[size-leq,x.o]],size3]]]), size1), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:blue;4:size3;4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:size3;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size3;4:size1;4:blue
'λx.forall(or[and[circle,rectangle],size3],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:size3;3:%s.s;2:x
'λx.apply(and[iff[circle,circle],not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:circle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(or[rectangle,or[and[blue,size3],not[and[or[size1,blue],triangle]]]],iota(filter(filter(filter(filter(filter(x.s, or[curry[size-geq,x.o],triangle]), blue), circle), size2), and[size1,green])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:size3;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:triangle;4:blue;4:circle;4:size2;4:and[%s,%s];4:size1;4:green
'λx.contains(iota(x.s), filter(filter(x.s, curry[size-lt,x.o]), or[rectangle,and[size2,rectangle]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(and[or[or[size3,size2],green],or[implies[rectangle,or[triangle,not[yellow]]],implies[not[iff[rectangle,or[size2,not[or[circle,green]]]]],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:size2;4:green;4:or[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:not[%s];4:yellow;4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:circle;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(and[and[and[size1,not[and[nor[circle,green],blue]]],and[curry[same_color,x.o],blue]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:green;4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[size1,implies[circle,and[triangle,circle]]],iota(filter(filter(filter(filter(x.s, size2), size3), nor[size1,size3]), green)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:nor[%s,%s];4:size1;4:size3;4:green
'λx.apply(curry[same_shape,iota(filter(x.s, or[size3,size2]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, or[and[not[not[triangle]],rectangle],not[not[blue]]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:triangle;4:rectangle;4:not[%s];4:not[%s];4:blue
'λx.apply(or[or[not[not[circle]],not[size1]],nand[and[size3,iff[size1,or[circle,size1]]],not[rectangle]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:not[%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:size3;4:iff[%s,%s];4:size1;4:or[%s,%s];4:circle;4:size1;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, and[size1,size3]), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;4:size3
'λx.contains(x.o, filter(filter(x.s, and[yellow,blue]), and[rectangle,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), curry[same_size,iota(x.s)]), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), triangle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:green
'λx.apply(and[circle,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.exists(blue, filter(filter(filter(x.s, or[size1,size1]), size2), blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size1;4:size2;4:blue
'λx.apply(nor[curry[same_color,x.o],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size3), yellow)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[not[curry[same_shape,x.o]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,iota(filter(filter(x.s, iff[and[rectangle,and[size3,not[rectangle]]],size2]), not[size2]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:not[%s];4:rectangle;4:size2;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[size3,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(and[size2,and[not[or[circle,and[size3,yellow]]],triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:size3;4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(iff[or[blue,and[triangle,size1]],and[rectangle,yellow]],iota(filter(x.s, and[green,and[size2,size1]])))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size1
'λx.apply(and[and[not[yellow],triangle],or[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:triangle;4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, curry[same_shape,iota(filter(filter(filter(x.s, yellow), blue), circle))]), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:circle;4:circle
'λx.exists(or[size1,not[triangle]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(and[yellow,or[yellow,and[and[or[circle,blue],and[green,circle]],circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:and[%s,%s];4:green;4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[not[size2],size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size2;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), not[not[rectangle]])), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(iff[blue,triangle], filter(filter(x.s, circle), yellow))'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(size1,iota(filter(filter(filter(x.s, green), size3), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:size1
'λx.apply(and[rectangle,curry[size-lt,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(size2,iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.exists(green, x.s)'	0:exists(%s, %s);4:green;3:%s.s;2:x
'λx.forall(not[triangle],filter(filter(x.s, circle), size1))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(or[circle,not[or[green,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(rectangle,iota(filter(x.s, and[size3,curry[same_shape,x.o]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(nor[size1,and[or[yellow,size3],and[circle,and[size1,and[and[triangle,nand[iff[not[triangle],curry[same_shape,x.o]],size1]],size1]]]]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:iff[%s,%s];4:not[%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, size2), circle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:triangle
'λx.apply(not[and[blue,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[and[yellow,blue],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, or[rectangle,or[yellow,curry[same_color,x.o]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, blue), and[and[size1,and[green,curry[same_size,iota(x.s)]]],size3]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3
'λx.forall(iff[rectangle,size2],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(or[triangle,curry[same_shape,iota(filter(x.s, size3))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, blue), size1), yellow), or[or[blue,circle],and[or[not[not[rectangle]],yellow],size1]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:yellow;4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:yellow;4:size1
'λx.apply(and[and[circle,blue],and[size3,and[size1,size3]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[green,yellow],iota(filter(filter(x.s, size2), curry[same_size,iota(filter(filter(filter(filter(x.s, size2), triangle), not[triangle]), or[and[size2,size2],or[blue,size3]]))])))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:not[%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:or[%s,%s];4:blue;4:size3
'λx.apply(and[circle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(iff[nand[size1,size2],size3],iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:size1;4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(not[or[size2,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(and[curry[same_size,iota(filter(filter(filter(filter(filter(filter(filter(x.s, curry[same_shape,iota(filter(filter(filter(filter(filter(filter(x.s, green), yellow), green), green), yellow), or[curry[same_size,x.o],and[size3,not[triangle]]]))]), green), triangle), not[not[green]]), rectangle), triangle), rectangle))],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:green;4:green;4:yellow;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:not[%s];4:triangle;4:green;4:triangle;4:not[%s];4:not[%s];4:green;4:rectangle;4:triangle;4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, triangle), not[and[size2,rectangle]]), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:and[%s,%s];4:size2;4:rectangle;4:blue
'λx.exists(and[not[size2],circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size2;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, triangle), yellow), green), curry[size-gt,x.o]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:green;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, curry[same_color,x.o]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(and[or[and[blue,triangle],yellow],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[green,or[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, blue), yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(implies[and[iff[not[size3],not[and[not[and[green,nor[curry[same_size,x.o],triangle]]],and[triangle,or[rectangle,and[size2,size3]]]]]],yellow],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:size3;4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:size3;4:yellow;4:green;1:%s.o;2:x
'λx.apply(nand[rectangle,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, blue), yellow), size1), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:size1;4:blue
'λx.apply(or[circle,and[and[triangle,size2],and[green,size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.exists(not[blue], x.s)'	0:exists(%s, %s);4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(filter(x.s, green), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(and[not[or[size3,curry[same_size,iota(filter(x.s, and[nor[size1,yellow],not[and[curry[same_color,x.o],size1]]]))]]],implies[triangle,and[size3,green]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:size1;4:yellow;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(and[green,and[size2,size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size1;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, curry[size-geq,iota(x.s)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(not[iff[and[yellow,triangle],not[curry[same_color,iota(filter(x.s, nor[triangle,iff[not[size2],triangle]]))]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:iff[%s,%s];4:not[%s];4:size2;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size2,circle]), and[size2,and[circle,green]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:green
'λx.apply(nor[triangle,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[size3,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(implies[implies[size3,blue],and[size1,circle]],iota(filter(filter(filter(x.s, iff[and[or[and[size3,green],and[nor[blue,circle],not[size1]]],curry[same_color,x.o]],green]), and[size3,curry[same_shape,x.o]]), size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:not[%s];4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(nor[and[triangle,green],size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nand[and[size1,size2],size3],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size1;4:size2;4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(yellow,iota(filter(filter(filter(x.s, curry[same_shape,x.o]), size2), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:green
'λx.apply(or[triangle,blue],iota(filter(filter(filter(x.s, and[circle,size2]), curry[same_color,iota(filter(x.s, and[curry[size-leq,x.o],size2]))]), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size2;4:yellow
'λx.apply(and[circle,not[green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[triangle,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size1), curry[same_color,x.o]), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle
'λx.contains(iota(filter(filter(x.s, or[not[size2],not[curry[same_color,iota(x.s)]]]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size2;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(x.s, or[and[rectangle,yellow],yellow]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:yellow;4:blue
'λx.apply(not[size2],iota(filter(filter(filter(filter(filter(filter(x.s, not[curry[same_size,x.o]]), not[and[green,nor[not[blue],iff[circle,curry[same_color,x.o]]]]]), triangle), size3), and[rectangle,implies[rectangle,size2]]), circle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:not[%s];4:blue;4:iff[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;4:size3;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:rectangle;4:size2;4:circle
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(or[blue,yellow],filter(x.s, not[size1]))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.forall(rectangle,filter(filter(x.s, size1), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.contains(iota(filter(filter(x.s, size3), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;3:%s.s;2:x
'λx.apply(and[nand[rectangle,and[and[size1,not[circle]],and[size1,size1]]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:circle;4:and[%s,%s];4:size1;4:size1;4:size2;1:%s.o;2:x
'λx.exists(or[triangle,curry[same_size,x.o]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[curry[same_color,iota(filter(x.s, circle))],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size1), not[triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:triangle
'λx.forall(and[nor[or[triangle,rectangle],not[rectangle]],yellow],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:not[%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.forall(nor[size2,curry[same_shape,x.o]],filter(x.s, circle))'	0:forall(%s,%s);4:nor[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[curry[same_color,x.o],implies[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, size1), yellow), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:rectangle
'λx.apply(triangle,iota(filter(x.s, curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.forall(size1,filter(x.s, and[and[and[triangle,blue],circle],curry[size-leq,iota(x.s)]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:circle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[rectangle,size2],and[rectangle,nand[size1,blue]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(or[size3,green],filter(filter(x.s, or[curry[same_color,iota(x.s)],yellow]), size1))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(triangle,iota(filter(filter(filter(x.s, curry[same_shape,x.o]), circle), not[and[size1,rectangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:not[%s];4:and[%s,%s];4:size1;4:rectangle
'λx.exists(nand[circle,size3], filter(filter(x.s, size1), and[or[yellow,blue],triangle]))'	0:exists(%s, %s);4:nand[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:triangle
'λx.apply(curry[size-geq,x.o],iota(filter(filter(x.s, implies[curry[same_color,x.o],circle]), yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle;4:yellow
'λx.apply(implies[not[green],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(implies[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(implies[rectangle,and[and[curry[same_size,x.o],green],curry[same_color,iota(filter(x.s, circle))]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.forall(curry[same_shape,iota(filter(filter(x.s, implies[and[size2,green],and[blue,size1]]), or[size2,circle]))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size2;4:green;4:and[%s,%s];4:blue;4:size1;4:or[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(curry[same_color,x.o],iota(filter(filter(filter(filter(x.s, triangle), rectangle), size2), not[or[or[and[curry[same_size,iota(x.s)],and[size1,size3]],curry[same_shape,iota(filter(x.s, iff[rectangle,size1]))]],yellow]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:size2;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:size1;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), and[not[circle],curry[size-lt,x.o]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:not[%s];4:circle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(curry[size-geq,iota(filter(x.s, implies[or[size1,or[yellow,implies[yellow,green]]],not[circle]]))],iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:implies[%s,%s];4:yellow;4:green;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(rectangle,iota(filter(x.s, curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), and[green,rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:green;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, curry[same_shape,iota(x.s)]), triangle), not[size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:not[%s];4:size3
'λx.apply(nand[yellow,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), not[or[triangle,and[size1,rectangle]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(curry[same_shape,iota(filter(x.s, rectangle))],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(implies[curry[same_shape,iota(filter(x.s, size1))],not[not[blue]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,yellow],iota(filter(filter(filter(x.s, rectangle), yellow), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:size1
'λx.contains(iota(filter(x.s, or[size1,nor[triangle,triangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:nor[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, not[not[and[circle,rectangle]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:circle;4:rectangle
'λx.apply(and[yellow,not[triangle]],iota(filter(filter(x.s, green), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, size2), blue), size3))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,blue],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(not[or[size2,not[size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[curry[same_color,iota(x.s)],or[yellow,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[nor[yellow,and[triangle,size1]],and[size3,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[or[nand[and[curry[same_shape,iota(x.s)],green],rectangle],circle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:rectangle;4:circle;4:size1;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size2), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(curry[same_size,x.o],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size1,curry[size-geq,x.o]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, triangle), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.forall(rectangle,filter(x.s, curry[same_size,iota(x.s)]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(x.s, yellow), rectangle), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:size3
'λx.apply(and[and[triangle,size1],blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[curry[same_shape,iota(filter(x.s, circle))],and[nor[size2,circle],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:nor[%s,%s];4:size2;4:circle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), triangle), nand[circle,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:nand[%s,%s];4:circle;4:size2
'λx.apply(and[curry[same_size,x.o],nand[rectangle,and[green,circle]]],iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.forall(size1,filter(x.s, nor[circle,size1]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:size1
'λx.apply(size3,iota(filter(filter(filter(x.s, not[blue]), circle), and[circle,or[and[size2,triangle],not[triangle]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle;4:and[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:not[%s];4:triangle
'λx.apply(or[and[circle,size3],curry[same_color,iota(filter(filter(x.s, yellow), and[yellow,curry[same_shape,x.o]]))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(and[rectangle,curry[same_shape,x.o]],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, size2), and[and[green,circle],size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:size3
'λx.empty(filter(filter(filter(x.s, size1), triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:size3
'λx.apply(nor[size2,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(and[rectangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[size3,curry[same_size,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[size1,green]), size3), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:size3;4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, curry[same_size,iota(filter(filter(x.s, green), curry[same_color,x.o]))]), yellow), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;4:triangle
'λx.forall(and[or[not[size2],curry[size-gt,x.o]],size3],filter(x.s, and[size2,yellow]))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow
'λx.apply(yellow,iota(filter(x.s, or[circle,circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle
'λx.apply(curry[same_shape,iota(filter(x.s, and[rectangle,size3]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[nor[nor[and[or[yellow,triangle],size1],nor[curry[size-geq,iota(filter(filter(x.s, size3), and[curry[same_size,iota(x.s)],or[and[rectangle,triangle],or[size2,curry[size-geq,x.o]]]]))],size2]],triangle],rectangle],iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:size1;4:nor[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:size2;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:size2;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(and[size2,rectangle],iota(filter(filter(x.s, or[not[and[blue,yellow]],iff[rectangle,size2]]), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:yellow;4:iff[%s,%s];4:rectangle;4:size2;4:circle
'λx.contains(iota(filter(filter(filter(x.s, iff[triangle,rectangle]), circle), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:rectangle;4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(iff[curry[same_size,x.o],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[circle,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(not[rectangle],filter(filter(x.s, circle), size3))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.contains(x.o, filter(filter(x.s, curry[same_color,iota(x.s)]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue
'λx.apply(and[size1,nor[blue,and[not[or[size2,blue]],or[size1,and[size2,circle]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size2;4:blue;4:or[%s,%s];4:size1;4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[or[size2,and[and[rectangle,and[nand[rectangle,green],and[size1,nand[and[and[size1,and[and[green,iff[rectangle,triangle]],curry[same_color,iota(x.s)]]],triangle],size3]]]],or[and[triangle,and[implies[curry[same_color,x.o],and[rectangle,green]],size3]],size2]]],size2]), not[or[and[size2,size2],yellow]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:rectangle;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:size3;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:green;4:size3;4:size2;4:size2;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:yellow
'λx.forall(and[and[yellow,size3],size1],filter(filter(x.s, and[size2,yellow]), green))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow;4:green
'λx.exists(circle, filter(x.s, triangle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, size1), or[size2,rectangle]), and[size2,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size2;4:rectangle;4:and[%s,%s];4:size2;4:green
'λx.apply(and[not[or[rectangle,rectangle]],and[curry[same_shape,x.o],and[and[or[triangle,blue],or[curry[same_shape,x.o],and[or[blue,triangle],and[or[green,size2],circle]]]],implies[or[size3,green],or[rectangle,curry[same_shape,iota(filter(filter(filter(filter(x.s, size1), yellow), green), size3))]]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:or[%s,%s];4:green;4:size2;4:circle;4:implies[%s,%s];4:or[%s,%s];4:size3;4:green;4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), not[circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:circle
'λx.apply(or[yellow,yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(curry[same_shape,iota(filter(filter(x.s, size1), size2))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[implies[size1,or[green,circle]],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size1;4:or[%s,%s];4:green;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[or[nor[or[and[yellow,yellow],not[implies[green,green]]],or[curry[same_size,x.o],nor[green,and[and[green,size2],or[size3,size3]]]]],size1],not[triangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:not[%s];4:implies[%s,%s];4:green;4:green;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:or[%s,%s];4:size3;4:size3;4:size1;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[size1]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(filter(x.s, green), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.forall(size1,filter(x.s, or[implies[and[size2,green],size3],circle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:green;4:size3;4:circle
'λx.apply(and[iff[and[triangle,green],yellow],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, implies[and[circle,rectangle],rectangle]), blue), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:rectangle;4:blue;4:circle
'λx.apply(and[blue,and[or[size1,not[or[size3,triangle]]],size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:size3;4:triangle;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, nand[yellow,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:rectangle
'λx.apply(not[triangle],iota(filter(x.s, and[green,yellow])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.empty(filter(filter(x.s, circle), curry[size-leq,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[yellow,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(filter(x.s, circle), yellow), not[triangle]), curry[same_size,iota(filter(filter(filter(filter(filter(filter(x.s, yellow), triangle), yellow), green), nor[curry[same_size,iota(filter(filter(x.s, triangle), circle))],and[triangle,circle]]), size2))]), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:not[%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:yellow;4:green;4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:and[%s,%s];4:triangle;4:circle;4:size2;4:circle
'λx.apply(and[or[rectangle,circle],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size1), curry[same_shape,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[size-gt,x.o], filter(x.s, curry[size-leq,iota(x.s)]))'	0:exists(%s, %s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[rectangle,rectangle],and[triangle,nor[rectangle,or[rectangle,size1]]]],iota(filter(x.s, iff[size1,or[rectangle,size3]])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:size3
'λx.apply(not[triangle],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(curry[same_color,x.o],iota(filter(x.s, and[curry[same_size,iota(x.s)],and[green,size2]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, size3), triangle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:circle
'λx.empty(filter(x.s, curry[same_size,iota(filter(x.s, or[or[size1,yellow],green]))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:green
'λx.apply(nand[not[blue],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:green
'λx.apply(and[not[rectangle],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, triangle), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(and[and[nand[not[rectangle],or[and[yellow,and[rectangle,green]],rectangle]],circle],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:green;4:rectangle;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[and[blue,size1],and[size3,triangle]])), filter(filter(x.s, yellow), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:and[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.contains(iota(filter(x.s, iff[size3,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.apply(and[green,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[yellow,green],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(and[and[rectangle,size3],or[not[blue],size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:or[%s,%s];4:not[%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(or[size1,green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(x.s, yellow), and[and[triangle,blue],nand[circle,and[rectangle,triangle]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:nand[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(triangle,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(not[circle],iota(filter(filter(x.s, and[and[rectangle,triangle],or[size2,or[size3,rectangle]]]), green)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:rectangle;4:green
'λx.empty(filter(filter(x.s, curry[same_shape,x.o]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[not[or[green,and[or[yellow,size1],not[green]]]],rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:not[%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(and[and[triangle,not[yellow]],or[size1,or[size2,not[yellow]]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:yellow;4:or[%s,%s];4:size1;4:or[%s,%s];4:size2;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(nor[yellow,and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[size1,size3],iota(filter(x.s, or[blue,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.exists(iff[and[size1,curry[same_size,iota(x.s)]],not[not[not[size1]]]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, yellow), implies[size1,size3]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:size1;4:size3
'λx.empty(filter(filter(x.s, blue), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(and[and[size1,not[size1]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:size1;4:yellow;1:%s.o;2:x
'λx.forall(not[triangle],filter(filter(x.s, curry[same_color,x.o]), yellow))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(green,iota(filter(filter(x.s, size2), not[circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:circle
'λx.apply(and[not[triangle],circle],iota(filter(filter(x.s, and[rectangle,size2]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2;4:size1
'λx.apply(and[circle,not[and[not[size1],not[or[rectangle,yellow]]]]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(iff[yellow,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[yellow,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, iff[size1,rectangle]), rectangle), rectangle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:rectangle;4:rectangle;4:rectangle;4:size2
'λx.exists(and[not[size3],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size3;4:blue;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, and[size2,size1]), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;4:circle
'λx.apply(yellow,iota(filter(filter(filter(x.s, or[size1,green]), blue), not[size1])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:blue;4:not[%s];4:size1
'λx.apply(rectangle,iota(filter(x.s, and[size1,nor[and[circle,and[curry[size-lt,iota(x.s)],size1]],and[rectangle,and[green,nand[rectangle,and[circle,circle]]]]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nor[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:circle
'λx.forall(and[rectangle,or[implies[curry[same_size,iota(filter(x.s, and[curry[same_shape,iota(x.s)],triangle]))],not[yellow]],blue]],filter(x.s, blue))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:not[%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), and[size1,size2]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size1;4:size2;4:green
'λx.apply(green,iota(filter(filter(x.s, or[size2,yellow]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:yellow;4:triangle
'λx.apply(size3,iota(filter(x.s, or[and[yellow,circle],not[not[implies[nand[rectangle,triangle],size3]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:not[%s];4:not[%s];4:implies[%s,%s];4:nand[%s,%s];4:rectangle;4:triangle;4:size3
'λx.apply(size1,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[and[and[green,size1],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(x.s, and[size3,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(or[nand[curry[same_size,iota(x.s)],nor[green,or[green,size2]]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:or[%s,%s];4:green;4:size2;4:size3;1:%s.o;2:x
'λx.apply(and[size1,circle],iota(filter(filter(filter(x.s, or[or[and[blue,triangle],and[curry[same_shape,iota(x.s)],rectangle]],size1]), yellow), not[curry[size-leq,iota(x.s)]])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size1;4:yellow;4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[size-lt,iota(filter(filter(x.s, size3), triangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, not[triangle]), curry[same_color,iota(filter(x.s, curry[same_color,x.o]))]), not[or[triangle,size2]]), blue), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:size2;4:blue;4:blue
'λx.apply(or[or[and[circle,blue],triangle],and[curry[same_color,iota(filter(x.s, curry[size-lt,iota(filter(x.s, rectangle))]))],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[or[yellow,or[curry[same_shape,x.o],green]],not[rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), rectangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:rectangle
'λx.forall(not[yellow],filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.forall(blue,filter(filter(filter(x.s, not[size1]), not[rectangle]), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:not[%s];4:rectangle;4:size1
'λx.apply(and[yellow,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[size2,not[green]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(or[size2,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[curry[same_shape,x.o],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],x.o)'	0:apply(%s,%s);4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[size2,triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.empty(filter(filter(filter(x.s, and[size2,triangle]), size3), curry[same_color,x.o]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, or[and[green,size3],and[green,and[curry[same_shape,x.o],and[not[size2],triangle]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size2;4:triangle
'λx.apply(or[circle,not[and[size1,size1]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[nor[size2,and[triangle,size3]],triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,circle],iota(filter(filter(x.s, curry[same_color,iota(filter(x.s, and[not[size3],size3]))]), or[yellow,blue])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:size3;4:or[%s,%s];4:yellow;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, or[size1,implies[circle,rectangle]]), and[or[rectangle,triangle],or[and[and[green,size3],yellow],green]]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:yellow;4:green;4:blue
'λx.exists(and[triangle,size1], filter(filter(filter(x.s, yellow), size2), rectangle))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:rectangle
'λx.apply(size3,iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(blue,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.contains(iota(filter(filter(filter(filter(x.s, circle), or[curry[same_shape,iota(filter(x.s, yellow))],not[green]]), rectangle), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:green;4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, not[iff[green,yellow]]), triangle), nand[curry[size-geq,iota(x.s)],size2]), iff[size1,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:green;4:yellow;4:triangle;4:nand[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:size1;4:size2
'λx.apply(or[triangle,curry[same_shape,iota(filter(x.s, or[green,nor[yellow,and[blue,blue]]]))]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[size-gt,iota(filter(filter(filter(x.s, size3), size1), nor[and[triangle,size2],green]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:green;1:%s.o;2:x
'λx.apply(and[or[yellow,yellow],triangle],iota(filter(x.s, iff[green,blue])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:blue
'λx.exists(triangle, x.s)'	0:exists(%s, %s);4:triangle;3:%s.s;2:x
'λx.apply(and[blue,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[or[nand[size1,rectangle],nand[not[size1],blue]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:size1;4:rectangle;4:nand[%s,%s];4:not[%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[not[not[and[triangle,circle]]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:triangle;4:circle;4:size1;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, curry[same_color,iota(filter(filter(filter(x.s, green), curry[same_size,x.o]), not[green]))]), yellow), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:green;4:yellow;4:circle
'λx.forall(size2,filter(x.s, and[triangle,circle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle
'λx.apply(and[blue,and[rectangle,and[not[or[triangle,circle]],curry[same_size,iota(x.s)]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(iff[size1,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, size2), circle), curry[same_color,x.o]), triangle), size2), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;4:size2;4:size2
'λx.apply(not[or[size1,rectangle]],iota(filter(filter(x.s, size2), or[not[size3],circle])))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:not[%s];4:size3;4:circle
'λx.apply(size3,iota(filter(filter(filter(x.s, and[not[green],rectangle]), not[triangle]), and[size1,green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:rectangle;4:not[%s];4:triangle;4:and[%s,%s];4:size1;4:green
'λx.forall(and[and[size1,rectangle],triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(curry[size-gt,x.o],iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(size2,iota(filter(x.s, and[green,nor[blue,and[and[rectangle,blue],rectangle]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:nor[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:rectangle
'λx.apply(or[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[blue]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:blue
'λx.apply(not[curry[same_size,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), triangle), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:size3
'λx.apply(or[blue,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[circle,and[blue,rectangle]],iota(filter(filter(x.s, green), iff[and[or[or[rectangle,size3],not[yellow]],not[or[rectangle,iff[size3,size2]]]],and[size2,or[size2,yellow]]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:not[%s];4:yellow;4:not[%s];4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:size3;4:size2;4:and[%s,%s];4:size2;4:or[%s,%s];4:size2;4:yellow
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), green), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:size3
'λx.apply(curry[same_color,iota(filter(x.s, size3))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,x.s)'	0:forall(%s,%s);4:size3;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[not[and[and[green,circle],blue]],and[green,yellow]]), or[curry[same_size,iota(x.s)],or[or[size2,not[curry[same_shape,x.o]]],and[yellow,curry[same_shape,x.o]]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:blue;4:and[%s,%s];4:green;4:yellow;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.exists(not[or[rectangle,and[curry[same_shape,iota(x.s)],triangle]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size2), and[green,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:green
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, green), size2), blue), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:blue;4:size1
'λx.apply(and[not[and[size2,size3]],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, blue), yellow), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:green
'λx.apply(and[size2,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(or[not[iff[and[green,not[size3]],size3]],or[size3,green]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:size3;4:size3;4:or[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(filter(x.s, not[size2]), and[or[rectangle,rectangle],green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:green
'λx.apply(green,iota(filter(filter(filter(x.s, triangle), curry[size-gt,x.o]), implies[blue,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:implies[%s,%s];4:blue;4:yellow
'λx.apply(curry[same_color,iota(filter(x.s, curry[same_size,x.o]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[curry[same_size,x.o]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(curry[size-geq,x.o],iota(filter(x.s, not[and[triangle,circle]])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:triangle;4:circle
'λx.apply(curry[size-geq,iota(x.s)],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, and[yellow,size3])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[triangle,circle]), not[yellow]), implies[and[size1,size1],triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:circle;4:not[%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:size1;4:size1;4:triangle
'λx.apply(and[blue,and[rectangle,not[and[yellow,and[curry[size-gt,iota(filter(filter(x.s, curry[size-lt,iota(filter(x.s, green))]), triangle))],nor[not[green],and[green,blue]]]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:nor[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, blue), and[yellow,yellow])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(iff[and[rectangle,green],iff[not[yellow],size3]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:iff[%s,%s];4:not[%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size2,blue],filter(x.s, size1))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(curry[same_color,iota(filter(x.s, rectangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(and[not[blue],blue],filter(filter(x.s, or[circle,and[and[nor[circle,blue],rectangle],size1]]), or[triangle,size3]))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:rectangle;4:size1;4:or[%s,%s];4:triangle;4:size3
'λx.apply(blue,iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, or[blue,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow
'λx.apply(or[circle,green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[curry[size-gt,x.o],or[not[yellow],size3]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, and[not[and[triangle,rectangle]],blue]), rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;4:blue;4:rectangle
'λx.apply(iff[and[and[green,not[or[blue,and[rectangle,rectangle]]]],rectangle],size1],iota(filter(filter(x.s, not[size1]), blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:rectangle;4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue
'λx.exists(nor[not[nand[and[green,or[size1,triangle]],size3]],curry[same_size,x.o]], filter(x.s, blue))'	0:exists(%s, %s);4:nor[%s,%s];4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:triangle;4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(circle,iota(filter(x.s, nor[not[blue],blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:blue;4:blue
'λx.apply(green,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, and[curry[same_color,iota(filter(x.s, circle))],green]), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:yellow
'λx.apply(or[and[size2,circle],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,curry[same_size,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[yellow,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[curry[same_size,iota(x.s)],and[circle,not[curry[same_color,iota(x.s)]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[implies[curry[same_color,iota(x.s)],size1],rectangle],iota(filter(filter(x.s, not[and[circle,green]]), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:green;4:yellow
'λx.forall(not[rectangle],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(implies[size3,iff[yellow,triangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:iff[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, triangle), size3), not[size3]), yellow), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:not[%s];4:size3;4:yellow;4:size3
'λx.apply(and[size2,and[rectangle,not[and[size2,and[blue,yellow]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[rectangle,and[and[circle,curry[same_color,iota(x.s)]],not[size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size3;4:yellow
'λx.contains(iota(filter(x.s, blue)), filter(filter(x.s, circle), and[not[and[yellow,and[size1,nor[size2,size2]]]],size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:nor[%s,%s];4:size2;4:size2;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(x.s, yellow), size2), triangle), size2), yellow), implies[or[and[not[triangle],curry[same_shape,iota(filter(x.s, or[size3,size2]))]],circle],size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:triangle;4:size2;4:yellow;4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2;4:circle;4:size2
'λx.contains(x.o, filter(filter(x.s, green), or[or[and[size1,size2],circle],triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:size2;4:circle;4:triangle
'λx.apply(and[rectangle,size2],iota(filter(filter(filter(filter(filter(filter(x.s, blue), blue), circle), blue), circle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:circle;4:blue;4:circle;4:circle
'λx.apply(circle,iota(filter(filter(x.s, or[curry[same_size,x.o],size1]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1;4:yellow
'λx.apply(iff[triangle,green],iota(filter(filter(filter(filter(filter(filter(x.s, not[nand[and[and[or[green,not[and[curry[same_size,x.o],size3]]],circle],size1],and[size3,size2]]]), circle), not[not[circle]]), size2), triangle), nand[size3,rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;4:circle;4:size1;4:and[%s,%s];4:size3;4:size2;4:circle;4:not[%s];4:not[%s];4:circle;4:size2;4:triangle;4:nand[%s,%s];4:size3;4:rectangle
'λx.apply(blue,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(or[and[size2,size3],and[nor[and[size3,triangle],size3],not[and[triangle,rectangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:size3;4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[not[and[nor[size3,rectangle],green]],circle],iota(filter(filter(filter(x.s, implies[not[green],not[circle]]), or[not[not[size3]],green]), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:rectangle;4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:green;4:not[%s];4:circle;4:or[%s,%s];4:not[%s];4:not[%s];4:size3;4:green;4:size3
'λx.forall(iff[or[size2,blue],green],filter(filter(x.s, circle), rectangle))'	0:forall(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:size2;4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, triangle), or[size2,rectangle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size2;4:rectangle
'λx.apply(curry[same_size,iota(filter(x.s, circle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,and[implies[rectangle,size3],and[size3,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, triangle), implies[and[green,green],nand[rectangle,rectangle]]), blue), nor[size1,blue]), nor[green,green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:green;4:green;4:nand[%s,%s];4:rectangle;4:rectangle;4:blue;4:nor[%s,%s];4:size1;4:blue;4:nor[%s,%s];4:green;4:green
'λx.contains(iota(filter(x.s, rectangle)), filter(filter(filter(filter(x.s, and[size2,size3]), or[rectangle,and[yellow,green]]), iff[size1,not[size3]]), green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:green;4:iff[%s,%s];4:size1;4:not[%s];4:size3;4:green
'λx.apply(green,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(x.s, and[size3,circle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;4:yellow
'λx.exists(and[size2,size1], filter(filter(filter(filter(filter(filter(filter(x.s, circle), yellow), or[size1,size2]), blue), blue), size3), blue))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:or[%s,%s];4:size1;4:size2;4:blue;4:blue;4:size3;4:blue
'λx.apply(nor[size3,blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[blue,not[triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(curry[same_color,x.o],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(curry[size-leq,x.o],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(circle, filter(filter(filter(x.s, size1), rectangle), green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, size3), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(nand[not[rectangle],size3],iota(filter(x.s, and[not[circle],size3])))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:size3
'λx.exists(yellow, filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.contains(x.o, filter(x.s, not[curry[same_shape,x.o]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(nand[blue,and[yellow,circle]],iota(filter(x.s, curry[size-gt,iota(filter(x.s, rectangle))])))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[size1,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(and[and[not[rectangle],and[and[yellow,and[blue,size2]],blue]],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:size2;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,or[and[and[and[circle,or[triangle,green]],blue],iff[circle,yellow]],and[yellow,green]]],filter(filter(x.s, iff[curry[same_shape,x.o],curry[same_size,x.o]]), and[nor[triangle,and[blue,curry[same_color,x.o]]],green]))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:green;4:blue;4:iff[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green
'λx.forall(yellow,filter(filter(filter(x.s, size2), and[circle,rectangle]), green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:rectangle;4:green
'λx.apply(size1,iota(filter(filter(x.s, curry[same_shape,iota(filter(filter(filter(x.s, and[triangle,yellow]), triangle), curry[same_color,iota(filter(x.s, size2))]))]), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(iff[size2,not[size3]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[and[and[not[iff[green,not[and[rectangle,triangle]]]],triangle],curry[same_color,x.o]],not[size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(not[circle],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[green,not[blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[green,or[blue,size3]],iota(filter(x.s, and[not[green],blue])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:blue
'λx.forall(implies[blue,size2],filter(filter(filter(filter(filter(x.s, circle), implies[not[curry[same_size,x.o]],or[curry[same_size,iota(filter(filter(filter(x.s, yellow), rectangle), green))],triangle]]), size2), blue), and[or[and[green,curry[size-geq,iota(x.s)]],size2],size3]))'	0:forall(%s,%s);4:implies[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:green;4:triangle;4:size2;4:blue;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size2;4:size3
'λx.exists(triangle, filter(x.s, size2))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(x.s, circle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(or[and[size3,circle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:circle;1:%s.o;2:x
'λx.exists(and[rectangle,and[triangle,triangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(or[circle,or[size3,yellow]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(x.s, blue), curry[same_shape,x.o])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.forall(nand[rectangle,iff[blue,and[circle,yellow]]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:rectangle;4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.apply(iff[yellow,size1],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(blue,filter(x.s, circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[and[size1,or[size2,blue]],curry[same_size,iota(x.s)]],green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:size2;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.exists(green, filter(filter(x.s, and[size2,size3]), not[not[rectangle]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:not[%s];4:not[%s];4:rectangle
'λx.empty(filter(filter(x.s, not[size1]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(or[not[nand[and[and[or[green,and[circle,rectangle]],nor[rectangle,iff[and[size1,or[curry[same_size,x.o],triangle]],and[size1,and[yellow,size2]]]]],and[curry[same_shape,iota(x.s)],and[curry[same_shape,iota(filter(x.s, triangle))],yellow]]],yellow]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:circle;4:rectangle;4:nor[%s,%s];4:rectangle;4:iff[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[triangle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, curry[same_size,iota(x.s)]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(x.s, or[size2,nor[triangle,and[or[size3,size1],size2]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:nor[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:size1;4:size2
'λx.apply(and[triangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(curry[same_color,iota(x.s)],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, yellow), implies[yellow,rectangle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:yellow;4:rectangle
'λx.forall(green,filter(filter(filter(x.s, and[size3,and[nor[curry[same_shape,iota(x.s)],not[blue]],size2]]), green), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue;4:size2;4:green;4:size2
'λx.apply(size1,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size1,and[or[size3,triangle],size3]],iota(filter(filter(x.s, and[size2,size3]), not[triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size3;4:not[%s];4:triangle
'λx.apply(or[curry[same_color,x.o],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(x.s, rectangle), rectangle), and[rectangle,rectangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:and[%s,%s];4:rectangle;4:rectangle
'λx.exists(or[blue,yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.apply(implies[rectangle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[and[circle,circle],rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(size3,iota(filter(filter(filter(x.s, circle), size1), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:circle
'λx.apply(and[rectangle,or[green,triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[iff[size3,and[yellow,size1]],curry[size-leq,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size1;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(or[or[triangle,rectangle],curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size3), size2), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:circle
'λx.apply(not[green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[size2,implies[size2,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:implies[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[curry[size-lt,iota(filter(x.s, circle))],yellow]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[yellow,curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, or[not[circle],and[size1,size3]]), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:size1;4:size3;4:rectangle
'λx.apply(and[or[size2,green],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:green;4:rectangle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(not[triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[size2,yellow],iota(filter(filter(filter(filter(x.s, yellow), or[and[triangle,triangle],and[rectangle,yellow]]), nor[rectangle,circle]), size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:rectangle;4:yellow;4:nor[%s,%s];4:rectangle;4:circle;4:size2
'λx.forall(nor[yellow,and[and[rectangle,triangle],size2]],filter(x.s, and[and[or[circle,green],rectangle],yellow]))'	0:forall(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:rectangle;4:yellow
'λx.apply(or[circle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.forall(not[circle],filter(filter(x.s, and[not[size2],or[green,triangle]]), blue))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:green;4:triangle;4:blue
'λx.forall(triangle,filter(filter(x.s, blue), green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.forall(not[and[and[rectangle,and[size2,curry[same_color,iota(x.s)]]],curry[same_shape,x.o]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(size2, filter(x.s, size3))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(filter(x.s, size2), and[green,yellow]), yellow)), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[curry[same_color,iota(filter(filter(filter(x.s, circle), triangle), curry[size-gt,iota(x.s)]))],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(or[size3,not[nand[blue,and[rectangle,or[and[or[not[yellow],yellow],circle],and[yellow,and[yellow,size3]]]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:yellow;4:circle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[and[blue,size2],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,curry[size-geq,iota(x.s)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[and[iff[size2,green],size1],or[and[green,yellow],curry[same_color,iota(filter(filter(filter(x.s, iff[rectangle,nand[size1,not[size1]]]), and[rectangle,circle]), nor[nand[rectangle,size3],size3]))]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size2;4:green;4:size1;4:or[%s,%s];4:and[%s,%s];4:green;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:nand[%s,%s];4:size1;4:not[%s];4:size1;4:and[%s,%s];4:rectangle;4:circle;4:nor[%s,%s];4:nand[%s,%s];4:rectangle;4:size3;4:size3
'λx.contains(x.o, filter(x.s, curry[same_color,iota(filter(x.s, size2))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(x.s, curry[same_shape,iota(x.s)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, circle), size3), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:rectangle
'λx.forall(rectangle,filter(x.s, and[blue,green]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green
'λx.apply(nand[not[not[or[or[size3,and[and[green,size1],triangle]],and[green,triangle]]]],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:triangle;4:and[%s,%s];4:green;4:triangle;4:green;1:%s.o;2:x
'λx.apply(and[yellow,curry[same_color,iota(filter(filter(filter(filter(x.s, circle), curry[same_shape,x.o]), not[circle]), size1))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.forall(or[size3,triangle],filter(x.s, green))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size2), rectangle), green), and[size3,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:green;4:and[%s,%s];4:size3;4:blue
'λx.apply(or[and[rectangle,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, size1), curry[same_shape,iota(x.s)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, size2), green), circle), iff[and[or[rectangle,and[rectangle,iff[implies[or[blue,or[not[size1],size1]],size2],size1]]],circle],curry[same_shape,x.o]]), and[curry[same_color,iota(x.s)],size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:circle;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size1;4:size1;4:size2;4:size1;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(x.s, or[blue,and[nand[triangle,triangle],not[circle]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:nand[%s,%s];4:triangle;4:triangle;4:not[%s];4:circle
'λx.apply(or[rectangle,not[rectangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size2), and[and[or[blue,curry[same_shape,x.o]],size2],yellow]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:yellow;4:yellow
'λx.empty(filter(filter(x.s, and[and[not[blue],triangle],blue]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:triangle;4:blue;4:size2
'λx.apply(green,iota(filter(filter(x.s, not[triangle]), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:rectangle
'λx.forall(circle,filter(x.s, size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, size3), or[or[size3,yellow],size3]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:size3;4:rectangle
'λx.apply(and[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(x.s, size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(filter(x.s, or[size3,green]), circle), triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green;4:circle;4:triangle;4:size3
'λx.apply(size2,iota(filter(filter(x.s, yellow), not[curry[same_shape,iota(filter(x.s, blue))]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(rectangle,filter(filter(filter(x.s, circle), or[size3,green]), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size3;4:green;4:triangle
'λx.forall(green,filter(x.s, size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size3,blue],iota(filter(x.s, not[and[or[triangle,blue],size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:size3
'λx.contains(x.o, filter(filter(x.s, size2), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(or[rectangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, nor[and[circle,triangle],and[blue,size1]]), and[implies[green,and[yellow,size2]],size3]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:blue;4:size1;4:and[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:yellow;4:size2;4:size3
'λx.apply(size3,iota(filter(filter(filter(x.s, nand[curry[same_shape,iota(filter(filter(filter(x.s, or[rectangle,circle]), or[not[triangle],triangle]), size1))],not[size3]]), green), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:or[%s,%s];4:not[%s];4:triangle;4:triangle;4:size1;4:not[%s];4:size3;4:green;4:rectangle
'λx.apply(implies[and[size3,rectangle],yellow],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size3,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(nor[circle,triangle],iota(filter(filter(filter(x.s, size1), green), blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:blue
'λx.apply(and[not[triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(and[size2,or[curry[same_color,x.o],triangle]],filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(and[not[not[size2]],and[green,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:size2;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[iff[implies[size2,size2],green],not[size1]]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:size2;4:size2;4:green;4:not[%s];4:size1;4:yellow
'λx.apply(green,iota(filter(filter(x.s, and[and[size1,size3],circle]), implies[blue,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size3;4:circle;4:implies[%s,%s];4:blue;4:circle
'λx.apply(blue,iota(filter(x.s, or[and[curry[same_shape,x.o],triangle],size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:size1
'λx.exists(curry[size-geq,iota(x.s)], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[not[yellow],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nand[size3,size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,and[and[and[implies[green,size3],circle],size3],and[curry[size-lt,iota(filter(x.s, rectangle))],yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:green;4:size3;4:circle;4:size3;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, green), and[size1,triangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size1;4:triangle
'λx.exists(and[blue,green], filter(filter(x.s, size1), and[implies[or[size3,or[size2,yellow]],or[yellow,nor[circle,blue]]],rectangle]))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:blue;4:rectangle
'λx.apply(curry[size-gt,iota(filter(filter(x.s, triangle), curry[same_size,x.o]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[or[size1,and[green,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, size1), or[circle,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:yellow
'λx.forall(size1,filter(filter(x.s, curry[same_size,iota(filter(x.s, size3))]), not[or[circle,not[implies[green,blue]]]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:or[%s,%s];4:circle;4:not[%s];4:implies[%s,%s];4:green;4:blue
'λx.exists(size2, filter(filter(x.s, curry[same_color,x.o]), size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1
'λx.apply(green,iota(filter(x.s, and[and[curry[same_size,iota(x.s)],size2],not[or[yellow,triangle]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;4:not[%s];4:or[%s,%s];4:yellow;4:triangle
'λx.contains(iota(x.s), filter(filter(x.s, blue), implies[and[or[size2,yellow],or[circle,rectangle]],blue]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:circle;4:rectangle;4:blue
'λx.apply(and[blue,or[triangle,not[and[triangle,curry[same_shape,iota(x.s)]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(and[circle,and[or[curry[same_shape,iota(x.s)],triangle],curry[size-geq,x.o]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[triangle,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, blue), nand[blue,size2]), green), blue)), filter(filter(x.s, curry[same_color,x.o]), not[circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:blue;4:size2;4:green;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(implies[rectangle,or[or[curry[size-geq,iota(filter(x.s, and[and[blue,curry[same_shape,iota(x.s)]],size1]))],circle],triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:circle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size1), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;3:%s.s;2:x
'λx.apply(nor[size3,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(implies[circle,nand[circle,and[curry[same_size,x.o],green]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:nand[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, implies[blue,nor[size3,blue]])), filter(x.s, not[curry[size-gt,x.o]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:nor[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, rectangle), green), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:size2
'λx.apply(nand[iff[size1,circle],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:size1;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(iff[curry[same_size,iota(filter(x.s, size3))],and[rectangle,iff[triangle,triangle]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, not[size1]), not[green]), circle), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:not[%s];4:green;4:circle;4:green
'λx.apply(yellow,iota(filter(filter(filter(x.s, rectangle), size3), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:yellow
'λx.empty(filter(x.s, or[implies[size1,and[green,curry[size-geq,iota(filter(x.s, triangle))]]],triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:size1;4:and[%s,%s];4:green;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(green,iota(filter(filter(filter(x.s, circle), yellow), blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:blue
'λx.apply(rectangle,x.o)'	0:apply(%s,%s);4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[not[curry[same_shape,x.o]],blue]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, triangle), and[green,or[size1,rectangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(and[and[triangle,and[green,not[and[green,circle]]]],size2],iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:green;4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(iff[triangle,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, size2), and[green,and[triangle,and[and[circle,green],rectangle]]]), blue), blue), curry[same_shape,x.o])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:circle;4:green;4:rectangle;4:blue;4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[green,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), yellow), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:circle
'λx.contains(x.o, filter(x.s, size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(triangle,iota(filter(x.s, not[not[green]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:green
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, not[and[blue,nor[not[curry[same_shape,x.o]],triangle]]]), size3), and[rectangle,rectangle]), yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:size3;4:and[%s,%s];4:rectangle;4:rectangle;4:yellow
'λx.apply(nor[circle,and[yellow,green]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[triangle,nor[triangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:nor[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(x.s))'	0:apply(%s,%s);4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, curry[size-geq,x.o]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:rectangle
'λx.apply(and[yellow,curry[same_shape,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), and[not[green],and[or[green,triangle],size1]]), curry[same_shape,x.o])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:or[%s,%s];4:green;4:triangle;4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(nand[size1,not[green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:green;1:%s.o;2:x
'λx.exists(and[circle,and[size2,not[nand[curry[same_shape,iota(filter(filter(filter(x.s, and[and[yellow,or[not[and[triangle,curry[size-geq,x.o]]],green]],triangle]), and[iff[size2,green],circle]), size2))],implies[and[rectangle,rectangle],curry[same_shape,x.o]]]]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:not[%s];4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:green;4:triangle;4:and[%s,%s];4:iff[%s,%s];4:size2;4:green;4:circle;4:size2;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(and[iff[curry[same_shape,iota(filter(x.s, yellow))],and[size3,size3]],green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size3;4:size3;4:green;3:%s.s;2:x
'λx.apply(not[size3],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(curry[same_color,x.o],iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(curry[size-leq,iota(filter(x.s, and[size1,size2]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[size2,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, curry[same_size,x.o])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size1), nand[blue,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nand[%s,%s];4:blue;4:rectangle
'λx.apply(and[circle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(x.s, yellow), and[and[not[blue],triangle],green]), circle), curry[same_color,x.o]), nand[circle,curry[same_size,x.o]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:triangle;4:green;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(or[size1,or[and[implies[blue,size3],rectangle],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:size3;4:rectangle;4:circle;1:%s.o;2:x
'λx.exists(implies[and[size1,blue],circle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:blue;4:circle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, not[and[blue,size2]]), and[or[blue,or[or[not[size1],circle],size2]],green]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:size2;4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:circle;4:size2;4:green;4:blue
'λx.apply(or[yellow,not[and[curry[same_color,x.o],and[not[rectangle],and[green,circle]]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[and[size3,curry[size-gt,x.o]],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(and[circle,or[or[implies[curry[same_size,x.o],blue],size2],curry[same_shape,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[not[nor[size1,size2]],size1],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:size1;4:size2;4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(curry[same_color,iota(filter(x.s, yellow))], filter(x.s, green))'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(nand[not[blue],yellow],filter(x.s, nor[blue,size2]))'	0:forall(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:size2
'λx.empty(filter(x.s, not[size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(and[circle,or[triangle,size2]],iota(filter(filter(x.s, size3), iff[triangle,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:triangle;4:yellow
'λx.apply(circle,iota(filter(filter(filter(x.s, size1), iff[size2,and[size2,curry[same_shape,x.o]]]), and[triangle,and[or[rectangle,and[size1,not[green]]],nor[triangle,or[curry[same_shape,x.o],not[curry[same_color,x.o]]]]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:size2;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:not[%s];4:green;4:nor[%s,%s];4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, rectangle), size1), and[or[blue,yellow],size1]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:size1;4:triangle
'λx.contains(x.o, filter(filter(x.s, blue), or[rectangle,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(not[not[circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[size1,or[green,and[rectangle,and[rectangle,yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,curry[same_color,iota(filter(x.s, yellow))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[or[and[yellow,circle],blue],and[circle,and[curry[same_color,iota(filter(x.s, size1))],implies[size1,triangle]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:implies[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, or[and[rectangle,not[and[size3,rectangle]]],circle]), curry[same_size,x.o]), and[rectangle,and[circle,yellow]]), and[not[not[or[circle,curry[same_shape,x.o]]]],not[or[green,triangle]]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:size3;4:rectangle;4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:green;4:triangle
'λx.contains(x.o, filter(filter(x.s, rectangle), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(nand[or[triangle,and[triangle,or[size2,size3]]],or[not[not[size1]],green]],iota(filter(filter(filter(x.s, or[and[green,not[not[green]]],yellow]), yellow), not[size2])))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:size3;4:or[%s,%s];4:not[%s];4:not[%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:not[%s];4:green;4:yellow;4:yellow;4:not[%s];4:size2
'λx.apply(not[implies[circle,and[and[iff[or[implies[size2,curry[same_size,iota(filter(x.s, green))]],size3],green],and[and[and[size1,yellow],green],yellow]],size2]]],iota(filter(x.s, and[triangle,not[size1]])))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:green;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:size1
'λx.forall(size3,filter(filter(filter(x.s, or[size1,and[green,circle]]), curry[same_color,iota(x.s)]), curry[same_shape,iota(x.s)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[and[blue,iff[not[not[triangle]],nor[and[triangle,rectangle],green]]],rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:iff[%s,%s];4:not[%s];4:not[%s];4:triangle;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, curry[same_shape,iota(filter(filter(filter(x.s, size1), or[size2,and[size3,nand[green,green]]]), circle))]), size2), size1), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:nand[%s,%s];4:green;4:green;4:circle;4:size2;4:size1;4:green
'λx.apply(nor[curry[same_color,x.o],size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(curry[same_shape,iota(x.s)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(green, filter(filter(x.s, triangle), circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(not[blue],iota(filter(filter(filter(x.s, and[and[or[and[size3,yellow],nand[circle,and[size1,size1]]],size1],size3]), circle), green)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:nand[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size1;4:size1;4:size3;4:circle;4:green
'λx.exists(curry[same_size,iota(x.s)], filter(filter(filter(filter(x.s, circle), size3), blue), and[and[size2,or[size1,yellow]],and[size1,blue]]))'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:blue;4:and[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:size1;4:blue
'λx.apply(size3,iota(filter(x.s, and[circle,and[curry[same_size,x.o],size3]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3
'λx.exists(nor[and[yellow,green],or[green,yellow]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:green;4:or[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.apply(or[and[and[curry[size-geq,iota(x.s)],and[yellow,not[size3]]],curry[size-gt,x.o]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:size3;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, and[not[size2],green]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:green
'λx.forall(and[size2,green],filter(filter(filter(x.s, rectangle), size3), blue))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:blue
'λx.empty(filter(filter(x.s, size1), and[green,nor[nand[size1,yellow],and[size1,green]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:green;4:nor[%s,%s];4:nand[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:size1;4:green
'λx.exists(yellow, filter(filter(x.s, size1), curry[same_shape,iota(filter(x.s, yellow))]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(and[and[size3,size2],nand[nor[size1,triangle],or[triangle,rectangle]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size2;4:nand[%s,%s];4:nor[%s,%s];4:size1;4:triangle;4:or[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size3), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(size3,iota(filter(x.s, and[or[or[or[curry[same_color,iota(filter(x.s, curry[same_shape,x.o]))],green],triangle],yellow],size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;4:triangle;4:yellow;4:size2
'λx.exists(or[triangle,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.apply(and[not[green],and[and[yellow,size2],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[yellow,and[and[circle,blue],size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[size-geq,iota(filter(x.s, size3))], filter(x.s, size2))'	0:exists(%s, %s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(rectangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(or[not[yellow],green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:yellow;4:green;3:%s.s;2:x
'λx.empty(filter(x.s, or[and[nand[curry[same_size,x.o],yellow],not[size2]],triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;4:not[%s];4:size2;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, and[triangle,or[size2,triangle]]), blue), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:triangle;4:blue;4:size1
'λx.apply(size2,iota(filter(filter(x.s, not[curry[size-leq,x.o]]), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size2
'λx.apply(and[size1,rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[rectangle],iota(filter(x.s, or[curry[size-lt,iota(x.s)],rectangle])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.forall(nor[blue,size3],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:blue;4:size3;3:%s.s;2:x
'λx.apply(and[rectangle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[rectangle,not[circle]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[yellow,green],or[size3,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, nor[yellow,yellow]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:yellow;4:blue
'λx.apply(or[and[rectangle,size1],triangle],iota(filter(filter(filter(x.s, rectangle), size3), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:circle
'λx.apply(or[and[size1,blue],circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[rectangle,curry[same_size,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, curry[same_size,x.o]), implies[yellow,iff[rectangle,and[curry[size-leq,iota(filter(filter(filter(x.s, rectangle), size1), blue))],and[yellow,rectangle]]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:yellow;4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:blue;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(not[and[green,iff[curry[same_shape,iota(x.s)],circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[rectangle,and[or[triangle,not[size1]],circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size3,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, not[triangle]), not[triangle]), green), nor[rectangle,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:not[%s];4:triangle;4:green;4:nor[%s,%s];4:rectangle;4:blue
'λx.forall(rectangle,filter(filter(filter(x.s, size1), size3), not[and[implies[size2,green],blue]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:size2;4:green;4:blue
'λx.empty(filter(filter(filter(x.s, size2), rectangle), and[blue,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:and[%s,%s];4:blue;4:size3
'λx.apply(and[iff[size3,green],green],iota(filter(filter(x.s, curry[size-geq,iota(x.s)]), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size3;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(not[blue],iota(filter(x.s, and[triangle,curry[same_size,iota(filter(x.s, circle))]])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(x.s, curry[same_shape,x.o]), not[green]), size1), yellow), and[size1,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:green;4:size1;4:yellow;4:and[%s,%s];4:size1;4:green
'λx.apply(and[blue,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[curry[same_color,x.o],size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2
'λx.apply(nor[yellow,yellow],iota(filter(x.s, implies[rectangle,yellow])))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:yellow
'λx.apply(and[size3,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[triangle,circle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:circle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.empty(filter(x.s, triangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, green), triangle), size3), or[or[green,green],green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size3;4:or[%s,%s];4:or[%s,%s];4:green;4:green;4:green
'λx.apply(nor[green,green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size3,not[and[circle,and[size1,size2]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(curry[size-geq,iota(x.s)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[not[and[circle,and[size3,green]]],size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size3;4:green;4:size1;3:%s.s;2:x
'λx.apply(nor[rectangle,curry[same_color,iota(x.s)]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[size3,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size1,and[green,size2]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, and[and[triangle,iff[size3,iff[and[or[and[size3,and[yellow,or[triangle,circle]]],or[size3,size3]],circle],not[curry[same_shape,iota(x.s)]]]]],not[or[size2,or[green,green]]]]), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:size3;4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:circle;4:or[%s,%s];4:size3;4:size3;4:circle;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:green;4:green;4:yellow
'λx.contains(iota(filter(filter(x.s, green), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, circle), and[size3,green]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size3;4:green
'λx.apply(or[and[rectangle,triangle],implies[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:implies[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[curry[size-lt,x.o]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(x.s), filter(x.s, or[blue,circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.empty(filter(filter(filter(filter(x.s, size2), and[circle,size2]), not[blue]), curry[same_size,iota(filter(x.s, rectangle))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:circle;4:size2;4:not[%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(x.s, and[circle,yellow]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:rectangle
'λx.contains(iota(x.s), filter(x.s, curry[size-lt,x.o]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.exists(yellow, filter(x.s, and[iff[yellow,curry[same_size,iota(x.s)]],size1]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(and[yellow,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, not[and[blue,green]]), circle), circle), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:green;4:circle;4:circle;4:blue
'λx.forall(curry[same_color,iota(x.s)],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(or[implies[curry[same_color,x.o],or[size1,nand[and[rectangle,and[rectangle,size2]],and[and[circle,yellow],and[implies[rectangle,circle],size1]]]]],rectangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:size2;4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:circle;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(or[curry[size-geq,iota(filter(filter(filter(x.s, green), size1), blue))],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:blue;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(size1, filter(filter(filter(filter(x.s, size3), size3), yellow), yellow))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:yellow;4:yellow
'λx.contains(x.o, filter(x.s, yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[blue,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size3,green],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, circle), curry[size-leq,x.o]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[size2,and[blue,and[blue,rectangle]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:rectangle
'λx.exists(size2, filter(filter(filter(filter(x.s, circle), curry[same_color,x.o]), size3), and[not[size2],curry[same_shape,x.o]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3;4:and[%s,%s];4:not[%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(curry[size-lt,iota(filter(x.s, circle))],iota(filter(filter(filter(x.s, blue), triangle), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, and[and[yellow,or[not[rectangle],curry[size-gt,x.o]]],yellow]), not[circle]), implies[circle,circle]), circle), nor[size1,not[triangle]]), and[blue,size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:not[%s];4:rectangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:yellow;4:not[%s];4:circle;4:implies[%s,%s];4:circle;4:circle;4:circle;4:nor[%s,%s];4:size1;4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:size2
'λx.apply(circle,iota(filter(filter(x.s, not[curry[same_size,x.o]]), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(and[green,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, green), blue))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue
'λx.exists(size3, filter(filter(filter(filter(x.s, not[not[not[or[and[nor[iff[size1,curry[size-lt,x.o]],or[green,and[size3,not[triangle]]]],not[iff[not[and[circle,blue]],size2]]],circle]]]]), blue), rectangle), size2))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:iff[%s,%s];4:size1;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:not[%s];4:triangle;4:not[%s];4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:blue;4:size2;4:circle;4:blue;4:rectangle;4:size2
'λx.apply(and[and[or[green,not[and[and[not[or[rectangle,or[or[triangle,or[circle,or[rectangle,yellow]]],blue]]],nor[rectangle,rectangle]],implies[curry[same_shape,iota(filter(filter(x.s, size3), not[size2]))],curry[same_size,x.o]]]]],size2],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:yellow;4:blue;4:nor[%s,%s];4:rectangle;4:rectangle;4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size2;4:size2;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, circle), and[blue,green]), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:blue;4:green;4:size3
'λx.empty(filter(filter(x.s, curry[same_size,iota(x.s)]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(or[size2,and[size3,iff[and[triangle,and[not[blue],and[green,size2]]],circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:green;4:size2;4:circle;1:%s.o;2:x
'λx.forall(size2,filter(x.s, and[not[and[rectangle,rectangle]],size2]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;4:size2
'λx.forall(size3,filter(filter(filter(filter(x.s, size3), blue), size3), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size3;4:yellow
'λx.forall(rectangle,filter(x.s, blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(x.s, or[iff[circle,curry[same_shape,x.o]],circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(circle,iota(filter(filter(x.s, not[size2]), not[and[green,and[and[curry[size-lt,iota(x.s)],rectangle],triangle]]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(implies[size1,not[triangle]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[blue],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, size2), triangle), curry[same_color,iota(filter(x.s, circle))]), not[rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle
'λx.apply(and[rectangle,circle],iota(filter(filter(filter(x.s, size3), circle), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:size1
'λx.apply(size3,iota(filter(filter(x.s, or[or[curry[same_size,x.o],size3],and[size3,and[size2,green]]]), nor[not[blue],circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:green;4:nor[%s,%s];4:not[%s];4:blue;4:circle
'λx.apply(not[green],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size2,iff[size1,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(nor[and[size3,blue],rectangle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:blue;4:rectangle;3:%s.s;2:x
'λx.forall(not[or[circle,green]],filter(x.s, nand[size2,and[yellow,triangle]]))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:triangle
'λx.forall(rectangle,x.s)'	0:forall(%s,%s);4:rectangle;3:%s.s;2:x
'λx.apply(and[curry[same_color,iota(filter(x.s, size2))],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[blue,and[or[rectangle,and[not[size2],circle]],size3]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:size2;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size1,curry[same_color,x.o]]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, or[size3,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle
'λx.apply(or[size3,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,not[green]],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.contains(iota(filter(x.s, size2)), filter(filter(filter(filter(x.s, or[size3,triangle]), and[green,and[size2,circle]]), triangle), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:circle;4:triangle;4:yellow
'λx.empty(filter(x.s, not[and[yellow,or[rectangle,and[yellow,and[not[curry[same_color,x.o]],curry[size-leq,iota(filter(x.s, rectangle))]]]]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[not[blue],size2],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(curry[same_size,x.o], filter(x.s, rectangle))'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(blue,filter(filter(x.s, not[nand[size3,circle]]), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:size3;4:circle;4:circle
'λx.apply(nor[curry[same_shape,iota(filter(filter(x.s, and[and[size3,blue],triangle]), green))],size1],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:triangle;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,yellow],iota(filter(filter(filter(x.s, and[not[circle],size2]), size1), and[and[not[yellow],size2],curry[size-gt,x.o]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:size2;4:size1;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:size2;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.apply(or[size2,rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(triangle,filter(filter(filter(x.s, not[size1]), or[size3,and[yellow,triangle]]), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:triangle;4:rectangle
'λx.apply(curry[same_color,x.o],iota(filter(filter(filter(x.s, size1), and[or[and[rectangle,size1],blue],rectangle]), not[size3])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:blue;4:rectangle;4:not[%s];4:size3
'λx.contains(x.o, filter(filter(x.s, yellow), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(implies[and[yellow,size2],circle],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[curry[same_size,x.o],not[circle]],iota(filter(filter(filter(filter(filter(filter(filter(x.s, iff[yellow,yellow]), curry[same_shape,x.o]), yellow), triangle), and[curry[size-geq,iota(x.s)],size2]), yellow), size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size2;4:yellow;4:size3
'λx.apply(or[and[yellow,not[and[curry[size-gt,iota(filter(filter(x.s, circle), nand[green,curry[same_color,iota(filter(filter(x.s, not[circle]), or[or[green,curry[same_color,x.o]],green]))]]))],or[size2,size3]]]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;4:or[%s,%s];4:size2;4:size3;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), blue), and[green,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:and[%s,%s];4:green;4:triangle
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, implies[and[iff[yellow,not[green]],curry[same_size,x.o]],triangle]), and[and[and[not[rectangle],green],and[and[circle,and[yellow,blue]],not[rectangle]]],size1]), green), and[size2,rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:not[%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:blue;4:not[%s];4:rectangle;4:size1;4:green;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(or[not[yellow],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(and[curry[same_size,iota(filter(x.s, size2))],size1],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), circle), or[green,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:or[%s,%s];4:green;4:size2
'λx.apply(and[not[triangle],iff[size3,implies[yellow,size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:iff[%s,%s];4:size3;4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(yellow, filter(filter(filter(x.s, triangle), size2), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:circle
'λx.contains(iota(x.s), filter(filter(x.s, yellow), and[size2,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(and[curry[size-lt,x.o],implies[circle,triangle]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:implies[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[size1,and[and[and[and[size3,blue],triangle],or[size1,size2]],blue]],iota(filter(filter(x.s, and[circle,or[triangle,and[yellow,not[green]]]]), triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:blue;4:triangle;4:or[%s,%s];4:size1;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:not[%s];4:green;4:triangle
'λx.empty(filter(filter(filter(x.s, triangle), green), and[size3,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:and[%s,%s];4:size3;4:blue
'λx.apply(or[triangle,and[green,size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[curry[same_shape,iota(filter(filter(filter(filter(filter(x.s, size2), triangle), and[circle,size3]), and[size1,blue]), triangle))],or[and[yellow,circle],size3]],iota(filter(filter(filter(x.s, yellow), and[curry[size-gt,iota(x.s)],size2]), yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:and[%s,%s];4:circle;4:size3;4:and[%s,%s];4:size1;4:blue;4:triangle;4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size2;4:yellow
'λx.forall(size2,filter(filter(filter(filter(x.s, green), not[size3]), size3), rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size3;4:size3;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), and[blue,green]), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:green;4:rectangle
'λx.exists(green, filter(filter(filter(x.s, triangle), size2), size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:size1
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, not[rectangle]), size1), triangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size1;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, curry[same_shape,x.o]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, curry[same_shape,x.o]), or[not[size3],curry[size-lt,iota(x.s)]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:size3;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size1,curry[same_size,x.o]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[rectangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, not[iff[circle,rectangle]]), blue), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:circle;4:rectangle;4:blue;4:size3
'λx.apply(and[triangle,not[implies[size2,blue]]],iota(filter(x.s, and[size1,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:implies[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.forall(and[and[yellow,green],size3],filter(x.s, and[and[blue,and[size3,rectangle]],not[rectangle]]))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:rectangle;4:not[%s];4:rectangle
'λx.empty(filter(filter(x.s, rectangle), curry[same_shape,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[curry[same_size,x.o],curry[same_shape,x.o]]), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(and[circle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,triangle],iota(filter(x.s, and[size1,curry[same_size,x.o]])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(not[and[size1,or[and[size3,size3],triangle]]],iota(filter(filter(x.s, implies[rectangle,yellow]), or[size3,yellow])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:size3;4:yellow
'λx.exists(or[size1,or[size3,or[size2,rectangle]]], filter(filter(filter(x.s, not[rectangle]), circle), and[size1,and[green,blue]]))'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:or[%s,%s];4:size3;4:or[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:blue
'λx.apply(iff[size2,green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[green,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(filter(filter(x.s, green), circle), and[blue,and[curry[same_color,iota(x.s)],curry[same_shape,x.o]]]), circle), yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:yellow
'λx.apply(and[and[size1,not[green]],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:green;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.contains(iota(x.s), filter(x.s, nand[green,green]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:green
'λx.apply(and[green,and[yellow,yellow]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(green,filter(filter(filter(filter(x.s, nor[yellow,and[iff[yellow,or[triangle,size3]],and[green,green]]]), circle), circle), and[or[circle,blue],yellow]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:green;4:green;4:circle;4:circle;4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:yellow
'λx.contains(iota(filter(filter(x.s, circle), curry[same_color,x.o])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(filter(x.s, not[size1]), or[rectangle,size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:or[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(or[rectangle,or[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[blue,iff[curry[size-leq,iota(x.s)],size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:iff[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, green), size3), rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:rectangle
'λx.apply(and[or[and[yellow,nand[green,rectangle]],circle],and[or[size2,and[green,size2]],yellow]],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:green;4:rectangle;4:circle;4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.empty(filter(filter(x.s, size1), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.forall(curry[same_shape,iota(filter(filter(filter(filter(filter(x.s, curry[same_size,x.o]), not[circle]), size2), size2), blue))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:circle;4:size2;4:size2;4:blue;3:%s.s;2:x
'λx.apply(or[circle,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[circle,nor[curry[same_size,iota(x.s)],size3]],not[blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[not[blue],yellow],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:yellow;4:rectangle;1:%s.o;2:x
'λx.forall(nand[not[nor[size3,curry[same_size,iota(x.s)]]],yellow],filter(filter(x.s, or[or[size3,yellow],not[or[size3,or[not[curry[same_color,iota(filter(x.s, blue))]],yellow]]]]), rectangle))'	0:forall(%s,%s);4:nand[%s,%s];4:not[%s];4:nor[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:not[%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:rectangle
'λx.apply(or[blue,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[size1,rectangle]), nor[not[triangle],yellow]), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle;4:nor[%s,%s];4:not[%s];4:triangle;4:yellow;4:rectangle
'λx.apply(and[and[nand[size2,yellow],and[triangle,triangle]],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:triangle;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[curry[same_color,iota(x.s)]],not[size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[yellow,rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[size1,yellow],and[size3,circle]],iota(filter(filter(filter(x.s, green), curry[same_color,iota(filter(filter(filter(filter(filter(x.s, nand[and[and[rectangle,green],green],iff[blue,size2]]), green), and[not[green],rectangle]), and[and[nand[not[blue],triangle],size1],size3]), not[circle]))]), green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:green;4:iff[%s,%s];4:blue;4:size2;4:green;4:and[%s,%s];4:not[%s];4:green;4:rectangle;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:triangle;4:size1;4:size3;4:not[%s];4:circle;4:green
'λx.apply(and[triangle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), green), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size3
'λx.exists(blue, filter(x.s, size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[iff[and[and[and[rectangle,not[triangle]],implies[not[yellow],not[implies[and[triangle,curry[same_color,x.o]],and[size1,circle]]]]],curry[same_shape,iota(filter(x.s, not[curry[same_color,x.o]]))]],implies[yellow,size2]],not[curry[same_size,iota(x.s)]]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:triangle;4:implies[%s,%s];4:not[%s];4:yellow;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:yellow;4:size2;4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[curry[size-gt,iota(filter(x.s, or[yellow,curry[same_color,iota(filter(x.s, nor[or[triangle,size1],nor[blue,curry[same_color,iota(x.s)]]]))]]))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:nor[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[triangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[or[curry[same_size,x.o],curry[size-lt,iota(filter(x.s, green))]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(and[and[size3,yellow],and[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[circle,triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, size1), green), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size2
'λx.apply(and[and[yellow,triangle],size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[and[size3,circle],implies[blue,curry[same_size,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:implies[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[not[green],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[size1,nor[curry[same_color,iota(filter(filter(x.s, yellow), circle))],not[blue]]],iota(filter(filter(filter(x.s, curry[size-geq,x.o]), green), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:green;4:blue
'λx.apply(and[and[blue,implies[yellow,or[curry[size-geq,iota(x.s)],or[size1,yellow]]]],or[size2,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:or[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:yellow;4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(nand[curry[same_color,x.o],yellow],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[and[triangle,yellow],or[implies[size1,rectangle],or[nand[yellow,and[size2,green]],blue]]],iota(filter(filter(filter(filter(filter(filter(x.s, and[size1,green]), triangle), and[green,and[or[triangle,size3],size1]]), or[size3,triangle]), curry[same_color,iota(filter(x.s, triangle))]), size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:implies[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:triangle;4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:size1;4:or[%s,%s];4:size3;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(green,iota(filter(filter(filter(filter(x.s, yellow), rectangle), rectangle), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:rectangle;4:circle
'λx.forall(triangle,filter(x.s, curry[size-lt,x.o]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, triangle), triangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:green
'λx.apply(circle,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.contains(iota(filter(x.s, rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, and[blue,rectangle]), not[implies[or[green,curry[same_color,iota(filter(x.s, and[size2,triangle]))]],size1]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle;4:size1
'λx.apply(nor[or[size2,blue],triangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size2;4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(green,filter(filter(filter(filter(x.s, green), not[size1]), green), blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size1;4:green;4:blue
'λx.apply(and[blue,curry[size-geq,iota(filter(x.s, not[curry[same_color,x.o]]))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[or[or[green,yellow],triangle],size1],iota(filter(filter(filter(filter(filter(x.s, circle), yellow), not[and[blue,circle]]), circle), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:not[%s];4:and[%s,%s];4:blue;4:circle;4:circle;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, and[circle,or[nor[rectangle,size3],iff[size3,size2]]]), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:size3;4:iff[%s,%s];4:size3;4:size2;4:size3
'λx.apply(and[blue,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[yellow,yellow],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(and[not[size2],curry[same_size,iota(x.s)]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[yellow,size2],iota(filter(x.s, and[triangle,not[circle]])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:not[%s];4:circle
'λx.apply(size1,iota(filter(filter(x.s, rectangle), not[rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:rectangle
'λx.apply(and[not[curry[same_size,x.o]],or[blue,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[and[triangle,green],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:rectangle
'λx.apply(not[and[not[rectangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(x.s, and[blue,curry[same_color,iota(x.s)]]))],iota(filter(filter(x.s, and[size3,size2]), yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2;4:yellow
'λx.exists(not[or[circle,size2]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(filter(x.s, iff[or[not[green],yellow],and[and[yellow,blue],circle]]), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:yellow;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:circle;4:yellow
'λx.apply(circle,iota(filter(x.s, or[size2,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1
'λx.apply(nor[implies[and[curry[same_shape,x.o],and[blue,yellow]],size1],curry[same_shape,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:yellow;4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(curry[size-lt,x.o],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(size3, filter(x.s, curry[same_color,x.o]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, size1), yellow), iff[circle,rectangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:iff[%s,%s];4:circle;4:rectangle
'λx.apply(not[nand[triangle,curry[same_shape,iota(x.s)]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(filter(filter(x.s, yellow), or[not[not[triangle]],yellow]), not[curry[same_color,iota(x.s)]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:not[%s];4:not[%s];4:triangle;4:yellow;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[and[rectangle,rectangle],size2],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(x.s)],iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(size2,iota(filter(x.s, or[circle,rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(implies[green,and[blue,size2]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[green,triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle
'λx.empty(filter(filter(x.s, size2), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(not[and[not[size3],size3]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[triangle,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, nand[size3,curry[same_color,x.o]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(iff[blue,blue],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(or[curry[same_size,x.o],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[size3,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,and[circle,curry[same_shape,iota(filter(x.s, triangle))]]],iota(filter(x.s, and[yellow,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.forall(size1,filter(filter(x.s, and[not[and[and[rectangle,rectangle],not[yellow]]],size3]), not[not[circle]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:yellow;4:size3;4:not[%s];4:not[%s];4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), implies[and[and[size1,yellow],size3],triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:size3;4:triangle
'λx.apply(implies[yellow,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(not[not[curry[same_shape,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size3,blue],iota(filter(filter(filter(filter(filter(x.s, yellow), size3), curry[size-gt,iota(filter(x.s, circle))]), and[size3,blue]), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size3;4:blue;4:yellow
'λx.apply(size1,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, or[not[curry[same_size,iota(filter(filter(filter(x.s, size1), not[triangle]), size1))]],and[size3,size3]]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:triangle;4:size1;4:and[%s,%s];4:size3;4:size3;4:blue
'λx.apply(rectangle,iota(filter(x.s, and[size3,and[size2,circle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:circle
'λx.apply(and[implies[green,and[blue,size3]],implies[and[triangle,size3],size3]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:and[%s,%s];4:blue;4:size3;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[blue,and[size1,iff[green,and[size2,green]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:iff[%s,%s];4:green;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(nand[size1,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nand[size2,or[not[size1],triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:or[%s,%s];4:not[%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(implies[and[not[and[triangle,size1]],rectangle],size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:size1;4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[implies[yellow,and[size1,not[triangle]]],curry[size-leq,iota(filter(x.s, and[implies[rectangle,or[or[and[or[circle,curry[same_color,x.o]],yellow],rectangle],not[curry[same_color,iota(x.s)]]]],and[yellow,triangle]]))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;4:rectangle;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, size3), circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.forall(green,filter(filter(filter(x.s, yellow), blue), triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:triangle
'λx.contains(iota(filter(x.s, triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(not[green],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(x.s, and[and[nor[yellow,blue],green],rectangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:yellow;4:blue;4:green;4:rectangle
'λx.apply(or[rectangle,rectangle],iota(filter(filter(x.s, and[circle,curry[same_color,iota(filter(x.s, yellow))]]), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(green,iota(filter(x.s, curry[same_color,iota(filter(x.s, size1))])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[green,curry[same_size,iota(filter(x.s, circle))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[blue,triangle]), not[circle]), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:not[%s];4:circle;4:not[%s];4:blue
'λx.contains(x.o, filter(filter(x.s, curry[same_size,iota(filter(x.s, size3))]), curry[same_shape,x.o]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, iff[yellow,green]), size2), yellow), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:green;4:size2;4:yellow;4:yellow
'λx.empty(filter(filter(filter(x.s, blue), not[and[size1,rectangle]]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:size1;4:rectangle;4:rectangle
'λx.empty(filter(filter(filter(x.s, rectangle), yellow), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:rectangle
'λx.apply(not[rectangle],iota(filter(filter(filter(x.s, blue), and[nor[size1,yellow],not[rectangle]]), nor[blue,or[green,or[triangle,size2]]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:nor[%s,%s];4:size1;4:yellow;4:not[%s];4:rectangle;4:nor[%s,%s];4:blue;4:or[%s,%s];4:green;4:or[%s,%s];4:triangle;4:size2
'λx.apply(curry[same_shape,iota(filter(x.s, size1))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(or[size3,size3],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, implies[and[not[iff[size3,circle]],size2],circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:size3;4:circle;4:size2;4:circle
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, yellow), circle), curry[same_color,iota(x.s)]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(curry[same_shape,x.o], filter(x.s, circle))'	0:exists(%s, %s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(iff[and[size1,or[and[and[implies[curry[same_shape,iota(filter(x.s, and[green,size2]))],size1],yellow],size3],size3]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2;4:size1;4:yellow;4:size3;4:size3;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, and[circle,or[green,circle]]), nor[size2,and[not[size2],circle]]), and[and[rectangle,rectangle],curry[same_shape,iota(filter(x.s, triangle))]])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:circle;4:nor[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:size2;4:circle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[and[size3,or[triangle,yellow]],blue],and[nor[yellow,or[circle,curry[same_color,iota(x.s)]]],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:yellow;4:blue;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[curry[same_size,iota(filter(filter(x.s, yellow), green))],not[blue]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:not[%s];4:blue
'λx.apply(and[iff[and[size2,size3],circle],not[curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size2;4:size3;4:circle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[green,triangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(and[and[green,triangle],rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:rectangle;3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, not[size1]), or[triangle,size3]), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:or[%s,%s];4:triangle;4:size3;4:rectangle
'λx.apply(not[triangle],iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(nor[nor[size1,blue],green],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:size1;4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, size1))],iota(filter(filter(x.s, or[green,or[green,or[blue,size1]]]), circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:size1;4:circle
'λx.exists(or[and[blue,green],blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:blue;4:green;4:blue;3:%s.s;2:x
'λx.forall(curry[same_size,iota(filter(x.s, circle))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(nand[and[and[rectangle,curry[same_color,iota(x.s)]],curry[same_color,iota(filter(x.s, blue))]],curry[same_color,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,circle],iota(filter(filter(filter(filter(x.s, size1), rectangle), not[circle]), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:not[%s];4:circle;4:size3
'λx.apply(and[rectangle,nand[nor[curry[size-geq,iota(x.s)],triangle],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size2), and[and[and[rectangle,circle],size1],green]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:size1;4:green;4:circle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, size3), blue), yellow), not[curry[same_color,x.o]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:yellow;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(x.s, and[not[blue],size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:size3
'λx.contains(x.o, filter(filter(x.s, and[size2,green]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green;4:size3
'λx.apply(curry[same_shape,iota(filter(x.s, blue))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(filter(x.s, and[green,circle]), size3), yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:size3;4:yellow
'λx.apply(implies[size1,rectangle],iota(filter(filter(filter(x.s, circle), size3), or[and[yellow,size1],iff[blue,and[and[blue,not[size3]],size2]]])))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:iff[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:size3;4:size2
'λx.apply(or[curry[same_color,iota(x.s)],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, nor[curry[same_size,iota(x.s)],green]), or[size2,rectangle]), nand[triangle,size2]), or[size3,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size2;4:rectangle;4:nand[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:size3;4:blue
'λx.apply(green,iota(filter(x.s, green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), size1), not[rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:not[%s];4:rectangle
'λx.apply(and[curry[same_color,iota(x.s)],and[blue,curry[same_size,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(iff[size1,green],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(or[not[and[size3,size3]],blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(implies[iff[implies[and[or[and[and[green,yellow],size1],nor[green,triangle]],and[circle,rectangle]],size3],yellow],triangle], filter(x.s, and[yellow,size3]))'	0:exists(%s, %s);4:implies[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size1;4:nor[%s,%s];4:green;4:triangle;4:and[%s,%s];4:circle;4:rectangle;4:size3;4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(and[and[blue,size2],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, implies[and[nand[and[blue,circle],triangle],or[yellow,rectangle]],curry[size-lt,iota(filter(filter(x.s, circle), size2))]]), and[circle,triangle]), not[or[size1,blue]]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:blue;4:circle;4:triangle;4:or[%s,%s];4:yellow;4:rectangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:and[%s,%s];4:circle;4:triangle;4:not[%s];4:or[%s,%s];4:size1;4:blue;4:green
'λx.apply(or[size1,blue],iota(filter(x.s, and[and[not[triangle],triangle],and[blue,triangle]])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:triangle;4:and[%s,%s];4:blue;4:triangle
'λx.apply(green,iota(filter(filter(x.s, and[green,implies[size2,rectangle]]), or[and[triangle,green],rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:implies[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:rectangle
'λx.apply(not[and[and[nand[size3,or[size1,circle]],yellow],green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:or[%s,%s];4:size1;4:circle;4:yellow;4:green;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, triangle), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(and[not[and[size1,size1]],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, circle), size3), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:yellow
'λx.empty(filter(x.s, and[size3,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.contains(x.o, filter(filter(x.s, green), or[curry[same_size,iota(filter(x.s, triangle))],curry[same_shape,x.o]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[and[not[circle],green],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:green;4:blue;1:%s.o;2:x
'λx.exists(not[circle], x.s)'	0:exists(%s, %s);4:not[%s];4:circle;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, yellow), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.exists(and[implies[size3,rectangle],size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, size3), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, rectangle), circle), and[size2,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;4:and[%s,%s];4:size2;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, iff[rectangle,triangle]), and[size1,size2])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:size1;4:size2
'λx.exists(triangle, filter(filter(x.s, size2), and[or[blue,size2],implies[green,size2]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:or[%s,%s];4:blue;4:size2;4:implies[%s,%s];4:green;4:size2
'λx.contains(iota(x.s), filter(filter(filter(x.s, triangle), blue), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle
'λx.forall(size1,filter(filter(filter(x.s, size2), size2), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:yellow
'λx.apply(triangle,iota(filter(x.s, nor[yellow,curry[same_size,x.o]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(nand[circle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[or[rectangle,size3],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[yellow,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nor[or[green,size1],and[curry[same_shape,iota(x.s)],not[circle]]]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:green;4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:size2
'λx.apply(nor[nand[and[blue,circle],curry[same_shape,x.o]],and[and[size3,and[size2,blue]],curry[same_size,iota(filter(x.s, size1))]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:blue;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), and[green,and[or[and[nor[rectangle,implies[size3,not[size3]]],nand[blue,size2]],size3],triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:implies[%s,%s];4:size3;4:not[%s];4:size3;4:nand[%s,%s];4:blue;4:size2;4:size3;4:triangle
'λx.apply(not[size3],iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(and[yellow,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[circle,and[iff[and[circle,or[circle,not[and[circle,rectangle]]]],implies[nand[triangle,yellow],and[size3,size3]]],circle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:circle;4:rectangle;4:implies[%s,%s];4:nand[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:size3;4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, size2), size1), rectangle), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1;4:rectangle;4:triangle
'λx.exists(curry[same_shape,iota(filter(x.s, or[and[green,size1],and[blue,triangle]]))], filter(filter(filter(filter(filter(filter(filter(x.s, nor[green,rectangle]), blue), not[or[and[and[size2,triangle],size1],green]]), blue), green), size2), or[size3,size2]))'	0:exists(%s, %s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:and[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:rectangle;4:blue;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:size1;4:green;4:blue;4:green;4:size2;4:or[%s,%s];4:size3;4:size2
'λx.apply(size1,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(curry[same_color,iota(filter(x.s, size1))],iota(filter(filter(x.s, size2), or[triangle,size2])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:triangle;4:size2
'λx.exists(or[green,green], filter(filter(filter(x.s, circle), rectangle), green))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:green
'λx.apply(and[curry[same_shape,x.o],yellow],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, not[yellow]), green), implies[rectangle,and[yellow,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:green;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:circle
'λx.apply(or[size2,and[size1,triangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, triangle), green), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:blue
'λx.exists(or[circle,not[blue]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(nand[not[size1],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, yellow), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(and[iff[and[curry[same_size,iota(x.s)],blue],curry[same_shape,iota(x.s)]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.forall(and[size1,green],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(curry[size-lt,x.o],iota(filter(x.s, and[or[green,not[curry[size-gt,iota(filter(x.s, and[circle,and[yellow,blue]]))]]],size1])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:blue;4:size1
'λx.apply(curry[size-gt,iota(filter(x.s, implies[blue,circle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.exists(blue, filter(x.s, blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[not[curry[same_size,x.o]],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[and[blue,and[blue,size3]],curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(size1,iota(filter(x.s, and[and[size3,not[iff[yellow,yellow]]],green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:iff[%s,%s];4:yellow;4:yellow;4:green
'λx.empty(filter(x.s, and[yellow,implies[size2,green]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:implies[%s,%s];4:size2;4:green
'λx.empty(filter(filter(x.s, size2), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size2
'λx.apply(or[size3,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.exists(and[nand[curry[size-leq,iota(filter(filter(x.s, size1), curry[same_size,iota(filter(filter(filter(filter(x.s, size3), and[triangle,size3]), blue), circle))]))],curry[size-gt,x.o]],and[curry[same_color,iota(filter(x.s, or[curry[same_size,x.o],or[implies[implies[yellow,implies[rectangle,rectangle]],green],not[green]]]))],size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:size3;4:blue;4:circle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:implies[%s,%s];4:rectangle;4:rectangle;4:green;4:not[%s];4:green;4:size1;3:%s.s;2:x
'λx.forall(and[or[and[triangle,size3],rectangle],size2],filter(x.s, or[or[or[green,and[circle,curry[size-gt,x.o]]],circle],size1]))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:circle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:circle;4:size1
'λx.apply(or[size3,blue],iota(filter(filter(filter(filter(x.s, or[blue,blue]), triangle), circle), not[not[and[or[rectangle,not[size1]],curry[same_shape,iota(filter(x.s, rectangle))]]]])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue;4:triangle;4:circle;4:not[%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size1,and[triangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), curry[same_size,x.o])), filter(filter(x.s, implies[size2,blue]), not[circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:blue;4:not[%s];4:circle
'λx.apply(and[and[or[triangle,size3],not[size3]],size3],iota(filter(x.s, or[blue,implies[not[and[circle,or[size3,green]]],size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:not[%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:green;4:size3
'λx.forall(iff[size3,size3],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:size3;4:size3;3:%s.s;2:x
'λx.apply(not[or[yellow,triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.forall(nand[yellow,size1],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.apply(or[implies[triangle,triangle],and[triangle,and[size3,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(iff[not[curry[same_size,iota(filter(filter(filter(x.s, size2), curry[same_size,iota(filter(filter(filter(x.s, yellow), and[rectangle,green]), yellow))]), triangle))]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:rectangle;4:green;4:yellow;4:triangle;4:triangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, blue), size1), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:size1
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[size3,blue], filter(filter(filter(filter(filter(x.s, curry[same_size,iota(filter(filter(x.s, circle), rectangle))]), blue), rectangle), rectangle), or[green,size3]))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:blue;4:rectangle;4:rectangle;4:or[%s,%s];4:green;4:size3
'λx.apply(size3,iota(filter(x.s, or[rectangle,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size1
'λx.exists(nor[yellow,triangle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, rectangle), circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(triangle,iota(x.s))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[blue],or[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[or[green,size1],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:size1;4:blue;1:%s.o;2:x
'λx.apply(implies[green,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(or[not[yellow],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[circle,nor[circle,or[and[green,rectangle],circle]]],iota(filter(x.s, curry[size-gt,iota(filter(x.s, or[or[not[size2],blue],yellow]))])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nor[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:blue;4:yellow
'λx.apply(and[and[curry[size-lt,iota(filter(filter(x.s, implies[not[size2],and[yellow,rectangle]]), and[circle,size1]))],rectangle],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:size1;4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(or[or[blue,rectangle],and[size1,or[circle,yellow]]],filter(x.s, size1))'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(and[rectangle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[not[blue],size2],iota(filter(filter(x.s, or[rectangle,triangle]), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:triangle;4:circle
'λx.apply(nand[not[yellow],circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,not[and[rectangle,triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.forall(or[rectangle,triangle],filter(filter(x.s, size1), yellow))'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(size3,iota(filter(x.s, and[green,implies[and[and[yellow,size2],triangle],blue]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;4:blue
'λx.apply(size2,iota(filter(filter(filter(x.s, size3), rectangle), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:green
'λx.forall(circle,filter(filter(filter(x.s, yellow), curry[same_color,iota(filter(filter(filter(filter(x.s, and[and[and[iff[triangle,and[yellow,size1]],size2],triangle],size2]), green), size1), size2))]), and[and[or[and[green,and[yellow,and[green,yellow]]],green],size1],or[circle,size2]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:size1;4:size2;4:triangle;4:size2;4:green;4:size1;4:size2;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:yellow;4:green;4:size1;4:or[%s,%s];4:circle;4:size2
'λx.exists(blue, x.s)'	0:exists(%s, %s);4:blue;3:%s.s;2:x
'λx.apply(and[and[rectangle,rectangle],implies[size2,curry[size-lt,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:implies[%s,%s];4:size2;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[size2,and[nor[yellow,not[size2]],curry[same_size,iota(x.s)]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:not[%s];4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), or[and[size2,blue],triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:and[%s,%s];4:size2;4:blue;4:triangle
'λx.apply(circle,iota(filter(x.s, nor[and[rectangle,not[curry[same_size,x.o]]],yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(curry[same_size,iota(x.s)],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), or[size3,curry[size-geq,iota(x.s)]]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size3;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(filter(x.s, circle), curry[same_color,x.o])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(yellow,iota(x.s))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(x.s, blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[nand[size3,blue],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[size3,and[size2,and[triangle,size3]]],iota(filter(filter(filter(filter(filter(x.s, size2), iff[or[size1,or[size1,green]],size2]), size1), nor[circle,size2]), or[green,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:or[%s,%s];4:size1;4:or[%s,%s];4:size1;4:green;4:size2;4:size1;4:nor[%s,%s];4:circle;4:size2;4:or[%s,%s];4:green;4:size1
'λx.contains(iota(filter(x.s, and[and[and[size2,and[rectangle,not[not[circle]]]],not[circle]],triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:circle;4:not[%s];4:circle;4:triangle;3:%s.s;2:x
'λx.apply(or[not[or[and[and[and[size2,and[not[implies[and[circle,and[rectangle,yellow]],or[rectangle,curry[same_color,iota(x.s)]]]],rectangle]],size3],size2],size3]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size3;4:size2;4:size3;4:yellow;1:%s.o;2:x
'λx.exists(size2, filter(filter(filter(x.s, size1), nor[size2,size2]), not[and[implies[and[rectangle,curry[same_size,iota(x.s)]],size3],triangle]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:size2;4:size2;4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(or[yellow,green],iota(filter(x.s, and[green,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1
'λx.apply(yellow,iota(filter(x.s, curry[size-geq,iota(x.s)])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(green,iota(filter(x.s, and[blue,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(and[and[curry[same_size,x.o],circle],rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size1, filter(x.s, implies[circle,not[blue]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:not[%s];4:blue
'λx.exists(not[not[size2]], x.s)'	0:exists(%s, %s);4:not[%s];4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(and[green,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(not[not[green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[yellow,green]), nand[triangle,green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:green;4:nand[%s,%s];4:triangle;4:green
'λx.empty(filter(x.s, curry[same_color,iota(filter(x.s, circle))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(blue,iota(filter(filter(x.s, curry[same_shape,x.o]), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(size3,iota(filter(x.s, curry[same_shape,iota(filter(filter(x.s, size1), size2))])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, and[and[circle,yellow],curry[size-geq,iota(x.s)]]), or[curry[size-leq,iota(filter(filter(x.s, triangle), size2))],blue]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:blue;4:yellow
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, blue), and[or[and[and[blue,rectangle],and[size2,and[rectangle,not[and[not[triangle],size3]]]]],circle],and[yellow,blue]]), or[yellow,size2]), size3), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:not[%s];4:triangle;4:size3;4:circle;4:and[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:yellow;4:size2;4:size3;4:size3
'λx.apply(not[nor[iff[and[circle,yellow],green],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:green;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[green,not[size2]]), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:size2;4:blue
'λx.apply(rectangle,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.forall(or[circle,green],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.apply(iff[circle,curry[size-geq,x.o]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[circle,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.forall(not[triangle],x.s)'	0:forall(%s,%s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(curry[same_size,x.o],iota(filter(x.s, and[not[size2],circle])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:circle
'λx.apply(triangle,iota(filter(filter(filter(x.s, and[circle,or[nor[yellow,circle],size1]]), and[rectangle,and[and[iff[triangle,yellow],circle],curry[same_color,iota(x.s)]]]), and[and[or[size3,and[not[size1],or[curry[same_color,iota(x.s)],circle]]],circle],and[curry[size-gt,iota(x.s)],rectangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:or[%s,%s];4:nor[%s,%s];4:yellow;4:circle;4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:yellow;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:circle;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[and[size1,and[implies[rectangle,green],not[and[rectangle,implies[green,green]]]]],iff[or[triangle,and[and[not[yellow],rectangle],curry[same_size,iota(filter(filter(filter(x.s, triangle), not[or[size3,nor[size2,yellow]]]), size1))]]],size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:green;4:not[%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:green;4:green;4:iff[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:or[%s,%s];4:size3;4:nor[%s,%s];4:size2;4:yellow;4:size1;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(filter(x.s, or[triangle,size2]), and[size1,not[triangle]]), green), size1), circle), and[circle,and[and[not[yellow],curry[same_size,iota(filter(x.s, size2))]],size2]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:size1;4:not[%s];4:triangle;4:green;4:size1;4:circle;4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(curry[size-gt,iota(filter(x.s, nor[or[size2,triangle],curry[size-lt,iota(x.s)]]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, curry[size-lt,iota(x.s)])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, circle), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(size2,iota(filter(filter(filter(x.s, green), yellow), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:size3
'λx.contains(x.o, filter(filter(filter(x.s, nand[size2,size3]), and[yellow,rectangle]), and[size2,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size3;4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:size2;4:yellow
'λx.apply(and[blue,nand[or[not[curry[same_shape,x.o]],size1],and[green,rectangle]]],iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;4:and[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.forall(triangle,filter(filter(x.s, size1), size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.forall(or[curry[same_color,x.o],or[iff[and[circle,curry[same_shape,x.o]],or[or[size3,circle],yellow]],nand[or[curry[same_size,x.o],yellow],curry[same_color,iota(x.s)]]]],filter(x.s, size1))'	0:forall(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:size3;4:circle;4:yellow;4:nand[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(not[nor[curry[same_size,x.o],and[and[yellow,blue],triangle]]],x.s)'	0:forall(%s,%s);4:not[%s];4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:triangle;3:%s.s;2:x
'λx.apply(nor[not[not[or[circle,size3]]],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, curry[size-leq,iota(filter(x.s, size2))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[nor[and[green,size3],not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(not[and[triangle,and[and[implies[yellow,triangle],and[triangle,nor[size1,size2]]],size2]]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:size1;4:size2;4:size2;3:%s.s;2:x
'λx.apply(or[size3,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, size3), not[green]), and[not[rectangle],not[and[blue,size2]]]), and[rectangle,size3]), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:and[%s,%s];4:blue;4:size2;4:and[%s,%s];4:rectangle;4:size3;4:size1;3:%s.s;2:x
'λx.apply(implies[blue,size1],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(x.o, filter(filter(x.s, curry[same_shape,iota(x.s)]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.forall(size3,filter(filter(filter(x.s, size2), size2), triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:triangle
'λx.apply(nand[size1,and[nand[size2,curry[same_shape,iota(filter(filter(filter(filter(x.s, not[size1]), rectangle), size1), and[and[and[triangle,size3],and[green,rectangle]],size3]))]],not[green]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:nand[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:rectangle;4:size1;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:green;4:rectangle;4:size3;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[and[and[rectangle,triangle],yellow],and[size3,or[rectangle,size3]]]), curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:yellow;4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[triangle],nor[nor[curry[same_size,x.o],curry[same_shape,x.o]],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:nor[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.empty(filter(filter(filter(filter(filter(x.s, and[size3,size2]), and[rectangle,and[and[iff[circle,size2],triangle],blue]]), and[curry[same_color,iota(x.s)],size1]), yellow), iff[not[green],yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:circle;4:size2;4:triangle;4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1;4:yellow;4:iff[%s,%s];4:not[%s];4:green;4:yellow
'λx.apply(or[not[yellow],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(and[size3,not[curry[same_size,x.o]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[green,triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, curry[same_size,iota(x.s)]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[or[size2,not[curry[size-geq,iota(filter(x.s, yellow))]]],or[triangle,blue]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:triangle;4:blue
'λx.exists(nand[or[and[yellow,circle],not[size2]],rectangle], filter(filter(x.s, rectangle), implies[and[green,and[size1,and[not[blue],rectangle]]],size3]))'	0:exists(%s, %s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:not[%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:blue;4:rectangle;4:size3
'λx.contains(iota(filter(x.s, rectangle)), filter(filter(x.s, blue), curry[same_size,x.o]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.exists(yellow, filter(filter(filter(filter(filter(x.s, size3), curry[size-leq,iota(filter(x.s, rectangle))]), curry[same_color,iota(filter(filter(filter(x.s, iff[green,size2]), circle), implies[yellow,rectangle]))]), green), yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size2;4:circle;4:implies[%s,%s];4:yellow;4:rectangle;4:green;4:yellow
'λx.contains(x.o, filter(x.s, or[not[yellow],implies[and[and[blue,or[size2,rectangle]],yellow],not[or[or[green,triangle],size2]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:rectangle;4:yellow;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:green;4:triangle;4:size2
'λx.apply(and[size1,or[and[size1,circle],and[not[or[rectangle,and[iff[blue,and[not[circle],triangle]],rectangle]]],not[and[iff[and[circle,yellow],circle],and[not[size1],size1]]]]]],iota(filter(filter(x.s, curry[same_size,x.o]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:circle;4:triangle;4:rectangle;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:circle;4:and[%s,%s];4:not[%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue
'λx.empty(filter(filter(filter(x.s, not[rectangle]), blue), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:blue;4:blue
'λx.apply(not[size1],iota(filter(filter(x.s, curry[same_color,x.o]), blue)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue
'λx.apply(and[size2,not[or[yellow,yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:or[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), and[size2,size1]), implies[triangle,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:size1;4:implies[%s,%s];4:triangle;4:circle
'λx.exists(yellow, filter(x.s, rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[green,circle],iota(filter(filter(x.s, size2), not[size3])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size3
'λx.apply(and[size3,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, x.s)'	0:exists(%s, %s);4:size1;3:%s.s;2:x
'λx.apply(implies[and[curry[size-geq,iota(filter(filter(x.s, blue), circle))],blue],implies[size2,blue]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:blue;4:implies[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[rectangle,or[and[blue,size3],blue]],size3],iota(filter(filter(x.s, not[curry[size-geq,x.o]]), and[nor[blue,or[circle,curry[size-geq,iota(x.s)]]],circle])))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:blue;4:size3;4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:circle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(x.s, or[triangle,yellow])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:yellow
'λx.contains(iota(filter(x.s, and[size2,blue])), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(curry[size-lt,iota(filter(x.s, size3))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,curry[same_size,iota(filter(filter(filter(filter(filter(filter(filter(x.s, size2), not[yellow]), blue), and[yellow,size1]), or[circle,green]), green), not[not[size2]]))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:yellow;4:blue;4:and[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:circle;4:green;4:green;4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[curry[size-lt,iota(filter(x.s, not[not[rectangle]]))],curry[size-geq,x.o]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[circle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, blue))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.exists(nand[nor[size1,not[and[circle,and[and[and[triangle,and[size2,circle]],and[curry[same_shape,iota(filter(x.s, nand[triangle,curry[same_color,x.o]]))],and[circle,and[green,yellow]]]],curry[same_color,iota(filter(filter(x.s, curry[same_shape,x.o]), size1))]]]]],or[size1,circle]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:nor[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:green;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;4:or[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[and[size1,rectangle]]), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:rectangle;4:rectangle
'λx.apply(green,iota(filter(filter(filter(x.s, size3), and[rectangle,size2]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:size2;4:size2
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(or[size1,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(not[nand[rectangle,not[and[size1,yellow]]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(and[and[not[curry[size-gt,iota(filter(x.s, iff[yellow,not[nor[triangle,circle]]]))]],blue],circle], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:not[%s];4:nor[%s,%s];4:triangle;4:circle;4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(yellow,iota(filter(filter(filter(x.s, rectangle), yellow), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:circle
'λx.apply(or[nand[triangle,and[circle,and[size1,nor[and[size1,and[size1,curry[same_shape,iota(filter(x.s, rectangle))]]],or[curry[same_size,iota(x.s)],triangle]]]]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:nor[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[size2,or[green,not[blue]]],iota(filter(x.s, curry[same_shape,iota(filter(filter(filter(filter(x.s, and[rectangle,green]), size1), rectangle), or[curry[same_shape,x.o],not[not[blue]]]))])))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:or[%s,%s];4:green;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:size1;4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:not[%s];4:blue
'λx.apply(implies[size1,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(and[nor[implies[not[curry[same_color,x.o]],green],and[nor[curry[size-geq,iota(x.s)],nand[green,size1]],green]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size1;4:green;4:size3;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, blue), curry[same_size,iota(filter(filter(x.s, nand[size1,size1]), yellow))]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:size1;4:yellow
'λx.exists(and[not[nor[not[not[blue]],size3]],and[rectangle,size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:not[%s];4:not[%s];4:blue;4:size3;4:and[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.forall(and[circle,blue],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(x.s, curry[size-lt,x.o]), curry[size-lt,iota(filter(filter(x.s, curry[same_shape,x.o]), blue))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[size3,not[circle]],iota(filter(x.s, nand[and[rectangle,size3],and[yellow,size3]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:yellow;4:size3
'λx.apply(size2,iota(filter(filter(x.s, or[size3,implies[and[triangle,green],triangle]]), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:green;4:triangle;4:yellow
'λx.contains(iota(x.s), x.s)'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, and[and[nor[not[not[triangle]],blue],and[or[yellow,curry[same_size,iota(x.s)]],not[curry[size-lt,iota(x.s)]]]],or[triangle,triangle]]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:not[%s];4:triangle;4:blue;4:and[%s,%s];4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:triangle;4:size3;3:%s.s;2:x
'λx.empty(filter(filter(x.s, or[blue,yellow]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:green
'λx.exists(yellow, filter(filter(filter(x.s, implies[green,and[and[and[yellow,size1],yellow],or[and[size3,green],green]]]), size3), nor[nand[and[circle,yellow],rectangle],implies[not[curry[same_size,x.o]],blue]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:yellow;4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:green;4:size3;4:nor[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:rectangle;4:implies[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue
'λx.contains(x.o, filter(x.s, not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(and[yellow,and[and[and[not[curry[same_color,iota(x.s)]],circle],nand[and[size3,curry[same_size,x.o]],and[circle,rectangle]]],green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:nand[%s,%s];4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:rectangle;4:green;3:%s.s;2:x
'λx.forall(and[size1,curry[same_shape,iota(x.s)]],filter(filter(x.s, blue), or[curry[same_color,x.o],size3]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3
'λx.apply(not[size1],iota(filter(x.s, or[curry[same_color,iota(filter(filter(x.s, size1), and[blue,triangle]))],circle])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:triangle;4:circle
'λx.apply(and[or[rectangle,blue],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), rectangle)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[yellow,and[blue,and[size2,yellow]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(not[and[and[size1,yellow],rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,x.s)'	0:forall(%s,%s);4:circle;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[not[size3],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, triangle), blue), rectangle), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:rectangle;4:size2
'λx.exists(yellow, filter(x.s, curry[same_color,iota(filter(x.s, size3))]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, size3), implies[blue,curry[size-geq,x.o]]), or[size1,implies[circle,circle]]), and[or[green,green],iff[or[rectangle,not[size3]],blue]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:blue;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:circle;4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:size3;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, curry[size-lt,x.o]), nor[and[yellow,size2],curry[same_shape,iota(filter(x.s, and[or[curry[same_color,iota(x.s)],curry[same_color,x.o]],rectangle]))]]), curry[same_shape,x.o]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[yellow,implies[and[triangle,size3],size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, not[and[size2,nand[yellow,or[triangle,size3]]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:nand[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:size3
'λx.exists(and[blue,curry[same_shape,x.o]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[size2,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, or[triangle,circle]), not[rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle;4:not[%s];4:rectangle
'λx.apply(size3,iota(filter(filter(filter(x.s, and[nor[green,blue],not[size1]]), and[not[size1],curry[same_size,x.o]]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:green;4:blue;4:not[%s];4:size1;4:and[%s,%s];4:not[%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1
'λx.apply(or[blue,curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(or[triangle,circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:circle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, or[size2,green]), green), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:green;4:green;4:size1
'λx.exists(and[size1,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size1), and[nand[and[not[triangle],not[blue]],rectangle],and[nor[not[green],size2],circle]]), and[circle,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:blue;4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:green;4:size2;4:circle;4:and[%s,%s];4:circle;4:circle
'λx.apply(or[yellow,nand[or[not[or[blue,triangle]],curry[same_color,iota(filter(x.s, or[size3,rectangle]))]],not[triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[and[blue,yellow]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[not[triangle],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[triangle,size1],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(x.s, blue), size1), rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:rectangle
'λx.contains(iota(filter(filter(filter(x.s, size3), or[rectangle,green]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:rectangle;4:green;4:size2;3:%s.s;2:x
'λx.apply(and[or[and[rectangle,green],and[or[size1,yellow],yellow]],size2],iota(filter(x.s, curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[curry[same_size,iota(filter(filter(filter(x.s, not[size1]), rectangle), nor[size1,green]))],and[size3,circle]],curry[same_size,iota(filter(filter(filter(x.s, size2), blue), circle))]],blue],iota(filter(filter(filter(x.s, size2), green), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:rectangle;4:nor[%s,%s];4:size1;4:green;4:and[%s,%s];4:size3;4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:circle
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, green), and[size2,size2]), rectangle), or[size2,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size2;4:size2;4:rectangle;4:or[%s,%s];4:size2;4:triangle
'λx.apply(or[curry[size-gt,iota(x.s)],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size2), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(and[circle,and[not[blue],and[and[blue,green],triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, or[triangle,curry[same_size,iota(filter(x.s, size1))]]), circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(and[implies[green,triangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[curry[size-leq,iota(x.s)],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size3,size1],or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(and[size1,yellow],filter(filter(x.s, nor[green,or[triangle,blue]]), curry[size-leq,iota(filter(x.s, blue))]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:or[%s,%s];4:triangle;4:blue;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, size3), implies[and[rectangle,curry[same_size,iota(filter(filter(filter(filter(filter(filter(x.s, size2), triangle), and[not[and[triangle,green]],triangle]), and[implies[rectangle,rectangle],yellow]), size1), yellow))]],implies[size3,or[size2,curry[same_color,x.o]]]]), size3), curry[size-gt,iota(x.s)]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:green;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:yellow;4:size1;4:yellow;4:implies[%s,%s];4:size3;4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, size2), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.apply(nor[iff[size2,size2],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:size2;4:size2;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, iff[size1,or[or[circle,and[blue,circle]],size1]]), blue), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;4:size1;4:blue;4:yellow
'λx.apply(and[size1,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_shape,iota(x.s)],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(x.s, triangle))],iota(filter(filter(filter(filter(x.s, nand[size3,yellow]), and[not[circle],curry[size-leq,iota(x.s)]]), and[size2,not[triangle]]), not[nand[and[circle,yellow],iff[size2,blue]]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:yellow;4:and[%s,%s];4:not[%s];4:circle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:triangle;4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:iff[%s,%s];4:size2;4:blue
'λx.apply(and[and[and[green,size2],size1],and[size3,or[and[triangle,yellow],not[size3]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1;4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[or[size1,blue],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(x.s, or[and[and[size1,not[yellow]],size1],circle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:yellow;4:size1;4:circle
'λx.forall(not[rectangle],filter(x.s, size2))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[and[green,size3],and[iff[triangle,blue],rectangle]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(x.s, green))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(rectangle,iota(filter(x.s, and[curry[same_color,iota(x.s)],and[size3,rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, circle), and[blue,size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:blue;4:size2
'λx.contains(iota(x.s), filter(filter(filter(x.s, or[yellow,and[not[and[curry[same_shape,x.o],size3]],and[curry[same_size,iota(x.s)],circle]]]), yellow), curry[same_shape,x.o]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:circle;4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(not[or[circle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, triangle), size3), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:yellow
'λx.apply(or[circle,nand[rectangle,green]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nand[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, iff[and[size2,or[and[rectangle,rectangle],circle]],circle]), yellow), not[iff[size3,size1]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:circle;4:circle;4:yellow;4:not[%s];4:iff[%s,%s];4:size3;4:size1
'λx.apply(blue,iota(filter(x.s, or[triangle,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3
'λx.exists(size2, filter(x.s, rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[and[and[circle,size3],green],green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:green;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, curry[same_shape,iota(filter(filter(x.s, or[circle,implies[circle,or[size3,and[size1,and[size1,not[and[and[size3,and[circle,and[or[circle,circle],iff[or[size2,blue],rectangle]]]],nor[size1,or[size1,nor[triangle,not[rectangle]]]]]]]]]]]), rectangle))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:implies[%s,%s];4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:iff[%s,%s];4:or[%s,%s];4:size2;4:blue;4:rectangle;4:nor[%s,%s];4:size1;4:or[%s,%s];4:size1;4:nor[%s,%s];4:triangle;4:not[%s];4:rectangle;4:rectangle
'λx.apply(not[rectangle],x.o)'	0:apply(%s,%s);4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(iff[green,and[or[size3,or[green,and[and[or[yellow,blue],rectangle],nand[size1,yellow]]]],or[not[green],size2]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:size3;4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:rectangle;4:nand[%s,%s];4:size1;4:yellow;4:or[%s,%s];4:not[%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, not[green]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:blue
'λx.forall(circle,filter(x.s, implies[circle,size2]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size2
'λx.contains(iota(filter(x.s, or[or[size1,and[size3,green]],iff[not[not[circle]],circle]])), filter(filter(filter(filter(filter(filter(x.s, nand[size2,size2]), triangle), not[not[blue]]), circle), or[green,circle]), and[blue,size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:green;4:iff[%s,%s];4:not[%s];4:not[%s];4:circle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size2;4:triangle;4:not[%s];4:not[%s];4:blue;4:circle;4:or[%s,%s];4:green;4:circle;4:and[%s,%s];4:blue;4:size2
'λx.apply(and[not[green],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), and[and[green,and[rectangle,implies[iff[not[rectangle],triangle],size1]]],or[not[circle],or[circle,size2]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:iff[%s,%s];4:not[%s];4:rectangle;4:triangle;4:size1;4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:circle;4:size2
'λx.apply(nand[or[nand[circle,and[nor[not[triangle],size1],yellow]],iff[blue,triangle]],or[circle,circle]],iota(filter(filter(x.s, triangle), and[size1,rectangle])))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:triangle;4:size1;4:yellow;4:iff[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(green,iota(filter(x.s, or[curry[same_size,x.o],green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green
'λx.forall(green,filter(filter(x.s, circle), curry[same_color,iota(filter(x.s, green))]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), circle), and[size2,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:and[%s,%s];4:size2;4:size1
'λx.apply(and[and[not[yellow],curry[same_color,x.o]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[curry[same_size,x.o],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nor[iff[triangle,yellow],or[rectangle,curry[size-geq,iota(filter(filter(x.s, rectangle), size2))]]],iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(or[circle,not[and[size1,and[green,blue]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(not[nand[size2,blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,and[and[green,circle],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size1), size2), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:yellow
'λx.exists(implies[not[or[iff[green,circle],size1]],rectangle], filter(filter(filter(filter(filter(x.s, blue), yellow), green), yellow), size2))'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:green;4:circle;4:size1;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:green;4:yellow;4:size2
'λx.apply(and[not[and[or[size2,rectangle],size1]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:size1;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[yellow,triangle]), or[triangle,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:triangle;4:size3
'λx.apply(not[and[or[size3,triangle],and[green,or[yellow,curry[size-gt,iota(filter(x.s, yellow))]]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:green;4:or[%s,%s];4:yellow;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[iff[curry[size-lt,x.o],blue],curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(circle, filter(filter(filter(filter(x.s, yellow), not[not[and[yellow,circle]]]), not[and[size1,and[size2,size2]]]), curry[same_shape,iota(x.s)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:circle;4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, iff[triangle,size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:size2
'λx.contains(x.o, filter(filter(x.s, blue), curry[same_size,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,and[blue,and[curry[same_color,x.o],blue]]],iota(filter(filter(filter(filter(filter(filter(filter(x.s, not[yellow]), size3), yellow), rectangle), green), circle), not[rectangle])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;4:yellow;4:rectangle;4:green;4:circle;4:not[%s];4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, size1), nor[yellow,size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:yellow;4:size2
'λx.exists(or[rectangle,size2], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(filter(filter(x.s, blue), size1), not[triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:not[%s];4:triangle
'λx.forall(size1,filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size3), size1), size1), curry[same_size,x.o]), size2), circle), size1), and[and[blue,circle],green]), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size2;4:circle;4:size1;4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:green;4:blue
'λx.exists(and[or[triangle,circle],and[green,size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:and[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.apply(and[not[circle],size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(iff[size3,rectangle],filter(x.s, rectangle))'	0:forall(%s,%s);4:iff[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[or[triangle,yellow],not[nand[circle,and[yellow,blue]]]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:not[%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(nand[size3,rectangle],filter(x.s, size1))'	0:forall(%s,%s);4:nand[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[and[blue,green],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), iff[and[size1,triangle],triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:triangle
'λx.apply(green,iota(filter(filter(filter(filter(x.s, triangle), circle), size1), curry[same_shape,x.o])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), and[size3,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size3;4:size3
'λx.contains(iota(filter(filter(filter(x.s, circle), size2), curry[size-lt,iota(x.s)])), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(filter(x.s, size3), not[and[and[curry[same_shape,x.o],or[size1,blue]],circle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size1;4:blue;4:circle
'λx.apply(or[iff[and[curry[same_shape,x.o],yellow],not[and[and[curry[size-lt,iota(x.s)],or[circle,size2]],rectangle]]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size2;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[circle,size3],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.empty(filter(filter(filter(x.s, size3), and[or[curry[same_color,x.o],blue],and[size1,size1]]), and[size1,not[size2]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:size1;4:not[%s];4:size2
'λx.empty(filter(x.s, circle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[or[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), curry[same_size,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size2],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(curry[size-gt,x.o],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size1,rectangle],iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(nor[or[or[size3,green],nand[or[curry[same_size,iota(x.s)],blue],circle]],and[size1,green]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:green;4:nand[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:circle;4:and[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, iff[circle,or[circle,rectangle]]), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:or[%s,%s];4:circle;4:rectangle;4:green;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.forall(green,filter(filter(filter(x.s, and[and[blue,size1],iff[or[or[triangle,or[size2,size2]],green],or[implies[triangle,size1],curry[same_size,iota(filter(x.s, size2))]]]]), yellow), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:iff[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:size2;4:green;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:size2
'λx.apply(and[and[nand[rectangle,rectangle],yellow],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:rectangle;4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nor[yellow,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:size1
'λx.apply(and[green,or[triangle,nand[nand[size2,yellow],circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:nand[%s,%s];4:size2;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[size3,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(and[rectangle,circle],filter(filter(filter(filter(x.s, iff[circle,triangle]), size1), size2), and[curry[same_size,iota(filter(x.s, and[blue,and[or[size1,blue],rectangle]]))],curry[same_size,x.o]]))'	0:forall(%s,%s);4:and[%s,%s];4:rectangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:triangle;4:size1;4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, not[and[and[yellow,blue],size3]]), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size3;4:rectangle
'λx.contains(iota(filter(filter(x.s, or[yellow,yellow]), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:yellow;4:green;3:%s.s;2:x
'λx.apply(and[size3,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, size2), blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(size1,iota(filter(x.s, not[and[curry[same_color,x.o],triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle
'λx.empty(filter(filter(x.s, not[rectangle]), and[yellow,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:yellow;4:triangle
'λx.forall(blue,filter(filter(x.s, blue), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green
'λx.apply(and[blue,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[blue,size3],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[size1,or[triangle,size1]],iota(filter(filter(filter(filter(filter(x.s, or[size2,green]), or[size3,and[green,size2]]), or[rectangle,rectangle]), curry[same_shape,x.o]), and[nor[and[blue,not[circle]],blue],and[and[green,curry[same_color,iota(filter(x.s, size3))]],triangle]])))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:green;4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:size2;4:or[%s,%s];4:rectangle;4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:circle;4:blue;4:and[%s,%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(size3,iota(filter(x.s, or[and[iff[curry[size-geq,x.o],nand[blue,size2]],and[blue,or[implies[or[and[circle,and[size1,triangle]],implies[size2,and[circle,size1]]],not[or[and[and[triangle,curry[same_color,iota(filter(filter(x.s, blue), and[size2,green]))]],not[not[blue]]],size3]]],blue]]],circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:size2;4:and[%s,%s];4:blue;4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:triangle;4:implies[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size1;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size2;4:green;4:not[%s];4:not[%s];4:blue;4:size3;4:blue;4:circle
'λx.apply(curry[same_color,x.o],iota(filter(filter(filter(filter(x.s, blue), size1), not[rectangle]), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:not[%s];4:rectangle;4:rectangle
'λx.exists(and[and[size1,green],yellow], filter(filter(filter(x.s, triangle), yellow), yellow))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:yellow
'λx.apply(circle,iota(filter(x.s, and[yellow,triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(and[not[rectangle],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[nor[yellow,and[and[triangle,size2],size3]],not[triangle]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:size3;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(blue, filter(x.s, and[size1,triangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.exists(size1, filter(filter(x.s, size3), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(or[curry[same_shape,iota(x.s)],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(implies[circle,circle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[circle]), and[and[size3,curry[same_shape,x.o]],nor[circle,and[and[yellow,nand[size3,green]],size1]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:size3;4:green;4:size1
'λx.apply(curry[size-gt,iota(x.s)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size3,size2],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, and[yellow,curry[same_shape,x.o]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, rectangle), size2))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.contains(x.o, filter(filter(filter(filter(x.s, and[or[triangle,size1],rectangle]), size3), green), or[curry[same_shape,iota(x.s)],or[nand[yellow,yellow],not[blue]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:rectangle;4:size3;4:green;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:yellow;4:yellow;4:not[%s];4:blue
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, triangle), size1), size2), and[rectangle,green]), size3), curry[same_color,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:size2;4:and[%s,%s];4:rectangle;4:green;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[circle,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow
'λx.contains(iota(x.s), filter(filter(x.s, size2), curry[same_shape,x.o]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size1), size2), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:size2;3:%s.s;2:x
'λx.apply(or[yellow,and[not[size1],not[and[size3,triangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(nand[not[rectangle],and[implies[implies[yellow,and[curry[same_color,iota(x.s)],green]],rectangle],triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,and[and[curry[same_size,iota(filter(x.s, and[not[or[not[curry[same_shape,x.o]],yellow]],size3]))],blue],and[green,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;4:size3;4:blue;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,iff[not[nand[yellow,size2]],size2]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:iff[%s,%s];4:not[%s];4:nand[%s,%s];4:yellow;4:size2;4:size2;1:%s.o;2:x
'λx.apply(or[not[rectangle],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), nor[not[not[size1]],or[curry[size-lt,iota(x.s)],size1]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:not[%s];4:not[%s];4:size1;4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(curry[same_shape,iota(filter(x.s, green))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(not[or[size1,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.exists(not[iff[or[curry[same_shape,x.o],or[size2,triangle]],size2]], filter(filter(x.s, blue), size2))'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size2;4:triangle;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(not[size3],x.o)'	0:apply(%s,%s);4:not[%s];4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.forall(or[and[nand[yellow,triangle],size2],size3],filter(filter(filter(filter(filter(x.s, or[size1,and[triangle,or[size1,curry[size-gt,iota(x.s)]]]]), size1), green), size3), yellow))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:yellow;4:triangle;4:size2;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1;4:green;4:size3;4:yellow
'λx.exists(not[green], x.s)'	0:exists(%s, %s);4:not[%s];4:green;3:%s.s;2:x
'λx.exists(and[size2,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size1;3:%s.s;2:x
'λx.apply(not[triangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(filter(x.s, circle), curry[same_size,x.o]), and[size3,not[size2]])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:not[%s];4:size2
'λx.empty(filter(x.s, not[curry[same_shape,iota(filter(x.s, iff[and[not[circle],blue],nand[size1,and[triangle,curry[same_shape,x.o]]]]))]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:nand[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[or[and[nand[circle,or[and[nand[size1,and[iff[size2,not[curry[size-leq,iota(filter(x.s, size1))]]],size1]],triangle],and[circle,size1]]],curry[same_size,x.o]],not[rectangle]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size1;4:and[%s,%s];4:iff[%s,%s];4:size2;4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:triangle;4:and[%s,%s];4:circle;4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, and[yellow,size1]), size3), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:size3;4:size1
'λx.contains(iota(x.s), filter(filter(filter(x.s, size1), circle), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:size3
'λx.forall(iff[size3,triangle],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, blue))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, curry[size-lt,x.o])), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, not[blue]), rectangle), triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:rectangle;4:triangle;4:blue
'λx.forall(not[and[size2,curry[same_shape,iota(filter(filter(x.s, not[circle]), rectangle))]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.apply(and[and[green,size1],or[not[size3],circle]],iota(filter(filter(x.s, and[not[and[green,blue]],rectangle]), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:or[%s,%s];4:not[%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:blue;4:rectangle;4:rectangle
'λx.apply(and[not[triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(curry[same_shape,iota(x.s)],iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(iff[yellow,size3],iota(filter(filter(x.s, circle), curry[same_color,x.o])))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(and[curry[same_shape,iota(x.s)],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(or[green,and[implies[size3,size1],or[size3,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:implies[%s,%s];4:size3;4:size1;4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[and[blue,or[and[rectangle,size1],curry[same_color,x.o]]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, and[triangle,size2]), and[not[and[or[and[rectangle,blue],size3],or[and[curry[same_color,iota(x.s)],triangle],circle]]],size3]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:size3;4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle;4:circle;4:size3;4:rectangle
'λx.apply(implies[size2,green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(nor[and[and[circle,size3],not[circle]],and[size3,green]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:not[%s];4:circle;4:and[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, curry[size-lt,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,x.o)'	0:apply(%s,%s);4:circle;1:%s.o;2:x
'λx.forall(and[not[and[circle,circle]],blue],filter(x.s, blue))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[and[or[and[size3,and[triangle,not[green]]],size1],blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:not[%s];4:green;4:size1;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nand[or[and[not[green],size2],not[blue]],or[blue,and[size3,curry[same_shape,x.o]]]],iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:size2;4:not[%s];4:blue;4:or[%s,%s];4:blue;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(or[or[circle,curry[size-leq,iota(x.s)]],triangle],iota(filter(filter(x.s, and[curry[same_size,iota(x.s)],size1]), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(circle, filter(x.s, or[not[yellow],or[or[triangle,size2],size1]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:size1
'λx.apply(nor[yellow,circle],iota(filter(x.s, and[curry[same_shape,x.o],triangle])))'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(curry[same_size,iota(filter(x.s, size1))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, and[rectangle,yellow]), circle), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:yellow;4:circle;4:size2;3:%s.s;2:x
'λx.apply(nand[not[rectangle],not[size2]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,curry[size-leq,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[triangle,and[yellow,triangle]],iota(filter(filter(filter(x.s, nor[green,size1]), yellow), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:size1;4:yellow;4:size2
'λx.apply(and[blue,size2],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size1,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(or[size3,circle],iota(filter(x.s, iff[size1,nor[size1,or[and[circle,green],curry[same_shape,x.o]]]])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:nor[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(and[or[curry[same_size,x.o],green],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[size3,size1],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:size3;1:%s.o;2:x
'λx.exists(not[not[size3]], x.s)'	0:exists(%s, %s);4:not[%s];4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(not[iff[green,nand[rectangle,size2]]],x.s)'	0:forall(%s,%s);4:not[%s];4:iff[%s,%s];4:green;4:nand[%s,%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(and[blue,and[and[nand[nand[and[circle,yellow],green],and[and[yellow,not[rectangle]],or[triangle,rectangle]]],circle],green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:rectangle;4:or[%s,%s];4:triangle;4:rectangle;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.exists(green, filter(x.s, iff[size1,curry[same_size,iota(x.s)]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(not[or[yellow,or[size2,iff[not[and[and[and[and[triangle,iff[size2,green]],triangle],curry[size-gt,iota(filter(x.s, size2))]],and[yellow,blue]]],size3]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:size2;4:green;4:triangle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:yellow;4:blue;4:size3;3:%s.s;2:x
'λx.empty(filter(x.s, or[size3,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.apply(or[circle,or[yellow,triangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[not[circle]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[or[size3,blue],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size3;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[curry[same_shape,x.o],rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[size3,green],iota(filter(filter(x.s, not[circle]), blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:blue
'λx.apply(and[and[blue,size3],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, nor[circle,rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:rectangle
'λx.exists(rectangle, filter(x.s, and[size1,not[curry[same_shape,iota(x.s)]]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size1],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(x.s, and[triangle,yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow
'λx.contains(iota(filter(x.s, or[circle,size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.exists(and[and[rectangle,nor[and[nor[triangle,green],blue],curry[same_size,x.o]]],implies[green,green]], filter(filter(x.s, and[triangle,nand[size2,curry[same_shape,x.o]]]), size2))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:triangle;4:green;4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:green;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(filter(x.s, curry[same_shape,iota(filter(x.s, blue))]), not[and[nand[implies[blue,nor[blue,not[and[size3,size2]]]],curry[same_color,iota(x.s)]],blue]]), blue), not[green]), or[and[green,not[nor[and[and[size3,yellow],blue],size2]]],size2]), and[blue,blue]), not[triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:blue;4:nor[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:size3;4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:blue;4:not[%s];4:green;4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:blue;4:size2;4:size2;4:and[%s,%s];4:blue;4:blue;4:not[%s];4:triangle
'λx.apply(size1,iota(filter(x.s, or[and[and[blue,iff[and[size1,rectangle],or[rectangle,iff[nand[rectangle,circle],or[not[triangle],yellow]]]]],blue],or[or[rectangle,size2],yellow]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:iff[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:nand[%s,%s];4:rectangle;4:circle;4:or[%s,%s];4:not[%s];4:triangle;4:yellow;4:blue;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, triangle), iff[curry[size-geq,x.o],triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:iff[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:triangle
'λx.apply(not[and[curry[same_shape,iota(filter(x.s, circle))],green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[implies[size1,size2],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size1;4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(or[curry[same_color,iota(x.s)],not[or[circle,size3]]],filter(filter(x.s, nand[green,size2]), green))'	0:forall(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size2;4:green
'λx.empty(filter(filter(filter(filter(filter(x.s, rectangle), size2), circle), nor[yellow,size1]), or[rectangle,and[rectangle,blue]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:circle;4:nor[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:blue
'λx.exists(or[rectangle,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.forall(and[triangle,or[green,size3]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.forall(or[size3,triangle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.apply(or[iff[nor[size2,circle],or[curry[size-gt,x.o],implies[size3,not[triangle]]]],rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:size2;4:circle;4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:not[%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(x.s, circle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(curry[same_color,x.o],iota(filter(x.s, curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[and[circle,size3],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(x.s, triangle), and[triangle,rectangle]), not[or[not[rectangle],rectangle]]), triangle), curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:rectangle;4:not[%s];4:or[%s,%s];4:not[%s];4:rectangle;4:rectangle;4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[size3]), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:not[%s];4:circle
'λx.apply(not[and[triangle,triangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[circle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[circle,not[curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[circle]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size1
'λx.exists(and[circle,size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.apply(nor[blue,or[blue,implies[size1,and[size1,circle]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(nor[triangle,or[curry[same_shape,iota(filter(x.s, yellow))],and[not[size2],not[not[green]]]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:not[%s];4:size2;4:not[%s];4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, nand[not[green],curry[size-geq,iota(x.s)]]), circle), yellow), not[circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:green;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:circle;4:yellow;4:not[%s];4:circle
'λx.apply(not[or[circle,and[green,and[blue,green]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(filter(filter(filter(filter(x.s, circle), circle), size3), implies[curry[same_shape,x.o],triangle]), triangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:size3;4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(nor[size2,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), size2), and[or[blue,triangle],size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:size2
'λx.apply(implies[triangle,green],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[circle],iota(filter(filter(x.s, and[blue,yellow]), size1)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow;4:size1
'λx.exists(not[size1], x.s)'	0:exists(%s, %s);4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(iff[blue,curry[size-gt,x.o]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(filter(filter(x.s, size3), not[green]), implies[green,circle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:green;4:implies[%s,%s];4:green;4:circle
'λx.forall(size3,filter(x.s, and[curry[same_color,x.o],rectangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[nand[rectangle,curry[size-lt,x.o]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, circle)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[yellow,and[curry[same_shape,iota(filter(filter(filter(filter(filter(x.s, blue), curry[same_size,x.o]), or[triangle,and[circle,yellow]]), size1), size3))],not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:yellow;4:size1;4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[and[rectangle,size1]],iota(filter(filter(x.s, and[and[triangle,yellow],circle]), circle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:circle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, and[not[or[yellow,size2]],rectangle]), size2), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:size2;4:rectangle;4:size2;4:circle
'λx.contains(iota(filter(x.s, yellow)), filter(filter(filter(filter(x.s, curry[same_color,iota(x.s)]), nor[size2,green]), triangle), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:green;4:triangle;4:blue
'λx.apply(circle,iota(filter(filter(filter(x.s, curry[same_color,x.o]), or[rectangle,size2]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:size2;4:green
'λx.apply(or[size1,not[curry[size-leq,iota(filter(filter(filter(filter(x.s, blue), rectangle), not[nand[curry[same_color,iota(filter(filter(x.s, or[or[size1,size2],not[size2]]), and[curry[size-gt,iota(x.s)],and[blue,nand[implies[triangle,rectangle],size3]]]))],blue]]), rectangle))]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:not[%s];4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size1;4:size2;4:not[%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:implies[%s,%s];4:triangle;4:rectangle;4:size3;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, yellow), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.contains(x.o, filter(filter(x.s, nor[curry[same_color,iota(x.s)],and[size3,and[size1,triangle]]]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size1;4:triangle;4:yellow
'λx.exists(and[rectangle,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.forall(nor[triangle,nand[size2,size2]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:triangle;4:nand[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(implies[circle,and[rectangle,blue]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, and[green,curry[same_size,x.o]]), triangle), curry[same_size,iota(x.s)]), iff[size1,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:green
'λx.exists(or[curry[same_size,iota(filter(x.s, yellow))],circle], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[iff[circle,and[size3,rectangle]],and[triangle,blue]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[size2,size3],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, curry[size-leq,x.o]), yellow), and[size3,not[triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:size3;4:not[%s];4:triangle
'λx.apply(curry[size-leq,iota(x.s)],iota(filter(x.s, and[curry[same_shape,iota(filter(x.s, curry[same_size,iota(filter(filter(x.s, not[size3]), size2))]))],size3])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:size2;4:size3
'λx.apply(not[green],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[size1,size3],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(triangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(circle,iota(filter(x.s, implies[not[rectangle],triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:rectangle;4:triangle
'λx.apply(blue,iota(filter(x.s, or[nor[circle,green],size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:circle;4:green;4:size1
'λx.contains(x.o, filter(x.s, and[yellow,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle
'λx.apply(nand[blue,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[yellow,not[size2]],iota(filter(filter(x.s, blue), and[rectangle,not[or[size2,green]]])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:size2;4:green
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), nand[triangle,curry[size-geq,x.o]]), nor[green,size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:triangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:nor[%s,%s];4:green;4:size2
'λx.forall(yellow,filter(filter(x.s, curry[size-leq,iota(filter(x.s, curry[size-gt,iota(x.s)]))]), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(or[not[yellow],size3],iota(filter(x.s, nand[blue,green])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:green
'λx.contains(x.o, filter(filter(filter(x.s, yellow), or[curry[same_shape,x.o],size2]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:blue
'λx.apply(or[size1,nand[yellow,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, and[yellow,rectangle]), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;4:size2
'λx.apply(and[circle,and[size1,curry[same_shape,x.o]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, or[circle,and[and[and[size2,and[implies[curry[same_shape,x.o],size1],circle]],size2],rectangle]]), blue), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;4:circle;4:size2;4:rectangle;4:blue;4:yellow
'λx.exists(and[triangle,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:green;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(filter(x.s, rectangle), and[not[circle],green]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, triangle), circle), or[size3,or[or[size3,size3],rectangle]]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:or[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:size3;4:size3;4:rectangle;4:circle
'λx.apply(not[and[iff[size1,nand[circle,and[size2,yellow]]],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:size1;4:nand[%s,%s];4:circle;4:and[%s,%s];4:size2;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,blue],iota(filter(x.s, or[curry[same_color,iota(filter(x.s, size3))],size3])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.exists(curry[same_size,iota(x.s)], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.forall(iff[rectangle,rectangle],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[and[blue,or[rectangle,size1]],and[and[green,iff[size2,size3]],size1]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:size2;4:size3;4:size1
'λx.apply(size2,iota(filter(filter(filter(x.s, size1), and[triangle,circle]), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:triangle;4:circle;4:size2
'λx.apply(rectangle,iota(filter(x.s, implies[green,curry[size-gt,iota(x.s)]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), filter(filter(x.s, size3), yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(not[size1],iota(filter(filter(x.s, rectangle), or[and[nor[circle,size1],iff[curry[same_shape,x.o],size2]],not[and[yellow,green]]])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:size1;4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:not[%s];4:and[%s,%s];4:yellow;4:green
'λx.apply(iff[curry[same_shape,x.o],size1],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size3, filter(filter(x.s, not[or[size3,rectangle]]), triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size3;4:rectangle;4:triangle
'λx.apply(implies[and[size3,and[size3,curry[same_shape,iota(filter(x.s, or[size2,nor[rectangle,curry[same_size,iota(filter(x.s, and[curry[size-gt,x.o],triangle]))]]]))]]],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:nor[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[yellow,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.exists(or[and[green,curry[same_size,iota(x.s)]],size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.apply(and[or[rectangle,blue],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,and[nor[or[curry[same_size,x.o],yellow],or[rectangle,or[size3,not[not[curry[same_size,x.o]]]]]],and[not[size2],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:not[%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[rectangle,implies[blue,triangle]],iota(filter(filter(x.s, green), not[and[not[and[and[blue,circle],size2]],green]])))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:size2;4:green
'λx.apply(nor[curry[same_color,x.o],or[or[size2,and[size3,circle]],size1]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[and[nor[curry[same_color,iota(x.s)],circle],or[blue,rectangle]],or[triangle,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:blue;4:rectangle;4:or[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[circle,circle],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size2,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(iff[size2,rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[or[size3,blue],curry[same_shape,x.o]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(curry[same_color,iota(x.s)],filter(filter(filter(x.s, size1), blue), not[and[size2,green]]))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:not[%s];4:and[%s,%s];4:size2;4:green
'λx.apply(and[blue,size2],iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.forall(yellow,filter(filter(filter(x.s, rectangle), and[green,circle]), or[size3,blue]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:green;4:circle;4:or[%s,%s];4:size3;4:blue
'λx.apply(size3,iota(filter(filter(x.s, and[rectangle,and[curry[same_size,x.o],nand[blue,blue]]]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:blue;4:size1
'λx.apply(and[triangle,implies[or[blue,yellow],curry[same_color,x.o]]],iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:implies[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(and[triangle,and[size2,size3]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(not[and[size1,size3]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size1;4:size3;3:%s.s;2:x
'λx.apply(nand[blue,size3],iota(filter(filter(x.s, triangle), not[circle])))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:circle
'λx.contains(x.o, filter(filter(x.s, triangle), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.forall(blue,filter(x.s, and[and[or[size3,size2],and[triangle,yellow]],curry[same_color,iota(x.s)]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:and[%s,%s];4:triangle;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(curry[size-leq,iota(x.s)],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, size3), size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.forall(not[circle],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(not[or[size2,size2]],x.s)'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.exists(not[or[and[or[circle,green],green],implies[size3,yellow]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:green;4:implies[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.forall(and[and[circle,nand[curry[same_shape,x.o],or[blue,triangle]]],size1],filter(x.s, curry[size-leq,x.o]))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), size2), curry[same_shape,iota(filter(x.s, green))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[or[size1,green],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[green,and[triangle,or[yellow,circle]]],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(implies[not[blue],yellow],filter(x.s, curry[size-lt,x.o]))'	0:forall(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.forall(and[nor[size1,and[curry[same_size,iota(filter(filter(x.s, or[rectangle,green]), yellow))],and[triangle,and[circle,blue]]]],curry[same_size,x.o]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green;4:yellow;4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[blue,green],iota(filter(filter(filter(x.s, rectangle), nor[curry[size-lt,iota(x.s)],yellow]), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(or[size1,and[triangle,size3]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[green,size3],iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.forall(nor[size1,yellow],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:size1;4:yellow;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, triangle), size1)), filter(x.s, and[yellow,rectangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, curry[same_size,x.o]), not[triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:triangle
'λx.apply(or[and[rectangle,not[size1]],triangle],iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(or[green,size2],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.exists(yellow, filter(filter(filter(x.s, triangle), size3), triangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:triangle
'λx.apply(or[yellow,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[curry[same_color,iota(filter(filter(x.s, nor[size1,circle]), size3))],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:circle;4:size3;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(implies[rectangle,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(filter(filter(x.s, and[yellow,size1]), circle), size3), and[size1,blue]), nand[triangle,and[size2,and[size1,green]]]), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:circle;4:size3;4:and[%s,%s];4:size1;4:blue;4:nand[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:green;4:rectangle
'λx.apply(or[not[circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:triangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, yellow))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[not[triangle],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), nor[yellow,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:yellow;4:size1
'λx.apply(and[size3,nand[rectangle,or[rectangle,circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size3],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[curry[size-lt,iota(x.s)],not[yellow]],size3],iota(filter(filter(x.s, rectangle), not[size1])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size1
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, triangle), triangle), size3), or[blue,size2]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:size3;4:or[%s,%s];4:blue;4:size2;4:size1
'λx.apply(or[and[not[circle],size2],size2],iota(filter(x.s, nor[size1,or[triangle,curry[same_shape,x.o]]])))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[size2,and[not[and[blue,green]],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:green;4:size2;1:%s.o;2:x
'λx.apply(and[and[size1,and[curry[same_size,x.o],circle]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, and[or[triangle,size1],size2]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:size2
'λx.apply(nor[size3,triangle],iota(filter(filter(x.s, or[not[implies[circle,blue]],and[triangle,size3]]), or[or[yellow,rectangle],green])))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:circle;4:blue;4:and[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:green
'λx.forall(size3,filter(x.s, and[green,yellow]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.apply(nand[size1,circle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(x.s, triangle), size2), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:size2
'λx.apply(size3,iota(filter(filter(x.s, nand[green,size3]), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size3;4:yellow
'λx.forall(and[triangle,size2],filter(x.s, rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[green,and[triangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, curry[same_color,iota(x.s)]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(and[or[size3,size3],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:size3;4:triangle;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, not[green]), size2), size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2;4:size3
'λx.apply(and[size2,size2],iota(filter(x.s, and[yellow,yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(or[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,iff[implies[size2,and[or[nand[blue,curry[same_shape,x.o]],and[or[nor[yellow,size3],nor[circle,circle]],and[size3,green]]],circle]],and[or[nor[or[size1,and[size3,size3]],yellow],size3],or[and[not[yellow],not[or[rectangle,iff[blue,not[not[curry[same_size,x.o]]]]]]],size3]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:iff[%s,%s];4:implies[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:yellow;4:size3;4:nor[%s,%s];4:circle;4:circle;4:and[%s,%s];4:size3;4:green;4:circle;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:size3;4:yellow;4:size3;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:blue;4:not[%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[triangle,size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(filter(x.s, circle), yellow), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:triangle
'λx.apply(curry[same_shape,iota(filter(x.s, and[size3,blue]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[not[yellow],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, yellow), size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(size2,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.contains(iota(x.s), filter(filter(filter(x.s, green), and[or[and[circle,rectangle],size1],yellow]), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:size1;4:yellow;4:rectangle
'λx.contains(x.o, filter(x.s, and[not[not[and[yellow,curry[same_color,iota(x.s)]]]],and[rectangle,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle
'λx.apply(yellow,iota(filter(x.s, nor[nor[size3,yellow],nor[size3,rectangle]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nor[%s,%s];4:size3;4:yellow;4:nor[%s,%s];4:size3;4:rectangle
'λx.apply(and[size3,curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, or[green,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.empty(filter(filter(filter(filter(x.s, size2), and[rectangle,not[circle]]), curry[same_size,iota(filter(x.s, size2))]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:not[%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.contains(x.o, filter(x.s, iff[yellow,and[and[and[not[circle],blue],circle],curry[same_shape,x.o]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(x.s, size1), not[or[nor[implies[and[size2,circle],size3],size1],curry[size-leq,x.o]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:or[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size3;4:size1;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[and[blue,curry[same_color,iota(x.s)]],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(or[size3,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(and[circle,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,or[rectangle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, not[not[rectangle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:rectangle
'λx.apply(and[blue,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, circle), curry[same_shape,x.o]), not[or[and[rectangle,size2],circle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:circle
'λx.apply(and[triangle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(and[circle,not[circle]],filter(x.s, not[size3]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.exists(green, filter(x.s, or[and[yellow,rectangle],blue]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:blue
'λx.apply(size2,iota(filter(x.s, and[circle,not[circle]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:circle
'λx.exists(not[size3], filter(x.s, curry[size-lt,x.o]))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(or[triangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[circle,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(and[rectangle,triangle], filter(filter(x.s, size3), yellow))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.empty(filter(filter(filter(x.s, blue), size2), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:rectangle
'λx.apply(or[not[or[not[size2],size3]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:size2;4:size3;4:triangle;1:%s.o;2:x
'λx.forall(size3,filter(x.s, circle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(curry[same_color,x.o], filter(filter(filter(x.s, implies[size3,curry[same_size,x.o]]), circle), curry[same_size,x.o]))'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(or[and[curry[same_size,iota(x.s)],and[triangle,triangle]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,and[and[nand[size3,nor[size1,yellow]],size3],curry[same_shape,iota(x.s)]]]), or[size1,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:nor[%s,%s];4:size1;4:yellow;4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green
'λx.exists(blue, filter(x.s, size3))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, size1), circle), circle), green), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:circle;4:green;4:circle
'λx.apply(and[nor[size3,and[or[curry[same_shape,iota(filter(filter(filter(x.s, and[or[size2,triangle],triangle]), blue), blue))],blue],triangle]],size2],iota(filter(filter(x.s, rectangle), nor[size3,size1])))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:triangle;4:blue;4:blue;4:blue;4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:size3;4:size1
'λx.apply(curry[size-leq,iota(filter(x.s, curry[size-leq,x.o]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, rectangle), or[size2,implies[circle,curry[size-lt,iota(x.s)]]]), or[and[circle,and[iff[size1,curry[size-lt,iota(x.s)]],yellow]],curry[same_color,x.o]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size2;4:implies[%s,%s];4:circle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:size1;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, and[size3,green]), and[size1,and[size1,triangle]]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:triangle;4:blue
'λx.apply(and[and[and[green,or[not[or[rectangle,green]],and[and[size3,and[size2,or[and[implies[and[not[size2],not[size2]],triangle],or[curry[same_shape,x.o],rectangle]],size3]]],blue]]],not[or[yellow,nor[size3,and[size1,green]]]]],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:not[%s];4:size2;4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:size3;4:blue;4:not[%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:size3;4:and[%s,%s];4:size1;4:green;4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[and[rectangle,size1],or[green,and[implies[and[rectangle,size2],or[triangle,yellow]],or[and[green,not[triangle]],yellow]]]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:or[%s,%s];4:green;4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:triangle;4:yellow;4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.apply(implies[circle,size2],iota(filter(filter(x.s, nand[curry[same_color,x.o],size2]), or[size2,size2])))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;4:or[%s,%s];4:size2;4:size2
'λx.exists(and[blue,circle], filter(filter(x.s, circle), yellow))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, and[triangle,and[yellow,and[blue,blue]]]), rectangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:blue;4:rectangle
'λx.apply(iff[green,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, size2), circle), green), and[size1,green]), size2), or[or[or[nor[curry[same_shape,iota(x.s)],rectangle],circle],and[iff[green,curry[same_size,iota(x.s)]],size3]],triangle]), yellow), blue), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:green;4:and[%s,%s];4:size1;4:green;4:size2;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:circle;4:and[%s,%s];4:iff[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:triangle;4:yellow;4:blue;4:rectangle
'λx.apply(nand[curry[same_shape,x.o],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(nand[not[and[yellow,nand[green,curry[size-lt,iota(x.s)]]]],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:green;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[curry[same_color,iota(filter(filter(x.s, curry[size-gt,iota(x.s)]), circle))],circle],iota(filter(filter(filter(filter(filter(x.s, yellow), triangle), blue), triangle), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:blue;4:triangle;4:size3
'λx.apply(yellow,iota(filter(x.s, and[and[size1,size2],and[curry[size-lt,iota(x.s)],triangle]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.apply(nor[size3,and[size1,curry[same_shape,iota(filter(filter(x.s, and[blue,triangle]), and[rectangle,yellow]))]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size3), not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue
'λx.apply(or[rectangle,triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[or[yellow,size1],and[size1,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[and[blue,size2]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:size2
'λx.exists(or[size3,or[rectangle,or[triangle,triangle]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.forall(not[yellow],filter(filter(x.s, implies[triangle,size3]), size2))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size3;4:size2
'λx.exists(size1, filter(filter(x.s, and[blue,size2]), and[implies[size3,size2],curry[same_size,x.o]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:and[%s,%s];4:implies[%s,%s];4:size3;4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(implies[and[yellow,or[triangle,rectangle]],or[or[size2,blue],blue]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:size2;4:blue;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[or[triangle,curry[same_color,iota(x.s)]]],and[rectangle,size3]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size2,iota(filter(x.s, curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, or[blue,blue])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue
'λx.apply(implies[nor[green,and[green,yellow]],not[circle]],iota(filter(x.s, and[curry[same_shape,iota(filter(x.s, rectangle))],rectangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:green;4:and[%s,%s];4:green;4:yellow;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(or[size1,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size1,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, and[curry[same_shape,iota(x.s)],not[circle]]), iff[circle,size3]), and[green,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle;4:iff[%s,%s];4:circle;4:size3;4:and[%s,%s];4:green;4:yellow
'λx.forall(curry[same_shape,x.o],filter(x.s, rectangle))'	0:forall(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(filter(filter(x.s, yellow), curry[same_size,x.o]), not[size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:size2
'λx.forall(circle,filter(filter(x.s, yellow), not[and[nand[circle,green],or[green,size3]]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:green;4:or[%s,%s];4:green;4:size3
'λx.contains(x.o, filter(x.s, and[curry[same_shape,iota(x.s)],curry[size-lt,x.o]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.forall(or[size3,green],filter(filter(filter(x.s, yellow), not[or[size3,not[and[green,not[and[and[or[curry[size-gt,iota(filter(filter(filter(x.s, and[size2,rectangle]), green), triangle))],and[size1,blue]],size2],rectangle]]]]]]), size3))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:or[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:green;4:triangle;4:and[%s,%s];4:size1;4:blue;4:size2;4:rectangle;4:size3
'λx.apply(or[not[or[curry[size-gt,x.o],green]],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:green;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size1,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.apply(or[blue,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[not[size2],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[size1,and[circle,or[size2,size2]]],size2],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[blue,nand[not[and[not[and[size2,size2]],and[green,curry[same_shape,iota(filter(x.s, size1))]]]],or[green,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size2;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(and[blue,or[size1,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[curry[same_color,iota(filter(filter(x.s, rectangle), and[triangle,size1]))],yellow],iota(filter(filter(filter(x.s, green), yellow), or[blue,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:triangle;4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:or[%s,%s];4:blue;4:rectangle
'λx.forall(green,filter(filter(filter(x.s, blue), green), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:size2
'λx.contains(x.o, filter(x.s, not[curry[same_color,iota(x.s)]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, curry[size-lt,x.o]), size2), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size2;4:size3
'λx.apply(not[not[green]],iota(filter(x.s, and[blue,and[blue,size1]])))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size1
'λx.apply(not[green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(iff[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[nand[not[and[iff[yellow,or[and[or[blue,blue],size1],yellow]],triangle]],size3],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:size1;4:yellow;4:triangle;4:size3;4:yellow;1:%s.o;2:x
'λx.exists(blue, filter(x.s, iff[not[blue],size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:blue;4:size1
'λx.apply(or[not[size1],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[size1,size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(curry[size-geq,iota(filter(filter(x.s, nand[curry[same_size,iota(filter(filter(x.s, size2), circle))],yellow]), curry[same_color,iota(x.s)]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, and[blue,implies[green,green]]), iff[size3,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:implies[%s,%s];4:green;4:green;4:iff[%s,%s];4:size3;4:circle
'λx.apply(or[curry[same_color,iota(x.s)],curry[same_shape,iota(filter(filter(x.s, blue), green))]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, curry[same_color,iota(x.s)]), curry[same_shape,iota(filter(filter(x.s, blue), circle))]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(curry[size-gt,iota(x.s)],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(x.s))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[size1,or[and[yellow,size1],yellow]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:yellow;3:%s.s;2:x
'λx.apply(and[circle,size2],iota(filter(filter(x.s, and[blue,green]), or[size3,curry[same_shape,x.o]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, nor[size2,circle]), and[yellow,and[yellow,size1]]), curry[same_shape,x.o]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:circle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(and[size2,or[blue,rectangle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(nand[and[and[size3,size1],rectangle],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(size1, filter(filter(filter(x.s, not[size2]), and[curry[same_size,iota(x.s)],not[not[size3]]]), and[size3,curry[same_color,iota(filter(filter(x.s, and[curry[same_shape,x.o],and[and[size3,circle],size1]]), triangle))]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size1;4:triangle
'λx.exists(circle, filter(filter(x.s, blue), curry[same_color,iota(x.s)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[and[size1,triangle],or[size3,size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(and[yellow,not[curry[same_color,x.o]]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(x.s, and[and[size3,triangle],size1]), curry[size-leq,iota(x.s)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:size1;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, yellow), yellow), green), and[and[curry[size-leq,x.o],circle],circle]), nand[rectangle,curry[same_size,iota(x.s)]]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:green;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:circle;4:circle;4:nand[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(and[not[implies[green,size3]],and[rectangle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:green;4:size3;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nand[size2,curry[same_size,x.o]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(nand[not[circle],and[size1,and[or[circle,size2],and[yellow,circle]]]],filter(filter(x.s, size2), size3))'	0:forall(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:circle;4:size2;4:and[%s,%s];4:yellow;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(implies[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size2,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(and[not[curry[size-geq,x.o]],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(nand[and[size1,or[green,and[size2,size3]]],triangle],iota(filter(x.s, iff[and[size1,iff[green,size3]],size2])))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:green;4:and[%s,%s];4:size2;4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size1;4:iff[%s,%s];4:green;4:size3;4:size2
'λx.apply(or[rectangle,size3],iota(filter(x.s, or[green,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle
'λx.apply(implies[rectangle,or[rectangle,blue]],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(x.s, and[blue,green]), nand[curry[size-lt,iota(x.s)],blue]), and[and[triangle,not[blue]],not[implies[or[blue,and[curry[size-geq,iota(x.s)],not[yellow]]],or[not[blue],green]]]]), blue), yellow), or[size3,size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;4:nand[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;4:or[%s,%s];4:not[%s];4:blue;4:green;4:blue;4:yellow;4:or[%s,%s];4:size3;4:size3
'λx.apply(and[curry[same_shape,iota(filter(filter(filter(x.s, blue), and[iff[size2,curry[same_color,iota(x.s)]],not[and[blue,green]]]), triangle))],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:green;4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, and[green,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size1
'λx.apply(not[size3],iota(filter(x.s, and[nor[not[triangle],curry[size-leq,x.o]],blue])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:triangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), and[triangle,green]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:green;4:size1
'λx.contains(iota(filter(x.s, yellow)), filter(filter(filter(filter(x.s, yellow), rectangle), rectangle), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:rectangle;4:circle
'λx.apply(not[triangle],iota(filter(filter(x.s, size3), and[green,triangle])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:green;4:triangle
'λx.apply(or[circle,and[curry[same_shape,iota(x.s)],curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, not[circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.empty(filter(filter(filter(x.s, not[size1]), size1), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size1;4:size3
'λx.empty(filter(filter(x.s, rectangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(or[rectangle,nor[circle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[circle,yellow]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow
'λx.forall(size1,filter(filter(x.s, curry[same_color,iota(x.s)]), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle
'λx.contains(iota(filter(x.s, and[triangle,size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, implies[size2,curry[same_color,x.o]]), size2))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2
'λx.forall(size2,filter(x.s, and[rectangle,triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(nor[and[circle,yellow],and[and[and[triangle,rectangle],blue],triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[and[or[blue,and[or[triangle,size1],and[size2,and[green,triangle]]]],size3],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:triangle;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[size3,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(size1,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(or[nor[not[size3],blue],not[curry[same_shape,x.o]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:size3;4:blue;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[green,green],iota(filter(x.s, and[size2,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:triangle
'λx.apply(and[blue,yellow],iota(filter(filter(filter(filter(x.s, curry[same_shape,x.o]), or[rectangle,circle]), rectangle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:circle;4:rectangle;4:yellow
'λx.apply(and[nand[curry[same_size,x.o],rectangle],curry[same_color,iota(filter(filter(x.s, rectangle), circle))]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(size1, filter(filter(filter(x.s, size2), circle), rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, blue), and[curry[same_color,x.o],rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:rectangle
'λx.forall(blue,filter(filter(x.s, implies[and[rectangle,or[size1,rectangle]],blue]), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:rectangle;4:blue;4:green
'λx.apply(blue,iota(filter(filter(x.s, nor[or[and[and[blue,size1],and[yellow,green]],triangle],size1]), nor[curry[size-leq,x.o],size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:and[%s,%s];4:yellow;4:green;4:triangle;4:size1;4:nor[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size1
'λx.apply(and[size3,size2],iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(curry[same_shape,x.o],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(iff[not[size1],or[size1,blue]],iota(filter(filter(filter(x.s, and[rectangle,circle]), size3), triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:circle;4:size3;4:triangle
'λx.exists(size2, filter(x.s, and[and[size3,curry[same_color,iota(filter(x.s, triangle))]],and[or[not[triangle],rectangle],rectangle]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:rectangle;4:rectangle
'λx.apply(and[circle,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, and[blue,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(size2,iota(filter(filter(filter(filter(x.s, rectangle), green), curry[same_shape,x.o]), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), size2), or[green,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:or[%s,%s];4:green;4:triangle
'λx.forall(not[blue],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[blue,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, and[green,curry[size-lt,iota(x.s)]]), size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(not[or[curry[same_shape,x.o],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, nand[yellow,size1]), and[rectangle,and[blue,size1]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), filter(x.s, or[implies[curry[same_size,x.o],yellow],circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;4:circle
'λx.empty(filter(filter(x.s, not[blue]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:rectangle
'λx.apply(and[and[size2,size2],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[curry[same_size,iota(filter(filter(filter(x.s, size1), and[implies[rectangle,and[circle,nand[size1,yellow]]],circle]), yellow))],curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:nand[%s,%s];4:size1;4:yellow;4:circle;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[yellow,and[triangle,size2]],curry[same_size,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[size2,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_size,x.o],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, circle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[rectangle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(green, filter(filter(filter(x.s, triangle), size3), green))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:green
'λx.forall(triangle,filter(filter(filter(x.s, size1), rectangle), green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:green
'λx.apply(green,iota(filter(x.s, nand[size3,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size3
'λx.forall(curry[size-leq,x.o],filter(filter(x.s, size1), curry[same_color,x.o]))'	0:forall(%s,%s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), and[or[size1,implies[blue,circle]],rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:or[%s,%s];4:size1;4:implies[%s,%s];4:blue;4:circle;4:rectangle
'λx.apply(or[iff[yellow,or[size1,nand[not[curry[same_shape,iota(filter(filter(filter(filter(x.s, size3), size1), size1), size1))]],nand[and[circle,curry[same_color,x.o]],green]]]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:nand[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:size1;4:size1;4:nand[%s,%s];4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, and[rectangle,blue]), or[circle,nand[green,size3]]), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue;4:or[%s,%s];4:circle;4:nand[%s,%s];4:green;4:size3;4:size2
'λx.apply(and[nor[implies[circle,green],and[green,blue]],nand[green,implies[and[size3,size2],nor[blue,yellow]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:implies[%s,%s];4:circle;4:green;4:and[%s,%s];4:green;4:blue;4:nand[%s,%s];4:green;4:implies[%s,%s];4:and[%s,%s];4:size3;4:size2;4:nor[%s,%s];4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, implies[and[triangle,and[size3,size1]],yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:size1;4:yellow
'λx.apply(and[curry[same_size,x.o],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(filter(filter(x.s, size1), yellow), size2))],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(x.s, or[rectangle,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2
'λx.contains(x.o, filter(filter(filter(filter(x.s, triangle), rectangle), yellow), implies[green,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:yellow;4:implies[%s,%s];4:green;4:yellow
'λx.apply(implies[size3,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(or[rectangle,and[size1,rectangle]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.exists(and[size2,size2], filter(x.s, not[circle]))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[and[size3,or[or[not[yellow],yellow],or[triangle,size1]]],and[rectangle,and[size3,yellow]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:yellow;4:or[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[size3,and[and[size2,yellow],or[and[green,and[nor[size3,size1],size1]],or[size1,triangle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:nor[%s,%s];4:size3;4:size1;4:size1;4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size1,or[implies[green,or[size1,size2]],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:implies[%s,%s];4:green;4:or[%s,%s];4:size1;4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[curry[same_color,iota(filter(filter(filter(filter(x.s, or[size3,circle]), and[not[and[green,curry[size-leq,x.o]]],size1]), size1), triangle))],size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size1;4:size1;4:triangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size1,nor[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:nor[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[curry[same_color,x.o],blue],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.empty(filter(x.s, and[circle,and[triangle,green]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:green
'λx.apply(or[not[size1],not[size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.exists(and[size1,size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:size2;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[size2,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green
'λx.apply(iff[and[triangle,size3],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:triangle;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.exists(size2, filter(filter(x.s, curry[same_color,iota(x.s)]), size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.exists(and[curry[same_shape,x.o],green], filter(filter(x.s, size3), nand[size1,green]))'	0:exists(%s, %s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:size1;4:green
'λx.apply(and[and[yellow,nor[green,and[triangle,and[triangle,not[green]]]]],size2],iota(filter(filter(filter(filter(filter(x.s, size1), circle), yellow), blue), green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:not[%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:yellow;4:blue;4:green
'λx.exists(not[size3], filter(x.s, size2))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, or[triangle,size2])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2
'λx.apply(curry[size-lt,iota(filter(x.s, implies[and[green,nand[curry[same_shape,x.o],size3]],rectangle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:green;4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(not[not[or[blue,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[and[circle,green],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,yellow],iota(filter(filter(filter(x.s, and[size1,and[implies[size1,rectangle],green]]), yellow), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:implies[%s,%s];4:size1;4:rectangle;4:green;4:yellow;4:triangle
'λx.apply(or[size1,not[triangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[not[and[triangle,curry[size-lt,iota(x.s)]]],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(and[not[size1],circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.forall(implies[and[size1,and[nand[curry[same_shape,iota(filter(x.s, circle))],size1],triangle]],and[curry[same_color,iota(filter(x.s, green))],implies[rectangle,rectangle]]],filter(x.s, size1))'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(triangle,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(circle,iota(filter(filter(filter(x.s, and[or[and[and[not[blue],size2],triangle],circle],not[size2]]), or[curry[size-lt,x.o],and[nor[or[blue,and[green,or[size2,curry[same_color,iota(x.s)]]]],circle],curry[same_shape,iota(x.s)]]]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;4:triangle;4:circle;4:not[%s];4:size2;4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green
'λx.apply(or[iff[green,rectangle],and[circle,circle]],iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.exists(nor[and[not[iff[iff[size3,not[and[triangle,circle]]],iff[or[and[nand[triangle,curry[size-geq,x.o]],rectangle],rectangle],nor[blue,green]]]],size2],blue], filter(filter(x.s, and[and[rectangle,yellow],size3]), green))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:iff[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:triangle;4:circle;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:triangle;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:rectangle;4:rectangle;4:nor[%s,%s];4:blue;4:green;4:size2;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:size3;4:green
'λx.apply(yellow,iota(filter(filter(filter(filter(filter(x.s, size2), size3), blue), not[and[rectangle,curry[same_size,x.o]]]), curry[size-gt,iota(filter(filter(x.s, not[size2]), size2))])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:blue;4:not[%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2
'λx.apply(and[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[size2,rectangle])), filter(filter(x.s, or[not[size3],size3]), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:size3;4:size3;4:rectangle
'λx.apply(triangle,iota(filter(filter(filter(x.s, size3), green), and[or[triangle,green],not[circle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:and[%s,%s];4:or[%s,%s];4:triangle;4:green;4:not[%s];4:circle
'λx.apply(implies[nor[curry[same_size,iota(filter(x.s, and[yellow,circle]))],size3],and[size3,size3]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle;4:size3;4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[triangle]],iota(filter(filter(filter(filter(filter(filter(x.s, green), and[curry[size-gt,x.o],blue]), or[yellow,size2]), green), curry[same_shape,iota(filter(x.s, and[blue,green]))]), green)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:blue;4:or[%s,%s];4:yellow;4:size2;4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:green;4:green
'λx.apply(or[size3,curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[green]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.exists(nor[size1,curry[same_size,iota(x.s)]], filter(filter(x.s, curry[same_color,x.o]), or[triangle,rectangle]))'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(curry[same_size,iota(filter(filter(filter(filter(x.s, not[circle]), and[or[or[green,yellow],size3],and[nor[green,or[not[size2],blue]],curry[size-leq,iota(filter(x.s, and[size1,green]))]]]), green), size2))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size3;4:and[%s,%s];4:nor[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:size2;4:blue;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:green;4:size2;1:%s.o;2:x
'λx.apply(not[not[implies[curry[size-leq,x.o],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[not[nor[triangle,curry[size-geq,iota(filter(filter(filter(x.s, size3), yellow), rectangle))]]],or[nand[blue,size2],curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:triangle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:rectangle;4:or[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size1,and[implies[size3,and[size2,size2]],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:size2;4:size2;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nor[size1,not[green]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:not[%s];4:green
'λx.exists(size2, filter(filter(x.s, blue), size2))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.empty(filter(filter(x.s, and[size1,circle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:yellow
'λx.empty(filter(filter(filter(filter(x.s, size2), blue), not[yellow]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:not[%s];4:yellow;4:size3
'λx.apply(size1,iota(filter(x.s, and[triangle,rectangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(curry[size-gt,iota(x.s)], filter(x.s, circle))'	0:exists(%s, %s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[triangle,and[curry[same_shape,iota(x.s)],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[curry[same_size,iota(filter(filter(filter(x.s, size1), size1), size3))],nor[iff[rectangle,and[curry[same_size,iota(filter(x.s, nand[not[size3],nand[or[size3,implies[curry[size-lt,x.o],triangle]],or[nand[rectangle,and[size3,circle]],size2]]]))],triangle]],rectangle]],iota(filter(filter(filter(x.s, circle), size3), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:size3;4:nor[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:size3;4:nand[%s,%s];4:or[%s,%s];4:size3;4:implies[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:circle;4:size2;4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:size2
'λx.apply(size2,iota(filter(filter(x.s, rectangle), nor[size1,or[triangle,iff[triangle,size1]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:triangle;4:size1
'λx.apply(implies[size3,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[green,and[size3,nand[size2,and[or[blue,yellow],size2]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:nand[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, yellow))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[and[size3,not[green]],not[curry[size-geq,iota(filter(x.s, size2))]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:green;4:not[%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(not[iff[size1,not[not[size2]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:size1;4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[not[size3],and[circle,or[green,and[triangle,and[circle,size2]]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:and[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[triangle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, and[size2,and[size3,size1]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:size3;4:size1
'λx.exists(size3, filter(filter(filter(x.s, and[size1,green]), rectangle), size3))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:rectangle;4:size3
'λx.apply(implies[blue,size2],iota(filter(filter(filter(x.s, not[or[triangle,green]]), green), or[or[green,curry[same_color,x.o]],implies[rectangle,not[iff[triangle,green]]]])))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:green;4:green;4:or[%s,%s];4:or[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:not[%s];4:iff[%s,%s];4:triangle;4:green
'λx.apply(and[and[green,yellow],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(curry[same_size,x.o],filter(filter(x.s, size2), size2))'	0:forall(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(curry[size-leq,iota(x.s)],iota(filter(x.s, and[size3,size1])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1
'λx.contains(iota(filter(filter(x.s, curry[same_color,x.o]), green)), filter(x.s, or[blue,and[size2,size2]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:size2;4:size2
'λx.apply(iff[nand[yellow,size3],and[triangle,or[size2,yellow]]],iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.empty(filter(filter(x.s, triangle), nor[green,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:green;4:green
'λx.contains(x.o, filter(filter(filter(filter(filter(x.s, not[green]), curry[same_size,iota(x.s)]), green), green), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:green;4:rectangle
'λx.apply(and[blue,blue],iota(filter(filter(x.s, green), or[green,triangle])))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:green;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.contains(iota(filter(x.s, implies[curry[same_color,x.o],or[not[circle],size3]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:circle;4:size3;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, and[size1,nand[size2,not[yellow]]]), green), rectangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nand[%s,%s];4:size2;4:not[%s];4:yellow;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[green,not[yellow]],iota(filter(filter(x.s, not[size2]), size2)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2
'λx.apply(blue,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.apply(and[circle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,curry[same_size,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_color,iota(filter(filter(filter(x.s, circle), or[and[size1,nand[green,yellow]],triangle]), size1))],rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:and[%s,%s];4:size1;4:nand[%s,%s];4:green;4:yellow;4:triangle;4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(green,filter(filter(filter(x.s, triangle), circle), or[yellow,size1]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:or[%s,%s];4:yellow;4:size1
'λx.apply(or[not[and[triangle,curry[size-gt,x.o]]],not[blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size2), rectangle), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size3
'λx.apply(or[iff[rectangle,size3],nand[size3,triangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:nand[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(not[rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size2,iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(not[rectangle],iota(filter(x.s, and[and[size1,curry[same_size,x.o]],rectangle])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(and[or[size3,and[or[or[yellow,size1],not[yellow]],not[and[size2,rectangle]]]],or[or[blue,rectangle],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:size2;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, curry[size-lt,iota(x.s)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(filter(filter(filter(filter(x.s, or[curry[same_color,x.o],size3]), curry[same_size,iota(x.s)]), and[yellow,rectangle]), rectangle), size2))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;4:rectangle;4:size2
'λx.apply(and[size3,triangle],iota(filter(filter(filter(filter(filter(filter(x.s, size1), and[size3,circle]), size3), circle), yellow), not[and[curry[size-geq,x.o],green]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size3;4:circle;4:size3;4:circle;4:yellow;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:green
'λx.apply(rectangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[yellow,curry[same_size,iota(filter(x.s, rectangle))]],filter(filter(x.s, circle), rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(rectangle,iota(filter(filter(filter(x.s, curry[size-lt,x.o]), curry[same_size,x.o]), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1
'λx.apply(and[circle,and[size1,size1]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[yellow,triangle],iota(filter(filter(x.s, triangle), not[yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:yellow
'λx.apply(and[triangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.contains(x.o, filter(filter(x.s, yellow), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue
'λx.apply(not[curry[size-geq,iota(filter(x.s, curry[size-geq,x.o]))]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[blue,or[and[or[green,rectangle],and[or[size3,green],size1]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:size1;4:yellow;1:%s.o;2:x
'λx.exists(and[green,and[or[yellow,implies[curry[same_size,iota(filter(filter(filter(filter(filter(filter(x.s, blue), blue), size1), yellow), not[or[triangle,size3]]), nand[circle,or[yellow,triangle]]))],size3]],or[green,and[size2,circle]]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:yellow;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size1;4:yellow;4:not[%s];4:or[%s,%s];4:triangle;4:size3;4:nand[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:triangle;4:size3;4:or[%s,%s];4:green;4:and[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(nand[size1,curry[same_color,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size2,and[curry[same_shape,iota(filter(x.s, iff[green,and[blue,size1]]))],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:and[%s,%s];4:blue;4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[green,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(not[curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[and[curry[same_size,iota(x.s)],size3],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:green;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, or[not[curry[same_shape,iota(x.s)]],size3]), or[curry[same_shape,iota(filter(x.s, blue))],triangle]), blue), circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:blue;4:circle
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, rectangle), and[or[and[green,and[or[triangle,blue],curry[same_shape,iota(x.s)]]],not[curry[same_color,iota(filter(filter(x.s, size1), size1))]]],implies[blue,blue]]), yellow))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:implies[%s,%s];4:blue;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(nand[yellow,curry[size-geq,iota(filter(x.s, yellow))]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.exists(and[nand[circle,size1],size2], filter(filter(x.s, blue), size2))'	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:size1;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(yellow,iota(filter(filter(x.s, yellow), green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green
'λx.apply(and[not[circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[not[nand[yellow,and[size3,or[or[and[not[not[curry[same_size,iota(x.s)]]],rectangle],yellow],curry[same_size,x.o]]]]],iff[and[circle,green],size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:and[%s,%s];4:circle;4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[circle,and[nand[green,not[circle]],and[size3,and[green,rectangle]]]]), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:nand[%s,%s];4:green;4:not[%s];4:circle;4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:rectangle;4:not[%s];4:size1
'λx.apply(or[nand[not[triangle],curry[size-gt,iota(filter(filter(filter(filter(x.s, curry[size-geq,x.o]), rectangle), green), or[implies[curry[same_size,x.o],and[blue,triangle]],and[green,curry[same_shape,x.o]]]))]],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:triangle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:rectangle;4:green;4:or[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[green,size3],filter(x.s, and[triangle,size1]))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1
'λx.forall(and[and[not[size1],yellow],circle],filter(filter(x.s, green), green))'	0:forall(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:yellow;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(or[or[circle,and[and[circle,rectangle],triangle]],and[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:triangle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(green,iota(filter(x.s, curry[same_color,x.o])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, curry[same_color,iota(x.s)]), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2
'λx.apply(and[not[green],green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[size2,not[yellow]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[green,curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[curry[same_size,iota(filter(filter(filter(x.s, yellow), size1), size3))],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:size3;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, yellow), curry[same_shape,iota(x.s)]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(not[rectangle],iota(filter(x.s, and[size2,and[circle,green]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:green
'λx.apply(size1,iota(filter(filter(x.s, curry[size-geq,x.o]), and[and[curry[size-leq,x.o],size2],blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size2;4:blue
'λx.apply(or[triangle,size2],iota(filter(filter(x.s, not[yellow]), green)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:green
'λx.apply(and[size3,nand[yellow,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nand[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[nor[and[size1,and[and[yellow,not[and[and[green,size1],implies[circle,curry[size-lt,x.o]]]]],green]],and[blue,yellow]],and[blue,and[not[and[green,green]],size3]]],iota(filter(filter(filter(filter(x.s, size2), circle), circle), not[or[size2,blue]])))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size1;4:implies[%s,%s];4:circle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:green;4:and[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:circle;4:not[%s];4:or[%s,%s];4:size2;4:blue
'λx.apply(or[not[size1],and[size3,not[and[size1,nand[implies[yellow,rectangle],not[circle]]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:size1;4:nand[%s,%s];4:implies[%s,%s];4:yellow;4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[and[green,nor[not[nand[circle,triangle]],circle]]])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:nor[%s,%s];4:not[%s];4:nand[%s,%s];4:circle;4:triangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(triangle,x.s)'	0:forall(%s,%s);4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(and[circle,not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[size1,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), not[nor[rectangle,not[and[size3,triangle]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:nor[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:size3;4:triangle
'λx.apply(nor[size2,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, green), size1), triangle), and[yellow,and[green,and[and[green,rectangle],size2]]]), curry[same_shape,iota(filter(x.s, size2))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:triangle;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(green,filter(x.s, green))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(filter(filter(x.s, size1), size2), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:triangle
'λx.exists(size2, filter(x.s, not[blue]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(nor[size1,or[size2,green]],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:or[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[curry[size-lt,x.o]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[curry[same_color,x.o]],iota(filter(filter(x.s, and[size1,not[or[yellow,blue]]]), or[rectangle,circle])))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(green,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.empty(filter(x.s, nor[blue,not[and[blue,size3]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:blue;4:size3
'λx.forall(size2,filter(filter(filter(filter(x.s, triangle), blue), triangle), green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:triangle;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, size1), not[size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size1
'λx.apply(blue,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(filter(x.s, triangle), size1), iff[or[and[size2,curry[same_shape,x.o]],triangle],size2]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;4:size2;4:size2
'λx.apply(not[and[and[nor[circle,triangle],circle],curry[same_size,iota(filter(filter(x.s, and[yellow,triangle]), size2))]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:triangle;4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), triangle), curry[same_size,iota(x.s)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.forall(or[blue,circle],filter(filter(filter(x.s, rectangle), blue), yellow))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:yellow
'λx.apply(and[green,curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(not[implies[size2,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[triangle,rectangle],iota(filter(x.s, nor[blue,curry[same_color,iota(x.s)]])))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, and[size2,curry[same_color,x.o]]), size1), or[triangle,nor[blue,size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size1;4:or[%s,%s];4:triangle;4:nor[%s,%s];4:blue;4:size2
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, circle), not[rectangle]), yellow))],iota(filter(filter(filter(x.s, or[rectangle,not[nor[triangle,not[and[or[and[triangle,size1],triangle],blue]]]]]), size2), or[size3,and[or[size3,green],curry[same_shape,x.o]]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:not[%s];4:nor[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:triangle;4:blue;4:size2;4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.exists(and[not[rectangle],nand[and[size2,not[triangle]],size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:triangle;4:size1;3:%s.s;2:x
'λx.apply(and[nand[implies[green,green],not[rectangle]],yellow],iota(filter(filter(filter(x.s, not[rectangle]), curry[same_color,x.o]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:green;4:green;4:not[%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue
'λx.apply(curry[size-lt,iota(filter(x.s, triangle))],iota(filter(filter(x.s, size2), implies[triangle,triangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:implies[%s,%s];4:triangle;4:triangle
'λx.exists(curry[size-gt,x.o], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(or[rectangle,size2],filter(x.s, size2))'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(curry[same_size,x.o],iota(filter(x.s, and[circle,size2])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:size2
'λx.apply(or[size3,triangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[and[size2,green],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[size2,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(size3,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[and[and[circle,circle],size3],and[size1,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:size3;4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, and[curry[same_color,iota(filter(filter(x.s, nor[iff[and[rectangle,triangle],circle],rectangle]), size3))],not[curry[same_shape,x.o]]]), circle), or[triangle,yellow]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:circle;4:rectangle;4:size3;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:or[%s,%s];4:triangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,or[blue,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size3,or[and[green,rectangle],or[implies[size2,size1],curry[size-geq,x.o]]]],iota(filter(filter(filter(x.s, size2), not[iff[curry[size-geq,iota(x.s)],or[or[not[size3],and[not[size2],curry[same_shape,x.o]]],size2]]]), size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:or[%s,%s];4:implies[%s,%s];4:size2;4:size1;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:iff[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:not[%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:size2
'λx.contains(x.o, x.s)'	0:contains(%s, %s);1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[and[yellow,size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:circle;1:%s.o;2:x
'λx.exists(and[triangle,size1], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[and[rectangle,size3],iff[blue,curry[same_shape,iota(filter(x.s, size1))]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:iff[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(and[or[green,green],green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:green;1:iota(%s);3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, or[circle,rectangle]), size3))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;4:size3
'λx.apply(and[rectangle,and[or[and[or[rectangle,size3],and[triangle,and[yellow,nand[size3,size1]]]],not[size2]],rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:nand[%s,%s];4:size3;4:size1;4:not[%s];4:size2;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[curry[same_shape,iota(filter(x.s, size3))],yellow],iota(filter(filter(filter(filter(x.s, size3), triangle), size1), blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:size1;4:blue
'λx.apply(nand[size1,yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[size1,size1],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[curry[same_shape,x.o],circle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(x.s, circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[curry[same_size,iota(x.s)],yellow],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[triangle,size1],iota(filter(filter(filter(filter(x.s, and[curry[same_shape,x.o],blue]), triangle), size3), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;4:triangle;4:size3;4:triangle
'λx.apply(and[green,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, green), size2), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:rectangle
'λx.apply(implies[circle,implies[yellow,implies[and[size2,and[and[blue,yellow],not[circle]]],or[and[size3,and[triangle,curry[size-geq,iota(filter(x.s, yellow))]]],size1]]]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:implies[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:not[%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[size1,curry[same_color,iota(filter(filter(filter(x.s, size3), size1), triangle))]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[and[triangle,not[size2]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(or[size3,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[green,yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:yellow
'λx.contains(iota(x.s), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, circle), size2), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:green
'λx.contains(x.o, filter(x.s, green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[size3,circle],iota(filter(filter(x.s, circle), and[size2,triangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size2;4:triangle
'λx.apply(size3,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(not[and[size3,not[nand[rectangle,not[triangle]]]]],iota(filter(filter(filter(filter(filter(filter(x.s, and[blue,nand[rectangle,triangle]]), circle), size3), size1), yellow), rectangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:not[%s];4:nand[%s,%s];4:rectangle;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:rectangle;4:triangle;4:circle;4:size3;4:size1;4:yellow;4:rectangle
'λx.contains(iota(x.s), filter(x.s, and[not[size3],size3]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size3;4:size3
'λx.apply(or[not[iff[size1,green]],iff[nand[or[size3,blue],size2],yellow]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:iff[%s,%s];4:size1;4:green;4:iff[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size3;4:blue;4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[green,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, size3), yellow))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(circle,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(green,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.exists(curry[same_color,x.o], filter(filter(x.s, size1), size2))'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.apply(and[yellow,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nand[size3,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, curry[same_size,x.o]), implies[and[blue,rectangle],rectangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:rectangle
'λx.apply(and[not[rectangle],curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(and[circle,size1],filter(filter(x.s, or[size3,and[not[not[circle]],size1]]), green))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:not[%s];4:circle;4:size1;4:green
'λx.apply(iff[nor[circle,or[size1,and[rectangle,green]]],curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:circle;4:or[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:green;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(size2, filter(x.s, size1))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(or[yellow,rectangle], filter(filter(x.s, curry[same_color,x.o]), circle))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nand[size1,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(or[triangle,curry[same_color,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.contains(iota(filter(x.s, and[blue,yellow])), filter(x.s, nor[green,size3]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:size3
'λx.apply(or[and[size1,size2],size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(blue, filter(x.s, rectangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.empty(filter(filter(filter(filter(filter(x.s, size1), not[size3]), rectangle), yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size3;4:rectangle;4:yellow;4:size1
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, and[triangle,rectangle]), and[circle,rectangle]), size2), and[blue,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:circle;4:rectangle;4:size2;4:and[%s,%s];4:blue;4:circle
'λx.apply(curry[size-leq,iota(filter(filter(x.s, curry[size-gt,iota(x.s)]), green))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(or[and[circle,blue],and[size2,size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[size3,not[blue]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[same_color,x.o],iff[or[size2,circle],green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:or[%s,%s];4:size2;4:circle;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[not[or[curry[same_shape,x.o],not[size1]]],and[curry[same_color,iota(x.s)],circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[or[implies[green,nor[curry[same_size,x.o],triangle]],size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:green;4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), and[rectangle,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(and[nor[size2,and[rectangle,not[rectangle]]],nor[size1,rectangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:not[%s];4:rectangle;4:nor[%s,%s];4:size1;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(and[and[rectangle,rectangle],or[curry[same_color,iota(filter(filter(filter(x.s, not[triangle]), yellow), size1))],and[triangle,nor[size1,circle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:yellow;4:size1;4:and[%s,%s];4:triangle;4:nor[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, triangle), size1), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;4:triangle
'λx.forall(nor[and[and[yellow,not[or[yellow,triangle]]],and[and[rectangle,implies[size1,rectangle]],size2]],curry[same_shape,iota(x.s)]],filter(x.s, and[and[green,yellow],size2]))'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:or[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:size1;4:rectangle;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size2
'λx.apply(iff[size3,size3],iota(filter(filter(filter(x.s, green), triangle), or[size3,size3])))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:or[%s,%s];4:size3;4:size3
'λx.apply(or[triangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[yellow,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[not[circle],green]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:green;4:size1
'λx.apply(curry[same_size,x.o],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), and[and[curry[size-lt,x.o],not[size3]],size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:not[%s];4:size3;4:size1
'λx.exists(or[size1,triangle], filter(filter(x.s, iff[blue,not[rectangle]]), size2))'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:not[%s];4:rectangle;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, blue), yellow), circle), or[circle,size1])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:circle;4:or[%s,%s];4:circle;4:size1
'λx.apply(nand[and[implies[nand[and[triangle,green],and[size2,or[triangle,green]]],not[or[curry[same_shape,iota(x.s)],not[size3]]]],not[size3]],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:triangle;4:green;4:and[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:green;4:not[%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;4:not[%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.empty(filter(x.s, or[blue,curry[same_color,iota(filter(x.s, curry[same_shape,x.o]))]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.exists(size2, filter(x.s, not[or[blue,size2]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:blue;4:size2
'λx.apply(nor[yellow,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[size1,or[circle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[yellow,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, circle), blue), nand[rectangle,circle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:nand[%s,%s];4:rectangle;4:circle
'λx.empty(filter(x.s, and[iff[not[yellow],and[and[yellow,size1],not[size3]]],size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:size3;4:size2
'λx.apply(nand[curry[same_size,x.o],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(iff[curry[size-lt,x.o],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(iff[size3,size2],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[circle,yellow],iota(filter(x.s, not[curry[same_color,x.o]])))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.exists(implies[nor[size3,yellow],size1], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:nor[%s,%s];4:size3;4:yellow;4:size1;3:%s.s;2:x
'λx.apply(and[and[size2,green],or[curry[same_shape,iota(x.s)],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[or[blue,curry[same_shape,iota(filter(x.s, or[triangle,circle]))]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle
'λx.empty(filter(filter(x.s, size3), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(implies[size1,or[size1,nor[not[rectangle],circle]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:or[%s,%s];4:size1;4:nor[%s,%s];4:not[%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(filter(filter(x.s, and[size3,and[rectangle,size2]]), triangle), or[size2,triangle]), size2), yellow)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:size2;4:triangle;4:or[%s,%s];4:size2;4:triangle;4:size2;4:yellow
'λx.apply(or[and[circle,size1],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[size1,or[green,curry[size-leq,x.o]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:green;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(circle, filter(x.s, circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[size1,or[iff[rectangle,and[size2,implies[size2,circle]]],circle]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:size2;4:implies[%s,%s];4:size2;4:circle;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[or[curry[same_color,x.o],blue],circle],iota(filter(filter(x.s, curry[same_color,x.o]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue
'λx.apply(iff[size1,or[yellow,green]],iota(filter(filter(x.s, not[circle]), nand[size2,not[rectangle]])))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:nand[%s,%s];4:size2;4:not[%s];4:rectangle
'λx.apply(and[and[size3,and[and[blue,or[size3,size1]],and[green,not[circle]]]],and[not[curry[size-leq,iota(filter(x.s, and[size3,nor[and[blue,size2],rectangle]]))]],curry[size-gt,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size3;4:size1;4:and[%s,%s];4:green;4:not[%s];4:circle;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:nor[%s,%s];4:and[%s,%s];4:blue;4:size2;4:rectangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size1,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.exists(not[curry[same_color,iota(x.s)]], filter(x.s, circle))'	0:exists(%s, %s);4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(filter(x.s, curry[same_shape,x.o]), not[size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:size1
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), or[size3,circle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size3;4:circle
'λx.apply(circle,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(and[or[blue,yellow],not[and[curry[same_size,iota(x.s)],yellow]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[nand[and[curry[same_color,iota(x.s)],curry[same_color,iota(filter(filter(filter(x.s, and[circle,triangle]), nand[size2,triangle]), rectangle))]],rectangle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:triangle;4:nand[%s,%s];4:size2;4:triangle;4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(nor[rectangle,circle],filter(filter(x.s, size3), triangle))'	0:forall(%s,%s);4:nor[%s,%s];4:rectangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(implies[nand[circle,blue],iff[yellow,yellow]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:yellow;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, blue), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(triangle,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, or[yellow,size2]), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size2;4:size2
'λx.empty(filter(filter(filter(x.s, iff[and[rectangle,blue],and[implies[size2,rectangle],size1]]), size3), not[and[size2,size3]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:implies[%s,%s];4:size2;4:rectangle;4:size1;4:size3;4:not[%s];4:and[%s,%s];4:size2;4:size3
'λx.forall(circle,filter(filter(x.s, yellow), and[size1,circle]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size1;4:circle
'λx.apply(size2,iota(filter(filter(filter(filter(filter(filter(x.s, iff[and[curry[same_color,iota(x.s)],curry[same_shape,x.o]],rectangle]), size3), nor[or[size1,triangle],or[not[triangle],size2]]), and[yellow,circle]), size2), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:size3;4:nor[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:or[%s,%s];4:not[%s];4:triangle;4:size2;4:and[%s,%s];4:yellow;4:circle;4:size2;4:triangle
'λx.apply(or[size1,rectangle],iota(filter(filter(filter(x.s, size1), or[blue,size2]), and[size3,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:blue;4:size2;4:and[%s,%s];4:size3;4:rectangle
'λx.exists(and[size2,not[and[triangle,circle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:triangle;4:circle;3:%s.s;2:x
'λx.apply(not[and[circle,or[green,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, and[green,triangle]), green), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:green;4:green
'λx.forall(triangle,filter(filter(filter(x.s, rectangle), curry[size-gt,iota(x.s)]), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.exists(not[not[blue]], x.s)'	0:exists(%s, %s);4:not[%s];4:not[%s];4:blue;3:%s.s;2:x
'λx.exists(nand[rectangle,yellow], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, blue), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(or[or[rectangle,triangle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, rectangle), circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(and[curry[same_shape,iota(filter(filter(x.s, triangle), size2))],iff[circle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:iff[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[yellow,rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(x.s), filter(filter(filter(x.s, and[size1,circle]), and[or[size2,yellow],or[size3,rectangle]]), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:size3;4:rectangle;4:yellow
'λx.empty(filter(x.s, and[or[curry[size-gt,iota(filter(x.s, implies[or[and[or[size1,implies[and[curry[size-geq,x.o],curry[same_size,iota(filter(x.s, and[size3,rectangle]))]],triangle]],triangle],not[and[or[size2,and[rectangle,size2]],circle]]],curry[size-leq,iota(x.s)]]))],implies[curry[same_color,x.o],blue]],not[size2]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size1;4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:rectangle;4:triangle;4:triangle;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size2;4:circle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:implies[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;4:not[%s];4:size2
'λx.apply(not[or[size2,and[yellow,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(curry[same_color,x.o],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[yellow,size3],iota(filter(filter(x.s, size2), curry[same_color,x.o])))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size1), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.forall(or[iff[not[green],not[rectangle]],not[circle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:green;4:not[%s];4:rectangle;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(or[or[not[size3],curry[same_shape,iota(x.s)]],not[or[size2,blue]]],iota(filter(filter(filter(filter(x.s, triangle), curry[same_color,x.o]), circle), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle;4:size1
'λx.empty(filter(filter(x.s, circle), not[and[size1,size1]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:and[%s,%s];4:size1;4:size1
'λx.apply(and[or[circle,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.forall(yellow,filter(filter(filter(x.s, rectangle), yellow), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow;4:blue
'λx.forall(size3,filter(filter(filter(x.s, yellow), or[size3,rectangle]), size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size3;4:rectangle;4:size2
'λx.contains(iota(filter(filter(filter(x.s, blue), yellow), not[green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(or[not[triangle],and[triangle,and[or[size1,size1],green]]],iota(filter(filter(filter(x.s, and[not[not[yellow]],or[curry[same_color,iota(filter(x.s, size3))],green]]), triangle), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:size1;4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:yellow;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:triangle;4:rectangle
'λx.apply(yellow,iota(filter(filter(x.s, and[iff[rectangle,triangle],circle]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:triangle;4:circle;4:size3
'λx.forall(not[size1],x.s)'	0:forall(%s,%s);4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(and[curry[size-lt,iota(x.s)],and[and[green,yellow],or[size3,nor[rectangle,green]]]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:yellow;4:or[%s,%s];4:size3;4:nor[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(filter(x.s, not[blue]), size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3
'λx.apply(and[size2,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(and[yellow,blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:blue;3:%s.s;2:x
'λx.apply(nor[yellow,and[rectangle,implies[or[green,blue],or[curry[same_shape,x.o],curry[same_color,iota(x.s)]]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:green;4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(implies[green,size3],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[or[yellow,curry[size-lt,x.o]],green],iff[size3,not[not[yellow]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:green;4:iff[%s,%s];4:size3;4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(implies[yellow,curry[same_shape,x.o]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, size3), rectangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(iff[size3,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(or[and[not[not[curry[size-geq,iota(filter(filter(filter(filter(x.s, triangle), yellow), circle), blue))]]],curry[same_size,x.o]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:circle;4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, size2), circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(green,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[curry[size-leq,iota(x.s)],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(implies[or[triangle,and[size2,and[blue,not[and[iff[rectangle,and[circle,size3]],implies[blue,size1]]]]]],and[triangle,triangle]],iota(filter(x.s, and[green,size2])))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:size3;4:implies[%s,%s];4:blue;4:size1;4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.apply(or[and[size1,triangle],not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:not[%s];4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, curry[same_size,x.o]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle
'λx.apply(not[iff[green,not[iff[rectangle,curry[same_shape,x.o]]]]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:green;4:not[%s];4:iff[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[green,and[size1,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.forall(curry[size-lt,iota(filter(x.s, circle))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, blue), not[triangle]), and[circle,and[circle,curry[same_size,iota(filter(filter(filter(filter(filter(x.s, green), curry[same_shape,iota(x.s)]), rectangle), size1), rectangle))]]]), and[triangle,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:triangle;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size1;4:rectangle;4:and[%s,%s];4:triangle;4:yellow
'λx.exists(and[triangle,circle], filter(x.s, curry[same_shape,iota(filter(x.s, triangle))]))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[triangle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[not[triangle],green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(curry[same_color,iota(x.s)], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(iff[or[curry[same_shape,iota(x.s)],green],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), not[blue]), or[blue,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue;4:or[%s,%s];4:blue;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, and[rectangle,rectangle]), curry[size-lt,iota(x.s)]), nor[size1,size1])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:size1
'λx.apply(size2,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(blue,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.contains(x.o, filter(filter(filter(filter(x.s, rectangle), or[circle,size2]), triangle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:circle;4:size2;4:triangle;4:size2
'λx.apply(and[size2,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[or[green,or[yellow,triangle]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:yellow;4:triangle;4:green;1:%s.o;2:x
'λx.apply(implies[curry[same_shape,iota(x.s)],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(yellow,iota(filter(filter(filter(x.s, green), not[size2]), and[yellow,and[curry[same_color,iota(x.s)],triangle]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size2;4:and[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.forall(triangle,filter(x.s, and[triangle,size1]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size1
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, triangle), curry[size-leq,x.o]), not[curry[size-leq,iota(x.s)]]), green), yellow), or[or[or[blue,circle],and[not[triangle],size1]],circle]), or[blue,green]), size2), size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:green;4:yellow;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:not[%s];4:triangle;4:size1;4:circle;4:or[%s,%s];4:blue;4:green;4:size2;4:size3;4:blue
'λx.apply(and[and[size1,yellow],rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(curry[same_size,iota(x.s)],iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[and[blue,and[curry[same_color,iota(filter(x.s, and[curry[size-gt,iota(x.s)],yellow]))],or[yellow,and[size1,iff[or[green,yellow],curry[same_size,iota(filter(x.s, blue))]]]]]],not[size2]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:iff[%s,%s];4:or[%s,%s];4:green;4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[size1,and[size2,and[green,nand[yellow,iff[triangle,circle]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:and[%s,%s];4:green;4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, size3), blue))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(nor[triangle,size3],iota(filter(filter(filter(filter(x.s, triangle), and[size2,iff[rectangle,green]]), green), size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size2;4:iff[%s,%s];4:rectangle;4:green;4:green;4:size1
'λx.apply(and[and[circle,blue],iff[not[rectangle],rectangle]],iota(filter(filter(x.s, and[nor[curry[size-geq,x.o],and[green,size2]],and[circle,blue]]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:not[%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:circle;4:blue;4:green
'λx.contains(iota(filter(filter(filter(filter(filter(x.s, and[size3,curry[same_color,iota(filter(filter(x.s, green), curry[size-geq,iota(filter(filter(x.s, size1), nor[triangle,size2]))]))]]), size3), not[curry[same_shape,x.o]]), circle), and[blue,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:triangle;4:size2;4:size3;4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:and[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, size2), yellow), rectangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:rectangle;4:size2
'λx.contains(x.o, filter(filter(filter(x.s, green), blue), not[implies[triangle,and[green,implies[circle,size1]]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:not[%s];4:implies[%s,%s];4:triangle;4:and[%s,%s];4:green;4:implies[%s,%s];4:circle;4:size1
'λx.apply(not[not[size2]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(not[curry[same_color,iota(x.s)]],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, or[yellow,yellow]), size2), triangle)), filter(filter(filter(filter(x.s, size2), green), circle), size1))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:yellow;4:size2;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:circle;4:size1
'λx.apply(implies[size2,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, curry[same_shape,x.o])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[size3]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:yellow
'λx.contains(x.o, filter(filter(filter(x.s, blue), size2), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:size2
'λx.apply(not[and[size3,rectangle]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[rectangle,circle], filter(filter(filter(x.s, or[and[triangle,size1],yellow]), triangle), triangle))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:yellow;4:triangle;4:triangle
'λx.apply(and[nand[rectangle,curry[size-leq,iota(x.s)]],triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, curry[same_size,iota(x.s)])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[and[rectangle,or[rectangle,curry[size-lt,iota(x.s)]]],yellow]), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(and[curry[same_shape,iota(filter(filter(x.s, size2), not[green]))],curry[same_size,x.o]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(yellow,filter(x.s, curry[same_shape,iota(x.s)]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[size1],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[curry[same_shape,iota(x.s)]],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(green,iota(filter(filter(x.s, and[size3,and[size3,size2]]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:size2;4:size2
'λx.apply(and[size3,and[and[and[nand[size3,size1],and[blue,and[size3,not[size1]]]],yellow],not[yellow]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:size3;4:size1;4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:not[%s];4:size1;4:yellow;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(or[yellow,circle],iota(filter(filter(filter(filter(x.s, triangle), or[and[rectangle,circle],blue]), circle), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:blue;4:circle;4:rectangle
'λx.apply(and[blue,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[implies[size1,circle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size1;4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[not[yellow],not[size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[yellow,size2],nor[curry[same_size,iota(filter(filter(filter(x.s, or[and[size1,size3],blue]), curry[same_size,iota(x.s)]), green))],not[rectangle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:size3;4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(nor[blue,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(or[size1,nand[or[size3,size1],green]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:or[%s,%s];4:size3;4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), circle), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:triangle
'λx.apply(not[and[size1,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(filter(filter(filter(x.s, nor[blue,circle]), size1), size1), green), and[curry[same_color,iota(filter(filter(filter(filter(x.s, blue), and[size3,or[size1,and[triangle,yellow]]]), blue), green))],size3]), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:circle;4:size1;4:size1;4:green;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size3;4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:yellow;4:blue;4:green;4:size3;4:size3
'λx.apply(and[or[or[size3,triangle],or[size2,not[not[triangle]]]],size2],iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:or[%s,%s];4:size2;4:not[%s];4:not[%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(x.s, nand[blue,blue]), implies[not[circle],green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:blue;4:implies[%s,%s];4:not[%s];4:circle;4:green
'λx.apply(and[and[triangle,curry[same_color,x.o]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), and[yellow,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:yellow
'λx.contains(iota(x.s), filter(filter(x.s, curry[size-lt,iota(filter(filter(x.s, and[not[not[size3]],circle]), and[curry[size-lt,x.o],and[blue,and[triangle,triangle]]]))]), curry[same_shape,x.o]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:size3;4:circle;4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, nor[size3,curry[same_shape,iota(x.s)]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(or[and[curry[size-leq,iota(filter(x.s, size1))],or[rectangle,blue]],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:rectangle;4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, or[size3,and[or[rectangle,yellow],yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:yellow
'λx.exists(and[size1,or[curry[same_size,iota(filter(filter(x.s, size1), circle))],blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:blue;3:%s.s;2:x
'λx.apply(and[or[circle,blue],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), not[size1]), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size1;4:not[%s];4:size3
'λx.apply(yellow,iota(filter(filter(filter(x.s, and[blue,rectangle]), curry[same_color,x.o]), curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(x.s, not[triangle]), blue), and[green,and[circle,or[size2,curry[same_color,iota(filter(x.s, and[iff[triangle,and[or[and[triangle,size3],and[and[and[curry[same_color,iota(filter(x.s, size2))],curry[same_size,iota(filter(x.s, yellow))]],not[and[blue,triangle]]],curry[size-lt,iota(x.s)]]],triangle]],triangle]))]]]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:blue;4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:and[%s,%s];4:blue;4:triangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, or[and[rectangle,not[not[green]]],green]), not[or[blue,size3]]), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:not[%s];4:green;4:green;4:not[%s];4:or[%s,%s];4:blue;4:size3;4:circle
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), yellow), and[triangle,not[yellow]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow;4:and[%s,%s];4:triangle;4:not[%s];4:yellow
'λx.apply(and[and[nor[and[and[size3,triangle],circle],yellow],implies[curry[same_shape,iota(filter(x.s, rectangle))],triangle]],curry[same_color,x.o]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:circle;4:yellow;4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(curry[same_shape,iota(x.s)],iota(filter(filter(filter(filter(x.s, yellow), triangle), nor[yellow,not[size3]]), and[triangle,green])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:nor[%s,%s];4:yellow;4:not[%s];4:size3;4:and[%s,%s];4:triangle;4:green
'λx.exists(or[size2,size1], filter(filter(x.s, and[curry[same_shape,x.o],rectangle]), curry[same_shape,iota(filter(filter(filter(x.s, size1), triangle), rectangle))]))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:rectangle
'λx.forall(yellow,filter(x.s, and[size2,yellow]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow
'λx.apply(curry[same_color,x.o],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(yellow, filter(filter(x.s, blue), size3))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(and[implies[green,nand[size3,triangle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:nand[%s,%s];4:size3;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.exists(rectangle, filter(filter(x.s, size3), not[nand[curry[same_shape,iota(filter(x.s, not[triangle]))],triangle]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:triangle
'λx.forall(implies[triangle,triangle],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[rectangle,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(nor[or[green,not[or[green,circle]]],blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:green;4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, iff[size1,blue]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:blue;4:blue
'λx.apply(and[implies[size3,circle],curry[same_shape,iota(filter(filter(x.s, size1), not[and[rectangle,nand[and[curry[same_color,x.o],circle],size3]]]))]],iota(filter(filter(filter(filter(filter(x.s, and[yellow,triangle]), nor[curry[same_color,iota(x.s)],blue]), rectangle), size1), not[circle])))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size3;4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:rectangle;4:size1;4:not[%s];4:circle
'λx.apply(and[yellow,and[blue,or[size1,or[nor[blue,size2],curry[size-lt,iota(x.s)]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:or[%s,%s];4:nor[%s,%s];4:blue;4:size2;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, size1), curry[same_shape,x.o]), or[not[triangle],and[blue,curry[size-leq,x.o]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:curry[%s,%s];5:size-leq;1:%s.o;2:x
'λx.apply(iff[triangle,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, yellow), not[or[circle,not[size2]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:or[%s,%s];4:circle;4:not[%s];4:size2
'λx.apply(not[iff[or[green,or[green,rectangle]],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:green;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(curry[same_size,iota(filter(filter(x.s, green), yellow))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, and[size2,size1]), and[rectangle,and[rectangle,and[green,yellow]]]), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:yellow;4:yellow
'λx.apply(and[size1,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.forall(curry[size-lt,iota(x.s)],filter(filter(filter(x.s, yellow), yellow), size1))'	0:forall(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:size1
'λx.apply(not[yellow],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[not[circle],size2],iota(filter(filter(filter(filter(filter(x.s, green), rectangle), blue), size3), iff[or[circle,and[size2,and[circle,blue]]],size3])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:blue;4:size3;4:iff[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:blue;4:size3
'λx.forall(size3,filter(filter(x.s, green), circle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.forall(size1,filter(filter(x.s, size3), size2))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2
'λx.apply(not[and[not[yellow],not[green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[not[blue],nor[rectangle,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:nor[%s,%s];4:rectangle;4:green
'λx.apply(and[rectangle,curry[size-lt,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,x.o)'	0:apply(%s,%s);4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[curry[same_size,iota(x.s)],green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:green
'λx.exists(green, filter(x.s, size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(x.s, and[size2,and[blue,size3]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size3
'λx.apply(not[not[blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[size-lt,iota(filter(filter(filter(x.s, yellow), and[not[nor[size3,not[or[or[size3,and[size1,blue]],size3]]]],curry[same_size,iota(x.s)]]), not[or[circle,iff[yellow,green]]]))],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:size3;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:blue;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:iff[%s,%s];4:yellow;4:green;4:size2;1:%s.o;2:x
'λx.apply(and[and[size3,green],and[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(curry[same_shape,iota(filter(x.s, not[circle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, blue), rectangle), and[iff[blue,curry[same_size,x.o]],size3]), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size3;4:size1
'λx.apply(or[circle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(curry[same_color,iota(filter(x.s, or[circle,circle]))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.forall(not[rectangle],x.s)'	0:forall(%s,%s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(or[circle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[green,or[not[rectangle],implies[circle,nand[triangle,triangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:rectangle;4:implies[%s,%s];4:circle;4:nand[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, and[triangle,blue]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.apply(blue,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(and[blue,rectangle],iota(filter(filter(filter(filter(filter(filter(x.s, circle), blue), yellow), yellow), and[blue,size3]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:yellow;4:yellow;4:and[%s,%s];4:blue;4:size3;4:green
'λx.apply(curry[same_size,x.o],iota(filter(x.s, nand[triangle,not[blue]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:not[%s];4:blue
'λx.exists(size1, filter(filter(filter(filter(x.s, circle), and[green,rectangle]), yellow), curry[same_size,iota(x.s)]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:green;4:rectangle;4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(or[size1,rectangle], filter(filter(x.s, and[implies[size2,size1],blue]), green))'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:size2;4:size1;4:blue;4:green
'λx.apply(nand[green,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(and[triangle,curry[size-leq,x.o]], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(not[triangle],filter(filter(filter(x.s, circle), blue), nor[blue,iff[blue,blue]]))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:nor[%s,%s];4:blue;4:iff[%s,%s];4:blue;4:blue
'λx.apply(and[iff[blue,rectangle],rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:rectangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[blue,triangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[and[size3,curry[same_shape,x.o]],and[and[triangle,size1],size2]], filter(x.s, or[circle,or[size2,or[triangle,yellow]]]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:or[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:yellow
'λx.apply(not[size1],iota(filter(filter(filter(filter(x.s, size1), size1), or[size2,yellow]), and[yellow,and[iff[green,circle],blue]])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:or[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:yellow;4:and[%s,%s];4:iff[%s,%s];4:green;4:circle;4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, size2), or[and[and[green,or[circle,yellow]],curry[same_shape,iota(x.s)]],and[size1,yellow]]), iff[size1,blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:yellow;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow;4:iff[%s,%s];4:size1;4:blue
'λx.exists(and[implies[yellow,blue],size3], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:blue;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.contains(x.o, filter(filter(filter(filter(x.s, blue), and[yellow,yellow]), size1), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:yellow;4:yellow;4:size1;4:size2
'λx.apply(not[triangle],iota(filter(filter(x.s, or[rectangle,iff[nand[size2,rectangle],not[nand[and[or[yellow,not[not[iff[not[green],or[or[curry[same_color,iota(x.s)],not[rectangle]],circle]]]]],curry[same_color,x.o]],not[size3]]]]]), curry[same_shape,x.o])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:nand[%s,%s];4:size2;4:rectangle;4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:not[%s];4:iff[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:rectangle;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(green,x.o)'	0:apply(%s,%s);4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[size3]), or[curry[same_shape,iota(x.s)],not[circle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(curry[size-lt,x.o],iota(filter(x.s, not[not[circle]])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:circle
'λx.empty(filter(filter(x.s, rectangle), or[green,curry[same_size,x.o]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), and[green,not[yellow]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:not[%s];4:yellow
'λx.apply(and[nand[yellow,and[triangle,size3]],or[curry[same_size,x.o],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.forall(nand[not[and[circle,rectangle]],or[not[yellow],or[nand[size3,size2],size2]]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:rectangle;4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:nand[%s,%s];4:size3;4:size2;4:size2;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(filter(filter(x.s, rectangle), triangle), blue))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, size1), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2
'λx.forall(and[size1,size3],filter(filter(x.s, size1), or[triangle,and[size1,yellow]]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:yellow
'λx.apply(green,iota(filter(x.s, and[yellow,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(and[rectangle,circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size1,and[size3,and[nor[size2,size1],not[size1]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:and[%s,%s];4:nor[%s,%s];4:size2;4:size1;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[not[implies[rectangle,curry[same_shape,iota(filter(x.s, yellow))]]],nor[yellow,nor[size3,size2]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:yellow;4:nor[%s,%s];4:size3;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(and[blue,not[or[size1,circle]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, yellow), triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.forall(size1,filter(x.s, iff[size3,or[rectangle,size1]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:size1
'λx.apply(and[not[rectangle],circle],iota(filter(filter(x.s, curry[same_size,iota(x.s)]), iff[size2,and[green,not[and[curry[same_color,iota(x.s)],rectangle]]]])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, green), or[green,size1]), curry[size-gt,x.o]), not[size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:green;4:size1;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(and[or[circle,nand[and[size1,curry[same_color,iota(filter(filter(x.s, nor[and[implies[green,iff[iff[size2,size3],not[curry[size-geq,x.o]]]],green],size1]), not[rectangle]))]],yellow]],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:nand[%s,%s];4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:green;4:iff[%s,%s];4:iff[%s,%s];4:size2;4:size3;4:not[%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:green;4:size1;4:not[%s];4:rectangle;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[and[yellow,green],circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(blue,iota(filter(x.s, or[triangle,curry[same_size,iota(filter(x.s, rectangle))]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[green,and[rectangle,size3]]],iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.empty(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, green), circle), nand[green,iff[blue,curry[same_shape,iota(x.s)]]]), triangle), triangle), not[blue]), size3), implies[size1,blue]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:nand[%s,%s];4:green;4:iff[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:triangle;4:not[%s];4:blue;4:size3;4:implies[%s,%s];4:size1;4:blue;4:blue
'λx.apply(nor[and[curry[size-gt,iota(x.s)],circle],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:circle;4:triangle;1:%s.o;2:x
'λx.exists(and[blue,triangle], filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.forall(not[size3],filter(filter(filter(x.s, size2), iff[blue,green]), rectangle))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:blue;4:green;4:rectangle
'λx.apply(and[blue,curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[nor[curry[same_size,x.o],green],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.forall(or[nand[rectangle,green],not[green]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:green;4:not[%s];4:green;3:%s.s;2:x
'λx.exists(rectangle, filter(filter(filter(x.s, not[and[or[and[and[and[and[size2,size3],size2],and[nand[not[rectangle],yellow],yellow]],size1],blue],and[rectangle,curry[same_shape,iota(x.s)]]]]), and[and[not[size1],rectangle],size3]), curry[same_shape,iota(x.s)]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size3;4:size2;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:rectangle;4:yellow;4:yellow;4:size1;4:blue;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:rectangle;4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[green,green],iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(or[circle,not[curry[same_size,x.o]]],iota(filter(filter(x.s, size3), and[size2,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size2;4:rectangle
'λx.forall(size3,filter(x.s, curry[size-lt,iota(filter(x.s, nor[and[and[or[size2,curry[same_shape,x.o]],circle],nor[size1,nand[rectangle,or[rectangle,not[blue]]]]],rectangle]))]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle;4:nor[%s,%s];4:size1;4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:not[%s];4:blue;4:rectangle
'λx.forall(and[circle,and[size1,size3]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size3;3:%s.s;2:x
'λx.apply(nor[curry[same_shape,x.o],nor[yellow,not[curry[same_size,x.o]]]],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:yellow;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[size-gt,x.o],nand[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, blue), nor[triangle,or[not[curry[size-geq,x.o]],or[blue,curry[same_shape,x.o]]]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(or[nor[and[circle,rectangle],circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:circle;4:triangle;1:%s.o;2:x
'λx.exists(curry[same_size,iota(filter(filter(x.s, size2), not[or[triangle,green]]))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:or[%s,%s];4:triangle;4:green;3:%s.s;2:x
'λx.apply(or[curry[same_color,iota(x.s)],curry[same_color,x.o]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[yellow,nor[rectangle,not[size1]]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:nor[%s,%s];4:rectangle;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, implies[and[curry[size-gt,x.o],or[green,and[and[circle,or[size1,and[curry[same_size,iota(filter(x.s, curry[same_shape,iota(x.s)]))],and[green,or[and[green,size1],rectangle]]]]],nor[blue,yellow]]]],curry[size-gt,x.o]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:green;4:size1;4:rectangle;4:nor[%s,%s];4:blue;4:yellow;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(filter(filter(x.s, yellow), size3), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:circle
'λx.apply(and[yellow,rectangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[green,size2],filter(x.s, and[curry[same_shape,x.o],circle]))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:circle
'λx.contains(x.o, filter(filter(x.s, size2), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.empty(filter(filter(filter(x.s, size1), and[size1,green]), not[and[triangle,curry[same_shape,iota(x.s)]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:green;4:not[%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, or[curry[same_size,x.o],rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:rectangle
'λx.exists(not[yellow], filter(x.s, or[triangle,iff[implies[blue,curry[same_color,x.o]],and[and[rectangle,size1],rectangle]]]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:iff[%s,%s];4:implies[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:rectangle
'λx.apply(and[blue,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[circle,circle]), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle;4:yellow;3:%s.s;2:x
'λx.apply(or[or[implies[blue,and[and[circle,not[or[not[size1],implies[green,blue]]]],size3]],yellow],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:not[%s];4:size1;4:implies[%s,%s];4:green;4:blue;4:size3;4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(curry[same_color,x.o],filter(filter(filter(x.s, and[and[and[circle,blue],blue],triangle]), size3), size1))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:blue;4:triangle;4:size3;4:size1
'λx.apply(and[green,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(implies[size2,and[size1,or[blue,curry[size-geq,iota(filter(x.s, triangle))]]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(implies[yellow,nor[blue,or[not[blue],circle]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:nor[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[circle,curry[size-gt,x.o]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[nor[or[or[and[size3,triangle],curry[size-geq,iota(x.s)]],size1],size1],blue],iota(filter(filter(filter(filter(filter(filter(filter(filter(filter(x.s, not[size1]), circle), yellow), triangle), rectangle), and[implies[green,size2],and[size1,size1]]), not[size2]), curry[size-leq,iota(x.s)]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:size1;4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:circle;4:yellow;4:triangle;4:rectangle;4:and[%s,%s];4:implies[%s,%s];4:green;4:size2;4:and[%s,%s];4:size1;4:size1;4:not[%s];4:size2;4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:green
'λx.forall(size2,filter(x.s, size3))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[and[blue,green],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,x.o],iota(filter(x.s, not[implies[yellow,yellow]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:yellow;4:yellow
'λx.contains(x.o, filter(filter(x.s, and[and[blue,triangle],and[curry[same_size,iota(filter(filter(x.s, not[size2]), size2))],not[circle]]]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:size2;4:not[%s];4:circle;4:blue
'λx.apply(and[curry[same_size,x.o],nor[curry[same_shape,x.o],triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[triangle,not[curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size1,x.s)'	0:forall(%s,%s);4:size1;3:%s.s;2:x
'λx.apply(curry[same_size,x.o],iota(filter(filter(filter(filter(x.s, yellow), blue), size3), and[curry[size-gt,iota(filter(x.s, curry[size-lt,x.o]))],rectangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size3;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:rectangle
'λx.exists(not[curry[same_shape,x.o]], filter(x.s, curry[same_size,x.o]))'	0:exists(%s, %s);4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[or[circle,curry[same_size,x.o]],green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[implies[not[rectangle],nand[not[circle],size1]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:rectangle;4:nand[%s,%s];4:not[%s];4:circle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(triangle,iota(filter(filter(x.s, green), and[size3,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size3;4:size3
'λx.apply(and[triangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[not[size3],nand[and[rectangle,and[blue,triangle]],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(and[green,and[size1,or[size3,or[blue,yellow]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[or[blue,circle],or[nand[and[size3,circle],size2],implies[and[curry[size-leq,x.o],circle],size1]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size2;4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.exists(yellow, filter(x.s, circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(filter(x.s, curry[same_shape,iota(filter(x.s, and[size1,blue]))]), and[rectangle,and[and[green,blue],implies[size1,triangle]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:green;4:blue;4:implies[%s,%s];4:size1;4:triangle
'λx.apply(implies[and[and[size1,blue],nand[blue,nor[nand[iff[size2,nor[or[and[circle,blue],rectangle],rectangle]],blue],circle]]],and[curry[same_size,x.o],and[blue,not[and[or[and[or[size2,triangle],not[yellow]],blue],yellow]]]]],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:nand[%s,%s];4:blue;4:nor[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:size2;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:rectangle;4:rectangle;4:blue;4:circle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:not[%s];4:yellow;4:blue;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,not[curry[size-lt,iota(filter(filter(filter(x.s, iff[blue,yellow]), triangle), or[green,not[size3]]))]]],and[green,and[green,and[curry[same_size,iota(x.s)],not[yellow]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:yellow;4:triangle;4:or[%s,%s];4:green;4:not[%s];4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(filter(filter(filter(x.s, yellow), triangle), rectangle), triangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:rectangle;4:triangle
'λx.exists(rectangle, filter(filter(filter(x.s, size2), curry[size-gt,iota(filter(filter(filter(x.s, yellow), blue), and[size1,circle]))]), triangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:and[%s,%s];4:size1;4:circle;4:triangle
'λx.forall(circle,filter(x.s, or[blue,implies[and[size2,triangle],and[size2,circle]]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:implies[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:and[%s,%s];4:size2;4:circle
'λx.empty(filter(filter(filter(x.s, and[nand[size2,curry[size-geq,iota(x.s)]],blue]), size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:size2;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:blue;4:size2;4:size1
'λx.apply(not[curry[same_shape,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(and[triangle,implies[curry[size-gt,x.o],size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:implies[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(not[triangle],filter(filter(x.s, size1), size3))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(and[rectangle,and[nor[not[curry[same_size,iota(x.s)]],nand[size1,circle]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,size2],iota(filter(filter(filter(x.s, circle), size2), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size1
'λx.apply(or[blue,blue],iota(filter(filter(x.s, curry[size-lt,x.o]), and[or[triangle,green],not[circle]])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:green;4:not[%s];4:circle
'λx.exists(nand[rectangle,not[and[rectangle,size3]]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:rectangle;4:size3;3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, yellow), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(and[circle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.forall(and[triangle,curry[same_size,iota(filter(x.s, blue))]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, rectangle), green), triangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:triangle;4:triangle
'λx.apply(nor[triangle,circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[green,yellow],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(and[and[yellow,rectangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size2), size2), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:circle
'λx.apply(green,iota(filter(filter(x.s, or[and[or[green,not[size2]],yellow],size3]), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:size2;4:yellow;4:size3;4:rectangle
'λx.apply(and[curry[same_shape,x.o],green],iota(filter(filter(x.s, and[yellow,curry[size-geq,iota(x.s)]]), curry[same_shape,x.o])))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(rectangle,iota(filter(x.s, nor[circle,and[yellow,curry[same_size,x.o]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(or[or[blue,yellow],nand[size2,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:nand[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(filter(x.s, size2), triangle), not[curry[size-leq,iota(filter(x.s, size3))]])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:not[%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(or[size2,curry[same_size,x.o]],filter(x.s, curry[size-geq,iota(x.s)]))'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(and[rectangle,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:green;3:%s.s;2:x
'λx.forall(or[blue,size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(and[not[yellow],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(green,filter(x.s, yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[or[and[iff[size1,nand[not[yellow],size3]],yellow],size1],and[not[green],or[circle,size1]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:size1;4:nand[%s,%s];4:not[%s];4:yellow;4:size3;4:yellow;4:size1;4:and[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.apply(implies[green,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, or[blue,and[not[size3],nor[yellow,green]]]), nor[yellow,green]), or[green,curry[size-leq,iota(filter(filter(filter(x.s, not[blue]), nand[curry[same_shape,x.o],blue]), size1))]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:size3;4:nor[%s,%s];4:yellow;4:green;4:nor[%s,%s];4:yellow;4:green;4:or[%s,%s];4:green;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:nand[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;4:size1
'λx.forall(nand[and[not[green],nand[curry[size-lt,iota(filter(x.s, size3))],curry[same_size,iota(filter(x.s, green))]]],size2],filter(x.s, rectangle))'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:nand[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[rectangle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, blue), green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:circle
'λx.exists(or[triangle,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:green;3:%s.s;2:x
'λx.apply(and[blue,or[triangle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[blue,or[size3,not[blue]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size3;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(and[and[and[not[yellow],green],curry[same_shape,x.o]],size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(or[size1,or[and[not[blue],triangle],yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, or[size1,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:yellow
'λx.apply(blue,iota(filter(filter(x.s, or[size1,rectangle]), or[or[blue,circle],size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:size3
'λx.apply(and[not[curry[same_shape,iota(x.s)]],green],iota(filter(x.s, nand[size2,size3])))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size3
'λx.apply(iff[iff[yellow,not[rectangle]],size1],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:yellow;4:not[%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(or[size2,and[or[triangle,or[blue,green]],triangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(x.s, circle), green), circle), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:circle;4:green
'λx.apply(or[triangle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.exists(and[curry[same_shape,x.o],or[size3,not[circle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size3;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size2), blue), nor[size2,blue])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:nor[%s,%s];4:size2;4:blue
'λx.apply(size2,iota(filter(filter(x.s, and[and[and[not[blue],or[rectangle,or[and[rectangle,and[rectangle,green]],or[size3,yellow]]]],circle],green]), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:size3;4:yellow;4:circle;4:green;4:triangle
'λx.forall(green,filter(x.s, triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(curry[same_shape,x.o],iota(filter(filter(filter(filter(x.s, triangle), size2), implies[size3,size2]), size1)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:implies[%s,%s];4:size3;4:size2;4:size1
'λx.apply(green,iota(filter(filter(filter(x.s, size1), size2), and[size1,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:and[%s,%s];4:size1;4:green
'λx.apply(not[blue],x.o)'	0:apply(%s,%s);4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size3,size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(green, filter(x.s, and[size1,triangle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:triangle
'λx.exists(curry[same_color,iota(filter(x.s, triangle))], filter(x.s, size1))'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[or[not[triangle],and[or[curry[same_size,iota(filter(x.s, or[size2,size1]))],yellow],or[triangle,not[size3]]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1;4:yellow;4:or[%s,%s];4:triangle;4:not[%s];4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[triangle,rectangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[curry[size-leq,iota(filter(x.s, triangle))],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(not[implies[size2,green]],iota(filter(filter(filter(filter(filter(filter(x.s, green), not[and[circle,yellow]]), implies[and[blue,and[triangle,or[triangle,blue]]],yellow]), curry[same_size,x.o]), and[circle,yellow]), and[green,size2])))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:and[%s,%s];4:circle;4:yellow;4:implies[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:blue;4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:green;4:size2
'λx.apply(curry[same_color,iota(filter(filter(x.s, triangle), green))],iota(filter(filter(filter(x.s, circle), circle), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:rectangle
'λx.apply(not[size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[curry[same_shape,iota(filter(filter(filter(filter(x.s, or[size2,rectangle]), not[and[yellow,size1]]), size2), size2))],circle], filter(x.s, nor[implies[green,size3],and[or[triangle,and[triangle,size1]],size2]]))'	0:exists(%s, %s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:not[%s];4:and[%s,%s];4:yellow;4:size1;4:size2;4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:implies[%s,%s];4:green;4:size3;4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size1;4:size2
'λx.apply(not[rectangle],iota(filter(filter(x.s, size1), and[circle,and[blue,triangle]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:triangle
'λx.apply(and[curry[same_size,iota(filter(x.s, curry[same_shape,x.o]))],yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(x.s, nor[and[size3,not[blue]],yellow]), yellow), circle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:blue;4:yellow;4:yellow;4:circle
'λx.apply(and[yellow,or[size1,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(or[green,circle], filter(filter(filter(filter(filter(x.s, circle), and[triangle,curry[same_color,x.o]]), yellow), green), triangle))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:yellow;4:green;4:triangle
'λx.apply(circle,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.exists(or[size2,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, curry[same_color,iota(filter(filter(filter(filter(filter(filter(x.s, not[yellow]), size3), size3), triangle), yellow), not[size2]))]), size2), or[blue,implies[size2,circle]]), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;4:size3;4:triangle;4:yellow;4:not[%s];4:size2;4:size2;4:or[%s,%s];4:blue;4:implies[%s,%s];4:size2;4:circle;4:green
'λx.empty(filter(filter(filter(filter(filter(x.s, size1), iff[circle,green]), not[circle]), or[curry[same_shape,x.o],size2]), or[nor[triangle,blue],not[green]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:circle;4:green;4:not[%s];4:circle;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:or[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:not[%s];4:green
'λx.apply(and[rectangle,and[size1,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(nor[and[not[and[size2,green]],green],green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:green;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[not[rectangle],or[rectangle,or[circle,circle]]],iota(filter(filter(filter(filter(filter(x.s, blue), nand[implies[curry[same_shape,x.o],size3],blue]), green), size3), or[size1,size1])))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:implies[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;4:blue;4:green;4:size3;4:or[%s,%s];4:size1;4:size1
'λx.forall(nand[or[size3,rectangle],and[size2,triangle]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, rectangle), or[triangle,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:green
'λx.apply(or[curry[same_color,x.o],not[iff[and[and[and[blue,yellow],size3],and[blue,and[or[size1,size2],size2]]],and[circle,curry[same_color,iota(filter(x.s, yellow))]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size3;4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size1;4:size2;4:size2;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, nor[size1,rectangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:rectangle
'λx.forall(size2,filter(filter(x.s, yellow), size3))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(size1,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(iff[blue,triangle],iota(filter(x.s, and[or[curry[size-lt,iota(filter(filter(filter(x.s, and[and[yellow,blue],implies[circle,yellow]]), implies[blue,circle]), size1))],size3],rectangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:implies[%s,%s];4:circle;4:yellow;4:implies[%s,%s];4:blue;4:circle;4:size1;4:size3;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(triangle,iota(filter(x.s, and[not[rectangle],blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:blue
'λx.exists(circle, filter(filter(filter(x.s, triangle), size2), size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:size1
'λx.apply(iff[triangle,circle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[implies[or[size2,blue],and[not[or[blue,circle]],and[or[and[and[green,and[nand[not[and[blue,curry[same_color,iota(x.s)]]],green],circle]],and[nor[triangle,rectangle],yellow]],green],rectangle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:size2;4:blue;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:green;4:circle;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:rectangle;4:yellow;4:green;4:rectangle;1:%s.o;2:x
'λx.exists(rectangle, x.s)'	0:exists(%s, %s);4:rectangle;3:%s.s;2:x
'λx.apply(and[and[not[curry[same_size,x.o]],circle],curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, and[or[triangle,and[size3,green]],triangle]), green)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:green;4:triangle;4:green
'λx.apply(and[and[blue,triangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[yellow,yellow]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, size1), triangle), and[circle,curry[same_shape,iota(x.s)]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[and[yellow,yellow],rectangle],and[blue,and[size2,and[or[not[curry[size-geq,x.o]],green],not[size2]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:rectangle;4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:green;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(nand[or[not[circle],or[rectangle,not[triangle]]],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:rectangle;4:not[%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nand[green,and[size1,circle]],iota(filter(filter(filter(filter(x.s, nor[size1,and[nor[not[green],circle],size3]]), blue), and[blue,yellow]), green)))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:and[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:green;4:circle;4:size3;4:blue;4:and[%s,%s];4:blue;4:yellow;4:green
'λx.apply(and[not[green],curry[same_color,iota(x.s)]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.exists(or[nand[and[green,blue],and[yellow,size3]],curry[same_color,x.o]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:blue;4:and[%s,%s];4:yellow;4:size3;4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(curry[size-leq,x.o], filter(x.s, nor[yellow,and[rectangle,rectangle]]))'	0:exists(%s, %s);4:curry[%s,%s];5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:rectangle
'λx.exists(blue, filter(filter(x.s, size1), not[and[blue,triangle]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:and[%s,%s];4:blue;4:triangle
'λx.apply(nand[curry[same_color,iota(x.s)],size2],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(and[triangle,size3],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(curry[size-geq,x.o],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[implies[and[curry[same_shape,x.o],size2],and[size3,yellow]],blue], filter(x.s, triangle))'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:and[%s,%s];4:size3;4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(and[green,size2],iota(filter(filter(filter(filter(x.s, rectangle), size2), not[size3]), green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:not[%s];4:size3;4:green
'λx.forall(and[green,and[size2,blue]],filter(x.s, rectangle))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[yellow,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[and[and[rectangle,blue],and[triangle,rectangle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:triangle;4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(filter(filter(filter(x.s, green), size1), rectangle), iff[yellow,green]), or[not[triangle],and[size2,or[and[size1,or[and[blue,or[size2,nand[yellow,not[blue]]]],or[rectangle,green]]],not[yellow]]]]), or[and[size3,and[yellow,size2]],or[and[size3,and[iff[curry[same_shape,x.o],blue],green]],size1]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:rectangle;4:iff[%s,%s];4:yellow;4:green;4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:nand[%s,%s];4:yellow;4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:green;4:not[%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size2;4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:blue;4:green;4:size1
'λx.apply(and[and[green,and[or[curry[same_color,iota(x.s)],size2],green]],or[size1,yellow]],iota(filter(x.s, implies[or[rectangle,curry[same_shape,x.o]],yellow])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:green;4:or[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(curry[same_color,iota(filter(x.s, rectangle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, or[curry[same_size,iota(filter(filter(filter(filter(filter(x.s, and[size2,rectangle]), triangle), triangle), nor[size2,size1]), size2))],size2]), size2), circle), green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:rectangle;4:triangle;4:triangle;4:nor[%s,%s];4:size2;4:size1;4:size2;4:size2;4:size2;4:circle;4:green
'λx.apply(not[and[curry[same_color,x.o],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(or[blue,implies[circle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[and[curry[size-lt,iota(filter(x.s, size2))],rectangle],and[curry[same_shape,x.o],implies[size1,circle]]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:size1;4:circle
'λx.apply(or[size1,not[and[green,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[and[size1,and[nand[green,nand[and[nor[or[green,and[size3,size2]],size2],green],not[curry[same_size,iota(filter(filter(x.s, green), triangle))]]]],size2]],curry[same_shape,iota(x.s)]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:nand[%s,%s];4:green;4:nand[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;4:size2;4:green;4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(yellow,iota(filter(x.s, not[curry[same_size,x.o]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), rectangle), and[size3,curry[same_size,x.o]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(or[triangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(nand[size3,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size2), size2), green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:green;4:size1
'λx.empty(filter(filter(filter(filter(x.s, rectangle), or[yellow,green]), green), or[green,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:yellow;4:green;4:green;4:or[%s,%s];4:green;4:triangle
'λx.empty(filter(filter(x.s, or[triangle,circle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle;4:green
'λx.contains(x.o, filter(x.s, rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[or[size3,rectangle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), or[size1,size2]), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size1;4:size2;4:green
'λx.contains(x.o, filter(filter(filter(filter(x.s, implies[size2,rectangle]), green), blue), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle;4:green;4:blue;4:blue
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, green), not[size1]), or[green,green]), size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size1;4:or[%s,%s];4:green;4:green;4:size1
'λx.apply(implies[not[size1],size2],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,filter(filter(filter(x.s, rectangle), green), size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:size3
'λx.apply(or[rectangle,not[blue]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, and[yellow,size2]), and[blue,curry[size-gt,x.o]]), size2), size1), blue), nor[size3,and[blue,green]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:blue;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size2;4:size1;4:blue;4:nor[%s,%s];4:size3;4:and[%s,%s];4:blue;4:green
'λx.exists(size1, filter(x.s, rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[not[nor[green,green]],and[size3,yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:green;4:green;4:and[%s,%s];4:size3;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, curry[same_color,iota(filter(x.s, circle))]), rectangle), green), curry[same_color,iota(filter(x.s, yellow))])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:green;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[not[size3],or[and[nor[or[triangle,not[circle]],triangle],green],size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:circle;4:triangle;4:green;4:size3;1:%s.o;2:x
'λx.apply(and[and[implies[not[rectangle],size1],curry[same_size,iota(x.s)]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:rectangle;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[nand[blue,triangle],triangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[yellow,and[rectangle,size1]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[rectangle,or[rectangle,size3]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[curry[same_color,x.o],size2],iota(filter(filter(filter(filter(x.s, blue), or[blue,not[curry[same_shape,iota(x.s)]]]), size3), size3)))'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:blue;4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size3;4:size3
'λx.exists(blue, filter(x.s, or[size3,green]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green
'λx.apply(or[size2,and[rectangle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.forall(and[blue,size3],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:size3;3:%s.s;2:x
'λx.exists(curry[same_size,x.o], filter(filter(filter(x.s, size3), not[yellow]), and[triangle,size2]))'	0:exists(%s, %s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow;4:and[%s,%s];4:triangle;4:size2
'λx.apply(implies[nand[size3,green],and[implies[size1,triangle],yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:size3;4:green;4:and[%s,%s];4:implies[%s,%s];4:size1;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[size3,curry[size-gt,x.o]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[and[yellow,and[curry[same_size,iota(filter(filter(x.s, blue), size3))],yellow]]]), not[green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:yellow;4:not[%s];4:green
'λx.apply(curry[same_color,iota(filter(filter(x.s, size3), or[circle,size1]))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:circle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(nand[size3,circle], filter(x.s, size2))'	0:exists(%s, %s);4:nand[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(filter(filter(x.s, curry[same_shape,iota(filter(filter(x.s, and[green,green]), or[rectangle,circle]))]), curry[same_size,iota(x.s)]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;4:or[%s,%s];4:rectangle;4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, and[or[size1,curry[size-geq,iota(filter(x.s, and[not[not[rectangle]],yellow]))]],size3]), iff[iff[circle,size3],curry[same_shape,x.o]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:yellow;4:size3;4:iff[%s,%s];4:iff[%s,%s];4:circle;4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.apply(and[size3,size2],iota(filter(filter(x.s, circle), not[not[not[size2]]])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:not[%s];4:not[%s];4:size2
'λx.apply(green,iota(filter(filter(x.s, circle), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle
'λx.contains(iota(filter(x.s, or[triangle,not[size2]])), filter(filter(filter(filter(x.s, yellow), yellow), triangle), implies[iff[size2,curry[same_color,iota(x.s)]],triangle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:triangle;4:implies[%s,%s];4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(x.s, size3), or[size1,and[size3,circle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size1;4:and[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.apply(and[size2,not[yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[size1,curry[same_shape,iota(x.s)]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(filter(x.s, circle), and[yellow,iff[size1,or[or[yellow,not[size3]],triangle]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:size1;4:or[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:size3;4:triangle
'λx.forall(green,filter(x.s, and[size3,blue]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.apply(circle,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(nand[green,rectangle],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[curry[size-gt,iota(filter(filter(x.s, and[and[curry[same_color,x.o],curry[same_size,iota(x.s)]],blue]), blue))],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:blue;4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, curry[same_shape,iota(x.s)]), size1), blue), or[size2,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:size1;4:blue;4:or[%s,%s];4:size2;4:triangle
'λx.forall(and[size1,triangle],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.exists(triangle, filter(filter(x.s, circle), blue))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(iff[curry[same_shape,x.o],and[triangle,curry[same_size,x.o]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, green), size3), triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:triangle
'λx.apply(green,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.forall(size1,filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(and[or[triangle,triangle],not[not[or[rectangle,and[curry[same_size,x.o],green]]]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:not[%s];4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[yellow,size3],iota(filter(filter(filter(x.s, size2), or[green,and[and[circle,blue],or[green,size2]]]), circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:or[%s,%s];4:green;4:size2;4:circle
'λx.apply(iff[green,rectangle],iota(filter(filter(filter(filter(filter(x.s, circle), circle), green), rectangle), curry[same_color,x.o])))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:green;4:rectangle;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, and[rectangle,green]), or[size2,yellow]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:size2;4:yellow
'λx.apply(and[curry[size-lt,iota(filter(x.s, size1))],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, implies[triangle,size1]), rectangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:size1;4:rectangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size3), rectangle), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:circle
'λx.apply(green,iota(filter(filter(filter(filter(x.s, green), or[and[nand[and[size1,green],triangle],triangle],size1]), size3), blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size1;4:green;4:triangle;4:triangle;4:size1;4:size3;4:blue
'λx.apply(not[and[not[iff[green,nand[implies[rectangle,triangle],nor[not[curry[same_shape,iota(x.s)]],triangle]]]],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:green;4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:triangle;4:nor[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:triangle;4:size3;1:%s.o;2:x
'λx.exists(and[size3,size2], filter(filter(x.s, blue), size3))'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(implies[triangle,not[curry[same_color,x.o]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, rectangle), not[and[and[not[yellow],rectangle],or[blue,and[size1,yellow]]]]), or[triangle,and[triangle,size2]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:rectangle;4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:yellow;4:or[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size2
'λx.apply(nand[not[yellow],green],iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(or[circle,and[triangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(nand[yellow,not[size1]],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(x.s, not[and[curry[size-gt,x.o],circle]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(x.s, circle), or[or[or[curry[same_color,x.o],circle],yellow],yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:circle;4:yellow;4:yellow
'λx.empty(filter(filter(x.s, not[size1]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:yellow
'λx.contains(x.o, filter(filter(x.s, green), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(nor[triangle,and[size3,curry[size-gt,x.o]]],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(curry[same_size,x.o],iota(filter(filter(filter(x.s, iff[size2,yellow]), triangle), rectangle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:yellow;4:triangle;4:rectangle
'λx.apply(implies[and[curry[same_color,iota(x.s)],size3],not[triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(curry[same_size,iota(filter(filter(x.s, size3), triangle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, not[size3]), curry[same_shape,x.o]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, circle), curry[same_color,iota(filter(filter(filter(filter(filter(filter(x.s, yellow), size1), curry[size-geq,x.o]), rectangle), triangle), green))])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:rectangle;4:triangle;4:green
'λx.forall(blue,filter(x.s, not[or[or[size3,triangle],circle]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:circle
'λx.apply(or[green,and[and[and[yellow,size1],circle],size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:circle;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, or[blue,rectangle]), nand[and[yellow,rectangle],and[triangle,blue]]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:triangle;4:blue;4:blue
'λx.apply(and[iff[size3,curry[size-lt,iota(x.s)]],and[implies[not[rectangle],circle],yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size3;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:rectangle;4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[rectangle,and[and[size3,green],triangle]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:size3;4:green;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, and[and[rectangle,triangle],circle]), blue), not[or[and[size2,yellow],size3]]), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:circle;4:blue;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:size3;4:blue
'λx.apply(size1,iota(filter(filter(filter(x.s, or[not[rectangle],size2]), green), and[circle,or[size2,curry[same_shape,iota(x.s)]]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:rectangle;4:size2;4:green;4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(filter(filter(x.s, circle), nor[size3,or[blue,yellow]]), curry[size-gt,x.o]), nand[green,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:size3;4:or[%s,%s];4:blue;4:yellow;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:nand[%s,%s];4:green;4:triangle
'λx.apply(size3,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nor[iff[blue,green],size3],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:blue;4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(nor[yellow,and[triangle,rectangle]], filter(filter(x.s, size2), size3))'	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(size2,iota(filter(x.s, not[and[green,or[size3,circle]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:or[%s,%s];4:size3;4:circle
'λx.exists(and[or[green,or[curry[same_shape,x.o],implies[size3,yellow]]],or[size3,size2]], filter(x.s, or[size3,blue]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:size3;4:yellow;4:or[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:blue
'λx.contains(iota(filter(x.s, triangle)), filter(filter(filter(filter(x.s, triangle), curry[size-lt,x.o]), circle), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:circle;4:rectangle
'λx.exists(circle, filter(x.s, or[green,size3]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3
'λx.apply(and[not[curry[same_shape,iota(x.s)]],not[curry[size-geq,x.o]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(curry[size-leq,iota(filter(filter(x.s, size1), implies[green,circle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:implies[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, and[rectangle,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle
'λx.apply(implies[green,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[and[yellow,nor[green,size1]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:yellow;4:nor[%s,%s];4:green;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(and[or[curry[same_size,iota(filter(filter(x.s, curry[same_size,iota(x.s)]), nor[circle,and[and[yellow,and[green,and[size2,size2]]],triangle]]))],size2],triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:size2;4:triangle;4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[yellow,curry[same_size,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(filter(x.s, yellow), blue), circle), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:circle;4:rectangle
'λx.apply(size1,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[rectangle,iff[size3,triangle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[size2,curry[same_shape,iota(x.s)]], filter(x.s, or[green,blue]))'	0:exists(%s, %s);4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.forall(triangle,filter(filter(x.s, circle), green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(nand[yellow,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(implies[not[circle],and[and[and[yellow,size3],triangle],triangle]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(filter(filter(filter(x.s, circle), and[or[iff[not[iff[size1,size2]],yellow],rectangle],circle]), size3), triangle), or[circle,curry[same_size,iota(x.s)]]), not[and[yellow,green]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:not[%s];4:iff[%s,%s];4:size1;4:size2;4:yellow;4:rectangle;4:circle;4:size3;4:triangle;4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:green
'λx.forall(not[size1],filter(x.s, nor[circle,or[curry[size-leq,iota(x.s)],rectangle]]))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, or[size1,not[size2]]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:not[%s];4:size2;4:yellow
'λx.apply(size2,iota(filter(filter(filter(filter(filter(x.s, nor[not[not[and[rectangle,curry[same_size,x.o]]]],and[size2,curry[same_color,iota(x.s)]]]), or[blue,not[size3]]), size3), or[circle,blue]), implies[yellow,yellow])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:size3;4:size3;4:or[%s,%s];4:circle;4:blue;4:implies[%s,%s];4:yellow;4:yellow
'λx.exists(not[triangle], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[triangle,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(curry[same_color,iota(filter(filter(filter(filter(x.s, blue), rectangle), green), nor[circle,size1]))], x.s)'	0:exists(%s, %s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:green;4:nor[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[blue,size2]), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;4:size3
'λx.apply(implies[size1,green],iota(filter(filter(x.s, and[size1,circle]), not[circle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle;4:not[%s];4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, size3), not[yellow]), curry[same_size,iota(filter(filter(filter(filter(x.s, and[size2,size1]), and[curry[size-geq,iota(filter(x.s, size2))],curry[same_color,x.o]]), and[curry[same_color,iota(x.s)],blue]), and[size3,circle]))])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size3;4:circle
'λx.apply(and[circle,curry[same_size,iota(filter(x.s, green))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, curry[same_size,x.o]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(implies[size2,nand[size3,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:nand[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, nor[circle,or[nand[size2,circle],circle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:or[%s,%s];4:nand[%s,%s];4:size2;4:circle;4:circle
'λx.exists(or[not[size1],size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:size1;4:size1;3:%s.s;2:x
'λx.apply(curry[same_color,iota(filter(x.s, size2))],iota(filter(filter(x.s, triangle), and[or[rectangle,rectangle],or[yellow,size2]])))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:or[%s,%s];4:yellow;4:size2
'λx.apply(circle,iota(filter(filter(filter(x.s, size1), size2), triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:triangle
'λx.empty(filter(filter(x.s, nor[nor[nor[blue,rectangle],green],nor[green,circle]]), or[green,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nor[%s,%s];4:nor[%s,%s];4:blue;4:rectangle;4:green;4:nor[%s,%s];4:green;4:circle;4:or[%s,%s];4:green;4:size2
'λx.apply(size2,iota(filter(filter(filter(x.s, not[triangle]), blue), and[size3,yellow])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:blue;4:and[%s,%s];4:size3;4:yellow
'λx.apply(curry[size-gt,iota(filter(x.s, implies[yellow,circle]))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(iff[green,and[yellow,not[blue]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:and[%s,%s];4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, rectangle), size2))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(size1,iota(filter(filter(x.s, not[circle]), and[iff[not[curry[same_shape,iota(filter(filter(x.s, circle), and[size2,size1]))]],size1],yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:size2;4:size1;4:size1;4:yellow
'λx.apply(and[size3,and[circle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(rectangle,filter(x.s, rectangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[and[and[blue,curry[same_shape,iota(x.s)]],and[size2,implies[yellow,size3]]],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:implies[%s,%s];4:yellow;4:size3;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[size2]), nand[yellow,not[circle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:nand[%s,%s];4:yellow;4:not[%s];4:circle
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, rectangle), size2), yellow), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2;4:yellow;4:size3
'λx.apply(green,iota(filter(filter(x.s, curry[same_color,iota(filter(x.s, size1))]), not[size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size1
'λx.contains(iota(x.s), filter(x.s, curry[same_shape,x.o]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, green), curry[same_size,x.o]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.exists(size2, filter(x.s, triangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[implies[size2,curry[same_size,x.o]],implies[yellow,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[rectangle,yellow],iota(filter(filter(x.s, size1), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.forall(curry[same_color,x.o],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nor[green,blue],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(curry[same_size,iota(filter(filter(x.s, yellow), rectangle))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[triangle,or[or[size3,curry[same_size,iota(x.s)]],not[curry[same_color,iota(x.s)]]]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size1,filter(filter(filter(x.s, not[size3]), green), rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:green;4:rectangle
'λx.apply(not[nand[and[rectangle,size3],triangle]],iota(filter(filter(x.s, size3), curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[rectangle,and[size3,or[not[or[rectangle,green]],size2]]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:green;4:size2;4:blue;1:%s.o;2:x
'λx.forall(curry[size-leq,iota(x.s)],filter(filter(filter(filter(x.s, nor[circle,size2]), rectangle), size3), yellow))'	0:forall(%s,%s);4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:size2;4:rectangle;4:size3;4:yellow
'λx.exists(circle, filter(filter(x.s, size3), curry[same_color,iota(filter(x.s, size2))]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(filter(filter(filter(x.s, blue), circle), and[rectangle,size1]), nor[circle,and[yellow,size3]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:and[%s,%s];4:rectangle;4:size1;4:nor[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:size3
'λx.forall(size2,filter(x.s, green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[size1,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(not[size1], filter(filter(filter(x.s, and[size3,size1]), or[size1,circle]), blue))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size1;4:or[%s,%s];4:size1;4:circle;4:blue
'λx.apply(and[curry[same_size,iota(x.s)],curry[size-lt,iota(filter(filter(filter(filter(x.s, iff[size2,green]), yellow), size3), blue))]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:green;4:yellow;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[and[green,size2],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1
'λx.apply(rectangle,iota(filter(filter(filter(filter(x.s, or[size1,curry[same_color,iota(filter(filter(x.s, yellow), size2))]]), size2), circle), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:size2;4:circle;4:size2
'λx.exists(implies[or[rectangle,circle],or[and[curry[size-lt,iota(x.s)],circle],blue]], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x;4:circle;4:blue;3:%s.s;2:x
'λx.apply(or[nor[and[rectangle,green],not[curry[same_size,iota(x.s)]]],size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(or[and[and[triangle,curry[same_size,iota(filter(x.s, blue))]],rectangle],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size3,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(x.s, triangle), triangle), circle), not[or[and[yellow,circle],rectangle]]), yellow), nor[or[size1,rectangle],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:circle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:rectangle;4:yellow;4:nor[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:blue
'λx.apply(and[size1,or[circle,iff[size2,size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(curry[same_size,iota(x.s)],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[curry[same_color,x.o],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, or[circle,curry[same_shape,x.o]]), size3), and[not[yellow],or[triangle,curry[same_size,iota(filter(x.s, curry[size-lt,iota(x.s)]))]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3;4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-lt;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(curry[size-lt,x.o],iota(filter(x.s, nand[size3,size2])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size2
'λx.apply(size2,iota(filter(x.s, curry[same_size,iota(filter(x.s, rectangle))])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, circle), not[size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size2
'λx.apply(circle,iota(filter(filter(x.s, size1), not[size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:size1
'λx.apply(green,iota(filter(filter(filter(x.s, green), blue), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;4:yellow
'λx.apply(and[or[size2,green],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[green,size3]), size1)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3;4:size1
'λx.apply(and[green,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, curry[same_size,iota(filter(filter(filter(x.s, triangle), blue), green))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:green
'λx.apply(size3,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(and[yellow,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[nand[yellow,yellow],or[and[blue,not[blue]],size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(or[green,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[and[not[blue],yellow],green],iota(filter(x.s, or[green,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:circle
'λx.apply(and[rectangle,implies[green,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, triangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[green],iota(filter(filter(x.s, implies[size3,or[size3,size2]]), nor[not[and[iff[yellow,and[yellow,not[size3]]],curry[same_size,iota(x.s)]]],size1])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:or[%s,%s];4:size3;4:size2;4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:not[%s];4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[triangle,implies[circle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(not[and[green,triangle]],iota(filter(filter(filter(filter(x.s, size3), green), curry[size-lt,iota(filter(x.s, green))]), circle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(or[size1,not[triangle]],iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.contains(iota(filter(x.s, blue)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[curry[same_size,iota(filter(filter(filter(x.s, yellow), size1), circle))],and[or[circle,not[size3]],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:circle;4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:size3;4:green;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, nor[green,yellow]), circle), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:yellow;4:circle;4:rectangle
'λx.apply(nor[size1,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(not[and[triangle,yellow]],filter(x.s, and[size3,size3]))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3
'λx.apply(not[and[circle,and[triangle,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:size1
'λx.apply(or[rectangle,or[size2,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.contains(iota(filter(x.s, and[size2,yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow;3:%s.s;2:x
'λx.forall(yellow,filter(filter(filter(filter(filter(filter(x.s, size3), curry[same_size,x.o]), not[rectangle]), iff[implies[and[and[triangle,blue],blue],rectangle],not[size1]]), not[size2]), green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle;4:iff[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:blue;4:rectangle;4:not[%s];4:size1;4:not[%s];4:size2;4:green
'λx.apply(or[and[not[or[not[size2],triangle]],not[size2]],blue],iota(filter(filter(filter(x.s, green), size2), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:not[%s];4:size2;4:triangle;4:not[%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;4:rectangle
'λx.contains(x.o, filter(filter(x.s, implies[circle,circle]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:circle;4:blue
'λx.exists(yellow, filter(x.s, size3))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(filter(x.s, not[and[size1,and[yellow,green]]]), or[rectangle,and[size3,blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:green;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:blue
'λx.exists(and[blue,size1], filter(x.s, rectangle))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[or[curry[size-leq,x.o],and[and[size3,size3],and[curry[same_shape,iota(x.s)],not[triangle]]]],green], filter(filter(x.s, yellow), curry[size-lt,x.o]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:not[%s];4:triangle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:curry[%s,%s];5:size-lt;1:%s.o;2:x
'λx.apply(and[size2,iff[and[rectangle,yellow],or[nor[rectangle,size3],not[size1]]]],iota(filter(filter(filter(filter(x.s, triangle), not[size2]), circle), rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:size3;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size2;4:circle;4:rectangle
'λx.apply(not[iff[and[yellow,size1],not[and[and[size3,size3],blue]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[size3,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(filter(x.s, size3), triangle), size2), circle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:size2;4:circle
'λx.forall(circle,filter(filter(filter(x.s, size1), green), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:rectangle
'λx.exists(size1, filter(filter(x.s, or[curry[same_size,iota(filter(x.s, curry[same_shape,x.o]))],implies[green,and[yellow,and[green,blue]]]]), curry[size-gt,x.o]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:green;4:and[%s,%s];4:yellow;4:and[%s,%s];4:green;4:blue;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.forall(and[circle,size2],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size2;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size3), triangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;4:green
'λx.contains(iota(filter(filter(x.s, yellow), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;3:%s.s;2:x
'λx.apply(implies[iff[triangle,nand[or[green,and[size1,yellow]],size3]],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:triangle;4:nand[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:size1;4:yellow;4:size3;4:size3;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(x.s, size3))],x.o)'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[or[yellow,blue],or[not[size3],triangle]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:not[%s];4:size3;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size3), blue), and[curry[same_size,x.o],not[or[yellow,triangle]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:triangle
'λx.apply(blue,iota(filter(filter(filter(filter(filter(filter(x.s, size2), curry[same_color,x.o]), triangle), size3), green), green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:triangle;4:size3;4:green;4:green
'λx.exists(green, filter(x.s, or[green,and[and[yellow,yellow],not[or[rectangle,rectangle]]]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:not[%s];4:or[%s,%s];4:rectangle;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), blue), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:blue;4:size3
'λx.apply(or[and[implies[yellow,size3],and[green,size1]],or[yellow,size1]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:yellow;4:size3;4:and[%s,%s];4:green;4:size1;4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[size3]), rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle
'λx.exists(green, filter(x.s, and[size2,and[rectangle,size2]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(filter(filter(x.s, size3), blue), yellow), blue), or[curry[same_size,x.o],size2]), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:yellow;4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size2;4:size2
'λx.apply(and[nand[green,size2],and[curry[same_shape,iota(x.s)],green]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:size2;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[rectangle,curry[same_size,x.o]],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(filter(filter(x.s, green), not[size2]), yellow), nor[or[not[triangle],green],yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size2;4:yellow;4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:triangle;4:green;4:yellow;3:%s.s;2:x
'λx.forall(not[not[size1]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:size1;3:%s.s;2:x
'λx.apply(not[curry[same_color,iota(filter(filter(filter(filter(x.s, green), rectangle), size2), circle))]],x.o)'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:size2;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.true'	0:true
'λx.contains(x.o, filter(filter(filter(x.s, green), triangle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:circle
'λx.apply(and[green,or[triangle,size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:triangle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, curry[same_size,iota(filter(filter(filter(x.s, yellow), nand[nor[curry[same_size,x.o],yellow],green]), not[and[size2,size1]]))]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:yellow;4:green;4:not[%s];4:and[%s,%s];4:size2;4:size1;4:size3
'λx.exists(size3, filter(x.s, triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size2,iota(filter(x.s, iff[not[curry[same_color,iota(x.s)]],size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size3
'λx.apply(or[and[blue,curry[same_color,x.o]],blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[and[not[and[or[or[or[not[circle],not[and[curry[same_shape,iota(x.s)],circle]]],iff[size1,blue]],size1],curry[same_color,x.o]]],green],and[size1,or[triangle,triangle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:size1;4:blue;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;4:and[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(curry[same_color,iota(filter(filter(filter(filter(x.s, green), or[size3,green]), and[and[green,circle],curry[same_shape,iota(x.s)]]), rectangle))],iota(x.s))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size3;4:green;4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(filter(x.s, and[curry[same_color,iota(x.s)],size2]), yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size2;4:yellow
'λx.forall(not[not[curry[same_size,iota(filter(filter(x.s, and[size2,circle]), blue))]]],x.s)'	0:forall(%s,%s);4:not[%s];4:not[%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle;4:blue;3:%s.s;2:x
'λx.apply(implies[or[triangle,yellow],rectangle],iota(filter(filter(filter(x.s, triangle), triangle), rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:rectangle
'λx.apply(or[not[size2],nor[and[and[and[green,curry[same_shape,x.o]],yellow],size3],iff[rectangle,not[size1]]]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:yellow;4:size3;4:iff[%s,%s];4:rectangle;4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, nor[curry[same_color,iota(x.s)],size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:size1
'λx.apply(or[triangle,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(and[nor[triangle,green],curry[same_shape,x.o]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:green;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, rectangle), and[triangle,green]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:triangle;4:green
'λx.apply(and[blue,and[and[triangle,triangle],curry[same_color,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, size3), triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(and[and[circle,triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(x.s, curry[same_size,iota(filter(filter(x.s, circle), yellow))]), curry[same_color,iota(filter(x.s, blue))]), and[and[circle,circle],curry[same_color,x.o]]), nor[circle,not[and[rectangle,implies[and[yellow,yellow],size2]]]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:size2
'λx.apply(size2,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.contains(iota(filter(filter(x.s, and[or[size3,circle],rectangle]), and[or[size3,green],yellow])), filter(filter(filter(filter(x.s, curry[same_color,iota(x.s)]), or[and[implies[not[circle],and[size2,yellow]],size1],triangle]), curry[same_shape,x.o]), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:size2;4:yellow;4:size1;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2
'λx.contains(iota(x.s), filter(filter(filter(filter(x.s, not[blue]), yellow), not[rectangle]), size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:yellow;4:not[%s];4:rectangle;4:size1
'λx.contains(iota(filter(filter(x.s, rectangle), nor[circle,blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nor[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(or[rectangle,rectangle],iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(or[circle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nand[not[triangle],blue],iota(filter(x.s, nand[not[green],rectangle])))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:green;4:rectangle
'λx.contains(x.o, filter(filter(x.s, curry[same_shape,iota(filter(filter(filter(x.s, and[rectangle,or[nand[green,triangle],curry[same_shape,x.o]]]), not[blue]), triangle))]), or[yellow,nand[blue,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:nand[%s,%s];4:green;4:triangle;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;4:triangle;4:or[%s,%s];4:yellow;4:nand[%s,%s];4:blue;4:rectangle
'λx.apply(size2,iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(or[curry[size-gt,iota(x.s)],size1],iota(filter(filter(filter(filter(filter(x.s, curry[size-leq,iota(filter(filter(filter(filter(filter(x.s, blue), size3), rectangle), rectangle), and[size1,green]))]), blue), size1), size1), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:rectangle;4:rectangle;4:and[%s,%s];4:size1;4:green;4:blue;4:size1;4:size1;4:yellow
'λx.apply(and[yellow,size1],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(curry[same_color,iota(filter(filter(filter(x.s, not[iff[size3,rectangle]]), green), nor[and[not[rectangle],circle],circle]))],x.s)'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:size3;4:rectangle;4:green;4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:circle;4:circle;3:%s.s;2:x
'λx.apply(nor[size1,yellow],iota(x.s))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, size3), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size1
'λx.apply(or[or[circle,rectangle],nor[green,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:rectangle;4:nor[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(and[not[size1],implies[not[rectangle],yellow]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:implies[%s,%s];4:not[%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(implies[blue,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[yellow,and[size3,triangle]]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:triangle;4:blue
'λx.apply(curry[same_color,x.o],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[triangle,and[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(implies[curry[size-leq,x.o],nand[not[curry[same_shape,x.o]],and[curry[same_size,iota(x.s)],not[size3]]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:nand[%s,%s];4:not[%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:not[%s];4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, yellow), size1), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:rectangle
'λx.forall(and[or[triangle,or[blue,or[curry[same_size,x.o],circle]]],or[triangle,and[curry[size-gt,iota(filter(x.s, not[nor[rectangle,and[blue,rectangle]]]))],size2]]],filter(x.s, curry[same_color,x.o]))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:or[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:circle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(filter(x.s, blue), not[yellow]), green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:yellow;4:green
'λx.contains(iota(filter(filter(x.s, size2), size2)), filter(filter(filter(filter(filter(filter(filter(filter(x.s, circle), or[size2,iff[rectangle,curry[same_size,x.o]]]), green), and[or[triangle,size3],nand[green,blue]]), iff[triangle,green]), and[triangle,yellow]), nor[and[or[or[and[size2,circle],triangle],green],circle],not[size2]]), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size2;4:iff[%s,%s];4:rectangle;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:green;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:nand[%s,%s];4:green;4:blue;4:iff[%s,%s];4:triangle;4:green;4:and[%s,%s];4:triangle;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:circle;4:triangle;4:green;4:circle;4:not[%s];4:size2;4:size3
'λx.contains(x.o, filter(filter(x.s, iff[and[size3,or[and[circle,green],implies[not[size2],size2]]],not[yellow]]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size3;4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:implies[%s,%s];4:not[%s];4:size2;4:size2;4:not[%s];4:yellow;4:rectangle
'λx.apply(or[and[size3,size3],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:rectangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, not[green]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.empty(filter(filter(filter(x.s, triangle), size3), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:circle
'λx.apply(and[or[green,or[and[rectangle,or[green,and[curry[size-gt,iota(filter(filter(x.s, or[curry[same_shape,iota(filter(filter(x.s, size1), yellow))],and[size1,circle]]), rectangle))],yellow]]],blue]],and[and[and[size1,circle],size1],or[triangle,size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:and[%s,%s];4:size1;4:circle;4:rectangle;4:yellow;4:blue;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:circle;4:size1;4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[not[nand[curry[size-gt,x.o],size2]],curry[size-leq,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nand[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size2;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size2), nor[rectangle,size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:nor[%s,%s];4:rectangle;4:size1
'λx.apply(not[and[and[and[blue,circle],triangle],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(nand[not[circle],size2],iota(filter(filter(filter(filter(x.s, blue), circle), not[and[size3,size1]]), size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:not[%s];4:and[%s,%s];4:size3;4:size1;4:size1
'λx.contains(iota(filter(x.s, yellow)), filter(filter(filter(filter(filter(x.s, size2), size3), and[not[curry[same_color,iota(filter(filter(x.s, curry[same_shape,iota(x.s)]), circle))]],yellow]), blue), size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3;4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;4:circle;4:yellow;4:blue;4:size2
'λx.apply(circle,iota(filter(x.s, curry[same_size,x.o])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[not[green]]), nand[blue,nor[blue,curry[same_size,iota(filter(x.s, green))]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:green;4:nand[%s,%s];4:blue;4:nor[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, nand[blue,size2])), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[and[and[and[curry[size-gt,x.o],rectangle],circle],size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:rectangle;4:circle;4:size3;4:size2;1:%s.o;2:x
'λx.exists(or[green,size1], filter(x.s, curry[same_size,x.o]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, curry[size-gt,x.o]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-gt;1:%s.o;2:x
'λx.apply(and[iff[triangle,triangle],and[green,circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:triangle;4:triangle;4:and[%s,%s];4:green;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.forall(not[green],filter(filter(filter(x.s, circle), or[and[yellow,yellow],curry[size-geq,iota(filter(x.s, and[rectangle,green]))]]), rectangle))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:curry[%s,%s];5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green;4:rectangle
'λx.apply(iff[circle,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(implies[green,or[circle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[curry[size-lt,x.o],rectangle],iota(filter(filter(filter(filter(x.s, and[yellow,rectangle]), or[green,nand[blue,green]]), size3), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:curry[%s,%s];5:size-lt;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:green;4:nand[%s,%s];4:blue;4:green;4:size3;4:rectangle
'λx.exists(green, filter(filter(x.s, size2), size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(and[curry[same_shape,x.o],or[rectangle,iff[size2,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[blue,implies[yellow,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, or[nand[not[triangle],size1],or[iff[yellow,iff[and[green,triangle],not[circle]]],green]]), size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:not[%s];4:triangle;4:size1;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:iff[%s,%s];4:and[%s,%s];4:green;4:triangle;4:not[%s];4:circle;4:green;4:size1
'λx.contains(iota(filter(filter(filter(filter(x.s, or[triangle,not[or[green,size2]]]), or[size2,and[and[nand[iff[size1,rectangle],curry[size-gt,x.o]],size3],size1]]), size2), or[and[not[circle],size3],nor[green,and[size3,size2]]])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:green;4:size2;4:or[%s,%s];4:size2;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:size1;4:rectangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size3;4:size1;4:size2;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:size3;4:nor[%s,%s];4:green;4:and[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, size1), and[blue,circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:blue;4:circle
'λx.contains(iota(x.s), filter(filter(filter(x.s, rectangle), or[triangle,and[yellow,or[triangle,curry[same_shape,iota(filter(x.s, size3))]]]]), curry[same_size,iota(x.s)]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size3), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(or[rectangle,implies[or[and[circle,rectangle],rectangle],not[triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:rectangle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[green,size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.contains(iota(filter(filter(filter(filter(x.s, iff[rectangle,iff[triangle,not[green]]]), size1), size1), size3)), filter(filter(x.s, and[not[size1],blue]), rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:iff[%s,%s];4:triangle;4:not[%s];4:green;4:size1;4:size1;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:blue;4:rectangle
'λx.apply(and[size3,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(circle, filter(x.s, green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[triangle,or[curry[same_color,iota(x.s)],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,blue],iota(filter(x.s, and[rectangle,curry[size-geq,iota(x.s)]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:curry[%s,%s];5:size-geq;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, curry[same_color,x.o]), size2), iff[rectangle,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size2;4:iff[%s,%s];4:rectangle;4:size3
'λx.apply(circle,iota(filter(filter(filter(filter(x.s, size1), size2), size1), curry[same_size,x.o])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size2;4:size1;4:curry[%s,%s];5:same_size;1:%s.o;2:x
'λx.apply(and[size2,curry[same_shape,iota(x.s)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(x.s, and[blue,circle]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, or[green,iff[size1,or[iff[size2,not[and[implies[green,size2],size2]]],implies[and[blue,blue],and[nor[yellow,triangle],curry[size-gt,x.o]]]]]]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:iff[%s,%s];4:size1;4:or[%s,%s];4:iff[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:green;4:size2;4:size2;4:implies[%s,%s];4:and[%s,%s];4:blue;4:blue;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:triangle;4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size3
'λx.apply(size3,iota(filter(x.s, iff[curry[size-geq,x.o],circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:circle
'λx.apply(and[curry[same_color,x.o],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(nand[curry[size-gt,x.o],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.exists(green, filter(x.s, or[yellow,circle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle
'λx.apply(and[and[green,iff[iff[and[yellow,size2],triangle],circle]],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:iff[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;4:circle;4:size3;1:iota(%s);3:%s.s;2:x
'λx.exists(or[yellow,or[and[curry[size-gt,iota(filter(x.s, not[and[size1,and[triangle,blue]]]))],triangle],not[yellow]]], filter(filter(x.s, not[size3]), curry[same_shape,x.o]))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:blue;4:triangle;4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x
'λx.forall(curry[same_color,x.o],filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:curry[%s,%s];5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(nor[circle,or[green,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, or[green,triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:triangle
'λx.exists(or[rectangle,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:green;3:%s.s;2:x
'λx.apply(and[and[and[circle,size3],not[blue]],triangle],iota(filter(filter(filter(filter(x.s, yellow), circle), green), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:not[%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:green;4:size3
'λx.exists(yellow, filter(x.s, green))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size3, filter(x.s, iff[green,blue]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:blue
'λx.contains(iota(filter(filter(filter(filter(x.s, green), not[circle]), size3), size2)), filter(x.s, nand[size1,green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:circle;4:size3;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:green
'λx.apply(not[curry[size-gt,iota(filter(x.s, size2))]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:iota(%s);3:%s.s;2:x
'λx.exists(and[size2,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(filter(filter(x.s, or[or[size3,size1],size1]), curry[same_color,x.o]), size3), curry[same_shape,x.o]), and[size1,size1]), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size3;4:size1;4:size1;4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:size3;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:size1;4:blue
'λx.apply(and[rectangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(implies[and[size3,circle],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size3;1:%s.o;2:x
'λx.exists(blue, filter(x.s, yellow))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[and[not[curry[size-gt,x.o]],size1],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:curry[%s,%s];5:size-gt;1:%s.o;2:x;4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[and[curry[same_size,iota(filter(filter(filter(x.s, triangle), circle), yellow))],size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle;4:yellow;4:size2;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[size2,yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:yellow
'λx.forall(size1,filter(filter(x.s, circle), size1))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.contains(iota(x.s), filter(filter(filter(x.s, rectangle), triangle), or[and[size3,and[yellow,blue]],triangle]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle;4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:blue;4:triangle
'λx.exists(iff[implies[size1,circle],green], filter(x.s, nor[and[implies[yellow,blue],and[not[size1],curry[size-leq,x.o]]],size3]))'	0:exists(%s, %s);4:iff[%s,%s];4:implies[%s,%s];4:size1;4:circle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:yellow;4:blue;4:and[%s,%s];4:not[%s];4:size1;4:curry[%s,%s];5:size-leq;1:%s.o;2:x;4:size3
'λx.apply(and[curry[same_size,iota(x.s)],and[and[nor[or[and[size1,rectangle],size3],blue],and[size1,iff[and[size3,not[triangle]],implies[triangle,and[curry[same_color,iota(x.s)],and[blue,size1]]]]]],or[and[triangle,size1],yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:size3;4:blue;4:and[%s,%s];4:size1;4:iff[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:triangle;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1;4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[and[yellow,yellow],size1]), nand[circle,size2])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:size1;4:nand[%s,%s];4:circle;4:size2
'λx.exists(and[rectangle,triangle], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(curry[size-geq,x.o],iota(filter(x.s, and[rectangle,blue])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(or[size1,curry[same_shape,x.o]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[or[size3,nand[yellow,nor[circle,implies[and[circle,blue],triangle]]]],nor[size3,green]],size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:nand[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:implies[%s,%s];4:and[%s,%s];4:circle;4:blue;4:triangle;4:nor[%s,%s];4:size3;4:green;4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, curry[same_size,x.o]), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:blue
'λx.apply(or[size3,triangle],iota(filter(filter(filter(filter(filter(x.s, blue), size1), green), and[nor[triangle,and[yellow,blue]],size3]), nor[size3,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:green;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:and[%s,%s];4:yellow;4:blue;4:size3;4:nor[%s,%s];4:size3;4:circle
'λx.empty(filter(filter(x.s, circle), and[yellow,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:size1
'λx.apply(circle,iota(filter(filter(filter(x.s, size1), iff[size1,not[rectangle]]), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:size1;4:not[%s];4:rectangle;4:size2
'λx.apply(curry[size-lt,iota(filter(x.s, blue))],iota(filter(x.s, or[green,triangle])))'	0:apply(%s,%s);4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:triangle
'λx.empty(filter(x.s, and[and[blue,not[and[size2,or[triangle,size1]]]],size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:size2;4:or[%s,%s];4:triangle;4:size1;4:size2
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), and[green,nand[rectangle,or[curry[same_color,iota(filter(x.s, blue))],rectangle]]]), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:green
'λx.empty(filter(filter(x.s, rectangle), iff[triangle,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:iff[%s,%s];4:triangle;4:rectangle
'λx.apply(not[and[and[size1,and[triangle,implies[size1,and[curry[same_shape,iota(filter(x.s, curry[same_color,iota(x.s)]))],and[size1,green]]]]],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:size1;4:and[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green;4:size3;1:%s.o;2:x
'λx.apply(and[size3,and[and[and[rectangle,green],and[and[curry[same_color,x.o],green],size1]],size2]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:and[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x;4:green;4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.forall(and[yellow,green],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, iff[nand[triangle,size1],circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:triangle;4:size1;4:circle
'λx.apply(implies[triangle,triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[size3,rectangle],iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(not[and[triangle,and[triangle,nand[circle,size2]]]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[iff[yellow,rectangle]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(not[green],filter(filter(filter(filter(x.s, blue), green), blue), size3))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:blue;4:size3
'λx.apply(size2,iota(filter(filter(x.s, triangle), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(size3,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(size1,iota(filter(x.s, and[circle,and[not[not[and[and[and[yellow,iff[circle,size1]],circle],and[rectangle,size3]]]],yellow]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:circle;4:size1;4:circle;4:and[%s,%s];4:rectangle;4:size3;4:yellow
'λx.forall(or[size1,yellow],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:yellow;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), green), implies[curry[same_size,x.o],triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:green;4:implies[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(curry[same_shape,x.o],iota(filter(x.s, green)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[implies[circle,and[blue,iff[nand[rectangle,circle],green]]],yellow],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:circle;4:and[%s,%s];4:blue;4:iff[%s,%s];4:nand[%s,%s];4:rectangle;4:circle;4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(filter(x.s, curry[same_size,x.o]), curry[same_shape,iota(filter(x.s, rectangle))]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[size2,and[size2,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, curry[size-geq,x.o]), size1), and[or[green,and[and[yellow,nand[and[curry[size-lt,iota(filter(x.s, or[implies[triangle,triangle],circle]))],not[blue]],or[and[circle,yellow],and[green,yellow]]]],yellow]],triangle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:size-geq;1:%s.o;2:x;4:size1;4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:and[%s,%s];4:curry[%s,%s];5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:triangle;4:triangle;4:circle;4:not[%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:green;4:yellow;4:yellow;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, nor[circle,or[circle,size2]]), blue), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:or[%s,%s];4:circle;4:size2;4:blue;4:circle
'λx.contains(x.o, filter(filter(filter(filter(x.s, triangle), rectangle), implies[size1,size1]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle;4:implies[%s,%s];4:size1;4:size1;4:circle
'λx.apply(triangle,iota(filter(x.s, and[size3,nor[or[size3,size2],not[curry[same_color,x.o]]]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:nor[%s,%s];4:or[%s,%s];4:size3;4:size2;4:not[%s];4:curry[%s,%s];5:same_color;1:%s.o;2:x
'λx.exists(green, filter(x.s, and[green,and[size3,size1]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:size3;4:size1
'λx.apply(nor[rectangle,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nor[blue,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[size3,and[rectangle,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(not[yellow],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(and[rectangle,size2],iota(filter(filter(filter(x.s, and[and[circle,and[yellow,nand[size2,blue]]],size1]), green), circle)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:nand[%s,%s];4:size2;4:blue;4:size1;4:green;4:circle
'λx.apply(green,iota(filter(filter(x.s, curry[same_shape,x.o]), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size3
'λx.empty(filter(x.s, and[or[size1,blue],green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:green
'λx.apply(and[not[not[or[triangle,rectangle]]],curry[same_shape,iota(filter(x.s, or[green,and[not[nor[blue,size3]],size3]]))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:blue;4:size3;4:size3;1:%s.o;2:x
'λx.apply(implies[size3,or[size2,green]],iota(filter(filter(filter(filter(x.s, not[iff[yellow,circle]]), blue), or[and[blue,and[iff[implies[and[and[size2,circle],size2],nand[rectangle,or[yellow,size1]]],curry[same_size,iota(x.s)]],rectangle]],size2]), implies[size1,triangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:or[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:yellow;4:circle;4:blue;4:or[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size2;4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:size1;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:rectangle;4:size2;4:implies[%s,%s];4:size1;4:triangle
'λx.apply(and[and[nor[curry[same_size,iota(x.s)],size3],green],curry[same_size,iota(filter(filter(x.s, and[green,green]), or[size2,size1]))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size3;4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(curry[same_shape,iota(filter(filter(x.s, size3), and[blue,curry[same_size,iota(x.s)]]))],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:blue;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[or[blue,implies[blue,or[size2,size1]]],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:implies[%s,%s];4:blue;4:or[%s,%s];4:size2;4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[green,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, or[or[or[and[blue,yellow],size1],green],size2]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:size1;4:green;4:size2
'λx.apply(or[size2,rectangle],iota(filter(x.s, curry[same_shape,iota(x.s)])))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:curry[%s,%s];5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, triangle), size2))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(curry[same_size,x.o],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:curry[%s,%s];5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, size2), rectangle), and[curry[size-leq,iota(x.s)],size3]), curry[same_color,iota(x.s)])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:and[%s,%s];4:curry[%s,%s];5:size-leq;1:iota(%s);3:%s.s;2:x;4:size3;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x
'λx.forall(and[curry[same_size,x.o],size1],filter(filter(x.s, blue), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:curry[%s,%s];5:same_size;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow
'λx.apply(and[size3,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size1), nor[and[nand[yellow,size2],and[and[and[green,circle],triangle],and[not[not[or[circle,or[not[green],curry[same_size,iota(x.s)]]]]],size1]]],iff[size2,and[nor[curry[same_shape,iota(filter(filter(x.s, circle), size3))],and[triangle,blue]],triangle]]]), yellow), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:circle;4:triangle;4:and[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:green;4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:size2;4:and[%s,%s];4:nor[%s,%s];4:curry[%s,%s];5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:and[%s,%s];4:triangle;4:blue;4:triangle;4:yellow;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, not[green]), or[curry[same_color,iota(filter(x.s, size2))],and[rectangle,nand[and[triangle,and[curry[size-gt,iota(x.s)],size3]],rectangle]]]), curry[same_color,iota(x.s)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:or[%s,%s];4:curry[%s,%s];5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;4:size3;4:rectangle;4:curry[%s,%s];5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, size1))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(filter(filter(filter(filter(x.s, green), circle), yellow), yellow), nor[size1,rectangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:yellow;4:yellow;4:nor[%s,%s];4:size1;4:rectangle
'λx.apply(and[size2,and[yellow,green]],iota(filter(filter(filter(filter(x.s, yellow), size2), rectangle), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:rectangle;4:size1
'λx.apply(or[rectangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(and[green,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:rectangle;3:%s.s;2:x
'λx.apply(and[or[blue,implies[and[circle,or[size2,and[blue,or[yellow,nor[size1,size1]]]]],size3]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:implies[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:nor[%s,%s];4:size1;4:size1;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[nand[green,implies[size3,or[circle,yellow]]],and[green,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:green;4:implies[%s,%s];4:size3;4:or[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, rectangle), triangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:triangle
'λx.apply(or[and[and[green,size3],and[triangle,green]],nand[or[rectangle,yellow],size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:size3;4:and[%s,%s];4:triangle;4:green;4:nand[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(iff[rectangle,nor[and[circle,triangle],curry[size-gt,iota(x.s)]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:curry[%s,%s];5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(nor[nor[yellow,yellow],yellow],iota(filter(x.s, green)))'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:yellow;4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[and[and[circle,size3],size1],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size3;4:size1;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, nor[circle,yellow]), and[curry[same_size,iota(x.s)],yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:curry[%s,%s];5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(size2,iota(filter(filter(filter(x.s, iff[size2,curry[same_shape,x.o]]), size2), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:curry[%s,%s];5:same_shape;1:%s.o;2:x;4:size2;4:circle
'λx.forall(size2,filter(filter(filter(x.s, size2), yellow), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:circle
'λx.apply(or[green,blue],iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(or[green,not[size2]],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x

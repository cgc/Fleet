'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, or[size1,blue]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:blue;4:size2
'λx.apply(or[and[rectangle,not[yellow]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(nand[rectangle,or[green,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[size1,and[size1,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[green,nand[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), size3), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:green
'λx.exists(yellow, filter(filter(x.s, yellow), implies[apply(same_size,x.o),rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.empty(filter(filter(x.s, or[yellow,size2]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size2;4:triangle
'λx.apply(and[or[blue,and[size3,green]],implies[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size3;4:green;4:implies[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), implies[apply(same_shape,x.o),circle]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size3
'λx.true'	0:true
'λx.apply(circle,iota(filter(x.s, not[apply(same_size,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[not[size1],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(or[rectangle,and[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), or[not[apply(same_size,x.o)],nor[apply(same_color,x.o),and[size2,yellow]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:yellow
'λx.apply(apply(same_shape,iota(filter(filter(x.s, or[green,nand[circle,circle]]), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:nand[%s,%s];4:circle;4:circle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, blue), size1)), filter(filter(filter(x.s, apply(same_shape,x.o)), implies[circle,green]), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:circle;4:green;4:blue
'λx.apply(and[or[size1,size1],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.apply(implies[size3,triangle],iota(filter(filter(filter(x.s, not[rectangle]), or[iff[size3,size2],iff[size1,circle]]), blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:size3;4:size2;4:iff[%s,%s];4:size1;4:circle;4:blue
'λx.apply(not[not[and[nand[blue,blue],not[circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[and[nor[blue,and[size1,size2]],not[apply(same_color,iota(filter(x.s, blue)))]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;1:%s.o;2:x
'λx.apply(not[iff[not[blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, implies[size2,size3]), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:size3;4:rectangle;3:%s.s;2:x
'λx.forall(apply(same_size,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(implies[blue,not[circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[or[blue,apply(same_shape,iota(filter(x.s, or[circle,rectangle])))],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(implies[size1,or[and[rectangle,blue],circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[not[circle],or[yellow,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(iff[size3,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), not[blue]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue
'λx.apply(and[not[size2],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(iff[size2,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[size3,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:circle
'λx.exists(triangle, filter(x.s, or[size2,yellow]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:yellow
'λx.contains(x.o, filter(x.s, nand[circle,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:size3
'λx.forall(rectangle,filter(x.s, rectangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(x.s, or[apply(same_size,x.o),apply(size-lt,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, apply(same_size,x.o)), yellow), apply(same_color,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[iff[or[blue,size1],blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:size1;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(nor[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[blue,and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(implies[or[blue,size1],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:size1;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), and[iff[apply(same_shape,x.o),size1],circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:circle
'λx.apply(and[not[and[size2,and[circle,green]]],or[size2,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:green;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_shape,x.o)), blue)), filter(x.s, apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[apply(same_color,x.o),apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), or[triangle,size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.forall(not[size3],filter(filter(x.s, apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(or[or[apply(size-lt,x.o),and[blue,circle]],nor[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:blue;4:circle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[not[circle],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[size2,and[size2,apply(size-leq,iota(filter(x.s, size1)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, or[circle,circle]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[size2,yellow], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(triangle,filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(nor[size3,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(nor[size3,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.exists(and[and[apply(same_color,x.o),blue],apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, blue), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.empty(filter(x.s, and[nor[triangle,apply(same_shape,x.o)],blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, and[not[yellow],nand[yellow,circle]]), nand[circle,triangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:nand[%s,%s];4:yellow;4:circle;4:nand[%s,%s];4:circle;4:triangle
'λx.apply(not[rectangle],iota(filter(x.s, and[size3,green])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green
'λx.exists(not[yellow], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, or[not[circle],size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:size2
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, or[apply(size-lt,x.o),and[rectangle,blue]]), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:blue;4:size3
'λx.apply(size2,iota(filter(filter(x.s, green), or[size1,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:size1;4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, not[triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(or[and[rectangle,not[size2]],and[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size2;4:and[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[size2,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:blue
'λx.apply(circle,iota(filter(x.s, not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(not[not[green]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:green;1:%s.o;2:x
'λx.exists(blue, filter(x.s, not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[and[apply(same_size,x.o),apply(same_color,x.o)],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.forall(or[apply(same_size,x.o),or[and[blue,or[size2,size3]],yellow]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:size3;4:yellow;3:%s.s;2:x
'λx.apply(not[apply(same_size,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(blue,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, green)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(not[size3],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(iff[green,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(iff[green,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, or[blue,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(iff[and[iff[rectangle,size2],not[blue]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size2;4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, circle), iff[apply(same_size,x.o),size1]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(not[and[rectangle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(not[iff[blue,apply(same_color,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[triangle,and[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[green,triangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[blue,nor[yellow,apply(same_shape,x.o)]], filter(x.s, size2))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(iff[blue,not[and[or[yellow,green],circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.exists(not[apply(same_size,x.o)], filter(x.s, or[apply(same_shape,x.o),apply(same_size,x.o)]))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[or[rectangle,apply(same_shape,x.o)],or[nor[triangle,rectangle],blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:nor[%s,%s];4:triangle;4:rectangle;4:blue;3:%s.s;2:x
'λx.forall(and[blue,circle],filter(filter(x.s, and[circle,apply(same_shape,x.o)]), apply(same_color,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[rectangle,or[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(size2,filter(x.s, size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size3,filter(x.s, size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size1,filter(x.s, size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size2,filter(x.s, green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size1,filter(x.s, green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, implies[yellow,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:green
'λx.exists(or[circle,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, or[rectangle,or[circle,not[rectangle]]]), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, implies[yellow,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:size3
'λx.forall(circle,filter(filter(filter(x.s, apply(size-gt,iota(x.s))), blue), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(not[nor[apply(same_shape,iota(filter(x.s, blue))),blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[apply(same_shape,x.o),implies[apply(same_color,x.o),size2]]), not[apply(same_color,x.o)]), implies[and[or[and[size2,size3],circle],green],size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:circle;4:green;4:size1
'λx.apply(apply(size-leq,iota(filter(filter(filter(x.s, size1), size1), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:circle;1:%s.o;2:x
'λx.apply(iff[triangle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[blue,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[implies[yellow,circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, size1), rectangle), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(iff[apply(size-gt,x.o),not[size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(apply(size-gt,x.o), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size2,filter(filter(x.s, blue), blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(not[or[size2,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(nand[triangle,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.exists(not[circle], filter(filter(x.s, yellow), nand[not[size2],rectangle]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nand[%s,%s];4:not[%s];4:size2;4:rectangle
'λx.empty(filter(x.s, and[and[circle,not[and[size2,apply(same_color,iota(filter(filter(x.s, green), implies[triangle,yellow])))]]],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:triangle;4:yellow;4:size1
'λx.exists(blue, filter(x.s, not[triangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(filter(filter(x.s, circle), size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, not[apply(same_size,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[green,apply(same_size,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[or[rectangle,triangle],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, green), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, nand[size3,apply(same_size,x.o)]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(not[and[not[blue],not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[or[iff[triangle,blue],rectangle],apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:triangle;4:blue;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(filter(x.s, not[green]), size2))),nand[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2;4:nand[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(nor[green,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[size2,apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,iota(filter(x.s, size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[blue,apply(same_size,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[blue,nand[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, iff[size1,iff[yellow,not[apply(same_color,x.o)]]]), nor[yellow,size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:iff[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:yellow;4:size1
'λx.apply(not[size2],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(and[rectangle,not[green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:not[%s];4:green;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, or[and[size3,triangle],rectangle]), apply(same_size,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(nor[not[apply(same_shape,x.o)],green], filter(x.s, blue))'	0:exists(%s, %s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[not[circle],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.exists(blue, filter(x.s, or[apply(size-lt,x.o),or[yellow,size1]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:size1
'λx.apply(and[green,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.exists(implies[yellow,blue], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[nand[green,circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:green;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[green,not[or[circle,yellow]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,nand[size1,not[triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:size1;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(implies[or[blue,circle],and[circle,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[and[blue,size1],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size1;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, or[not[yellow],not[yellow]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:yellow
'λx.apply(apply(same_size,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[or[blue,and[triangle,green]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[not[rectangle],or[triangle,blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[triangle,or[green,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,not[not[rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(and[or[triangle,apply(size-leq,x.o)],or[not[yellow],not[not[yellow]]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:not[%s];4:yellow;3:%s.s;2:x
'λx.forall(blue,filter(x.s, apply(size-leq,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_size,iota(filter(x.s, yellow)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[and[blue,implies[size1,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(not[and[blue,implies[size1,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), or[apply(size-lt,x.o),size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.forall(nand[and[size1,apply(same_shape,x.o)],yellow],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.exists(and[iff[and[blue,rectangle],rectangle],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[blue,and[and[circle,circle],not[not[size3]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:not[%s];4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[implies[blue,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[not[blue],or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, size3), apply(same_size,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[and[size2,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:blue;4:circle;1:%s.o;2:x
'λx.exists(size2, filter(x.s, or[blue,apply(size-gt,x.o)]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(not[apply(same_color,iota(filter(filter(x.s, blue), blue)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[rectangle,size2]],iota(filter(filter(x.s, apply(same_shape,x.o)), not[and[blue,yellow]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:blue;4:yellow
'λx.apply(implies[size2,not[apply(same_shape,iota(filter(x.s, green)))]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.forall(nor[blue,triangle],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, or[size2,size1]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size1;4:size2
'λx.exists(nor[green,size3], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[yellow,circle]), nor[size2,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle;4:nor[%s,%s];4:size2;4:green
'λx.exists(apply(same_color,x.o), filter(filter(filter(x.s, apply(same_size,x.o)), blue), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size3
'λx.forall(nand[circle,apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[and[circle,circle],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[not[rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-geq,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(x.s, apply(size-gt,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow
'λx.exists(and[apply(same_shape,x.o),not[size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(iff[blue,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(x.s, size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(apply(same_color,x.o),filter(x.s, green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(not[apply(size-geq,x.o)],filter(filter(x.s, apply(same_color,x.o)), and[size2,blue]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(not[or[and[circle,green],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, not[blue]), apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[apply(same_shape,x.o),implies[and[circle,size3],rectangle]]), not[apply(same_color,x.o)]), implies[and[size3,triangle],green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:circle;4:size3;4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:green
'λx.apply(and[blue,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[blue,not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(and[blue,not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size2;1:%s.o;2:x
'λx.exists(and[or[blue,green],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(implies[not[and[size3,size3]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[not[not[apply(same_color,iota(filter(filter(x.s, size3), yellow)))]],yellow],iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.forall(apply(same_size,x.o),filter(filter(x.s, not[apply(same_shape,x.o)]), not[apply(same_color,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size1,apply(same_shape,x.o)]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), or[apply(same_color,x.o),size2]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(not[not[size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[not[size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(not[not[size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:size3;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, nor[apply(same_shape,x.o),size1]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.exists(apply(same_color,x.o), filter(x.s, nor[apply(same_shape,x.o),size2]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.forall(not[circle],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_color,x.o)]), and[blue,blue]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:blue;4:blue;4:blue
'λx.apply(apply(same_color,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[circle,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(not[green],filter(filter(x.s, apply(size-lt,x.o)), not[apply(same_shape,x.o)]))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[apply(same_size,iota(filter(filter(x.s, green), triangle))),size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size3
'λx.empty(filter(filter(x.s, circle), iff[not[yellow],size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:not[%s];4:yellow;4:size2
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, not[or[yellow,size1]])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:size1
'λx.apply(and[yellow,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[or[apply(same_color,x.o),size3],size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[apply(same_shape,x.o),size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(not[not[and[size1,or[yellow,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(iff[blue,and[circle,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[size3,circle],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[and[circle,not[blue]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[green,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.forall(nand[not[blue],apply(same_color,x.o)],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(not[circle],x.s)'	0:forall(%s,%s);4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(or[and[rectangle,size1],triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(apply(same_shape,x.o), filter(x.s, implies[circle,rectangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:rectangle
'λx.apply(iff[or[not[and[triangle,triangle]],size2],apply(size-geq,iota(filter(x.s, and[blue,nand[apply(same_color,x.o),or[and[triangle,size1],apply(same_size,x.o)]]])))],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(not[apply(same_color,x.o)], filter(x.s, and[apply(same_shape,x.o),rectangle]))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(implies[not[rectangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_size,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[or[apply(same_color,x.o),yellow],size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[apply(same_shape,x.o),implies[yellow,triangle]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:yellow;4:triangle
'λx.exists(and[size2,green], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.apply(and[apply(same_shape,iota(filter(filter(x.s, not[green]), size2))),nand[size2,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2;4:nand[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[size3,circle],iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[green,nor[triangle,size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:nor[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.apply(and[size1,not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, iff[or[circle,circle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:circle;4:circle;4:blue
'λx.empty(filter(filter(x.s, size3), nand[size3,or[apply(same_shape,x.o),circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size3), apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(implies[or[size1,green],or[blue,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size1;4:green;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, iff[or[apply(same_shape,x.o),and[green,triangle]],and[size1,size2]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:triangle;4:and[%s,%s];4:size1;4:size2
'λx.exists(rectangle, filter(x.s, or[blue,apply(same_color,x.o)]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(iff[size3,size1], filter(x.s, not[size3]))'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(not[size1],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[and[rectangle,iff[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[and[size2,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(iff[or[and[circle,circle],blue],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;4:green;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, apply(same_shape,x.o)), not[implies[blue,size2]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:size2
'λx.apply(not[or[yellow,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, or[apply(same_color,x.o),blue]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, not[apply(same_size,x.o)]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[circle,iff[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), or[apply(size-lt,x.o),or[size1,blue]]), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:size1;4:blue;4:green
'λx.apply(implies[circle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[apply(same_color,x.o),circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nand[blue,not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(implies[not[and[not[circle],green]],and[circle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:green;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, not[triangle]), size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1
'λx.apply(or[yellow,apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, size2), rectangle), size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle;4:size2
'λx.apply(not[and[not[size1],or[triangle,not[green]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:triangle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(or[blue,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, nor[and[apply(same_shape,x.o),apply(same_size,x.o)],size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(size1,iota(filter(filter(filter(x.s, triangle), triangle), or[yellow,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:or[%s,%s];4:yellow;4:size1
'λx.apply(apply(same_size,iota(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(size-leq,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.apply(or[apply(size-geq,iota(filter(x.s, blue))),yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, or[apply(same_shape,x.o),circle]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(not[size3],iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.forall(and[blue,size1],filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[size2],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[size3],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(x.s, not[size1]), yellow), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[triangle,or[blue,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, blue), size1)), filter(x.s, or[circle,apply(same_shape,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[not[implies[circle,triangle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:circle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(and[iff[green,green],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:green;4:size1;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[apply(same_shape,x.o),blue]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, or[rectangle,implies[rectangle,size1]]), not[yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:rectangle;4:size1;4:not[%s];4:yellow
'λx.apply(or[blue,and[green,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[or[and[green,not[apply(same_size,x.o)]],size2],or[apply(same_shape,x.o),or[blue,size1]]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size1
'λx.forall(apply(size-leq,x.o),filter(x.s, iff[yellow,not[triangle]]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:not[%s];4:triangle
'λx.exists(apply(same_shape,x.o), filter(x.s, not[yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(and[nand[size3,blue],triangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(x.s, nand[circle,nor[size3,size3]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:nor[%s,%s];4:size3;4:size3;3:%s.s;2:x
'λx.exists(blue, filter(x.s, triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[or[size2,blue],and[apply(same_shape,x.o),blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[or[triangle,and[blue,circle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.exists(and[nand[blue,and[apply(same_size,x.o),apply(same_color,x.o)]],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.exists(implies[circle,blue], filter(x.s, or[yellow,circle]))'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle
'λx.apply(blue,iota(filter(x.s, nor[triangle,size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:size1
'λx.apply(iff[circle,or[or[circle,green],yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(nand[not[blue],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(not[or[and[apply(same_shape,x.o),yellow],not[apply(same_shape,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_color,x.o)), not[apply(same_size,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[or[blue,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), iff[green,apply(size-leq,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(not[and[not[and[triangle,rectangle]],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[size1,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle
'λx.apply(nor[and[circle,size1],and[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:size1;4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[blue]), iff[rectangle,not[triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:iff[%s,%s];4:rectangle;4:not[%s];4:triangle
'λx.forall(not[apply(same_size,x.o)],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(not[apply(same_size,x.o)],filter(x.s, size2))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[or[apply(size-gt,x.o),and[not[circle],not[blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(nor[size2,triangle],filter(filter(filter(x.s, or[rectangle,circle]), yellow), apply(same_color,x.o)))'	0:forall(%s,%s);4:nor[%s,%s];4:size2;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(green,x.s)'	0:forall(%s,%s);4:green;3:%s.s;2:x
'λx.apply(iff[and[circle,not[blue]],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[not[circle],and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, or[rectangle,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[apply(same_color,x.o),triangle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:green
'λx.apply(blue,iota(filter(filter(x.s, apply(size-geq,x.o)), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size3
'λx.contains(iota(filter(filter(x.s, size1), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, circle), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;1:%s.o;2:x
'λx.forall(nand[triangle,apply(same_size,iota(filter(x.s, apply(same_color,x.o))))],filter(x.s, size3))'	0:forall(%s,%s);4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, or[triangle,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, nor[size1,apply(same_color,x.o)]), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:size1
'λx.apply(or[green,or[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, not[or[apply(same_shape,x.o),apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[circle,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(or[and[circle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[yellow,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[rectangle,not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[size3,size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size2, filter(x.s, nor[and[blue,triangle],green]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:green
'λx.exists(not[or[triangle,not[blue]]], filter(x.s, rectangle))'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:triangle;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(triangle,iota(filter(x.s, iff[blue,circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:circle
'λx.apply(not[nor[size2,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, nand[blue,apply(same_size,x.o)]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.exists(and[or[and[apply(size-leq,x.o),and[or[and[rectangle,size1],blue],circle]],nor[iff[apply(same_shape,x.o),blue],and[circle,nand[blue,yellow]]]],apply(same_color,x.o)], filter(x.s, or[triangle,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size1;4:blue;4:circle;4:nor[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:and[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[rectangle,iff[triangle,not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[rectangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[rectangle,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(not[and[or[green,yellow],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[blue]), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle
'λx.exists(apply(same_shape,x.o), filter(x.s, implies[yellow,blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:blue
'λx.apply(or[rectangle,and[size1,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[blue,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:size2
'λx.contains(iota(filter(filter(x.s, blue), size1)), filter(x.s, or[triangle,apply(same_shape,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, blue), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(or[or[yellow,size1],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:size2;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, not[apply(same_shape,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[size3,and[circle,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.exists(or[blue,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:rectangle;3:%s.s;2:x
'λx.apply(iff[blue,and[and[blue,circle],circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[size3,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:circle
'λx.contains(x.o, filter(x.s, or[blue,not[not[circle]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:not[%s];4:circle
'λx.apply(or[circle,or[blue,and[triangle,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(iff[iff[yellow,circle],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), size2), not[green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:not[%s];4:green
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[green,size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[green,size2])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(not[iff[or[blue,blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[rectangle,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[not[and[size1,and[rectangle,yellow]]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, size2), or[circle,rectangle]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:circle;4:rectangle;4:yellow
'λx.apply(apply(same_color,iota(filter(filter(x.s, and[size1,rectangle]), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(not[size2],filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(not[size3],filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.apply(or[size1,and[circle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(and[not[green],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:green;4:triangle;3:%s.s;2:x
'λx.exists(iff[apply(same_size,x.o),and[and[circle,size2],blue]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(iff[circle,size3],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(green,filter(x.s, circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, size1), or[rectangle,circle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:rectangle;4:circle;4:yellow
'λx.exists(and[nor[apply(same_shape,x.o),size1],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:blue;3:%s.s;2:x
'λx.forall(nand[yellow,green],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size1), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(and[rectangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(not[or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[apply(same_color,x.o),circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(x.s, size3), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.exists(and[triangle,size2], filter(x.s, and[nor[blue,apply(size-lt,x.o)],apply(same_color,x.o)]))'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:blue
'λx.contains(x.o, filter(filter(x.s, size3), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(nand[or[yellow,and[green,circle]],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:green;4:circle;4:circle;1:%s.o;2:x
'λx.apply(iff[or[blue,not[yellow]],and[circle,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:yellow;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.forall(not[apply(same_shape,x.o)],filter(filter(x.s, yellow), size1))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(and[or[green,apply(size-lt,iota(filter(x.s, and[triangle,blue])))],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:size3;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, not[and[size2,circle]]), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:circle;4:green
'λx.exists(and[and[apply(same_color,x.o),apply(same_shape,x.o)],not[blue]], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, blue), blue), iff[size2,triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:iff[%s,%s];4:size2;4:triangle
'λx.apply(and[size1,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), filter(x.s, not[size3]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.forall(circle,filter(filter(filter(x.s, apply(same_size,x.o)), rectangle), size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size1
'λx.apply(not[nor[and[size1,size3],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[nor[and[blue,blue],circle],and[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, yellow), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(not[and[green,size1]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[yellow,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[rectangle],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, and[circle,apply(size-lt,x.o)]), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle
'λx.apply(apply(same_color,iota(filter(x.s, implies[yellow,green]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(implies[green,apply(same_shape,x.o)],filter(x.s, rectangle))'	0:forall(%s,%s);4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[apply(size-lt,x.o),apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[size3,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(or[or[yellow,green],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:green;4:size1;1:%s.o;2:x
'λx.apply(or[not[size1],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,or[blue,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(iff[triangle,and[triangle,and[not[green],size3]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:and[%s,%s];4:not[%s];4:green;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[blue,not[circle]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:circle
'λx.apply(not[and[yellow,not[triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, blue), iff[rectangle,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:rectangle;4:circle
'λx.apply(nor[and[size2,circle],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:circle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), apply(same_size,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(green,filter(x.s, size3))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(green,filter(x.s, size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[apply(same_color,x.o),triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.forall(or[size1,apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size2,filter(x.s, or[triangle,not[or[circle,yellow]]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:circle;4:yellow
'λx.apply(or[rectangle,iff[blue,blue]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[green,and[and[apply(same_color,x.o),circle],apply(same_size,x.o)]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[yellow,not[green]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[green],iota(filter(filter(x.s, not[apply(size-geq,x.o)]), yellow)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, apply(same_size,x.o)), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(green,iota(filter(x.s, or[blue,apply(same_color,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), and[green,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), triangle), or[green,nor[yellow,size2]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:or[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:size2
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[triangle,apply(same_color,x.o)]), triangle), triangle), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:triangle;4:blue
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), blue), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue;4:triangle
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), not[circle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(green,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.exists(not[rectangle], filter(filter(x.s, apply(same_shape,x.o)), apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.exists(apply(same_size,x.o), filter(filter(x.s, yellow), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(nor[size1,apply(same_color,x.o)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[blue,implies[size1,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[size2,apply(same_color,x.o)],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[blue,circle],nand[size2,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:nand[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, green), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(and[size1,and[rectangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, nand[green,triangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:triangle
'λx.apply(implies[or[yellow,blue],or[size1,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), apply(size-gt,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow
'λx.apply(nand[blue,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(and[not[rectangle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(blue, filter(x.s, not[size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.exists(blue, filter(x.s, not[size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.exists(and[and[or[not[blue],size1],apply(same_size,x.o)],or[rectangle,blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[size1]), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[size3]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:blue
'λx.forall(size2,filter(x.s, and[green,implies[size3,triangle]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:implies[%s,%s];4:size3;4:triangle
'λx.apply(yellow,iota(x.s))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[not[implies[nor[size3,blue],circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:nor[%s,%s];4:size3;4:blue;4:circle;1:%s.o;2:x
'λx.forall(green,filter(x.s, apply(size-gt,iota(filter(filter(x.s, blue), blue)))))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.empty(filter(filter(x.s, or[not[apply(same_color,x.o)],circle]), and[not[and[apply(same_color,x.o),size2]],nor[circle,not[apply(same_shape,x.o)]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:nor[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), apply(same_size,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, iff[size1,size2])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:size2
'λx.exists(apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[green],iota(filter(x.s, and[blue,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, size2), apply(same_shape,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[size1], filter(x.s, or[rectangle,and[size3,triangle]]))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:triangle
'λx.apply(and[not[blue],iff[size3,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:iff[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), and[apply(same_size,x.o),apply(same_shape,x.o)]), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:triangle
'λx.apply(not[nor[or[blue,triangle],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, apply(size-leq,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(circle,x.o)'	0:apply(%s,%s);4:circle;1:%s.o;2:x
'λx.apply(iff[and[blue,triangle],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size2;1:%s.o;2:x
'λx.exists(not[green], filter(filter(x.s, triangle), triangle))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(or[apply(same_color,iota(filter(filter(filter(filter(x.s, blue), implies[size3,size1]), or[size1,triangle]), not[green]))),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:size3;4:size1;4:or[%s,%s];4:size1;4:triangle;4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, green), apply(same_shape,x.o)))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:rectangle
'λx.apply(nand[not[size3],implies[yellow,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size3;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[blue,and[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, iff[apply(same_size,x.o),yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[and[and[size2,size2],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:blue;1:%s.o;2:x
'λx.exists(and[iff[and[blue,size1],rectangle],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:blue;4:size1;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size2
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size3
'λx.apply(apply(same_shape,iota(filter(x.s, or[apply(size-geq,x.o),size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(x.s, not[apply(same_shape,x.o)]), blue)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(yellow,iota(filter(filter(x.s, not[rectangle]), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size3
'λx.apply(or[size3,and[blue,not[and[and[yellow,size1],circle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:size1;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[rectangle,size2]), or[and[size2,blue],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:and[%s,%s];4:size2;4:blue;4:rectangle
'λx.apply(apply(size-geq,iota(filter(x.s, nor[yellow,and[green,size1]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(nand[triangle,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,and[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, and[yellow,triangle]), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle;4:triangle
'λx.forall(apply(same_size,x.o),filter(filter(x.s, apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))), and[size1,yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.exists(not[or[or[not[apply(same_shape,x.o)],circle],circle]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;3:%s.s;2:x
'λx.apply(or[or[blue,green],and[nand[green,or[triangle,size3]],yellow]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:green;4:and[%s,%s];4:nand[%s,%s];4:green;4:or[%s,%s];4:triangle;4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, blue), blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(iff[nor[size2,and[or[green,yellow],circle]],not[size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(not[nand[not[blue],or[blue,or[triangle,rectangle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_color,x.o)), not[apply(same_shape,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.exists(not[blue], filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,x.o)), circle))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(nor[triangle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(or[and[and[rectangle,size3],yellow],apply(same_shape,x.o)], filter(x.s, not[apply(same_color,x.o)]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[apply(same_color,x.o),yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[nor[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;4:rectangle
'λx.apply(implies[rectangle,not[size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(and[not[size2],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[blue,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[blue,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[blue,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(iff[blue,rectangle],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[nand[rectangle,blue],implies[and[circle,apply(same_size,x.o)],blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:blue;4:implies[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(and[blue,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[triangle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[size2,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[blue,yellow]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:circle
'λx.empty(filter(filter(filter(x.s, and[apply(same_shape,x.o),blue]), blue), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue;4:not[%s];4:rectangle
'λx.apply(apply(same_shape,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[triangle,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[triangle,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[triangle,not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[circle,not[and[blue,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(and[blue,circle],filter(x.s, and[apply(same_size,x.o),blue]))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(rectangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[or[triangle,size2],or[size3,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(filter(filter(filter(x.s, blue), rectangle), size1))),filter(x.s, rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size2,filter(x.s, and[size3,apply(same_size,x.o)]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[size3,apply(same_size,x.o)]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[size2,iff[blue,not[triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(x.s), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[apply(same_color,iota(filter(x.s, blue))),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[and[green,triangle],or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[blue,green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green
'λx.exists(apply(same_size,x.o), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, circle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(blue,iota(filter(filter(x.s, apply(size-geq,x.o)), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle
'λx.exists(iff[nor[apply(same_shape,x.o),blue],triangle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[yellow,yellow]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(and[apply(same_size,x.o),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.exists(not[implies[apply(same_shape,x.o),yellow]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, size1), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.exists(size1, filter(x.s, circle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[nand[green,blue],apply(same_shape,iota(filter(filter(x.s, or[apply(same_size,x.o),rectangle]), blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size3), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[rectangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[size3,not[apply(same_size,iota(filter(filter(x.s, triangle), green)))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;1:%s.o;2:x
'λx.exists(not[rectangle], filter(filter(x.s, not[and[green,yellow]]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[triangle,yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:yellow
'λx.apply(or[not[yellow],size3],iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.exists(rectangle, filter(x.s, triangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size3,filter(filter(x.s, size1), apply(same_size,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, iff[green,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:circle
'λx.forall(size1,filter(filter(x.s, size3), apply(same_size,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(size-leq,iota(filter(x.s, yellow)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), not[circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(implies[apply(same_color,x.o),green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[circle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[size3,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, not[and[green,size2]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:green;4:size2
'λx.apply(not[and[or[rectangle,size2],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:size2;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, nor[apply(same_shape,x.o),apply(same_color,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, and[blue,blue]), not[green]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(or[rectangle,or[green,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, blue), apply(same_color,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[circle,apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,or[size1,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.forall(or[rectangle,apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[not[triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(filter(x.s, or[triangle,blue]), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:blue;4:size1;1:%s.o;2:x
'λx.apply(implies[size1,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, not[apply(size-lt,x.o)]), not[green]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:green;4:rectangle
'λx.apply(and[not[and[triangle,green]],nand[and[yellow,size2],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:green;4:nand[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:circle;1:%s.o;2:x
'λx.apply(and[or[green,yellow],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(implies[size3,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, nor[size2,size3])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:size3
'λx.apply(and[green,apply(same_shape,iota(filter(x.s, size1)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(nand[size2,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(nor[apply(size-lt,iota(filter(x.s, blue))),and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nand[size3,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(not[apply(same_size,x.o)],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(x.o, filter(x.s, nand[blue,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:circle
'λx.exists(or[and[triangle,size2],implies[apply(same_size,x.o),size3]], filter(x.s, yellow))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nor[green,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.exists(nand[blue,size1], filter(filter(x.s, apply(same_shape,x.o)), implies[apply(same_size,x.o),blue]))'	0:exists(%s, %s);4:nand[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(implies[size2,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[apply(size-leq,x.o)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[rectangle],iota(filter(x.s, implies[rectangle,and[yellow,size2]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:size2
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o)), implies[blue,yellow]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:blue;4:yellow;4:triangle
'λx.exists(blue, filter(x.s, rectangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(iff[apply(same_shape,x.o),or[rectangle,triangle]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(iff[and[nor[rectangle,blue],triangle],apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:blue;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[nand[size2,circle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:circle;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(iff[apply(size-geq,x.o),rectangle], filter(x.s, size3))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[size1,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[or[blue,triangle],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[or[and[green,size3],not[apply(same_color,x.o)]],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,x.o)), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(green,iota(filter(filter(x.s, apply(same_size,x.o)), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(nand[yellow,green],iota(filter(filter(x.s, and[apply(size-gt,x.o),implies[rectangle,yellow]]), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:yellow;4:blue
'λx.contains(x.o, filter(filter(x.s, rectangle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(nor[circle,not[apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(and[apply(same_shape,x.o),nor[green,size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.forall(implies[and[apply(same_shape,x.o),apply(same_shape,x.o)],apply(same_color,x.o)],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, size3), triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(apply(same_color,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, not[yellow]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(nand[rectangle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[and[apply(same_shape,iota(filter(x.s, green))),yellow],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, apply(size-lt,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size2), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, blue), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;3:%s.s;2:x
'λx.exists(and[rectangle,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[or[or[triangle,rectangle],green],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(or[size3,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, and[apply(size-lt,x.o),green]))),size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:size1;1:%s.o;2:x
'λx.forall(or[size2,iff[circle,and[apply(same_shape,x.o),triangle]]],filter(x.s, green))'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:iff[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(green,iota(filter(x.s, and[size2,and[apply(same_shape,x.o),size2]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(or[blue,or[green,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, and[not[size1],blue]), and[or[triangle,apply(same_shape,x.o)],apply(same_color,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[size2,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, and[circle,not[green]]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:green
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), green), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:circle
'λx.apply(not[size1],iota(filter(x.s, and[green,circle])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.empty(filter(filter(filter(x.s, size3), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:rectangle
'λx.apply(size1,iota(filter(filter(filter(x.s, circle), yellow), implies[yellow,apply(same_color,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, iff[not[apply(same_color,x.o)],green]), circle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:circle
'λx.exists(or[triangle,blue], filter(filter(x.s, apply(same_color,x.o)), size3))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(or[size3,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[yellow,and[size3,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(or[circle,not[not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[triangle,green],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[green], filter(filter(x.s, not[size3]), rectangle))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle
'λx.apply(and[not[size3],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), or[size1,triangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(size3,iota(filter(x.s, and[and[size3,yellow],yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:yellow
'λx.apply(not[and[yellow,green]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, or[size3,rectangle]), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:rectangle;4:size3
'λx.exists(apply(same_color,iota(filter(filter(x.s, not[size2]), or[apply(same_shape,x.o),size2]))), filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[and[green,or[and[size1,not[apply(same_color,iota(filter(filter(x.s, rectangle), green)))]],blue]],and[size2,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:blue;4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(x.s, nor[apply(same_size,x.o),blue]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(or[size1,apply(same_color,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), implies[triangle,green]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:triangle;4:green;4:size1
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:blue
'λx.apply(or[not[circle],and[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[not[nor[rectangle,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nor[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), blue), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:not[%s];4:triangle
'λx.apply(not[and[size1,apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[blue,and[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(not[or[yellow,and[rectangle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, apply(size-leq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nor[apply(same_size,x.o),size2]), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;4:not[%s];4:size2
'λx.exists(not[circle], filter(filter(x.s, yellow), yellow))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.forall(size3,filter(filter(x.s, and[apply(size-geq,iota(filter(filter(x.s, blue), green))),green]), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:green;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.empty(filter(filter(x.s, rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.exists(apply(same_shape,x.o), filter(x.s, and[apply(same_shape,x.o),or[circle,blue]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:blue
'λx.apply(or[rectangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[size2,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.exists(or[blue,yellow], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[and[blue,rectangle],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(and[apply(same_size,x.o),or[apply(same_color,x.o),size1]],filter(x.s, and[apply(same_shape,x.o),or[not[not[green]],yellow]]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:green;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, and[triangle,blue]), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, triangle), not[green])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:green
'λx.apply(not[and[or[triangle,yellow],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-gt,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle
'λx.apply(iff[not[not[blue]],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[and[size1,size1],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[and[size2,size2],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,apply(same_size,x.o)]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(and[not[blue],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:size2;1:%s.o;2:x
'λx.exists(size2, filter(x.s, yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size1, filter(x.s, yellow))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(size3, filter(x.s, yellow))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[size2,triangle],iota(filter(filter(filter(x.s, not[rectangle]), or[iff[size3,size2],iff[size1,circle]]), blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:size3;4:size2;4:iff[%s,%s];4:size1;4:circle;4:blue
'λx.exists(triangle, filter(filter(x.s, size2), and[green,apply(same_color,x.o)]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), green), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:triangle
'λx.contains(iota(filter(x.s, not[size3])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size2,apply(same_shape,x.o)],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.exists(not[and[not[size1],apply(size-geq,x.o)]], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(rectangle,filter(filter(filter(x.s, iff[size3,yellow]), apply(same_shape,x.o)), not[green]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green
'λx.apply(and[size3,apply(same_shape,x.o)],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.forall(size2,filter(filter(x.s, blue), rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.exists(and[size2,not[not[apply(same_color,x.o)]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), filter(filter(filter(x.s, blue), size2), apply(size-leq,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(or[blue,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:size1;3:%s.s;2:x
'λx.apply(nor[size2,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(nor[size2,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(nor[size2,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(iff[implies[or[yellow,size1],size1],not[yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:size1;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(implies[yellow,green], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[or[size3,size2],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:circle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, blue), and[blue,apply(same_size,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[size1,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nor[size1,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(nor[size1,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[not[rectangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[circle,iff[apply(same_color,x.o),blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[or[rectangle,size1],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:triangle;1:%s.o;2:x
'λx.exists(and[green,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[circle,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,implies[apply(same_shape,x.o),blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, or[blue,size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size2
'λx.apply(nand[or[rectangle,triangle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[rectangle]), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:yellow
'λx.apply(not[circle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(not[implies[apply(same_size,x.o),size2]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), and[blue,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:circle
'λx.contains(x.o, filter(x.s, implies[or[triangle,rectangle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue
'λx.apply(not[and[circle,not[or[blue,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[rectangle,circle],iota(filter(filter(x.s, circle), not[green])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:green
'λx.apply(and[blue,or[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[size3,not[triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(green, filter(x.s, iff[circle,size1]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size1
'λx.empty(filter(x.s, and[apply(same_color,x.o),yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(implies[circle,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(implies[circle,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(implies[circle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[iff[circle,size3],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:iff[%s,%s];4:circle;4:size3;4:blue
'λx.contains(x.o, filter(x.s, or[green,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.forall(size1,filter(filter(x.s, nor[or[apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), size3))),nand[blue,triangle]],circle]), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:nand[%s,%s];4:blue;4:triangle;4:circle;4:blue
'λx.empty(filter(filter(x.s, apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nand[or[not[and[apply(size-geq,x.o),blue]],triangle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(nor[size3,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(or[apply(size-lt,x.o),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), and[green,not[apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, and[blue,size3]), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(and[nand[size3,yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(not[nor[iff[circle,not[or[not[blue],triangle]]],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:iff[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:not[%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(and[green,or[rectangle,size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(not[green],iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(not[green],iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(not[and[or[size2,size3],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, implies[size3,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:blue
'λx.apply(implies[not[or[blue,and[size3,triangle]]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size3;4:triangle;4:circle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, rectangle), size1))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(or[circle,iff[green,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(not[not[and[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(not[blue],x.s)'	0:forall(%s,%s);4:not[%s];4:blue;3:%s.s;2:x
'λx.forall(green,filter(filter(x.s, rectangle), apply(same_color,x.o)))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[nor[or[circle,apply(same_color,x.o)],triangle],size1],iota(filter(x.s, and[not[and[apply(same_shape,x.o),yellow]],size3])))'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size3
'λx.apply(size1,iota(filter(filter(x.s, apply(size-leq,x.o)), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow
'λx.apply(and[green,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(and[green,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(and[green,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.forall(or[yellow,apply(same_color,x.o)],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size3,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[blue]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[rectangle,triangle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(or[size3,apply(same_size,x.o)],iota(filter(x.s, or[circle,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(or[rectangle,implies[size1,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(and[size2,apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[or[or[yellow,circle],size2]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:size2
'λx.apply(iff[green,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, or[yellow,and[green,rectangle]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:green;4:rectangle
'λx.forall(implies[blue,not[size2]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:blue;4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(implies[or[blue,triangle],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[green]), apply(size-leq,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[and[yellow,circle],size3])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size3;3:%s.s;2:x
'λx.apply(nor[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(size-gt,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[size2,triangle],iota(filter(filter(x.s, rectangle), or[or[implies[apply(same_shape,x.o),blue],blue],triangle])))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue;4:triangle
'λx.apply(size3,iota(filter(x.s, or[size3,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size1
'λx.apply(size2,iota(filter(x.s, or[size2,size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size2
'λx.forall(size1,filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.exists(apply(same_size,x.o), filter(x.s, or[size3,and[rectangle,green]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:green
'λx.apply(size3,iota(filter(x.s, or[size3,green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:green
'λx.apply(or[and[blue,triangle],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(nor[circle,and[size3,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nand[circle,or[yellow,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(or[size1,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:blue;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(same_size,x.o)), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, apply(same_size,x.o)), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(or[blue,size2],iota(filter(filter(filter(x.s, blue), blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, size2), green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[size2,size1],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:size1;4:green;1:%s.o;2:x
'λx.forall(or[rectangle,apply(size-geq,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, and[and[nor[green,circle],size2],size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:circle;4:size2;4:size2
'λx.apply(or[circle,not[and[yellow,or[rectangle,yellow]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(or[and[size2,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(implies[iff[yellow,circle],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[blue,implies[size2,size2]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:implies[%s,%s];4:size2;4:size2
'λx.apply(blue,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[and[apply(same_size,x.o),blue]],filter(filter(x.s, apply(same_color,x.o)), not[size1]))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(implies[or[blue,circle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, green), triangle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;4:size2
'λx.apply(implies[not[or[green,size1]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:green;4:size1;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.forall(blue,filter(filter(x.s, size1), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[iff[nand[or[size2,size1],and[rectangle,blue]],and[rectangle,iff[size3,and[rectangle,circle]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size2;4:size1;4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:rectangle;4:iff[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.exists(nand[apply(same_color,x.o),rectangle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[not[triangle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(implies[apply(size-geq,iota(filter(filter(x.s, green), green))),size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:size3;1:%s.o;2:x
'λx.apply(not[and[rectangle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(not[and[blue,or[rectangle,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, not[triangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[green,and[not[triangle],circle]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:not[%s];4:triangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.contains(iota(filter(filter(x.s, blue), rectangle)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[blue,apply(same_shape,x.o)],iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.contains(iota(filter(filter(filter(x.s, blue), size3), or[apply(same_color,x.o),yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, and[apply(same_color,x.o),size3]), size3)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:size3
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.exists(or[and[size1,size3],and[rectangle,apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size3;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), not[size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[and[size1,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, iff[apply(same_size,x.o),green]), or[blue,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:or[%s,%s];4:blue;4:rectangle
'λx.forall(nand[apply(same_color,x.o),not[blue]],filter(x.s, circle))'	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[nor[size1,nor[and[yellow,triangle],circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:nor[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.forall(and[not[circle],not[circle]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:circle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, blue), and[nor[triangle,apply(same_shape,x.o)],blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(or[yellow,size2], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[green,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(or[green,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, not[and[and[size2,yellow],blue]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:blue
'λx.apply(or[or[triangle,blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,iota(filter(x.s, green))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(or[blue,not[triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(or[nor[triangle,size1],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:triangle;4:size1;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[or[size1,apply(size-geq,x.o)],not[apply(same_color,x.o)]]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[rectangle,and[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(circle, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, nand[green,not[size1]]), implies[circle,size1]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:not[%s];4:size1;4:implies[%s,%s];4:circle;4:size1;4:triangle;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), triangle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:blue
'λx.empty(filter(filter(x.s, rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.empty(filter(filter(x.s, rectangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(x.s, rectangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(nor[yellow,nor[size3,green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:nor[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(and[nand[not[size3],yellow],not[and[green,size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:size3;4:yellow;4:not[%s];4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.forall(or[blue,not[apply(same_shape,x.o)]],filter(filter(x.s, not[size1]), size3))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:size3
'λx.contains(x.o, filter(x.s, or[size3,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:blue
'λx.empty(filter(filter(filter(x.s, nor[blue,circle]), nand[size3,triangle]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:circle;4:nand[%s,%s];4:size3;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[nand[triangle,not[blue]],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:triangle;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[apply(same_shape,x.o),green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[not[size2],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(not[not[not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(or[yellow,apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[rectangle,blue],iota(filter(x.s, and[blue,not[not[blue]]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:not[%s];4:blue
'λx.apply(size2,iota(filter(filter(x.s, nor[blue,size3]), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:size3;4:triangle
'λx.apply(or[iff[triangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[rectangle,apply(size-geq,iota(filter(x.s, triangle)))]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(size1,filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size2,filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), circle), or[green,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:or[%s,%s];4:green;4:yellow
'λx.forall(implies[triangle,yellow],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.apply(iff[blue,and[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[not[size2],not[and[triangle,size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:not[%s];4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[iff[circle,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[yellow,and[or[rectangle,triangle],green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(size-geq,x.o)), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green
'λx.apply(or[triangle,and[rectangle,not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), or[size2,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:size2;4:green
'λx.exists(blue, filter(x.s, and[and[apply(same_shape,x.o),blue],size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size1
'λx.apply(triangle,iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(nor[green,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[implies[yellow,size3],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:size3;4:size3;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, blue), iff[circle,size2])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:circle;4:size2
'λx.apply(and[green,and[green,apply(same_shape,iota(filter(x.s, blue)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, size3), apply(same_color,x.o)), and[green,triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:triangle
'λx.exists(and[triangle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:blue;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), nor[size2,apply(same_color,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), nor[size3,apply(same_color,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[and[triangle,triangle],not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(or[triangle,not[and[and[apply(same_shape,x.o),circle],circle]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;3:%s.s;2:x
'λx.forall(iff[blue,triangle],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(and[size3,blue],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, size3), triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, yellow), circle), not[size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(and[and[triangle,green],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:triangle;1:%s.o;2:x
'λx.apply(implies[rectangle,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, or[triangle,yellow]), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:yellow;4:green
'λx.exists(blue, filter(x.s, apply(same_shape,iota(x.s))))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x
'λx.exists(or[and[size3,nor[green,not[apply(same_shape,x.o)]]],yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size3;4:nor[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), and[rectangle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[rectangle,size2],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, and[blue,nand[and[apply(same_shape,x.o),nand[size3,not[yellow]]],apply(same_color,x.o)]]), blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue
'λx.empty(filter(filter(filter(filter(x.s, blue), apply(same_color,x.o)), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(not[blue], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[not[size1],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[size3]), blue), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:blue;4:triangle
'λx.apply(and[or[not[rectangle],blue],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(and[size1,or[and[and[size1,and[size1,size1]],size1],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:size1;4:size1;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(filter(filter(x.s, not[circle]), blue)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, iff[circle,yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:yellow
'λx.forall(circle,filter(x.s, size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(circle,filter(x.s, size1))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(circle,filter(x.s, green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[triangle,not[size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(or[rectangle,iff[circle,and[apply(same_shape,x.o),green]]],filter(x.s, green))'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(x.s, not[size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.contains(x.o, filter(x.s, not[size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.contains(x.o, filter(x.s, not[size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.exists(not[apply(same_size,x.o)], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[yellow,iff[size2,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:iff[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(or[size2,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:size1;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(same_size,x.o)), not[size2]), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, and[or[circle,size3],blue]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:blue;4:blue
'λx.apply(or[triangle,implies[yellow,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[apply(same_color,x.o)]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(apply(size-geq,x.o),filter(x.s, green))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(apply(size-geq,x.o),filter(x.s, size3))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(apply(size-geq,x.o),filter(x.s, size2))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[or[green,yellow],and[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, circle)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.contains(iota(filter(x.s, nand[circle,nor[size3,triangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:nor[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[apply(same_color,x.o)]), not[apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, not[rectangle]), and[yellow,yellow])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:and[%s,%s];4:yellow;4:yellow
'λx.apply(apply(same_color,iota(filter(filter(x.s, rectangle), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[circle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(not[or[circle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(size-geq,x.o)), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, iff[circle,size2]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size2;4:blue
'λx.apply(or[and[not[rectangle],nor[triangle,triangle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:triangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[triangle,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[not[yellow],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(not[nand[green,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.exists(or[size1,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(not[and[yellow,not[green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(x.s, apply(same_shape,x.o)), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(and[size2,implies[apply(same_color,x.o),blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(and[blue,apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(or[apply(same_color,x.o),not[circle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(nor[and[green,apply(same_shape,iota(filter(filter(x.s, not[triangle]), size1)))],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(filter(x.s, size1), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.apply(not[nor[circle,or[blue,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:circle;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[size1,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[size1,not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:size2;1:%s.o;2:x
'λx.forall(green,filter(x.s, not[iff[triangle,blue]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:triangle;4:blue
'λx.false'	0:false
'λx.apply(and[or[circle,blue],implies[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:implies[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, circle), not[size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size1
'λx.exists(size1, filter(x.s, not[and[circle,not[yellow]]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:yellow
'λx.apply(not[and[size3,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, apply(size-geq,x.o)), triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:triangle
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_color,x.o)), size1), and[circle,green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:and[%s,%s];4:circle;4:green
'λx.apply(and[circle,iff[size3,iff[blue,and[size3,size3]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, implies[yellow,apply(same_color,x.o)]), and[or[rectangle,circle],nor[blue,size3]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:nor[%s,%s];4:blue;4:size3
'λx.apply(and[circle,apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[blue,apply(same_color,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[not[or[not[triangle],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[and[triangle,apply(same_size,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, apply(same_size,x.o)), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(size2,iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), or[triangle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[nor[and[size3,apply(same_shape,iota(filter(x.s, iff[circle,size3])))],green],size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size3;4:green;4:size3;4:yellow
'λx.apply(size1,iota(filter(x.s, and[size1,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.apply(or[size1,apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[and[not[and[blue,green]],apply(same_size,x.o)],apply(same_shape,x.o)],iota(filter(x.s, or[blue,blue])))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue
'λx.forall(circle,filter(x.s, apply(same_shape,iota(filter(filter(x.s, circle), green)))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(blue,iota(filter(x.s, and[blue,apply(size-gt,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, nand[blue,size2]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:size2
'λx.exists(blue, x.s)'	0:exists(%s, %s);4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(triangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(triangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(blue,iota(filter(x.s, or[blue,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(not[not[or[apply(same_shape,x.o),yellow]]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), blue), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size2
'λx.apply(iff[and[green,rectangle],and[or[triangle,size3],yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(or[size3,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(iff[rectangle,not[circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(or[and[rectangle,apply(same_color,x.o)],blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[nand[blue,blue],nand[circle,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[or[rectangle,size2],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.contains(iota(filter(filter(x.s, circle), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, implies[and[size1,size1],apply(same_color,iota(filter(x.s, circle)))]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size1;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.empty(filter(filter(filter(x.s, implies[blue,yellow]), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(iff[yellow,apply(same_color,x.o)],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(circle,filter(x.s, and[apply(same_size,x.o),blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(and[blue,or[size3,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, apply(size-lt,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(not[rectangle], filter(x.s, apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), or[blue,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[size3],or[not[or[rectangle,nor[size1,yellow]]],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:size1;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(not[nor[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size2, filter(x.s, apply(size-geq,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(iff[yellow,and[or[rectangle,apply(same_shape,x.o)],circle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[nand[yellow,circle],or[nand[rectangle,or[size3,triangle]],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:circle;4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), or[triangle,size1])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:triangle;4:size1
'λx.apply(or[and[not[triangle],green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(or[and[circle,circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), not[size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1
'λx.contains(x.o, filter(filter(x.s, blue), not[size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size3
'λx.apply(green,iota(filter(x.s, and[triangle,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle
'λx.contains(iota(filter(x.s, and[blue,apply(same_shape,x.o)])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, or[circle,and[blue,and[apply(same_color,x.o),blue]]]), nor[size1,not[apply(same_shape,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:nor[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[not[or[circle,or[size3,and[not[triangle],size2]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),iff[triangle,triangle]],iota(filter(filter(x.s, blue), or[size2,size3])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size2;4:size3
'λx.apply(yellow,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(or[rectangle,and[size1,not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, circle), and[blue,not[size1]])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:blue;4:not[%s];4:size1
'λx.apply(nand[not[and[size1,blue]],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(circle,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(circle,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(or[size3,or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[implies[and[size2,green],rectangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:green;4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(or[blue,green], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[size1,yellow],iota(filter(filter(x.s, not[rectangle]), size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size2
'λx.forall(circle,x.s)'	0:forall(%s,%s);4:circle;3:%s.s;2:x
'λx.apply(implies[iff[triangle,or[rectangle,or[green,blue]]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:blue;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.forall(apply(size-leq,x.o),filter(x.s, rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(x.s, and[apply(size-lt,x.o),not[size1]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:size1
'λx.exists(not[iff[size3,apply(size-leq,x.o)]], x.s)'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[implies[blue,circle],and[not[and[circle,not[blue]]],implies[and[size3,size1],rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:implies[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[not[green],not[apply(same_shape,x.o)]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[green,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, yellow), not[size1]), yellow), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size1;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, nor[yellow,rectangle]), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:rectangle;4:triangle
'λx.forall(size2,filter(filter(filter(x.s, or[yellow,apply(same_color,iota(filter(x.s, blue)))]), rectangle), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size2
'λx.exists(and[not[green],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.forall(blue,filter(filter(x.s, rectangle), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(and[triangle,apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, or[circle,yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow
'λx.apply(green,iota(filter(filter(x.s, green), and[circle,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[rectangle,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(and[circle,and[size1,not[blue]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size1;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(x.s, and[yellow,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, size2), triangle), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:size2
'λx.apply(nor[green,or[size3,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[and[circle,yellow],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:blue;1:%s.o;2:x
'λx.exists(or[size2,rectangle], filter(filter(filter(x.s, apply(same_color,x.o)), rectangle), rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:rectangle
'λx.exists(apply(same_shape,x.o), filter(x.s, or[blue,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(not[nor[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[size1],not[implies[or[apply(size-lt,iota(filter(x.s, blue))),apply(same_shape,x.o)],blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(or[circle,triangle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[nand[size2,yellow],not[and[or[green,yellow],size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:yellow;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), and[circle,apply(same_color,x.o)]), circle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:not[%s];4:blue
'λx.apply(blue,iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(blue,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(not[green],x.o)'	0:apply(%s,%s);4:not[%s];4:green;1:%s.o;2:x
'λx.apply(iff[implies[size1,rectangle],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:size1;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(or[and[circle,not[blue]],and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), apply(same_color,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, apply(same_size,x.o)), rectangle), size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:size1
'λx.apply(not[not[or[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[and[circle,size3],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[size3,apply(same_shape,x.o)],iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(not[and[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[not[size1],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(implies[and[triangle,triangle],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:size3;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(x.s, size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(x.s, and[yellow,not[rectangle]])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:rectangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_color,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[yellow,implies[size2,size1]],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:implies[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[apply(same_color,x.o),implies[yellow,triangle]], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[apply(same_shape,x.o),rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(iff[apply(same_size,x.o),not[size3]],filter(x.s, blue))'	0:forall(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(blue,filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[and[blue,or[size2,not[size3]]],triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:not[%s];4:size3;4:triangle
'λx.contains(x.o, filter(x.s, and[or[rectangle,size2],green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size2;4:green
'λx.apply(nor[size2,size2],iota(filter(filter(x.s, apply(same_color,x.o)), rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[blue,or[triangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, green))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, and[apply(same_shape,x.o),rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), not[yellow]), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;4:circle
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_color,x.o)), or[apply(same_shape,x.o),size2]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:blue
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, triangle), size3), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size3
'λx.apply(or[or[blue,rectangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[rectangle,iff[triangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.exists(and[blue,apply(same_shape,x.o)], filter(x.s, apply(size-gt,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(implies[blue,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[size3,yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:yellow
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, and[or[size3,green],triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, iff[size1,blue]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:blue;4:rectangle
'λx.forall(apply(same_size,x.o),filter(x.s, not[yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(circle, filter(x.s, not[green]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.contains(x.o, filter(x.s, and[size2,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green
'λx.apply(not[or[blue,iff[circle,or[yellow,green]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:iff[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[size1,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[blue,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, not[blue]), or[blue,apply(same_color,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(or[yellow,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(implies[iff[size1,green],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:size1;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[yellow,green],iota(filter(filter(x.s, not[and[size2,triangle]]), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:triangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size1,nor[rectangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, iff[circle,apply(same_size,x.o)]), circle), implies[apply(same_shape,x.o),apply(same_color,x.o)])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[not[yellow],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(and[and[triangle,green],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(iff[and[size1,or[blue,blue]],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[apply(same_shape,x.o),rectangle],iota(filter(x.s, and[nand[and[blue,size1],not[green]],triangle])))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:blue;4:size1;4:not[%s];4:green;4:triangle
'λx.apply(not[circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[blue,circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(blue, filter(x.s, or[size2,triangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:triangle
'λx.apply(iff[nor[triangle,size3],and[size2,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), and[green,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:size3
'λx.empty(filter(filter(filter(x.s, rectangle), not[green]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:green;4:size1
'λx.apply(blue,iota(filter(x.s, not[nand[blue,or[size1,size2]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:blue;4:or[%s,%s];4:size1;4:size2
'λx.forall(and[not[and[yellow,green]],apply(same_color,x.o)],filter(filter(x.s, apply(same_shape,x.o)), nand[circle,apply(same_color,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, apply(size-lt,x.o)), not[blue]), or[triangle,circle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:circle
'λx.empty(filter(filter(x.s, triangle), and[not[blue],apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[triangle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, not[green]), and[yellow,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o)), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:rectangle
'λx.apply(or[size3,apply(same_shape,x.o)],iota(filter(filter(filter(x.s, apply(same_color,x.o)), circle), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:circle
'λx.apply(not[yellow],iota(filter(filter(x.s, not[size2]), not[rectangle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:not[%s];4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, apply(same_shape,x.o)), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(blue,iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.exists(triangle, x.s)'	0:exists(%s, %s);4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), not[green]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:green;4:size2
'λx.apply(rectangle,iota(x.s))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, not[size1]), rectangle), apply(size-lt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:rectangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(iff[size1,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(iff[size1,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.empty(filter(filter(filter(x.s, implies[blue,size1]), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(not[or[or[apply(same_color,x.o),size2],green]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(and[not[size1],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(implies[or[size2,blue],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size2;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.forall(not[apply(same_color,x.o)],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[size1,circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:circle
'λx.forall(or[and[apply(same_color,x.o),circle],blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:blue;3:%s.s;2:x
'λx.apply(and[size1,and[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[circle,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(not[or[size2,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(nor[green,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(nor[green,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[or[size2,rectangle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), yellow), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[circle,not[and[triangle,blue]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[green,apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[and[green,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(or[size1,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[green,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, and[apply(same_shape,x.o),and[apply(same_color,x.o),not[blue]]]), circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:circle
'λx.apply(and[not[size2],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.forall(size2,filter(x.s, iff[circle,yellow]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:yellow
'λx.exists(yellow, x.s)'	0:exists(%s, %s);4:yellow;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, nand[size3,circle]), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), and[size1,apply(same_color,x.o)])), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[blue,or[size3,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, and[triangle,green]), not[size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green;4:not[%s];4:size1
'λx.contains(x.o, filter(filter(x.s, and[triangle,green]), not[size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green;4:not[%s];4:size3
'λx.apply(or[and[green,rectangle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(not[not[or[triangle,not[circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:triangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(or[or[green,apply(same_color,x.o)],circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(or[iff[triangle,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:triangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[or[apply(size-gt,x.o),and[blue,circle]],nor[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:blue;4:circle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.contains(x.o, filter(filter(x.s, rectangle), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.contains(x.o, filter(filter(x.s, rectangle), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.empty(filter(filter(filter(x.s, yellow), apply(size-gt,x.o)), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle
'λx.apply(iff[and[size1,size1],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:size1;4:size2;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, or[size3,triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.exists(yellow, filter(x.s, or[size2,triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:triangle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, not[circle]), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(nor[and[yellow,size2],and[green,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), or[yellow,apply(same_size,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[or[triangle,rectangle],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[or[size3,triangle],size2]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:size2;4:rectangle
'λx.exists(or[blue,green], filter(filter(x.s, apply(same_shape,x.o)), or[implies[green,green],size3]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:implies[%s,%s];4:green;4:green;4:size3
'λx.apply(or[green,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[circle,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, green)), filter(filter(filter(x.s, apply(same_size,x.o)), green), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:size3
'λx.apply(or[triangle,or[not[yellow],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(or[blue,or[green,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(implies[and[not[green],not[size1]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[blue,nand[size1,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.forall(apply(size-geq,x.o),filter(x.s, not[nor[size2,circle]]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:size2;4:circle
'λx.apply(and[apply(size-geq,x.o),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[iff[and[size3,green],and[blue,or[apply(same_shape,x.o),green]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(blue, filter(x.s, implies[blue,and[or[blue,yellow],apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[triangle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(not[and[triangle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(not[and[triangle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(same_shape,x.o)), apply(size-geq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[blue,yellow], filter(x.s, not[iff[triangle,size2]]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:triangle;4:size2
'λx.apply(circle,iota(filter(x.s, and[circle,green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green
'λx.exists(blue, filter(filter(filter(x.s, and[or[green,blue],apply(same_shape,iota(filter(filter(x.s, blue), apply(size-gt,x.o))))]), blue), nand[circle,size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;4:nand[%s,%s];4:circle;4:size3
'λx.empty(filter(filter(filter(x.s, triangle), triangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[nor[not[size3],rectangle],or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:size3;4:rectangle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[and[circle,not[or[blue,triangle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_size,x.o)), and[or[size3,size2],apply(same_color,x.o)]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[implies[blue,circle],and[not[and[circle,not[blue]]],implies[rectangle,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:implies[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(size-geq,x.o)],iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(or[size3,green],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[apply(same_shape,iota(filter(x.s, size3))),and[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(filter(filter(x.s, apply(size-geq,x.o)), green), size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green;4:size3
'λx.exists(size1, filter(x.s, not[apply(size-leq,x.o)]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[or[blue,or[rectangle,triangle]],implies[and[size2,blue],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:size2;4:blue;4:size2;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, green), triangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.exists(size3, filter(filter(x.s, green), triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[not[blue],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[yellow],x.o)'	0:apply(%s,%s);4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, circle), apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(size3,iota(filter(filter(x.s, not[size1]), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:green
'λx.exists(blue, filter(x.s, nor[and[apply(same_shape,x.o),apply(same_color,x.o)],size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(not[or[and[circle,circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[iff[green,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[or[apply(same_color,iota(filter(filter(x.s, apply(same_size,x.o)), triangle))),circle],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:circle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, size2), apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(implies[yellow,and[circle,not[size2]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[yellow,iff[size3,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:iff[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[size2,or[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(iff[apply(same_color,x.o),and[triangle,size3]], filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[green,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(or[blue,not[apply(same_shape,x.o)]],filter(x.s, size3))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(yellow,filter(filter(filter(x.s, circle), size1), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:blue
'λx.forall(circle,filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[triangle,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:rectangle;3:%s.s;2:x
'λx.apply(and[triangle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, nand[size2,size3]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size3;4:blue
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), triangle), or[blue,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:blue;4:size2
'λx.apply(or[and[green,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, or[rectangle,and[blue,not[rectangle]]]), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:not[%s];4:rectangle;4:size1
'λx.forall(size1,filter(filter(filter(filter(x.s, apply(same_size,x.o)), not[circle]), apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[circle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, or[yellow,size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.exists(yellow, filter(filter(filter(x.s, not[size1]), apply(same_shape,x.o)), not[triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:triangle
'λx.apply(blue,iota(filter(x.s, and[or[apply(size-geq,x.o),rectangle],nor[triangle,size1]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:rectangle;4:nor[%s,%s];4:triangle;4:size1
'λx.apply(not[nand[triangle,or[circle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, apply(same_color,x.o)), rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(nor[size2,nor[size1,circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:nor[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.exists(iff[rectangle,green], filter(x.s, size2))'	0:exists(%s, %s);4:iff[%s,%s];4:rectangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(blue, filter(x.s, or[yellow,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(nor[circle,blue], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(nand[yellow,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, and[apply(same_shape,x.o),blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[apply(same_color,x.o),or[size3,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), or[yellow,and[size2,triangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:triangle
'λx.apply(size3,iota(filter(x.s, not[nand[yellow,implies[rectangle,triangle]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:yellow;4:implies[%s,%s];4:rectangle;4:triangle
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), iff[blue,size2]), not[size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:size2;4:not[%s];4:size1
'λx.forall(apply(same_size,x.o),filter(x.s, implies[apply(same_color,x.o),apply(same_size,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[iff[circle,implies[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, not[triangle]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(or[yellow,size1], filter(x.s, rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[apply(same_shape,iota(filter(x.s, blue))),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[or[circle,blue],or[green,nand[blue,circle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:green;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, circle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(rectangle, x.s)'	0:exists(%s, %s);4:rectangle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nor[yellow,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:yellow
'λx.apply(iff[yellow,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(iff[and[or[yellow,green],triangle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(or[apply(same_shape,x.o),yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(green,filter(x.s, rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[size2,not[green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:not[%s];4:green;3:%s.s;2:x
'λx.exists(or[triangle,size3], filter(x.s, apply(size-lt,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, not[size3]), blue), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:blue;4:size1
'λx.exists(apply(size-geq,x.o), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[and[blue,circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(not[nand[circle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(and[not[circle],not[and[blue,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[or[rectangle,size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[size3,and[not[circle],size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:not[%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, apply(size-geq,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(implies[or[yellow,green],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(iff[implies[size2,triangle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:size2;4:triangle;4:blue;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, not[size3]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(yellow,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(x.s, apply(same_size,iota(x.s)))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[apply(same_shape,x.o),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[not[apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[not[blue],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, blue), not[not[apply(same_color,x.o)]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[apply(size-lt,x.o)],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(nand[apply(same_color,x.o),blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.forall(not[size3],x.s)'	0:forall(%s,%s);4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(not[size1],x.s)'	0:forall(%s,%s);4:not[%s];4:size1;3:%s.s;2:x
'λx.forall(not[size2],x.s)'	0:forall(%s,%s);4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(nand[size3,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(iff[and[size1,blue],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, implies[apply(same_color,x.o),triangle]), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:blue;1:%s.o;2:x
'λx.exists(size1, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(size3, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(size2, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[circle,not[blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:not[%s];4:blue
'λx.apply(implies[and[apply(same_color,x.o),circle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[not[triangle],circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(filter(x.s, and[size3,blue]), triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;4:triangle
'λx.apply(or[green,or[yellow,not[circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(implies[or[yellow,triangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nand[not[rectangle],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.exists(circle, filter(x.s, and[or[blue,triangle],apply(same_shape,x.o)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[not[rectangle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(not[or[and[triangle,yellow],and[green,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[size2,and[not[blue],circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:blue;4:circle
'λx.contains(x.o, filter(x.s, nand[not[circle],not[size1]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:circle;4:not[%s];4:size1
'λx.apply(and[and[size2,size2],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:size2;1:%s.o;2:x
'λx.apply(not[not[iff[size1,and[green,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:iff[%s,%s];4:size1;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(implies[green,or[size2,apply(same_shape,x.o)]],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), size1), apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size3), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, implies[size1,not[triangle]]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:not[%s];4:triangle;4:green
'λx.forall(nand[apply(same_shape,x.o),circle],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(not[or[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[circle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nand[circle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, green), and[green,green]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[blue,size1],filter(x.s, and[circle,apply(same_color,x.o)]))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, triangle), yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(or[not[not[blue]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(or[size2,apply(same_shape,x.o)],filter(x.s, yellow))'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[blue,or[rectangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[not[not[circle]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[or[size3,triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:blue;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[not[or[size3,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), apply(same_color,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(not[yellow],iota(filter(filter(filter(x.s, size3), apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.forall(apply(size-leq,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(iff[blue,circle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), or[size2,green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:size2;4:green
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size2), apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(iff[circle,blue], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size3), size3)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size1), rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, circle), not[nand[yellow,not[size1]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:nand[%s,%s];4:yellow;4:not[%s];4:size1
'λx.apply(not[iff[circle,and[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[apply(same_shape,x.o),and[apply(same_size,x.o),circle]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(implies[size2,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_color,x.o)]), blue), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue
'λx.apply(or[or[blue,circle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.exists(or[rectangle,circle], filter(x.s, not[yellow]))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(or[yellow,size1],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, size1), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(not[not[circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[blue,nand[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[circle,blue],iota(filter(x.s, or[triangle,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1
'λx.apply(implies[not[rectangle],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[blue,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(iff[size3,size3],iota(filter(x.s, and[apply(same_shape,x.o),blue])))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(size2,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[circle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.exists(or[green,triangle], filter(filter(x.s, size2), or[size3,and[apply(same_shape,x.o),size2]]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.forall(iff[yellow,size2],filter(x.s, triangle))'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, triangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(x.s))'	0:apply(%s,%s);4:blue;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[circle,not[blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:not[%s];4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, not[apply(same_color,x.o)]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[size3,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(nand[size1,blue],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[size2,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(not[and[circle,iff[triangle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, and[blue,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, not[yellow]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, not[and[circle,size2]]), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:size2;4:green
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, or[yellow,blue]), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue;4:size1
'λx.apply(and[blue,or[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, or[and[blue,rectangle],size3]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:size3
'λx.apply(size2,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size1,filter(x.s, nor[size3,not[apply(same_size,x.o)]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nor[blue,size1]), or[triangle,or[blue,apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:size1;4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[iff[iff[circle,and[size3,green]],size1],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:iff[%s,%s];4:circle;4:and[%s,%s];4:size3;4:green;4:size1;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_size,iota(filter(filter(x.s, not[size2]), or[apply(same_shape,x.o),size2]))), filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), iff[circle,and[not[green],apply(size-lt,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[rectangle,and[blue,rectangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:rectangle
'λx.empty(filter(filter(filter(x.s, size2), size2), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[not[or[size1,circle]],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:size1;4:circle;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_size,x.o)), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(yellow,iota(filter(filter(x.s, size1), apply(same_shape,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(size-geq,x.o),filter(x.s, or[not[and[blue,circle]],blue]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;4:blue
'λx.apply(not[and[blue,not[or[size1,size1]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[apply(size-gt,x.o),blue],iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.exists(apply(size-geq,x.o), filter(filter(x.s, apply(same_color,x.o)), triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.exists(nor[and[triangle,and[size2,yellow]],not[apply(same_color,x.o)]], filter(x.s, not[apply(same_shape,x.o)]))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[circle], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[iff[not[rectangle],iff[triangle,blue]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:rectangle;4:iff[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[rectangle,apply(size-geq,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(x.s, iff[apply(same_size,x.o),not[not[size1]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:not[%s];4:size1
'λx.apply(not[apply(same_shape,iota(filter(x.s, nor[yellow,blue])))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, green), apply(size-geq,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, or[yellow,blue]), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue;4:size1
'λx.apply(not[nor[not[rectangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[or[yellow,green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),or[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[iff[triangle,green],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:triangle;4:green;4:triangle;1:%s.o;2:x
'λx.exists(iff[and[rectangle,blue],apply(same_size,x.o)], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[not[size1],or[green,not[blue]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, not[yellow]), size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size2
'λx.exists(green, filter(x.s, or[size1,size3]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size3
'λx.apply(iff[not[apply(same_color,x.o)],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(nand[or[yellow,green],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(not[and[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[size2,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), nor[size2,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:size2;4:green
'λx.contains(iota(filter(x.s, size2)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(iota(filter(x.s, size3)), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[blue,iff[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:iff[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), or[size3,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size3;4:triangle
'λx.exists(iff[size3,apply(size-geq,x.o)], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_shape,x.o)), not[rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, not[nand[or[green,apply(same_color,x.o)],or[size1,size1]]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:size1
'λx.contains(iota(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(apply(size-geq,x.o),filter(x.s, not[rectangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(or[nand[implies[circle,size3],rectangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:circle;4:size3;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(or[rectangle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.empty(filter(x.s, and[and[size1,rectangle],apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, size3), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(not[not[and[not[circle],not[blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[circle,and[yellow,size3]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(apply(same_size,x.o), filter(x.s, not[green]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(or[rectangle,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, not[size1]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.empty(filter(filter(x.s, or[apply(same_shape,x.o),size1]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(implies[or[size1,size2],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size1;4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[and[yellow,triangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[nor[not[or[circle,blue]],yellow],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:blue;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(filter(x.s, apply(same_shape,x.o)), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, not[implies[or[size2,rectangle],apply(same_size,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(implies[or[or[or[size2,triangle],yellow],size1],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:yellow;4:size1;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, or[apply(size-lt,x.o),size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1
'λx.apply(or[yellow,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[blue,yellow],iota(filter(x.s, or[and[green,yellow],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(filter(x.s, size1), and[not[triangle],implies[apply(size-leq,x.o),triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:not[%s];4:triangle;4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, rectangle), green), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:size2
'λx.empty(filter(filter(filter(x.s, rectangle), green), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:size3
'λx.exists(nor[blue,or[or[blue,apply(same_size,x.o)],blue]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(size-lt,x.o)), green), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:green
'λx.contains(iota(filter(x.s, green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:%s.s;2:x
'λx.apply(implies[size1,yellow],iota(filter(filter(x.s, apply(same_shape,x.o)), green)))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(iff[and[green,rectangle],and[or[triangle,rectangle],yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[or[circle,blue],and[green,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_size,iota(filter(x.s, blue))),filter(filter(x.s, green), yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(or[not[not[blue]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[or[and[size3,yellow],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), iff[blue,size2]), not[green])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:size2;4:not[%s];4:green
'λx.apply(implies[yellow,and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, not[green]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(iff[iff[and[yellow,yellow],circle],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:circle;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[size1,apply(size-geq,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[triangle,rectangle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, or[apply(size-lt,iota(filter(x.s, blue))),green]), and[nor[rectangle,yellow],circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:yellow;4:circle
'λx.empty(filter(filter(x.s, not[circle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:green
'λx.empty(filter(x.s, and[apply(same_shape,x.o),yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.contains(iota(filter(x.s, not[and[apply(same_size,x.o),triangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), apply(same_shape,x.o)), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, blue), size3), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:circle
'λx.empty(filter(filter(filter(x.s, blue), size1), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:circle
'λx.apply(not[triangle],iota(filter(x.s, iff[size2,circle])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:circle
'λx.forall(and[yellow,apply(same_size,x.o)],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[yellow,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(apply(same_color,iota(filter(x.s, blue))),filter(filter(x.s, yellow), apply(same_size,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[apply(same_size,x.o),or[apply(same_color,x.o),size1]],filter(x.s, and[apply(same_shape,x.o),not[and[not[green],blue]]]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:blue
'λx.apply(or[or[blue,blue],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.exists(or[or[and[not[apply(same_size,x.o)],apply(same_shape,x.o)],green],green], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[nand[circle,blue],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(iff[yellow,and[apply(same_shape,x.o),green]],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.apply(or[size1,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[and[not[circle],blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(nor[triangle,size2],iota(filter(filter(x.s, apply(same_color,x.o)), rectangle)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.exists(apply(same_shape,x.o), filter(x.s, or[circle,size3]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size3
'λx.forall(not[green],x.s)'	0:forall(%s,%s);4:not[%s];4:green;3:%s.s;2:x
'λx.apply(and[blue,and[iff[triangle,size3],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[and[not[triangle],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(x.s, or[circle,apply(same_color,iota(x.s))]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(filter(x.s, nand[triangle,not[rectangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, circle), or[green,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:green;4:size2
'λx.apply(nor[implies[apply(same_size,x.o),blue],triangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[and[yellow,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(not[and[yellow,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, triangle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(or[or[rectangle,not[circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(size3,filter(filter(filter(x.s, or[size1,and[nor[circle,apply(same_shape,iota(filter(x.s, and[green,triangle])))],green]]), triangle), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle;4:green;4:triangle;4:yellow
'λx.apply(and[circle,apply(same_shape,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, yellow), or[size1,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:size1;4:size2
'λx.exists(and[and[or[and[nor[and[size1,size2],apply(same_size,x.o)],blue],yellow],apply(same_shape,x.o)],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.empty(filter(x.s, iff[apply(same_size,x.o),not[and[blue,blue]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:blue;4:blue
'λx.apply(not[nor[or[blue,rectangle],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), or[size2,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[and[triangle,yellow],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(not[blue], filter(filter(x.s, apply(same_color,x.o)), nor[nor[blue,apply(same_shape,x.o)],circle]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, and[triangle,size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[rectangle,and[apply(same_shape,x.o),iff[size2,iff[blue,triangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size2;4:iff[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[size2,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, and[size3,or[green,apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[nor[triangle,blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[size3,yellow],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[green,green],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[not[size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, yellow), circle), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), implies[yellow,size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:yellow;4:size3
'λx.forall(size2,filter(filter(x.s, apply(same_size,x.o)), size1))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.forall(size2,filter(filter(x.s, apply(same_size,x.o)), size3))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(size1,filter(filter(x.s, apply(same_size,x.o)), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(size3,filter(filter(x.s, apply(same_size,x.o)), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.forall(size3,filter(filter(x.s, apply(same_size,x.o)), size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(or[and[size3,size3],apply(same_color,x.o)],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(apply(same_shape,x.o), filter(x.s, or[blue,green]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green
'λx.exists(or[not[apply(same_size,x.o)],size1], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[not[apply(same_size,x.o)],size2], filter(x.s, green))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[and[size3,green],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, triangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(implies[circle,rectangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, implies[or[triangle,circle],apply(size-geq,x.o)]), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[size1,and[not[triangle],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(and[blue,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, apply(same_color,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[apply(size-gt,iota(filter(x.s, triangle)))]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:rectangle
'λx.apply(nand[apply(same_color,x.o),or[size3,not[yellow]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size3;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[yellow], filter(filter(x.s, blue), iff[size2,apply(same_color,x.o)]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(not[rectangle], filter(filter(x.s, apply(same_size,x.o)), not[and[apply(same_color,x.o),not[size1]]]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(or[and[apply(same_shape,x.o),size2],blue],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(iff[blue,not[implies[or[blue,rectangle],and[rectangle,blue]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(iff[apply(same_color,iota(filter(x.s, blue))),size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[not[nor[blue,size2]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:nor[%s,%s];4:blue;4:size2;4:blue;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, triangle), green))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(yellow,iota(filter(x.s, and[size3,yellow])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.forall(implies[apply(same_color,x.o),or[yellow,green]],filter(filter(x.s, apply(same_shape,x.o)), not[circle]))'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(not[iff[and[size1,green],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(same_color,x.o)), rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(size2,iota(filter(filter(x.s, apply(same_color,x.o)), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[or[size2,yellow],size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, not[and[blue,not[size1]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:size1
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(apply(size-geq,iota(filter(filter(x.s, blue), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;1:%s.o;2:x
'λx.apply(implies[yellow,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[not[not[circle]],yellow]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:yellow;4:size3;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(or[not[yellow],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[apply(same_shape,x.o),and[yellow,green]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:green
'λx.apply(not[and[not[green],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, rectangle), blue), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:rectangle
'λx.contains(x.o, filter(x.s, and[implies[triangle,blue],apply(same_size,x.o)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[and[not[size1],not[circle]],nand[green,and[green,size3]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:circle;4:nand[%s,%s];4:green;4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, and[apply(same_shape,x.o),blue])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(size3,iota(filter(filter(filter(x.s, green), not[triangle]), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle;4:size3
'λx.apply(nor[blue,or[and[size2,green],triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[green,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[apply(same_color,x.o),apply(size-geq,iota(filter(filter(x.s, circle), size3)))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.forall(or[circle,not[apply(same_shape,x.o)]],filter(x.s, rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, not[yellow]), size3), apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[circle,or[green,nand[not[yellow],circle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:green;4:nand[%s,%s];4:not[%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, iff[and[triangle,green],green]), or[triangle,circle])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:triangle;4:green;4:green;4:or[%s,%s];4:triangle;4:circle
'λx.forall(blue,filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(not[and[size2,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.contains(iota(filter(x.s, circle)), filter(x.s, size2))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size2), and[green,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:and[%s,%s];4:green;4:triangle
'λx.apply(not[not[not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[size2,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.contains(x.o, filter(x.s, or[and[apply(size-gt,iota(filter(x.s, green))),yellow],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow;4:blue
'λx.exists(iff[not[size2],triangle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:not[%s];4:size2;4:triangle;3:%s.s;2:x
'λx.apply(and[not[and[blue,blue]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[and[blue,size2],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(or[and[rectangle,apply(same_shape,x.o)],blue], filter(x.s, size1))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nand[rectangle,implies[size1,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:implies[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[yellow,size1]), apply(same_shape,x.o)), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.empty(filter(filter(x.s, green), or[rectangle,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:rectangle;4:triangle
'λx.exists(apply(same_size,x.o), filter(x.s, implies[blue,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:circle
'λx.apply(not[triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size1,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[and[or[or[circle,yellow],not[rectangle]],circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:not[%s];4:rectangle;4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[not[apply(same_shape,x.o)],green]), apply(size-geq,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green
'λx.apply(or[or[blue,not[size3]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:size3;4:yellow;1:%s.o;2:x
'λx.exists(and[or[green,blue],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(not[circle],filter(filter(x.s, not[blue]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[or[green,size1],yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:green;4:size1;4:yellow
'λx.apply(circle,iota(filter(x.s, and[apply(same_color,x.o),circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, rectangle), apply(same_color,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(rectangle,iota(filter(x.s, and[apply(same_shape,x.o),size3])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(nand[nand[blue,rectangle],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:blue;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[not[apply(same_color,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size1,and[size1,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), iff[size3,implies[triangle,blue]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size3;4:implies[%s,%s];4:triangle;4:blue
'λx.apply(nand[not[rectangle],and[not[blue],or[not[size3],green]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:not[%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(nor[size3,and[green,circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.exists(and[circle,apply(same_size,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[blue,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(x.s))'	0:apply(%s,%s);4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(size2,iota(x.s))'	0:apply(%s,%s);4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(x.s))'	0:apply(%s,%s);4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, blue), apply(same_size,x.o)), apply(same_shape,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[not[apply(same_shape,x.o)],blue]), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size2
'λx.empty(filter(filter(filter(x.s, apply(size-lt,x.o)), circle), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle;4:not[%s];4:rectangle
'λx.apply(and[blue,blue],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(size-lt,x.o)), circle), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle;4:not[%s];4:triangle
'λx.exists(nand[blue,or[triangle,rectangle]], filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(implies[not[size1],and[not[size1],apply(same_size,x.o)]], filter(x.s, not[size1]))'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(implies[iff[circle,blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, or[circle,size1]), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size1;4:green
'λx.apply(not[and[size1,or[green,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,iota(filter(x.s, yellow)))), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.forall(circle,filter(x.s, apply(same_color,iota(filter(filter(x.s, apply(same_color,x.o)), blue)))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(not[and[size1,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[not[and[circle,size3]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue
'λx.exists(green, filter(filter(x.s, triangle), size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.exists(green, filter(filter(x.s, triangle), size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(not[and[circle,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[nor[size1,triangle],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:size1;4:triangle;4:green;1:%s.o;2:x
'λx.apply(green,iota(x.s))'	0:apply(%s,%s);4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(circle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(circle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), or[not[apply(same_size,x.o)],nor[apply(same_color,x.o),and[yellow,size2]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:size2
'λx.apply(iff[triangle,iff[triangle,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[blue]), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:not[%s];4:circle
'λx.apply(not[and[triangle,or[yellow,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[green,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.apply(and[or[not[rectangle],blue],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[or[yellow,green],not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[yellow,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:triangle
'λx.apply(not[iff[and[or[size3,size2],triangle],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[or[and[yellow,triangle],and[nor[triangle,size1],rectangle]],and[green,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:size1;4:rectangle;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, iff[and[not[size1],or[apply(same_color,x.o),apply(same_size,x.o)]],and[size1,circle]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size1;4:circle
'λx.apply(yellow,iota(filter(x.s, green)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(yellow,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(implies[not[blue],not[apply(same_size,x.o)]],filter(x.s, circle))'	0:forall(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(size1, filter(x.s, not[and[circle,blue]]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(implies[not[blue],or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(not[circle], filter(x.s, blue))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[blue,nor[size3,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, not[circle]), apply(same_size,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.contains(iota(filter(x.s, iff[or[apply(same_color,iota(filter(x.s, rectangle))),size1],circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(x.s, and[size1,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.exists(not[or[circle,yellow]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, circle), or[yellow,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:yellow;4:green
'λx.apply(and[blue,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(implies[yellow,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,iota(filter(x.s, blue))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, not[size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), or[circle,triangle]), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:circle;4:triangle;4:green
'λx.exists(circle, filter(x.s, size1))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(circle, filter(x.s, size3))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(circle, filter(x.s, size2))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(blue,filter(filter(filter(filter(x.s, circle), apply(same_color,x.o)), apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(circle, filter(x.s, green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[size1,implies[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, and[and[not[blue],apply(same_shape,x.o)],and[or[circle,circle],and[and[apply(same_color,x.o),apply(same_color,x.o)],implies[triangle,yellow]]]]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:triangle;4:yellow
'λx.contains(x.o, filter(x.s, nand[size3,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:circle
'λx.exists(iff[blue,and[not[size3],apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[circle,and[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, apply(size-lt,x.o)), or[rectangle,implies[blue,size3]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:size3
'λx.apply(nor[and[triangle,size1],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, size1))),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,implies[apply(same_size,iota(filter(filter(x.s, circle), blue))),size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), apply(same_shape,x.o)), or[yellow,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:size2
'λx.exists(size2, filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[and[green,green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:green;4:size2;1:%s.o;2:x
'λx.apply(nand[nor[blue,circle],or[not[size3],rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:or[%s,%s];4:not[%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(nand[or[yellow,not[blue]],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, implies[blue,and[blue,apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[or[yellow,green],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[nor[triangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(and[implies[circle,rectangle],implies[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:rectangle;4:implies[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(implies[or[green,yellow],not[rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:green;4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nor[circle,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:circle
'λx.apply(and[or[size3,circle],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[not[implies[or[circle,size1],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:circle;4:size1;4:blue;1:%s.o;2:x
'λx.exists(iff[size3,rectangle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.exists(not[iff[size3,apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[apply(same_shape,x.o),not[or[blue,circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.empty(filter(filter(x.s, not[triangle]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:blue
'λx.empty(filter(filter(filter(x.s, circle), green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green;4:size1
'λx.apply(blue,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(nand[not[rectangle],apply(same_size,x.o)], filter(x.s, triangle))'	0:exists(%s, %s);4:nand[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[blue,nor[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[or[triangle,size2],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,and[rectangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[circle,implies[blue,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(iff[circle,and[blue,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(not[yellow], filter(filter(x.s, apply(same_shape,x.o)), not[yellow]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(implies[and[size1,yellow],not[size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), size3), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:blue
'λx.apply(circle,iota(filter(x.s, or[and[circle,nand[apply(same_color,x.o),apply(same_size,x.o)]],and[size3,rectangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.forall(size2,filter(x.s, blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size1,filter(x.s, blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size3,filter(x.s, blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), or[green,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:size3
'λx.apply(nand[not[blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[yellow,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(same_size,iota(filter(x.s, blue))))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(filter(x.s, circle), not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue
'λx.apply(implies[blue,apply(size-lt,iota(filter(filter(filter(x.s, size2), triangle), green)))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:green;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, nor[yellow,circle]), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:circle;4:triangle
'λx.forall(size2,filter(x.s, nand[yellow,yellow]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:yellow
'λx.apply(or[triangle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), triangle), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:green
'λx.apply(or[triangle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(implies[green,or[circle,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:or[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.apply(yellow,iota(filter(filter(x.s, and[not[apply(same_color,x.o)],triangle]), triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, triangle), apply(size-gt,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(size-gt,x.o),filter(filter(filter(x.s, size1), yellow), size1))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size1
'λx.empty(filter(filter(filter(x.s, not[or[yellow,apply(same_shape,x.o)]]), rectangle), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:not[%s];4:size1
'λx.apply(blue,iota(filter(x.s, or[triangle,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle
'λx.contains(x.o, filter(x.s, and[blue,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.forall(size1,filter(filter(x.s, implies[circle,apply(same_color,x.o)]), and[or[rectangle,circle],nor[blue,size3]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:nor[%s,%s];4:blue;4:size3
'λx.apply(or[and[rectangle,not[size2]],apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[circle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), rectangle), not[green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:rectangle;4:not[%s];4:green
'λx.apply(blue,iota(filter(filter(x.s, blue), iff[apply(same_shape,x.o),not[blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, circle), nor[triangle,yellow])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:triangle;4:yellow
'λx.apply(implies[circle,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(x.s, nor[apply(size-leq,x.o),size3]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3
'λx.apply(not[and[blue,nor[size1,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(nand[and[not[blue],circle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.forall(and[apply(same_size,x.o),size1],filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[not[blue],or[size2,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, triangle), not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[blue,or[and[blue,blue],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, or[rectangle,circle]), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:size1
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, not[triangle]), size1), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[not[rectangle],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(nor[and[size2,circle],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[blue,apply(same_color,x.o)],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), circle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:yellow
'λx.forall(implies[apply(same_shape,x.o),rectangle],filter(x.s, size1))'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(size1,filter(filter(filter(x.s, apply(size-geq,x.o)), apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[blue,and[and[or[size3,yellow],size1],nor[triangle,size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:size1;4:nor[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nand[not[circle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[blue,apply(same_color,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(nand[or[circle,blue],or[triangle,nand[blue,circle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:triangle;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(not[blue], filter(x.s, size3))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), and[circle,apply(same_shape,x.o)]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.exists(and[apply(same_size,x.o),not[circle]], filter(x.s, not[blue]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.forall(circle,filter(filter(filter(filter(x.s, or[not[yellow],rectangle]), apply(same_shape,x.o)), size3), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:size3
'λx.exists(or[yellow,size1], filter(filter(x.s, or[blue,or[rectangle,and[circle,size2]]]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[apply(same_shape,x.o)],filter(filter(x.s, not[blue]), or[and[circle,size3],not[apply(same_color,x.o)]]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:circle;4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[and[apply(size-gt,iota(filter(filter(x.s, blue), rectangle))),rectangle],apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[circle,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue
'λx.apply(and[or[blue,rectangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(nor[rectangle,and[circle,apply(same_shape,x.o)]],filter(x.s, circle))'	0:forall(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(x.s, size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.empty(filter(filter(x.s, size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(size3,iota(filter(x.s, and[apply(same_size,x.o),apply(same_color,x.o)])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[or[rectangle,not[blue]],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(not[size3],filter(x.s, and[rectangle,blue]))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(or[not[yellow],or[not[size3],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:not[%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(or[triangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(size-leq,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-leq,iota(filter(filter(x.s, size1), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[and[or[circle,size3],size3],nor[triangle,not[yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:size3;4:nor[%s,%s];4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(and[not[size3],nand[not[rectangle],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:nand[%s,%s];4:not[%s];4:rectangle;4:green;1:%s.o;2:x
'λx.exists(nand[yellow,yellow], filter(x.s, or[apply(same_shape,x.o),rectangle]))'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[or[blue,rectangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, or[size3,apply(same_size,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[apply(same_color,x.o),size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.forall(and[blue,blue],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_shape,iota(filter(x.s, not[circle])))), yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.apply(blue,iota(filter(filter(filter(x.s, size2), blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:not[%s];4:circle
'λx.exists(and[implies[circle,blue],or[circle,yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:blue;4:or[%s,%s];4:circle;4:yellow;3:%s.s;2:x
'λx.apply(implies[yellow,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[circle,not[apply(same_size,x.o)]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[green,rectangle],iota(filter(filter(x.s, size3), or[size3,size3])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size3;4:size3
'λx.apply(or[green,rectangle],iota(filter(filter(x.s, size3), or[size3,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size3;4:size1
'λx.apply(or[green,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,size2],iota(filter(filter(x.s, triangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[rectangle,triangle]],iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(implies[not[and[triangle,green]],and[circle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:green;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, blue), size1), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:blue
'λx.apply(nor[circle,apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[or[yellow,green],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:size1;1:%s.o;2:x
'λx.apply(implies[or[yellow,green],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:size3;1:%s.o;2:x
'λx.exists(or[apply(same_shape,x.o),yellow], filter(x.s, nor[apply(same_size,x.o),and[blue,size1]]))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(nand[triangle,or[green,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.forall(not[apply(same_color,x.o)],filter(filter(x.s, or[yellow,or[size3,green]]), size1))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:size3;4:green;4:size1
'λx.empty(filter(filter(x.s, size1), not[yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:yellow
'λx.exists(blue, filter(x.s, not[apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[not[implies[apply(same_shape,x.o),triangle]],yellow]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:yellow
'λx.exists(yellow, filter(x.s, yellow))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[and[and[and[size1,green],size1],green],size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:green;4:size1;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(x.s, blue), apply(same_shape,x.o)), apply(size-lt,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(iff[yellow,apply(same_size,x.o)],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(and[or[or[apply(same_color,x.o),and[yellow,circle]],and[green,and[circle,blue]]],not[apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:green;4:and[%s,%s];4:circle;4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[circle,not[and[and[apply(same_size,x.o),blue],blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[rectangle,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[green,circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(or[iff[and[size3,circle],size3],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size3;4:circle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(and[circle,iff[rectangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, implies[size2,triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:triangle
'λx.forall(blue,filter(filter(filter(filter(x.s, apply(same_color,x.o)), circle), apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(apply(same_size,x.o), filter(filter(x.s, blue), apply(same_color,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),not[not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(not[and[nand[rectangle,iff[not[size2],nor[green,and[size3,size3]]]],implies[size2,apply(size-leq,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:iff[%s,%s];4:not[%s];4:size2;4:nor[%s,%s];4:green;4:and[%s,%s];4:size3;4:size3;4:implies[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[apply(same_shape,x.o)]), not[apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[green]), or[size1,and[yellow,triangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(or[size1,implies[circle,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.forall(apply(same_color,iota(filter(filter(x.s, blue), size1))),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(iff[green,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[not[green],and[rectangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:and[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[not[yellow],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:size1;1:%s.o;2:x
'λx.exists(and[green,size3], filter(x.s, triangle))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[implies[circle,blue],or[yellow,circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:blue;4:or[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(or[size3,or[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, not[yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(and[circle,iff[size3,iff[blue,and[size3,circle]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:size3;4:iff[%s,%s];4:blue;4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.forall(and[size2,blue],filter(filter(filter(x.s, not[apply(size-leq,x.o)]), circle), circle))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:circle
'λx.apply(and[not[green],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size2), apply(same_shape,iota(filter(x.s, blue)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(apply(size-geq,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(size1,filter(filter(filter(x.s, yellow), yellow), apply(same_color,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, yellow), apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[not[not[and[circle,size1]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[size1,not[and[or[size2,blue],and[blue,implies[blue,blue]]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:blue;4:and[%s,%s];4:blue;4:implies[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[or[not[not[blue]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[or[rectangle,rectangle],circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(nand[circle,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, blue), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(iff[triangle,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(not[yellow], x.s)'	0:exists(%s, %s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(not[and[blue,or[green,not[circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, or[size2,rectangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle
'λx.contains(iota(filter(x.s, blue)), filter(x.s, iff[yellow,and[apply(same_size,x.o),triangle]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.forall(not[yellow],filter(filter(x.s, size1), apply(same_color,x.o)))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[nand[size2,or[yellow,rectangle]],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:size2;4:or[%s,%s];4:yellow;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, iff[not[blue],size2]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:blue;4:size2;4:size2
'λx.apply(not[not[blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), iff[size1,or[apply(same_size,x.o),yellow]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.contains(iota(filter(x.s, not[and[nor[and[not[green],size3],and[yellow,rectangle]],circle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:green;4:size3;4:and[%s,%s];4:yellow;4:rectangle;4:circle;3:%s.s;2:x
'λx.forall(circle,filter(x.s, yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[or[circle,or[size2,size1]],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:size2;4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[blue,not[size3]],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, not[yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(nand[blue,not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[circle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(implies[not[and[size2,size1]],and[not[size1],apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, size3), nand[apply(same_shape,x.o),apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, nand[and[not[apply(same_shape,x.o)],not[yellow]],blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;4:blue
'λx.apply(and[nand[not[blue],or[blue,triangle]],apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, circle), size3), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:circle
'λx.contains(x.o, filter(filter(x.s, size2), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[implies[and[size2,apply(same_shape,iota(filter(x.s, size3)))],size2],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), not[rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.apply(implies[not[blue],apply(same_color,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[rectangle,and[blue,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[rectangle,yellow],iota(filter(filter(x.s, not[rectangle]), size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size2
'λx.apply(and[blue,size1],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.contains(iota(x.s), filter(x.s, apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[apply(same_shape,x.o),blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, and[blue,triangle]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, triangle), iff[size1,yellow])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:iff[%s,%s];4:size1;4:yellow
'λx.forall(yellow,filter(x.s, apply(size-gt,iota(filter(filter(x.s, implies[nand[and[size1,blue],size1],triangle]), rectangle)))))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size1;4:blue;4:size1;4:triangle;4:rectangle
'λx.empty(filter(filter(x.s, and[apply(same_size,iota(x.s)),yellow]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:yellow;4:size2
'λx.exists(and[apply(same_shape,x.o),blue], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[and[triangle,green],and[apply(same_color,iota(filter(x.s, circle))),rectangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[green,or[yellow,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, yellow))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(filter(filter(x.s, size2), apply(same_color,x.o)), not[triangle]), size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:triangle;4:size2;4:yellow
'λx.apply(not[size3],x.o)'	0:apply(%s,%s);4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[size1],x.o)'	0:apply(%s,%s);4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[size2],x.o)'	0:apply(%s,%s);4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[circle,apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.contains(iota(x.s), filter(x.s, apply(same_size,iota(x.s))))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.exists(or[implies[apply(size-geq,x.o),size1],yellow], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, and[yellow,size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, nand[blue,apply(same_color,x.o)]), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(nor[green,apply(same_shape,x.o)], filter(x.s, not[circle]))'	0:exists(%s, %s);4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(implies[green,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, and[rectangle,green]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:green
'λx.apply(green,iota(filter(x.s, not[implies[and[green,green],apply(same_size,x.o)]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, and[rectangle,size3]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3
'λx.apply(yellow,x.o)'	0:apply(%s,%s);4:yellow;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, green), apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.contains(x.o, filter(filter(x.s, not[circle]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.apply(or[apply(same_size,x.o),size2],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[blue],iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.exists(rectangle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[not[yellow],blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:blue
'λx.apply(not[green],iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.empty(filter(x.s, and[and[green,not[and[size2,apply(same_color,iota(filter(filter(x.s, green), implies[triangle,yellow])))]]],size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:triangle;4:yellow;4:size1
'λx.exists(nor[size3,or[apply(same_shape,x.o),size1]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(not[or[green,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[size3,and[triangle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.forall(implies[apply(same_size,x.o),not[size2]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,not[not[blue]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:not[%s];4:blue
'λx.apply(or[size2,and[triangle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, size1))),iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(nand[or[size1,size2],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size1;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[or[or[size1,size1],size2],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:size1;4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[blue,or[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[blue,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, and[not[yellow],nand[yellow,circle]]), nand[yellow,yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:nand[%s,%s];4:yellow;4:circle;4:nand[%s,%s];4:yellow;4:yellow
'λx.apply(nor[circle,implies[apply(same_color,x.o),blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), iff[blue,or[size3,circle]]), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:or[%s,%s];4:size3;4:circle;4:not[%s];4:triangle
'λx.exists(not[yellow], filter(x.s, circle))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(implies[triangle,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size1), green), apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[not[blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(size-lt,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, blue), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;3:%s.s;2:x
'λx.exists(size1, filter(filter(filter(x.s, apply(same_shape,x.o)), blue), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size1
'λx.exists(circle, filter(filter(x.s, not[size3]), apply(same_color,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[yellow,nand[circle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,x.o)), triangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:blue
'λx.apply(green,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), green), apply(same_shape,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[triangle,and[triangle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[not[green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(and[not[green],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, circle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(x.s, nand[blue,blue]), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:blue;4:not[%s];4:circle
'λx.exists(and[implies[circle,size1],nor[not[apply(same_color,x.o)],triangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:size1;4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(or[and[green,size3],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(iff[size3,or[green,green]],iota(filter(x.s, apply(size-gt,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:or[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, triangle), triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(or[or[blue,size1],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size1;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[size2,apply(same_color,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[rectangle,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2
'λx.exists(or[green,apply(same_shape,x.o)], filter(x.s, size1))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size2,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(size3,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(size1,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, not[green]), and[rectangle,yellow]), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:rectangle;4:yellow;4:yellow
'λx.apply(or[blue,iff[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(not[iff[not[nand[nor[circle,circle],apply(same_shape,x.o)]],and[rectangle,triangle]]], x.s)'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:not[%s];4:nand[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(nor[size1,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[blue,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(size3,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(nand[size2,circle],iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.empty(filter(x.s, nor[apply(same_color,x.o),circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(not[or[yellow,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),size1],iota(filter(filter(x.s, not[circle]), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(iff[and[blue,rectangle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(implies[not[circle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, not[rectangle]), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size3
'λx.forall(apply(same_size,x.o),filter(x.s, nor[triangle,triangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:triangle
'λx.contains(iota(filter(x.s, size3)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size2)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(x.s, green), apply(same_shape,iota(filter(x.s, blue)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[circle,size2],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(or[not[size2],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), apply(size-leq,x.o)), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle
'λx.exists(or[and[apply(size-lt,x.o),yellow],and[triangle,yellow]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:and[%s,%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[green]), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:circle
'λx.apply(size3,iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(and[size1,apply(same_color,x.o)],filter(x.s, and[iff[and[yellow,green],size3],apply(same_shape,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[blue,apply(same_shape,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[green,or[circle,or[circle,size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(iff[size1,and[green,size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.exists(size1, filter(x.s, apply(size-geq,iota(filter(x.s, blue)))))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[circle,iff[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, apply(size-geq,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),and[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[not[rectangle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(size2,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[blue,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[blue,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[blue,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(blue,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(and[blue,blue],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(implies[not[size1],or[green,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[not[apply(same_color,iota(filter(filter(x.s, triangle), or[blue,blue])))],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:blue;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[and[green,apply(same_size,iota(filter(x.s, size2)))],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;1:%s.o;2:x
'λx.forall(not[yellow],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[blue,size3]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,and[not[blue],and[circle,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(and[not[size1],yellow],filter(x.s, triangle))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nand[or[circle,blue],iff[nor[circle,yellow],blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(iff[apply(same_shape,x.o),iff[triangle,blue]],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:triangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(and[blue,iff[or[and[size1,size1],circle],and[not[size2],iff[apply(same_color,x.o),rectangle]]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:size1;4:circle;4:and[%s,%s];4:not[%s];4:size2;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(or[size3,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(or[green,apply(same_shape,x.o)], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(blue, filter(x.s, nor[apply(same_color,x.o),yellow]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(and[not[apply(same_color,iota(filter(filter(x.s, triangle), or[blue,rectangle])))],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:blue;4:rectangle;4:triangle;1:%s.o;2:x
'λx.empty(filter(x.s, nor[blue,nand[implies[and[blue,green],blue],apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:nand[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:green;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[green,yellow],or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[circle,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(implies[or[not[circle],blue],and[rectangle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:blue;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(not[nor[blue,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(implies[implies[yellow,apply(same_shape,x.o)],iff[not[green],or[circle,green]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:not[%s];4:green;4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(or[blue,and[size1,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[size1,implies[circle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:implies[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[rectangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), not[yellow]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow;4:size3;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(or[blue,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(circle,iota(filter(x.s, and[blue,apply(same_color,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[or[iff[and[triangle,yellow],rectangle],blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:rectangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[or[blue,triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[circle,iff[blue,and[size1,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(nor[not[size1],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[triangle,yellow]), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:yellow;4:triangle
'λx.apply(not[nor[blue,or[rectangle,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(or[and[not[blue],rectangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(not[nor[size3,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[apply(same_shape,iota(filter(filter(x.s, circle), size2))),green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:green;1:%s.o;2:x
'λx.apply(implies[not[circle],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[nor[yellow,rectangle],or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:yellow;4:rectangle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[yellow,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size1
'λx.contains(x.o, filter(filter(x.s, or[rectangle,circle]), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:size3
'λx.apply(or[not[and[circle,circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[not[and[blue,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(implies[and[nand[blue,size1],triangle],size3],iota(filter(filter(x.s, apply(same_shape,x.o)), or[circle,rectangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:size1;4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(nand[and[yellow,yellow],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, and[size2,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size2), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size1
'λx.forall(blue,filter(filter(x.s, and[apply(same_color,x.o),triangle]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, or[blue,green]), apply(size-gt,x.o))))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(nand[not[and[apply(same_size,x.o),size1]],blue], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(nor[not[apply(same_shape,x.o)],yellow], filter(x.s, blue))'	0:exists(%s, %s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(circle, filter(filter(x.s, yellow), not[size3]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:size3
'λx.apply(blue,iota(filter(x.s, and[or[size1,blue],nor[or[nor[blue,apply(size-leq,x.o)],size2],size2]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:nor[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;4:size2
'λx.exists(not[rectangle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.exists(not[or[green,size1]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.apply(or[circle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(filter(x.s, blue))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(nand[size1,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, triangle), or[size1,green]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size1;4:green
'λx.apply(triangle,iota(filter(filter(filter(x.s, apply(same_size,x.o)), triangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.contains(iota(filter(filter(x.s, green), nand[size1,green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(nand[and[triangle,or[yellow,green]],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:green;4:triangle;1:%s.o;2:x
'λx.exists(not[green], x.s)'	0:exists(%s, %s);4:not[%s];4:green;3:%s.s;2:x
'λx.apply(nand[size3,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), blue), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:not[%s];4:size3
'λx.apply(not[or[apply(same_size,iota(filter(filter(x.s, implies[circle,size3]), yellow))),and[size3,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size3;4:yellow;4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, blue), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.exists(blue, filter(x.s, or[apply(same_shape,iota(x.s)),yellow]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow
'λx.apply(or[or[rectangle,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.exists(or[and[blue,not[apply(same_shape,x.o)]],iff[size2,blue]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.contains(iota(filter(x.s, not[green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;3:%s.s;2:x
'λx.exists(not[blue], filter(filter(x.s, apply(same_shape,x.o)), not[circle]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle
'λx.exists(circle, filter(x.s, blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[green,or[green,size1]], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:or[%s,%s];4:green;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[or[green,yellow],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[blue],iff[triangle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:iff[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.contains(x.o, x.s)'	0:contains(%s, %s);1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[implies[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, or[size1,apply(same_size,x.o)]), apply(same_color,x.o))))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size1,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[green,blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:green;4:blue;3:%s.s;2:x
'λx.apply(and[nand[blue,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[green,and[green,apply(same_shape,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[circle,or[green,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[apply(same_size,iota(filter(filter(filter(filter(filter(x.s, nand[size2,apply(same_size,iota(x.s))]), size1), size2), yellow), circle))),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;4:size1;4:size2;4:yellow;4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, size3), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), and[rectangle,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, size2), not[rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:rectangle
'λx.apply(not[implies[nor[triangle,green],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:nor[%s,%s];4:triangle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(nand[yellow,iff[size2,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[circle,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size1
'λx.apply(and[size2,and[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.exists(and[apply(same_size,x.o),circle], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(triangle,iota(filter(x.s, and[triangle,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.apply(or[and[size1,size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size1;4:circle;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(filter(x.s, circle), circle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.exists(and[blue,apply(same_shape,x.o)], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(or[triangle,size2], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[yellow,yellow],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[circle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[not[circle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.empty(filter(filter(x.s, circle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.forall(and[not[apply(same_shape,x.o)],not[size3]],filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), apply(same_size,x.o)), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue
'λx.apply(nor[size1,and[size2,not[circle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(implies[or[not[yellow],size3],rectangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:size3;4:rectangle;3:%s.s;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, apply(same_shape,x.o)), not[yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.forall(or[rectangle,not[and[and[apply(same_shape,x.o),circle],circle]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;3:%s.s;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, size3), nand[size3,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[yellow,blue]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.apply(implies[implies[blue,yellow],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:blue;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[size1,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,or[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(apply(same_color,iota(filter(x.s, apply(size-lt,x.o)))),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(apply(same_size,x.o),filter(filter(x.s, not[circle]), not[apply(same_color,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[and[not[and[blue,green]],apply(same_color,x.o)],apply(same_shape,x.o)],iota(filter(x.s, or[blue,blue])))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue
'λx.empty(filter(filter(filter(x.s, size1), size1), not[yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:not[%s];4:yellow
'λx.exists(or[apply(same_color,x.o),and[yellow,yellow]], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[yellow,not[iff[triangle,size3]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:not[%s];4:iff[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, implies[yellow,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(not[and[not[rectangle],and[size3,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(implies[blue,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(implies[blue,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.exists(and[or[and[yellow,circle],apply(same_shape,x.o)],not[yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(circle, filter(x.s, and[blue,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_color,x.o)],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[and[apply(same_color,x.o),not[size1]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[or[size3,green]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[yellow,nand[circle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, not[size3]), triangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(iff[green,size3], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.exists(yellow, filter(x.s, or[triangle,size2]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2
'λx.apply(or[blue,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[blue,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[blue,not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(not[triangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[implies[circle,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[size3,not[apply(same_color,iota(filter(filter(x.s, triangle), green)))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;1:%s.o;2:x
'λx.apply(and[size3,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, apply(size-leq,x.o)), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.empty(filter(filter(filter(x.s, and[apply(same_color,x.o),apply(same_shape,x.o)]), circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:blue
'λx.apply(and[green,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, or[yellow,blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.exists(not[yellow], filter(x.s, and[apply(same_shape,x.o),apply(same_shape,x.o)]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[apply(same_color,x.o),not[blue]]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:circle
'λx.apply(and[not[size2],yellow],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(x.s, and[apply(size-gt,x.o),and[apply(same_shape,x.o),apply(size-geq,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(not[or[or[not[apply(same_shape,iota(filter(x.s, blue)))],triangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[not[not[circle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[implies[and[apply(same_shape,iota(filter(x.s, size3))),iff[circle,circle]],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:circle;4:circle;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[apply(same_shape,iota(filter(x.s, size1))),size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(implies[rectangle,and[not[size3],rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, nor[apply(same_size,x.o),yellow]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, or[apply(same_color,x.o),blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(x.s, and[apply(same_shape,x.o),implies[blue,blue]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:blue;4:blue
'λx.contains(iota(filter(filter(filter(x.s, size1), green), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:green;3:%s.s;2:x
'λx.exists(blue, filter(x.s, not[circle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(and[blue,or[size1,not[triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:not[%s];4:triangle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, not[yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.exists(not[circle], filter(x.s, and[apply(same_color,x.o),green]))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(not[or[triangle,or[not[triangle],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[size1,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[size2,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),implies[triangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[size3,and[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(nor[yellow,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, triangle), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, blue), triangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.forall(blue,filter(x.s, circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(circle,iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[not[blue],or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(not[nor[blue,or[green,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(implies[triangle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(iff[size3,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), not[blue]), or[yellow,green]), apply(same_color,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;4:or[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nor[and[size1,circle],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:circle;4:triangle;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, apply(size-leq,x.o)), blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.forall(size2,filter(x.s, and[apply(size-geq,x.o),green]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green
'λx.apply(apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), not[size2]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, not[size1]), or[apply(same_size,x.o),green]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:triangle
'λx.apply(and[not[size2],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.forall(not[size1],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(filter(x.s, not[size2]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.forall(not[size2],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(filter(x.s, not[size1]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue
'λx.apply(or[blue,size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[blue,size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[rectangle,or[triangle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(and[yellow,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[yellow,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[and[rectangle,green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:size2;1:%s.o;2:x
'λx.forall(nand[and[size1,apply(same_size,x.o)],yellow],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, blue), apply(size-gt,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[not[not[size1]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), not[blue]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, or[circle,triangle]), and[size2,and[not[blue],circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:triangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:blue;4:circle
'λx.exists(nor[blue,blue], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[not[apply(same_size,x.o)]]), triangle), or[blue,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:or[%s,%s];4:blue;4:size2
'λx.apply(and[apply(size-geq,x.o),apply(same_shape,iota(filter(filter(filter(x.s, blue), blue), apply(same_shape,x.o))))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[blue,and[apply(size-leq,x.o),apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[or[triangle,size1],or[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, blue), and[rectangle,apply(size-leq,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[circle,blue],iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[or[yellow,and[size2,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(implies[nor[circle,blue],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.empty(filter(filter(x.s, size2), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, not[or[triangle,rectangle]]), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), and[not[blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:not[%s];4:blue;4:circle
'λx.apply(not[and[not[size1],or[triangle,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[size1,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[or[rectangle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[not[or[blue,size1]],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[not[rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[size1,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, implies[apply(same_size,x.o),and[circle,size1]]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, and[yellow,and[not[circle],apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[or[size3,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size1), triangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.forall(size1,filter(filter(x.s, apply(same_size,x.o)), and[not[green],triangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:green;4:triangle
'λx.empty(filter(filter(filter(x.s, size3), circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:blue
'λx.apply(and[size3,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(or[nor[blue,circle],and[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[size2,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, size3), nor[apply(same_size,x.o),apply(same_shape,x.o)]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[size1,and[size2,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(filter(x.s, green)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, size1), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(triangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[and[apply(size-leq,iota(filter(x.s, apply(same_shape,x.o)))),size3],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:size1;1:%s.o;2:x
'λx.apply(nand[blue,not[and[size1,size1]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[size2,and[apply(size-geq,iota(filter(x.s, size3))),or[size2,green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[not[green],size2])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:size2
'λx.exists(not[size1], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, size1), not[rectangle]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[not[implies[or[apply(same_color,x.o),green],blue]],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:blue;4:size1;1:%s.o;2:x
'λx.exists(blue, filter(x.s, or[apply(same_shape,iota(x.s)),rectangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(x.s, circle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(not[not[or[or[blue,or[triangle,rectangle]],triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[nand[blue,apply(same_color,x.o)],nand[circle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(apply(size-geq,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(filter(x.s, size3), size3), apply(same_shape,x.o)), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle
'λx.forall(apply(same_size,x.o),filter(filter(x.s, apply(size-lt,iota(filter(x.s, apply(same_shape,x.o))))), and[size1,yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.apply(iff[blue,rectangle],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[nand[blue,blue],not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(or[circle,apply(same_color,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o)), implies[blue,circle]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:blue;4:circle;4:triangle
'λx.apply(nand[size2,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[green,size2],iota(filter(x.s, implies[blue,size3])))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size3
'λx.apply(implies[green,size2],iota(filter(x.s, implies[blue,size1])))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:size1
'λx.forall(and[size3,and[blue,size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(and[blue,circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[nand[circle,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[apply(size-lt,iota(filter(filter(x.s, triangle), blue))),size2]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:size2;4:circle
'λx.forall(blue,filter(x.s, and[circle,apply(size-geq,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(and[blue,not[circle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.contains(x.o, filter(x.s, green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[not[size3],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(implies[not[size1],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[blue,or[size2,rectangle]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:rectangle
'λx.apply(circle,iota(filter(x.s, or[rectangle,blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:blue
'λx.forall(size1,filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[size3,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.exists(iff[yellow,apply(size-leq,x.o)], filter(x.s, blue))'	0:exists(%s, %s);4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[size1,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.exists(iff[apply(same_size,x.o),and[circle,blue]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[not[size2],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(iff[nor[size2,not[and[size1,blue]]],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:size2;4:not[%s];4:and[%s,%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[or[size3,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[and[circle,yellow],not[nor[size2,apply(same_size,x.o)]]]), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:not[%s];4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, apply(same_shape,x.o)), not[and[and[yellow,apply(size-gt,x.o)],apply(same_color,x.o)]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_shape,x.o), filter(x.s, apply(same_shape,iota(filter(x.s, and[not[size1],apply(size-leq,x.o)])))))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(implies[not[size3],and[size2,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[not[not[blue]],blue],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[not[size3],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(filter(x.s, green), or[nand[green,size2],size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:nand[%s,%s];4:green;4:size2;4:size1;1:%s.o;2:x
'λx.forall(circle,filter(x.s, apply(same_shape,iota(filter(filter(x.s, apply(same_color,x.o)), blue)))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(and[circle,or[yellow,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[not[or[and[triangle,size3],blue]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, nor[rectangle,size2]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:size2;4:blue
'λx.apply(triangle,iota(filter(filter(filter(x.s, green), apply(size-gt,x.o)), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1
'λx.forall(yellow,filter(x.s, rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[iff[apply(same_shape,x.o),size3],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, and[green,green]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(size-geq,x.o), filter(x.s, triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(implies[and[yellow,circle],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size3;1:%s.o;2:x
'λx.apply(implies[and[yellow,circle],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size1;1:%s.o;2:x
'λx.exists(or[blue,circle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[apply(same_size,x.o)]), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.exists(and[blue,iff[or[and[triangle,size1],circle],and[not[size2],iff[apply(same_color,x.o),rectangle]]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:circle;4:and[%s,%s];4:not[%s];4:size2;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(or[size3,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(nor[green,or[or[triangle,rectangle],yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:or[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[size1,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.exists(not[rectangle], filter(x.s, or[rectangle,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(and[nand[green,blue],apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[and[rectangle,green]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, not[apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, or[rectangle,circle]), green), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:green;4:size2
'λx.contains(iota(filter(x.s, not[yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(nand[and[triangle,apply(same_shape,x.o)],not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size3;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size3), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;3:%s.s;2:x
'λx.apply(not[and[iff[blue,rectangle],not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:rectangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,and[iff[size1,yellow],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:iff[%s,%s];4:size1;4:yellow;4:blue;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, or[blue,size1]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size1
'λx.contains(iota(filter(x.s, triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:%s.s;2:x
'λx.apply(not[or[size1,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(not[or[size1,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), not[circle]), and[apply(same_color,x.o),blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(apply(size-geq,x.o), filter(x.s, rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, triangle), apply(size-gt,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[triangle,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[and[apply(same_size,x.o),blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[size3,apply(same_color,x.o)],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(filter(x.s, green), triangle)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[blue,implies[size1,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[nor[nor[size1,size2],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:nor[%s,%s];4:size1;4:size2;4:blue;1:%s.o;2:x
'λx.apply(or[blue,nand[size2,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(x.s, not[size2]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.empty(filter(filter(x.s, not[size3]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle
'λx.apply(implies[or[apply(size-lt,x.o),iff[circle,blue]],apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:iff[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, size3), or[not[not[circle]],yellow]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:yellow;4:size3;3:%s.s;2:x
'λx.apply(iff[rectangle,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[or[rectangle,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, not[size1]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[apply(same_color,iota(filter(x.s, and[blue,triangle]))),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(apply(size-lt,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[apply(same_color,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[circle,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green
'λx.exists(blue, filter(x.s, and[rectangle,blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(yellow,iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.exists(green, filter(x.s, or[rectangle,size1]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size1
'λx.contains(x.o, filter(x.s, or[and[circle,circle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue
'λx.apply(and[yellow,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[rectangle,blue],iota(filter(x.s, and[and[blue,apply(same_color,x.o)],rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(and[blue,apply(same_shape,x.o)],iota(filter(filter(x.s, apply(same_color,x.o)), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.empty(filter(x.s, and[blue,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(not[and[not[blue],not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[rectangle,size1]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(not[rectangle],iota(filter(x.s, and[apply(same_color,x.o),nor[and[triangle,green],nor[apply(same_shape,x.o),circle]]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), iff[size2,triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:size2;4:triangle
'λx.exists(and[blue,apply(same_shape,x.o)], filter(filter(x.s, apply(same_color,x.o)), circle))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.exists(blue, filter(filter(x.s, apply(same_size,x.o)), and[size3,apply(same_color,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, circle), blue)))), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:yellow
'λx.apply(circle,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.contains(x.o, filter(x.s, not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(blue,iota(filter(x.s, and[not[yellow],triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:yellow;4:triangle
'λx.apply(rectangle,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.forall(yellow,filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.contains(iota(filter(filter(filter(x.s, iff[circle,apply(same_size,x.o)]), circle), implies[apply(same_shape,x.o),apply(same_color,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, not[blue]), or[circle,apply(same_color,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(iff[circle,size3],filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(size-lt,x.o)), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow
'λx.apply(or[not[rectangle],size1],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[nor[blue,apply(same_shape,x.o)],not[size1]],filter(x.s, yellow))'	0:forall(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, not[blue]), circle), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[apply(same_shape,x.o),size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(not[implies[iff[nor[blue,circle],yellow],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(and[and[size1,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[or[triangle,blue],not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[or[blue,size3],circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[not[circle],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, blue), rectangle), size3), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size3;4:size3
'λx.apply(not[apply(same_color,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(nand[blue,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, or[yellow,size1]), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size1;4:size1
'λx.apply(or[circle,and[size1,and[size2,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:size1;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, nand[triangle,not[circle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:not[%s];4:circle;3:%s.s;2:x
'λx.exists(circle, filter(filter(x.s, and[apply(same_shape,x.o),and[circle,not[blue]]]), apply(same_size,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:not[%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, implies[rectangle,and[yellow,size2]])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:size2
'λx.apply(or[circle,implies[implies[size3,rectangle],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:implies[%s,%s];4:size3;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[or[rectangle,size1],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[and[blue,circle],apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[circle,green], filter(filter(x.s, apply(same_color,x.o)), size2))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.forall(size1,filter(x.s, and[green,triangle]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(implies[or[blue,circle],and[circle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:circle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, nand[size1,yellow]), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[circle,nand[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), and[not[blue],iff[or[rectangle,triangle],or[apply(same_shape,x.o),circle]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:blue;4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(or[implies[size3,blue],not[or[apply(same_shape,x.o),size1]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.forall(or[implies[size3,blue],not[or[apply(same_shape,x.o),size2]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.exists(rectangle, filter(filter(x.s, rectangle), apply(same_color,x.o)))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[implies[rectangle,or[blue,triangle]],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:triangle;4:blue;1:%s.o;2:x
'λx.exists(or[and[triangle,size3],and[and[yellow,apply(same_color,x.o)],size1]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(and[not[blue],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[triangle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, or[apply(same_shape,x.o),size3]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.forall(rectangle,filter(filter(x.s, and[size1,apply(same_shape,x.o)]), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(or[not[circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[not[circle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[and[nor[rectangle,rectangle],and[circle,apply(same_size,x.o)]],implies[triangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:rectangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(or[or[green,yellow],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(x.s, and[circle,apply(size-leq,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, iff[size2,circle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:circle
'λx.apply(or[blue,implies[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(size3,filter(x.s, nor[apply(size-leq,x.o),apply(same_size,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[blue,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[blue,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(or[green,apply(same_color,x.o)],filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(iff[triangle,iff[triangle,nand[size2,nand[blue,blue]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:iff[%s,%s];4:triangle;4:nand[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[and[size1,circle],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[nor[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[or[blue,size1],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[or[triangle,size1],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[or[yellow,not[blue]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[not[apply(same_shape,x.o)],size1]), apply(same_color,iota(filter(filter(x.s, size3), or[circle,or[size1,triangle]]))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:circle;4:or[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.apply(not[and[or[triangle,rectangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(not[iff[apply(same_shape,x.o),circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size2), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size2,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(size1,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[and[triangle,and[triangle,blue]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[and[blue,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, not[blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[nand[circle,blue],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[and[and[or[not[size1],yellow],circle],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:yellow;4:circle;4:circle;1:%s.o;2:x
'λx.apply(nor[and[blue,size2],and[size3,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:size2;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, yellow), apply(same_size,x.o)), size2)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(not[and[not[not[not[blue]]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[blue,or[size1,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),or[circle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[green,or[not[blue],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(filter(x.s, apply(same_color,x.o)), not[yellow]), size3), apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:yellow;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[triangle,not[and[size3,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[or[and[size2,size3],not[apply(same_color,x.o)]],blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[not[yellow],not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), blue), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:size3
'λx.contains(x.o, filter(x.s, or[green,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size1
'λx.apply(nand[not[circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[or[not[rectangle],size1],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:rectangle;4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[and[or[green,yellow],not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(not[green],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(or[or[green,yellow],and[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[apply(same_color,x.o),or[rectangle,circle]]), yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:circle;4:yellow;4:size2
'λx.exists(iff[apply(same_color,x.o),yellow], filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, not[rectangle]), size1), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:size1;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, not[nand[nand[circle,yellow],apply(same_shape,x.o)]]), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nand[%s,%s];4:nand[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[blue,blue],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(or[circle,or[or[circle,apply(same_size,x.o)],and[or[or[circle,apply(same_color,x.o)],apply(same_shape,x.o)],nand[size3,size1]]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:size1;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, blue), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, and[yellow,iff[size1,size2]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:size1;4:size2
'λx.exists(rectangle, filter(x.s, rectangle))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(nor[and[blue,size2],apply(same_shape,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(x.s, and[or[size2,yellow],apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,implies[not[circle],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[or[size3,green],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size3;4:green;4:triangle;1:%s.o;2:x
'λx.apply(not[and[apply(same_shape,x.o),and[circle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(nor[yellow,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, nor[triangle,rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:triangle;4:rectangle
'λx.apply(or[yellow,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(not[apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[blue,or[size3,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[or[circle,yellow],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:size1;1:%s.o;2:x
'λx.exists(nor[circle,nor[circle,apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(or[and[blue,apply(same_shape,x.o)],and[green,size3]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[and[rectangle,rectangle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[size2]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.apply(not[and[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[and[size3,triangle]],iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(nor[yellow,and[implies[circle,size2],green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:implies[%s,%s];4:circle;4:size2;4:green;1:%s.o;2:x
'λx.forall(nor[blue,and[circle,apply(same_shape,x.o)]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:nor[%s,%s];4:blue;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(not[blue],filter(x.s, triangle))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[and[size3,blue],blue],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[circle,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:circle;3:%s.s;2:x
'λx.forall(green,filter(x.s, not[rectangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(nor[not[yellow],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(filter(x.s, blue), size1))),filter(x.s, and[nand[triangle,yellow],green]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:triangle;4:yellow;4:green
'λx.apply(nor[or[circle,circle],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, iff[yellow,size3]), apply(same_shape,x.o)), not[green]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green
'λx.forall(or[circle,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, yellow), size3), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.contains(iota(filter(x.s, yellow)), filter(x.s, apply(size-lt,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[size1]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue
'λx.contains(x.o, filter(filter(x.s, size2), or[size2,apply(same_color,iota(filter(x.s, size3)))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(blue,iota(filter(filter(x.s, size2), or[size3,implies[size2,and[blue,rectangle]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size3;4:implies[%s,%s];4:size2;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(and[not[circle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(nor[and[blue,green],apply(same_shape,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[not[circle],not[blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue
'λx.contains(iota(filter(filter(x.s, triangle), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;3:%s.s;2:x
'λx.exists(nand[apply(same_color,x.o),yellow], filter(x.s, or[apply(same_shape,x.o),rectangle]))'	0:exists(%s, %s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(apply(size-leq,iota(filter(x.s, or[yellow,size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size2), size2), apply(same_shape,iota(filter(x.s, blue)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[or[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, nand[and[not[apply(same_shape,x.o)],not[green]],blue]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green;4:blue
'λx.apply(and[blue,iff[size3,size3]],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[blue,and[circle,circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),size3],iota(filter(x.s, and[blue,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(or[or[triangle,size1],and[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, or[not[apply(same_size,x.o)],and[size2,blue]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:blue
'λx.exists(or[rectangle,and[size3,yellow]], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, implies[rectangle,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:blue
'λx.apply(apply(same_size,iota(filter(x.s, not[rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, triangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(not[apply(same_shape,x.o)],filter(x.s, green))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(size1,filter(x.s, apply(size-gt,iota(filter(filter(x.s, implies[nand[and[size1,blue],size1],triangle]), rectangle)))))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size1;4:blue;4:size1;4:triangle;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(circle,filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(and[blue,blue],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[size1,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[or[circle,and[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[not[rectangle],blue],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(and[or[apply(same_shape,x.o),circle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,nor[and[size2,yellow],and[nand[green,not[rectangle]],and[triangle,rectangle]]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:nand[%s,%s];4:green;4:not[%s];4:rectangle;4:and[%s,%s];4:triangle;4:rectangle
'λx.apply(blue,iota(filter(filter(x.s, nor[circle,size1]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:size1;4:blue
'λx.empty(filter(filter(filter(x.s, size1), apply(same_size,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.forall(not[and[rectangle,size3]],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[not[size2],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size2;4:triangle;3:%s.s;2:x
'λx.exists(or[size2,apply(size-lt,x.o)], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(same_size,x.o)), circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(nand[or[and[green,size2],size1],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:size2;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, or[size1,apply(same_shape,x.o)]), not[green])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green
'λx.forall(apply(same_size,x.o),filter(x.s, blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(size-leq,iota(filter(x.s, not[rectangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[yellow,and[size1,or[size1,size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[yellow,and[size1,or[size1,size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[iff[triangle,size3],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:size3;1:%s.o;2:x
'λx.exists(not[blue], filter(filter(x.s, apply(same_color,x.o)), not[circle]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[size3]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:blue
'λx.apply(iff[apply(same_color,x.o),size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, green), green), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:circle
'λx.exists(implies[circle,blue], filter(x.s, or[circle,yellow]))'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:yellow
'λx.empty(filter(filter(x.s, or[yellow,triangle]), and[size1,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, size3), rectangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.forall(apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),filter(filter(filter(x.s, size3), yellow), blue))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:blue
'λx.apply(or[apply(size-gt,x.o),iff[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[yellow])), filter(x.s, apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[blue,and[size2,size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[and[not[size1],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[apply(same_shape,x.o),apply(same_shape,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[yellow,and[circle,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size2), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;1:%s.o;2:x
'λx.exists(or[circle,apply(same_shape,x.o)], filter(filter(filter(x.s, apply(same_color,x.o)), not[blue]), not[and[circle,circle]]))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:circle
'λx.forall(green,filter(x.s, triangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[and[not[circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, size1), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;1:%s.o;2:x
'λx.forall(or[nand[nor[and[apply(same_color,x.o),not[size2]],not[apply(same_shape,x.o)]],yellow],blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:blue;3:%s.s;2:x
'λx.exists(or[and[rectangle,apply(same_shape,x.o)],blue], filter(filter(x.s, size1), size1))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.exists(circle, filter(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o)), not[blue]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue
'λx.contains(x.o, filter(filter(filter(x.s, yellow), yellow), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:not[%s];4:circle
'λx.apply(apply(same_shape,iota(filter(x.s, and[or[nor[not[or[rectangle,apply(size-leq,x.o)]],and[rectangle,size3]],size2],blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(and[not[iff[size2,blue]],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:size2;4:blue;4:size2;1:%s.o;2:x
'λx.apply(not[and[blue,and[blue,not[size1]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[nor[nand[blue,blue],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[apply(same_size,x.o)]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(size3,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(size1,iota(filter(filter(x.s, yellow), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.exists(blue, filter(x.s, circle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(filter(x.s, or[rectangle,size1]), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size1;4:green
'λx.exists(apply(same_color,x.o), filter(x.s, apply(size-gt,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(size-lt,x.o))), filter(x.s, or[size1,apply(same_shape,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[or[circle,triangle],not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, implies[apply(same_shape,x.o),blue]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, and[yellow,iff[size1,and[yellow,size2]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:size2
'λx.apply(apply(same_color,iota(filter(x.s, and[yellow,apply(size-lt,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, rectangle), and[size1,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:size1;4:blue
'λx.exists(not[blue], filter(x.s, and[yellow,not[circle]]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:circle
'λx.forall(green,filter(filter(x.s, circle), iff[apply(same_shape,x.o),size1]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(filter(x.s, and[green,circle])))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(implies[iff[triangle,or[rectangle,or[green,size1]]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:green;4:size1;4:blue;1:%s.o;2:x
'λx.exists(nor[yellow,yellow], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.forall(implies[apply(same_size,x.o),size3],filter(x.s, size2))'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, blue), size1), apply(same_color,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(apply(size-leq,x.o), filter(x.s, size3))'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, blue), apply(same_color,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, nor[blue,size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:size1
'λx.apply(not[blue],iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(and[apply(same_shape,x.o),nor[or[and[size1,yellow],apply(same_color,x.o)],and[yellow,circle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(and[size3,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(and[size2,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_color,x.o)), size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(size1,iota(filter(x.s, or[triangle,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1
'λx.apply(and[size1,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(implies[not[triangle],not[yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[not[blue],and[apply(same_color,x.o),circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[blue,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(and[not[size1],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[not[green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), or[green,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,or[triangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[circle,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[size1,or[rectangle,not[or[circle,blue]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, and[green,circle])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(not[and[nand[or[size1,circle],blue],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:or[%s,%s];4:size1;4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_size,x.o)), and[rectangle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[rectangle,or[and[size3,blue],size2]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size3;4:blue;4:size2;3:%s.s;2:x
'λx.exists(green, filter(x.s, implies[size3,yellow]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:yellow
'λx.apply(and[apply(same_shape,x.o),or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[rectangle,apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, circle), blue), circle), apply(size-gt,iota(filter(x.s, yellow))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(and[and[size1,not[rectangle]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:not[%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size2), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;3:%s.s;2:x
'λx.apply(and[or[blue,circle],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[not[size1],and[and[nand[triangle,size2],yellow],yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:triangle;4:size2;4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(circle,filter(x.s, or[apply(same_size,x.o),blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.forall(size3,filter(filter(filter(x.s, triangle), green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, and[blue,not[size1]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), apply(size-gt,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle
'λx.exists(not[yellow], filter(x.s, or[and[blue,apply(same_shape,x.o)],apply(same_color,x.o)]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(green, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(rectangle,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(iff[nand[not[size3],green],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:not[%s];4:size3;4:green;4:triangle;1:%s.o;2:x
'λx.exists(not[implies[apply(same_shape,x.o),yellow]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(size1, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size3, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(nor[blue,size2], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, triangle), size1)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, apply(same_shape,x.o)), circle), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:blue
'λx.contains(x.o, filter(x.s, nand[size1,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:green
'λx.contains(x.o, filter(x.s, nand[size3,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size3;4:size3
'λx.apply(implies[or[triangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[blue,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(or[blue,or[circle,and[triangle,size3]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), filter(x.s, iff[green,green]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:green
'λx.exists(circle, filter(x.s, or[triangle,apply(same_size,x.o)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[yellow,apply(same_size,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, not[nor[apply(same_size,x.o),blue]]), apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(filter(x.s, and[apply(size-geq,x.o),or[size2,apply(same_shape,x.o)]]), or[size1,yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size1;4:yellow
'λx.apply(not[nand[not[green],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[not[blue],not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:not[%s];4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[green,circle]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:size1
'λx.empty(filter(filter(x.s, triangle), and[green,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:green;4:size2
'λx.apply(iff[implies[circle,not[apply(same_color,iota(filter(x.s, and[apply(same_color,x.o),circle])))]],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:size2;1:%s.o;2:x
'λx.forall(or[apply(size-gt,x.o),apply(same_size,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[yellow,and[blue,blue]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(size-gt,iota(filter(x.s, and[nor[and[triangle,size2],size1],size2]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:size1;4:size2;1:%s.o;2:x
'λx.apply(and[not[triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(and[green,circle],filter(x.s, size1))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nor[nor[triangle,blue],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), iff[green,apply(same_size,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[not[apply(same_shape,x.o)],green],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size1, filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[and[blue,blue]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:blue;4:blue
'λx.apply(nor[and[circle,size2],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(not[nand[apply(same_shape,x.o),circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(iff[and[size1,size1],and[size1,size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(not[iff[implies[rectangle,blue],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[size2,rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle
'λx.apply(green,iota(filter(x.s, and[not[or[yellow,circle]],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:yellow;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(green, filter(x.s, not[size1]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.exists(green, filter(x.s, not[size3]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.exists(green, filter(x.s, not[size2]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.forall(rectangle,filter(x.s, iff[and[not[rectangle],or[blue,or[rectangle,size3]]],circle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size3;4:circle
'λx.exists(size3, filter(x.s, and[not[rectangle],apply(same_size,x.o)]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[blue,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[yellow,apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(same_shape,x.o)), and[apply(same_size,x.o),size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(circle,filter(filter(filter(x.s, apply(same_color,x.o)), blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[not[triangle],not[triangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(or[and[circle,size1],or[blue,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nand[and[size3,circle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size3;4:circle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, implies[size2,apply(size-gt,x.o)]), rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(implies[yellow,circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(nor[blue,not[apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_size,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size1,apply(same_shape,x.o)]), and[apply(same_size,x.o),and[circle,not[blue]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:not[%s];4:blue
'λx.apply(or[green,or[circle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, or[triangle,size2]), yellow), or[size3,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2;4:yellow;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(not[or[blue,nor[triangle,not[apply(same_color,x.o)]]]],iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(nand[blue,or[size2,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.forall(nor[apply(same_size,x.o),blue],filter(x.s, circle))'	0:forall(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[or[circle,and[triangle,green]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:green;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, triangle), nor[yellow,apply(same_color,x.o)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[size2,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(implies[size3,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(implies[size3,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.exists(or[not[green],blue], filter(filter(x.s, and[blue,apply(size-gt,x.o)]), blue))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:green;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue
'λx.apply(implies[size1,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(implies[size1,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(not[and[nand[rectangle,size3],and[size3,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,not[size3]],iota(filter(filter(x.s, circle), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[triangle,circle],iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(nand[and[blue,blue],not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[and[circle,circle],green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:green;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, blue))),green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;1:%s.o;2:x
'λx.apply(or[size3,or[not[circle],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(and[or[not[yellow],size2],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:size2;4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(or[blue,not[apply(same_size,x.o)]],filter(filter(x.s, apply(same_shape,x.o)), size1))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, blue), triangle), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(implies[apply(size-geq,iota(filter(x.s, green))),size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(not[triangle], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, not[apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,and[size3,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.forall(not[apply(size-lt,x.o)],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[or[and[triangle,green],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(iff[or[circle,blue],green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:circle;4:blue;4:green;1:%s.o;2:x
'λx.apply(not[and[size3,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,nor[circle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, nor[and[apply(same_shape,x.o),rectangle],green]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:green
'λx.exists(size2, filter(x.s, not[green]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(triangle,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.exists(size1, filter(filter(filter(x.s, apply(same_shape,x.o)), size1), or[rectangle,blue]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:or[%s,%s];4:rectangle;4:blue
'λx.forall(triangle,filter(x.s, nor[apply(same_size,x.o),size3]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(and[not[circle],not[not[implies[apply(same_shape,x.o),triangle]]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(or[blue,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(nand[or[green,yellow],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:green;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nor[and[green,rectangle],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[blue,not[rectangle]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(apply(same_shape,x.o), filter(x.s, or[not[apply(same_size,x.o)],and[size2,rectangle]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(not[and[green,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(and[blue,apply(same_size,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[or[rectangle,triangle],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(implies[or[rectangle,triangle],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(not[or[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[and[yellow,apply(same_shape,x.o)],yellow]), yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:yellow;4:size1
'λx.apply(implies[not[apply(size-lt,x.o)],and[blue,size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[yellow,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:blue
'λx.apply(and[blue,or[size1,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(nor[yellow,and[rectangle,size1]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.apply(or[size1,or[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[nor[rectangle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(or[rectangle,size3], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, yellow), apply(size-gt,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), circle), nor[blue,nor[apply(same_shape,x.o),rectangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:nor[%s,%s];4:blue;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[blue,or[rectangle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(and[and[size1,blue],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:size1;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, or[rectangle,apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))]), circle), triangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:triangle
'λx.apply(nand[not[circle],or[yellow,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[size2]), apply(same_shape,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(and[apply(size-geq,iota(filter(x.s, size3))),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, iff[and[green,circle],blue]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:green;4:circle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[rectangle,not[implies[triangle,rectangle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:not[%s];4:implies[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,x.o)'	0:apply(%s,%s);4:triangle;1:%s.o;2:x
'λx.apply(and[circle,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(not[and[not[circle],and[apply(same_size,x.o),size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.exists(blue, filter(x.s, or[triangle,size2]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size2
'λx.apply(circle,iota(filter(x.s, or[size1,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:circle
'λx.apply(or[rectangle,or[blue,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, yellow), yellow), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:triangle
'λx.apply(and[implies[yellow,or[apply(same_size,iota(filter(x.s, circle))),triangle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, not[yellow]), circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:circle
'λx.empty(filter(x.s, and[green,green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.exists(nand[yellow,apply(same_shape,x.o)], filter(x.s, circle))'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[not[blue],or[blue,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(not[and[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[apply(same_shape,iota(filter(x.s, circle)))])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(or[blue,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), nand[size3,green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:nand[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.apply(not[and[triangle,or[size1,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(implies[not[size1],and[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(not[apply(size-lt,x.o)], filter(x.s, size3))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(iff[apply(size-lt,x.o),size1], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(or[rectangle,nor[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[nand[triangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(filter(x.s, not[apply(same_color,x.o)]), blue), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue
'λx.contains(iota(filter(x.s, blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.exists(or[yellow,rectangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:rectangle;3:%s.s;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, and[implies[yellow,yellow],nor[and[circle,size1],apply(same_color,x.o)]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:yellow;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:circle;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[apply(same_shape,x.o),circle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:yellow
'λx.contains(x.o, filter(x.s, implies[or[triangle,rectangle],and[blue,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:and[%s,%s];4:blue;4:blue
'λx.exists(apply(same_color,x.o), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(x.s, and[apply(size-lt,x.o),size2]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2;4:size2
'λx.apply(or[or[blue,size1],or[size2,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size1;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[or[size3,size2],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[green,or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, or[yellow,green]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green;4:circle
'λx.forall(not[and[iff[green,or[blue,apply(same_color,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))]],blue]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:green;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[circle,apply(size-lt,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(iff[size2,or[size2,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[size3,size3]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size3;4:size3
'λx.apply(and[green,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(nand[implies[blue,yellow],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:blue;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(implies[and[blue,rectangle],circle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(filter(x.s, circle), implies[blue,apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[or[apply(same_size,x.o),blue],circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:circle
'λx.apply(not[iff[triangle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.forall(and[blue,apply(size-geq,x.o)],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(implies[circle,triangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:triangle;3:%s.s;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), iff[blue,circle]), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:circle;4:not[%s];4:triangle
'λx.contains(x.o, filter(x.s, or[not[not[or[circle,green]]],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:green;4:size1
'λx.apply(or[size3,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[size1,triangle]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:triangle;4:blue
'λx.apply(or[size1,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(implies[iff[not[not[and[size1,size1]]],green],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:not[%s];4:not[%s];4:and[%s,%s];4:size1;4:size1;4:green;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[nor[apply(same_shape,x.o),and[apply(same_size,x.o),apply(same_size,x.o)]],size1]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:size3
'λx.exists(apply(same_color,x.o), filter(x.s, iff[green,apply(same_size,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_size,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[and[apply(same_color,x.o),yellow],yellow]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:yellow
'λx.apply(and[circle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(not[nor[triangle,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, size1), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3
'λx.apply(circle,iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(circle,iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(apply(same_color,iota(filter(filter(x.s, not[size3]), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:triangle;1:%s.o;2:x
'λx.exists(size3, filter(filter(x.s, not[blue]), triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle
'λx.exists(not[size3], filter(x.s, green))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_color,iota(filter(filter(x.s, blue), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, or[blue,green]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green
'λx.contains(x.o, filter(x.s, not[and[blue,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:circle
'λx.apply(green,iota(filter(filter(x.s, nand[circle,yellow]), or[nor[size2,and[triangle,blue]],blue])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:yellow;4:or[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:blue;4:blue
'λx.contains(x.o, filter(x.s, nor[or[apply(same_size,iota(filter(filter(x.s, and[size1,blue]), blue))),and[size3,size1]],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue;4:blue;4:and[%s,%s];4:size3;4:size1;4:size1
'λx.apply(or[circle,and[or[triangle,blue],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(size3,iota(filter(x.s, iff[nand[not[yellow],and[size3,and[blue,circle]]],size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:circle;4:size1
'λx.contains(x.o, filter(x.s, or[nor[circle,rectangle],green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:circle;4:rectangle;4:green
'λx.apply(nor[and[and[blue,blue],size2],and[size3,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(or[triangle,nor[apply(same_size,x.o),or[not[size1],size3]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:size1;4:size3;3:%s.s;2:x
'λx.forall(blue,filter(x.s, not[yellow]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(circle,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(or[iff[blue,triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[rectangle,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[blue,and[blue,triangle]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.forall(and[apply(size-leq,x.o),or[not[size2],size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:not[%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(or[not[blue],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[rectangle,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nor[and[triangle,size2],apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, apply(same_color,x.o)), and[size3,apply(same_size,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, and[yellow,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[implies[triangle,yellow],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[blue,not[size3]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:size3
'λx.apply(not[and[not[blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[blue,nor[size1,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nor[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[blue,triangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(or[not[implies[triangle,size2]],rectangle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:triangle;4:size2;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[circle,blue],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[nor[yellow,or[green,size1]],and[yellow,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:green;4:size1;4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[nand[circle,circle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(blue,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(or[or[size1,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nand[green,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, rectangle), or[or[implies[apply(same_shape,x.o),size2],blue],circle])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:blue;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, apply(same_size,x.o)), blue), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:blue
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:size1
'λx.apply(implies[green,not[circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[circle,or[blue,or[and[triangle,green],blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(implies[or[green,size2],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:green;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, apply(size-gt,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(not[and[not[size3],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(not[and[triangle,iff[rectangle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(not[or[or[not[apply(same_shape,x.o)],circle],apply(size-lt,x.o)]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(or[triangle,apply(size-lt,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, rectangle), and[yellow,rectangle]), not[triangle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:rectangle;4:not[%s];4:triangle;4:green
'λx.apply(or[blue,and[green,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, or[size3,apply(same_size,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,or[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nand[not[nor[green,yellow]],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:nor[%s,%s];4:green;4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, or[and[size2,size3],not[apply(same_size,x.o)]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[and[blue,green]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[blue,not[triangle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[blue,not[apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[implies[blue,apply(same_color,x.o)]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, yellow), iff[triangle,blue]), apply(same_size,x.o)), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[blue,blue],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,apply(same_size,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[or[green,size1],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), and[green,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:green;4:circle
'λx.exists(triangle, filter(x.s, blue))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[or[size1,rectangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(size3,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size3
'λx.apply(or[blue,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(same_shape,x.o)],iota(filter(x.s, not[apply(same_size,x.o)])))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[nor[not[size2],green]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[triangle,iff[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[nand[circle,blue],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, and[size1,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:yellow
'λx.apply(size3,iota(filter(x.s, and[size3,yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(or[green,not[or[blue,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(iff[circle,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[blue,and[implies[size1,green],blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:implies[%s,%s];4:size1;4:green;4:blue;1:%s.o;2:x
'λx.apply(or[size2,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[triangle,apply(same_size,iota(filter(filter(filter(x.s, rectangle), size3), yellow)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(implies[size1,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(implies[size3,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.forall(not[size1],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[blue,and[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[yellow,apply(same_color,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(nor[circle,nor[apply(same_shape,x.o),circle]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(or[or[green,apply(same_color,x.o)],size3],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.apply(or[nor[rectangle,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[or[yellow,not[apply(same_shape,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(rectangle,filter(x.s, and[size1,nand[blue,circle]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:nand[%s,%s];4:blue;4:circle
'λx.apply(or[size3,or[not[yellow],not[circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[implies[triangle,blue],apply(same_color,x.o)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(or[triangle,and[blue,apply(same_shape,x.o)]], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(x.s, or[rectangle,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(nand[apply(same_color,x.o),nor[blue,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(nand[not[rectangle],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[and[triangle,yellow],not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[or[green,circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,nand[size2,green]],iota(filter(filter(x.s, apply(same_size,x.o)), or[circle,rectangle])))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:nand[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.exists(not[not[not[yellow]]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,apply(same_color,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), and[green,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(nor[and[triangle,or[size1,yellow]],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:yellow;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), and[size3,yellow]), iff[apply(size-leq,iota(filter(filter(x.s, size1), triangle))),and[size3,yellow]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:size3;4:yellow;4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:and[%s,%s];4:size3;4:yellow
'λx.apply(and[blue,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[not[blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(blue,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, size1), green)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;3:%s.s;2:x
'λx.apply(apply(size-lt,iota(filter(filter(filter(x.s, size1), size1), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.exists(or[triangle,yellow], filter(x.s, nand[size2,size2]))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size2
'λx.apply(and[not[rectangle],circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, and[apply(size-lt,x.o),green]))),not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:not[%s];4:size2;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), and[blue,or[apply(same_color,x.o),size1]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, rectangle), size3), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3;4:blue
'λx.apply(iff[triangle,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[or[triangle,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[not[blue],nor[size1,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:nor[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(nand[circle,size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(yellow,x.s)'	0:forall(%s,%s);4:yellow;3:%s.s;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(filter(x.s, blue), blue), implies[triangle,size3]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:implies[%s,%s];4:triangle;4:size3
'λx.apply(or[and[size1,triangle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[blue,apply(same_size,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[blue,size2],iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[or[size3,nor[size1,triangle]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size3;4:nor[%s,%s];4:size1;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, nor[rectangle,apply(size-lt,iota(filter(x.s, size3)))]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nor[blue,nand[circle,circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(nor[and[circle,size2],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[circle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.forall(not[size3],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[circle,or[size1,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[not[and[blue,circle]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:triangle
'λx.apply(not[and[circle,or[yellow,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[rectangle,nor[green,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(same_size,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(not[triangle],x.o)'	0:apply(%s,%s);4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[yellow,size3])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size3
'λx.apply(iff[blue,nand[not[circle],blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:nand[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[green,size1]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size1
'λx.empty(filter(x.s, and[or[size1,yellow],apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, or[yellow,blue]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.apply(or[yellow,green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(not[triangle],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(x.s, and[not[size2],apply(same_shape,x.o)]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.forall(nor[blue,and[triangle,or[size1,yellow]]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:nor[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[not[green],nor[circle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:nor[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),iff[triangle,triangle]],iota(filter(filter(x.s, blue), not[size1])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1
'λx.apply(or[nor[green,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[nor[apply(same_shape,x.o),and[apply(same_size,x.o),apply(size-geq,x.o)]],size1]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;4:size3
'λx.apply(or[not[yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(iff[blue,and[not[circle],apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[apply(same_shape,x.o),nor[triangle,apply(size-gt,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[or[circle,green],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:green;4:size1;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(size3,filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(not[nand[circle,blue]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size3,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, or[apply(size-lt,iota(filter(x.s, blue))),green]), circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;4:circle
'λx.apply(size1,iota(filter(x.s, and[size1,apply(same_size,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[iff[and[rectangle,and[green,green]],apply(same_shape,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(iff[green,apply(size-leq,x.o)], filter(x.s, blue))'	0:exists(%s, %s);4:iff[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size2,iota(filter(filter(filter(x.s, green), green), or[size1,triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:or[%s,%s];4:size1;4:triangle
'λx.forall(not[apply(same_color,x.o)],filter(filter(x.s, or[yellow,green]), size1))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:green;4:size1
'λx.forall(size2,filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, blue)))), size3), rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, circle), size2), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2;4:size2
'λx.apply(iff[nand[circle,circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size3), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(implies[or[yellow,green],not[apply(same_size,x.o)]],filter(x.s, circle))'	0:forall(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(implies[green,apply(same_shape,x.o)],filter(x.s, not[circle]))'	0:forall(%s,%s);4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.forall(implies[apply(size-lt,x.o),rectangle],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.forall(not[nor[blue,yellow]],x.s)'	0:forall(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:yellow;3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, and[apply(same_color,iota(filter(filter(x.s, apply(same_size,iota(filter(x.s, green)))), size1))),green]), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:green;4:green
'λx.apply(iff[and[iff[rectangle,not[size3]],not[blue]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:not[%s];4:size3;4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[iff[blue,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[and[size3,yellow],or[circle,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[blue,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[rectangle,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[nand[yellow,rectangle],not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:rectangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.exists(and[yellow,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.apply(not[and[not[yellow],apply(same_color,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(x.s, iff[apply(size-geq,x.o),size2]), apply(same_color,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[not[size3],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), and[size1,apply(same_size,x.o)]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(or[and[apply(same_size,x.o),blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[and[apply(same_size,x.o),blue],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:size3;1:%s.o;2:x
'λx.apply(not[or[yellow,and[triangle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[blue,or[size3,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(or[blue,or[size3,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[blue,or[size3,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.exists(and[triangle,size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, not[size3]), rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, size1), blue), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(not[triangle],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(not[and[apply(same_shape,x.o),circle]],filter(x.s, not[blue]))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(size2,iota(filter(x.s, and[rectangle,not[and[apply(same_shape,x.o),not[yellow]]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), size3), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:yellow
'λx.forall(apply(size-lt,iota(filter(filter(x.s, triangle), triangle))),filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.exists(apply(same_shape,x.o), filter(x.s, or[green,blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.apply(and[apply(same_color,x.o),blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, or[blue,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue
'λx.contains(x.o, filter(x.s, apply(same_color,iota(filter(x.s, blue)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[circle,apply(same_shape,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(and[apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), blue))),or[triangle,size3]],filter(filter(filter(filter(x.s, blue), triangle), green), apply(same_color,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:or[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(same_shape,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(x.s, not[apply(size-lt,x.o)]), not[green]), rectangle)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:green;4:rectangle
'λx.exists(and[or[blue,circle],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(size3,filter(filter(x.s, rectangle), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, size3))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[circle,iff[circle,apply(same_color,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[green,and[or[triangle,size2],blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[blue,or[not[apply(same_color,x.o)],size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(yellow,filter(x.s, size1))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(green,filter(filter(x.s, apply(same_size,x.o)), and[not[size1],triangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:size1;4:triangle
'λx.apply(not[not[yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, not[yellow]), triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:triangle
'λx.apply(or[not[size1],size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[triangle,and[triangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(x.s, green), not[size3]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:size3
'λx.exists(and[apply(size-lt,x.o),not[or[rectangle,size2]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:size2;3:%s.s;2:x
'λx.apply(not[nor[size1,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:blue
'λx.apply(and[iff[yellow,yellow],or[nor[nand[triangle,size3],size1],or[circle,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:triangle;4:size3;4:size1;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(and[blue,apply(same_color,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size2,apply(same_shape,x.o)]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.exists(apply(size-leq,x.o), filter(x.s, and[implies[nand[circle,size2],green],size2]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:circle;4:size2;4:green;4:size2
'λx.apply(or[circle,or[size1,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.forall(not[and[and[apply(same_shape,x.o),apply(size-gt,x.o)],apply(same_shape,x.o)]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[nor[size1,size1],apply(same_size,x.o)],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:size1;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, rectangle), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.forall(yellow,filter(filter(x.s, rectangle), green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(not[and[yellow,and[implies[rectangle,size1],yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(x.s, not[triangle]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:circle
'λx.exists(and[not[apply(same_size,x.o)],yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(or[size3,yellow],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_shape,iota(filter(x.s, apply(same_color,x.o))))), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(apply(same_shape,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[blue,not[and[not[blue],circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[or[or[size1,blue],size2],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size2;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,size3],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), blue), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:circle
'λx.apply(or[blue,and[green,nor[green,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:nor[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[circle,blue],implies[circle,not[and[blue,blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:implies[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,apply(size-leq,iota(filter(x.s, nor[or[not[blue],and[blue,apply(same_color,x.o)]],yellow])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(x.s, green))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(x.s, size1))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(x.s, size2))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.empty(filter(x.s, size3))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(size2,filter(x.s, nor[apply(size-geq,x.o),apply(same_shape,x.o)]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(size3,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size3,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(size1,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size1,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size3,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(size2,iota(filter(x.s, green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(or[rectangle,apply(size-gt,x.o)], filter(filter(filter(x.s, size1), apply(same_color,x.o)), size1))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(and[circle,or[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(iff[or[circle,circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[blue,or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[triangle,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(and[not[size3],blue],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[not[size3],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:not[%s];4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,not[circle]]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:circle;4:green
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), yellow), apply(same_size,x.o))))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, apply(same_shape,x.o)), size1), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:yellow
'λx.apply(nand[nand[size2,yellow],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:size2;4:yellow;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), apply(size-leq,x.o)), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle
'λx.contains(x.o, filter(x.s, and[blue,not[size3]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:size3
'λx.contains(x.o, filter(x.s, and[blue,not[size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:size2
'λx.apply(or[blue,and[nand[implies[circle,green],triangle],apply(size-leq,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:circle;4:green;4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[and[size1,size1],or[not[size3],size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size1;4:size1;4:or[%s,%s];4:not[%s];4:size3;4:size3;1:%s.o;2:x
'λx.exists(nand[rectangle,rectangle], filter(x.s, or[apply(same_shape,x.o),rectangle]))'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(green,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(green,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(green,iota(filter(x.s, green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[and[triangle,or[yellow,green]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[and[blue,and[circle,blue]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[blue,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(x.s, blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_color,x.o)), size1), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:green
'λx.apply(or[circle,not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[circle,not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(implies[not[blue],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(implies[not[blue],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[rectangle,size1]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.forall(not[or[and[yellow,apply(same_size,x.o)],green]],x.s)'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, or[yellow,blue]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.apply(or[size3,iff[triangle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:iff[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(green,x.o)'	0:apply(%s,%s);4:green;1:%s.o;2:x
'λx.apply(or[or[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_size,x.o)), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(or[blue,not[not[circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[or[yellow,green],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(and[size1,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[size3,size3],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[and[size3,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.exists(implies[size2,size2], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(or[apply(same_size,x.o),yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[and[iff[and[size1,rectangle],blue],or[circle,yellow]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:blue;4:or[%s,%s];4:circle;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(nor[size1,and[blue,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[yellow,not[triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.forall(and[apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), blue))),or[triangle,size3]],filter(filter(filter(filter(x.s, blue), triangle), green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:or[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[yellow,not[size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, rectangle), green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(nand[not[blue],or[circle,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.forall(green,filter(x.s, apply(size-gt,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.exists(size3, filter(x.s, not[blue]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.forall(or[circle,or[nor[blue,rectangle],rectangle]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:nor[%s,%s];4:blue;4:rectangle;4:rectangle;3:%s.s;2:x
'λx.apply(size2,x.o)'	0:apply(%s,%s);4:size2;1:%s.o;2:x
'λx.apply(size3,x.o)'	0:apply(%s,%s);4:size3;1:%s.o;2:x
'λx.apply(size1,x.o)'	0:apply(%s,%s);4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:circle
'λx.apply(implies[blue,and[circle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[and[circle,not[iff[circle,nor[green,implies[or[apply(size-geq,iota(filter(x.s, apply(same_shape,x.o)))),green],blue]]]]],triangle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:iff[%s,%s];4:circle;4:nor[%s,%s];4:green;4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:blue;4:triangle
'λx.apply(and[not[rectangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(nand[not[blue],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[size2,nand[size2,apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[apply(same_color,x.o),and[size1,size3]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[or[yellow,triangle]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(or[yellow,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(or[size2,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size3), or[size2,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size3), or[size1,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, and[triangle,green]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(implies[apply(same_shape,x.o),apply(same_color,x.o)],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(x.s, apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.empty(filter(x.s, apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[size1,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.apply(blue,iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(nand[circle,blue],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(rectangle,iota(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(not[and[not[blue],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(not[and[not[blue],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[and[and[apply(same_color,x.o),apply(same_shape,x.o)],blue]],filter(x.s, circle))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(yellow, filter(x.s, size3))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(yellow, filter(x.s, size1))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(yellow, filter(x.s, size2))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(iff[blue,not[and[circle,apply(same_shape,x.o)]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[rectangle,circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:circle;4:size3;1:%s.o;2:x
'λx.apply(nor[and[circle,yellow],and[or[green,yellow],not[size3]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(iff[and[blue,and[triangle,triangle]],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(x.s, or[apply(same_shape,x.o),blue]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(blue,filter(filter(x.s, not[size1]), or[apply(same_color,x.o),triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.exists(yellow, filter(x.s, implies[apply(same_size,x.o),rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.forall(size1,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(size2,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(size3,filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(nand[triangle,or[size2,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[and[triangle,yellow],nor[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), and[not[blue],iff[or[rectangle,triangle],or[apply(same_size,x.o),circle]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:blue;4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(nand[and[circle,apply(same_shape,x.o)],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(iff[rectangle,implies[or[circle,blue],rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:implies[%s,%s];4:or[%s,%s];4:circle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(nand[iff[blue,size3],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:blue;4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, implies[apply(same_size,x.o),and[circle,green]]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,or[triangle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(or[blue,or[triangle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.forall(size3,filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nand[triangle,or[size1,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[rectangle,size2]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2;4:yellow
'λx.empty(filter(x.s, and[or[yellow,apply(same_shape,x.o)],size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.contains(x.o, filter(filter(x.s, or[green,yellow]), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:yellow;4:not[%s];4:circle
'λx.apply(or[green,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[yellow,not[rectangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:rectangle
'λx.apply(or[and[green,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[apply(same_shape,x.o),not[blue]]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;4:triangle
'λx.exists(nor[apply(same_shape,x.o),yellow], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(nand[not[iff[triangle,rectangle]],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:iff[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(nand[and[circle,size3],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(implies[not[rectangle],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), and[blue,apply(same_shape,x.o)]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(and[apply(same_shape,x.o),nor[triangle,triangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(not[and[green,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(not[and[green,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[blue]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size2
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(size-geq,x.o)), or[and[and[and[size2,yellow],size1],green],apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:size1;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[nor[green,triangle],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:green;4:triangle;4:size1;1:%s.o;2:x
'λx.exists(not[size3], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(x.s, or[rectangle,green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:green
'λx.forall(nand[blue,size2],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(filter(filter(x.s, rectangle), not[blue]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), blue), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue;4:size3
'λx.exists(implies[not[rectangle],apply(same_shape,x.o)], filter(x.s, implies[rectangle,circle]))'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:circle
'λx.apply(or[blue,size3],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size3;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, blue), size1), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:size1
'λx.exists(apply(same_color,x.o), filter(x.s, or[and[blue,blue],iff[apply(same_shape,x.o),blue]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, and[or[nor[not[or[triangle,apply(size-leq,x.o)]],and[rectangle,size3]],size2],blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.exists(and[apply(size-lt,x.o),apply(same_shape,x.o)], filter(x.s, size3))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(and[size2,implies[apply(same_color,x.o),blue]], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[and[size1,size1],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[apply(same_shape,x.o),apply(same_shape,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, apply(size-geq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[implies[triangle,green],apply(same_shape,iota(filter(x.s, rectangle)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, yellow), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[circle,or[green,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(iff[circle,not[and[blue,blue]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(or[and[triangle,circle],apply(same_shape,x.o)], filter(filter(x.s, nand[apply(same_size,x.o),apply(same_color,x.o)]), not[yellow]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), apply(size-lt,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[nor[yellow,circle],apply(same_size,x.o)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:yellow;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[circle,green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, blue)))), size2), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:rectangle
'λx.forall(not[apply(same_color,x.o)],filter(filter(x.s, blue), or[triangle,rectangle]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:rectangle
'λx.forall(circle,filter(filter(filter(filter(x.s, and[apply(same_shape,x.o),blue]), blue), not[yellow]), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue;4:not[%s];4:yellow;4:blue
'λx.empty(filter(filter(x.s, or[triangle,yellow]), and[size1,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[or[rectangle,apply(same_shape,x.o)],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(or[green,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[green]), and[not[triangle],implies[apply(size-leq,x.o),triangle]])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:and[%s,%s];4:not[%s];4:triangle;4:implies[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle
'λx.apply(iff[and[and[or[blue,not[yellow]],size1],green],size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:yellow;4:size1;4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(size3, filter(filter(x.s, size3), not[rectangle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:rectangle
'λx.empty(filter(filter(x.s, and[apply(same_shape,iota(x.s)),yellow]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:yellow;4:size2
'λx.apply(nand[rectangle,or[size2,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(implies[size1,size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, nand[size2,yellow]), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[nand[blue,not[circle]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, nor[rectangle,yellow]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size2, filter(x.s, not[apply(same_color,x.o)]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[size2,size2],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[or[size3,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[and[circle,circle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[iff[size2,and[not[triangle],size1]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:triangle;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[apply(same_shape,x.o),apply(size-gt,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(or[or[blue,size2],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, green), not[triangle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle
'λx.apply(or[blue,or[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), apply(same_shape,x.o)), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(iff[green,not[rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(triangle,filter(filter(x.s, circle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, nand[size1,blue]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size1;4:blue
'λx.apply(implies[green,not[size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, size2), size2))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(and[blue,or[rectangle,or[iff[blue,not[triangle]],triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:or[%s,%s];4:iff[%s,%s];4:blue;4:not[%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[and[not[size2],blue],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[triangle,and[apply(same_size,iota(filter(x.s, green))),blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:blue;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, size2), apply(same_color,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, blue)))), size3), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size2
'λx.apply(not[iff[circle,implies[blue,and[green,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(not[implies[and[not[apply(same_color,x.o)],circle],triangle]],iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(and[implies[blue,circle],and[not[triangle],not[size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[and[and[or[green,yellow],circle],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[size1,triangle],iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(nand[triangle,or[yellow,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, size2), yellow))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.apply(implies[blue,rectangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[apply(same_size,x.o),or[yellow,apply(size-geq,iota(filter(x.s, blue)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(implies[triangle,or[blue,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[size3,and[circle,yellow]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:circle;4:yellow
'λx.forall(size3,filter(filter(x.s, apply(same_size,x.o)), iff[size2,blue]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:size2;4:blue
'λx.apply(not[blue],iota(filter(x.s, and[or[green,yellow],and[iff[rectangle,size3],size1]])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:size3;4:size1
'λx.apply(and[not[rectangle],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), apply(same_shape,x.o)), and[triangle,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size2
'λx.apply(and[or[green,yellow],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), nor[apply(same_color,x.o),and[size3,size1]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(or[or[blue,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, size3), apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, apply(same_size,x.o)), size3)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(apply(same_shape,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[size1],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, yellow), size3), apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(and[and[blue,circle],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:circle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[circle,not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(not[and[yellow,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, apply(same_size,x.o)), circle), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:circle;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, triangle), or[size1,green]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size1;4:green
'λx.apply(blue,iota(filter(filter(filter(x.s, size1), apply(size-gt,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue
'λx.apply(green,iota(filter(x.s, and[not[iff[circle,green]],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[rectangle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), blue), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[iff[rectangle,and[blue,apply(same_color,iota(filter(x.s, size2)))]],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.exists(not[size3], filter(x.s, apply(size-leq,x.o)))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[and[blue,size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size1;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.exists(not[yellow], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[size3,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:triangle
'λx.exists(green, filter(x.s, and[size1,and[apply(size-gt,x.o),triangle]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle
'λx.exists(implies[triangle,blue], filter(filter(x.s, or[green,apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, not[blue]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(blue,iota(filter(x.s, and[apply(same_color,x.o),circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.exists(not[blue], filter(filter(x.s, apply(same_size,x.o)), not[circle]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(implies[or[triangle,blue],and[or[triangle,rectangle],blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(and[green,or[circle,size1]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:or[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[iff[yellow,yellow],or[nor[nand[triangle,size3],size2],or[circle,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:triangle;4:size3;4:size2;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size3), yellow)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;3:%s.s;2:x
'λx.apply(or[size2,size2],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(triangle, filter(x.s, not[circle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.exists(nand[not[size1],blue], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:not[%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[or[yellow,size1]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:size1
'λx.empty(filter(filter(filter(x.s, size2), and[yellow,apply(same_shape,x.o)]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(nor[blue,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(x.s, blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(implies[triangle,yellow],filter(x.s, triangle))'	0:forall(%s,%s);4:implies[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(and[blue,and[blue,apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[size1,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[size1,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(or[size1,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, blue)))), not[rectangle]), not[apply(same_color,x.o)]), green), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(or[size2,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(or[size2,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), triangle), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:blue
'λx.contains(x.o, filter(filter(x.s, implies[and[size3,size1],apply(same_color,iota(filter(x.s, circle)))]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:and[%s,%s];4:size3;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle
'λx.apply(not[and[not[size3],not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(or[rectangle,not[yellow]], filter(filter(x.s, apply(same_shape,x.o)), not[apply(size-geq,x.o)]))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, apply(same_shape,x.o)), not[and[size2,size3]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:size2;4:size3
'λx.apply(rectangle,iota(filter(x.s, size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(rectangle,iota(filter(x.s, size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(rectangle,iota(filter(x.s, size2)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[and[yellow,not[triangle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[implies[circle,not[blue]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:not[%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), nand[circle,size3]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:size3
'λx.forall(apply(same_shape,x.o),filter(x.s, not[rectangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.forall(apply(same_color,x.o),filter(x.s, and[rectangle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[nand[size1,yellow],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size1;4:yellow;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, and[circle,apply(same_shape,x.o)]), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), green), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size3
'λx.apply(and[and[apply(size-lt,x.o),green],green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(implies[blue,size2], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[blue,not[or[triangle,yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.contains(iota(filter(x.s, size1)), filter(x.s, not[circle]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(iff[or[green,yellow],or[not[circle],triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:green;4:yellow;4:or[%s,%s];4:not[%s];4:circle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, and[and[size1,apply(same_size,x.o)],yellow]), yellow), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:yellow;4:size1
'λx.contains(iota(filter(x.s, and[green,iff[implies[not[size3],and[apply(same_shape,x.o),or[and[apply(same_color,iota(filter(filter(x.s, not[yellow]), size3))),triangle],size1]]],rectangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:iff[%s,%s];4:implies[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;4:triangle;4:size1;4:rectangle;3:%s.s;2:x
'λx.apply(and[iff[size2,and[not[triangle],size1]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:and[%s,%s];4:not[%s];4:triangle;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), not[size2]), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size2;4:triangle
'λx.forall(or[blue,triangle],filter(x.s, size1))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[implies[circle,triangle],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[or[blue,size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size2;4:circle;1:%s.o;2:x
'λx.apply(nand[or[size3,size2],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size3;4:size2;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, yellow))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(nand[blue,green],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[iff[green,blue],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, nor[rectangle,apply(same_shape,x.o)]), or[blue,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:green
'λx.empty(filter(filter(filter(x.s, rectangle), blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:rectangle
'λx.apply(circle,iota(filter(filter(x.s, iff[size1,iff[yellow,not[apply(same_color,x.o)]]]), nor[rectangle,nor[or[size3,size2],circle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:iff[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:nor[%s,%s];4:or[%s,%s];4:size3;4:size2;4:circle
'λx.apply(and[or[yellow,size3],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:size3;4:rectangle;1:%s.o;2:x
'λx.exists(or[and[apply(same_shape,x.o),circle],blue], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:blue;3:%s.s;2:x
'λx.apply(apply(size-lt,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(not[iff[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[apply(size-geq,x.o),implies[yellow,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:implies[%s,%s];4:yellow;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(or[green,blue], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(x.s, and[size1,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:rectangle
'λx.exists(nand[blue,not[circle]], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:blue;4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(size3,filter(x.s, yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size1,filter(x.s, yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(x.s, yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[not[or[circle,apply(size-lt,x.o)]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, not[or[circle,size3]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:size3
'λx.contains(x.o, filter(x.s, nor[or[apply(same_size,iota(filter(filter(x.s, size1), blue))),and[size3,size1]],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:and[%s,%s];4:size3;4:size1;4:size1
'λx.apply(or[blue,and[triangle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.exists(and[size2,apply(same_shape,x.o)], filter(x.s, green))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), or[or[rectangle,triangle],size2]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:size2
'λx.empty(filter(filter(filter(filter(x.s, yellow), iff[triangle,green]), apply(same_size,x.o)), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:iff[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,iota(x.s))), and[circle,rectangle]), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:rectangle;4:size1
'λx.apply(or[not[or[blue,circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[or[circle,blue],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[or[rectangle,and[green,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(blue,x.o)'	0:apply(%s,%s);4:blue;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, blue), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.forall(size1,filter(filter(x.s, blue), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.exists(and[or[yellow,nor[iff[apply(same_shape,x.o),size2],yellow]],implies[yellow,triangle]], filter(x.s, or[triangle,size1]))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:yellow;4:implies[%s,%s];4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size1
'λx.apply(and[circle,nand[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[or[triangle,rectangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:green;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, apply(size-lt,x.o)), or[green,yellow]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:green;4:yellow
'λx.apply(apply(same_color,iota(filter(x.s, apply(size-leq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(apply(size-geq,x.o), filter(x.s, nor[and[triangle,green],yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow
'λx.empty(filter(filter(x.s, triangle), nand[nor[green,size3],implies[size2,size3]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:nor[%s,%s];4:green;4:size3;4:implies[%s,%s];4:size2;4:size3
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(apply(size-gt,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size3,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[size3,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[size3,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[blue,circle],iota(filter(filter(x.s, apply(same_shape,x.o)), size1)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(and[blue,nand[size1,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(not[apply(size-geq,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_color,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.forall(yellow,filter(x.s, or[and[iff[apply(same_shape,x.o),and[not[apply(same_color,x.o)],circle]],blue],rectangle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:blue;4:rectangle
'λx.apply(and[or[yellow,circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[circle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[circle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_color,x.o)],iota(filter(filter(x.s, blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, iff[green,circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.apply(and[apply(same_size,x.o),not[size2]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(not[size3], filter(filter(filter(x.s, apply(same_shape,x.o)), size1), or[rectangle,blue]))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:or[%s,%s];4:rectangle;4:blue
'λx.exists(not[apply(size-lt,x.o)], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, not[or[yellow,apply(same_shape,x.o)]]), rectangle), or[size2,blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:or[%s,%s];4:size2;4:blue
'λx.empty(filter(filter(x.s, circle), or[rectangle,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[green,not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:size2;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_color,x.o)), not[rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.apply(or[circle,and[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, and[size3,apply(same_size,x.o)]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[rectangle,iff[green,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[and[size2,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(nor[circle,green],iota(filter(x.s, and[and[size2,apply(same_color,x.o)],iff[green,and[circle,blue]]])))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:green;4:and[%s,%s];4:circle;4:blue
'λx.exists(or[iff[blue,rectangle],blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:iff[%s,%s];4:blue;4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, implies[green,size2]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:size2
'λx.exists(triangle, filter(x.s, implies[green,size1]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:size1
'λx.apply(not[not[or[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(or[blue,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:green;3:%s.s;2:x
'λx.apply(iff[green,and[yellow,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(apply(size-leq,iota(filter(x.s, apply(same_shape,x.o)))),filter(filter(x.s, blue), and[triangle,size1]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:triangle;4:size1
'λx.apply(or[circle,or[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, or[apply(same_color,x.o),size1]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, not[and[size2,green]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:green
'λx.apply(blue,iota(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[size3,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(and[or[green,blue],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, iff[apply(same_color,x.o),and[rectangle,size1]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.empty(filter(x.s, and[apply(same_shape,x.o),green]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.empty(filter(x.s, and[apply(same_shape,x.o),size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(nand[yellow,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nand[yellow,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(nor[blue,not[circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), not[size1]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;4:yellow
'λx.apply(implies[or[triangle,iff[triangle,yellow]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:iff[%s,%s];4:triangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, and[blue,apply(size-gt,x.o)])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(and[and[apply(same_color,x.o),blue],apply(same_color,iota(filter(filter(x.s, not[and[blue,and[size2,rectangle]]]), apply(same_shape,x.o))))], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:and[%s,%s];4:size2;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[triangle,size3]],iota(filter(x.s, or[apply(size-geq,x.o),size1])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1
'λx.contains(x.o, filter(x.s, not[rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(nand[yellow,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(nand[size2,apply(same_size,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[not[blue],and[circle,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[or[rectangle,size3],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[circle,or[green,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), apply(same_size,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(circle,iota(filter(filter(filter(x.s, not[size3]), circle), not[green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:circle;4:not[%s];4:green
'λx.apply(or[blue,apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[size1,apply(same_size,x.o)],iota(filter(filter(filter(x.s, size1), or[size3,size1]), size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:size3;4:size1;4:size1
'λx.apply(or[not[blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(nand[yellow,not[size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(nand[nor[green,circle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:green;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[blue,iff[nand[apply(same_shape,x.o),blue],and[green,green]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:and[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(nor[and[triangle,size2],apply(same_size,x.o)], filter(x.s, green))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(circle,filter(filter(filter(x.s, blue), blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(implies[size3,rectangle],filter(x.s, green))'	0:forall(%s,%s);4:implies[%s,%s];4:size3;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(triangle,filter(filter(x.s, and[apply(size-geq,iota(x.s)),size3]), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(implies[or[blue,and[not[rectangle],not[size3]]],nor[not[circle],yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size3;4:nor[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(x.s, circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:%s.s;2:x
'λx.apply(or[circle,and[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, green), size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.empty(filter(filter(filter(x.s, size2), triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;4:blue
'λx.forall(blue,filter(x.s, and[and[not[blue],apply(same_color,x.o)],and[not[rectangle],and[and[apply(same_size,x.o),apply(same_shape,x.o)],implies[triangle,rectangle]]]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:triangle;4:rectangle
'λx.apply(or[and[rectangle,size3],and[yellow,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:size3;4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[blue,apply(same_size,x.o)],iota(filter(x.s, or[circle,rectangle])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(and[implies[blue,triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(and[not[green],nor[size2,triangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:green;4:nor[%s,%s];4:size2;4:triangle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(not[or[and[size3,yellow],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(implies[circle,or[green,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,size1],iota(filter(x.s, and[blue,triangle])))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.forall(not[size3],filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(size2, filter(x.s, or[circle,or[apply(same_color,x.o),green]]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(and[not[size2],apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(green,filter(filter(x.s, size2), apply(same_size,x.o)))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, iff[and[not[size1],or[apply(same_color,x.o),apply(same_size,x.o)]],and[circle,blue]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:not[%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(and[or[blue,size1],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),rectangle],iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(or[size3,and[size1,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(implies[not[or[blue,rectangle]],triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,or[apply(same_shape,iota(filter(filter(x.s, blue), size1))),triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(implies[iff[circle,green],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.exists(or[blue,green], filter(filter(x.s, apply(same_shape,x.o)), or[implies[yellow,size2],green]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:implies[%s,%s];4:yellow;4:size2;4:green
'λx.exists(or[size3,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.exists(or[size3,and[apply(same_color,iota(filter(filter(x.s, and[apply(same_shape,x.o),triangle]), and[size2,and[size2,blue]]))),size2]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:size2;4:and[%s,%s];4:size2;4:blue;4:size2;3:%s.s;2:x
'λx.exists(or[and[implies[apply(same_color,x.o),blue],apply(same_shape,x.o)],and[green,size3]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.apply(nor[and[circle,green],apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:green;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, not[triangle]), blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[triangle,implies[yellow,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.empty(filter(x.s, iff[apply(same_size,x.o),size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(implies[or[yellow,size1],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:blue;1:%s.o;2:x
'λx.apply(nand[circle,and[not[rectangle],blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(not[or[implies[blue,triangle],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[apply(same_size,x.o),apply(same_color,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[blue,and[circle,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[iff[and[rectangle,and[green,green]],apply(same_size,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[nand[yellow,circle],or[nand[rectangle,size1],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:circle;4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size1;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.empty(filter(filter(x.s, green), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.empty(filter(filter(x.s, and[green,not[apply(same_shape,x.o)]]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.empty(filter(filter(x.s, not[blue]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle
'λx.apply(or[green,apply(size-leq,x.o)],iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(iff[and[size2,blue],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size2;4:blue;4:circle;1:%s.o;2:x
'λx.forall(and[apply(same_color,x.o),circle],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(iff[blue,not[circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[or[not[size2],circle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:size2;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(and[and[apply(same_size,x.o),size1],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[or[green,rectangle],size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:size2
'λx.apply(not[not[iff[size3,implies[circle,size3]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:iff[%s,%s];4:size3;4:implies[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, green), and[not[size2],size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:not[%s];4:size2;4:size3
'λx.apply(and[size3,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.exists(or[blue,green], filter(x.s, or[size2,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[nor[yellow,or[green,size1]],and[size1,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:green;4:size1;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(nand[or[size3,triangle],not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[not[or[apply(same_shape,x.o),green]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[size2,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(not[size1], filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.contains(x.o, filter(filter(x.s, apply(size-geq,iota(filter(x.s, size3)))), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(nand[rectangle,implies[blue,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[apply(size-gt,x.o),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[not[and[triangle,green]],nand[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:green;4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_size,x.o)), and[not[blue],size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(or[circle,and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[rectangle,or[size3,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size3;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[yellow,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.empty(filter(filter(filter(filter(x.s, yellow), triangle), apply(same_size,x.o)), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size3
'λx.forall(size3,filter(x.s, circle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[blue,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_color,x.o)), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(iff[size1,and[size2,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(and[or[yellow,circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:blue;1:%s.o;2:x
'λx.forall(or[blue,not[apply(same_shape,x.o)]],filter(filter(x.s, apply(same_size,x.o)), size1))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, size1), rectangle), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, and[size3,yellow]), yellow)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow;4:yellow
'λx.apply(or[or[circle,and[triangle,green]],and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:green;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[circle,and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[triangle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(iff[green,green],iota(filter(filter(x.s, size3), not[blue])))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue
'λx.forall(and[size1,apply(same_color,x.o)],filter(x.s, and[iff[and[circle,green],size3],apply(same_shape,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:green;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[green,or[rectangle,size1]], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[or[size1,not[yellow]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),or[iff[blue,triangle],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(or[rectangle,and[iff[yellow,circle],not[rectangle]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.exists(yellow, filter(x.s, and[yellow,not[circle]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:not[%s];4:circle
'λx.apply(or[and[nor[triangle,circle],rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:triangle;4:circle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, yellow), or[triangle,and[apply(same_shape,x.o),apply(same_size,x.o)]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(circle,filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, circle), or[triangle,apply(same_color,x.o)]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[size1,circle],size1],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(nor[or[size2,triangle],circle],filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[circle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(or[blue,green], filter(x.s, and[triangle,or[size1,apply(size-geq,x.o)]]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(nand[iff[blue,size1],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:blue;4:size1;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size2,rectangle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:rectangle;4:yellow
'λx.apply(green,iota(filter(filter(x.s, apply(same_shape,x.o)), and[green,circle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(nor[and[not[circle],green],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.forall(nand[yellow,size2],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:nand[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(yellow, filter(filter(x.s, size2), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.forall(green,filter(filter(filter(x.s, size3), apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(yellow, filter(filter(x.s, size1), circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[yellow], filter(x.s, or[yellow,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[implies[circle,yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[triangle,and[size2,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[or[and[apply(size-leq,x.o),circle],green],rectangle],iota(filter(filter(x.s, not[apply(same_color,x.o)]), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:green;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nand[nor[blue,triangle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[or[circle,green],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(not[not[not[yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:yellow;1:%s.o;2:x
'λx.forall(or[circle,or[or[circle,apply(same_size,x.o)],and[or[or[and[size1,circle],apply(same_color,x.o)],apply(same_shape,x.o)],nand[circle,size1]]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.apply(or[or[size1,circle],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:size2;1:%s.o;2:x
'λx.apply(or[or[size1,circle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[rectangle,and[circle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[size1,size2],iota(filter(filter(filter(x.s, size1), blue), not[circle])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:not[%s];4:circle
'λx.forall(not[circle],filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(not[or[triangle,triangle]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(and[or[size3,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[green,and[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,not[yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(not[and[or[circle,not[rectangle]],not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[or[or[or[size2,triangle],rectangle],yellow],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:rectangle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[iff[not[circle],blue],and[apply(same_shape,x.o),apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:circle;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nor[and[circle,not[blue]],and[circle,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(blue,filter(x.s, or[apply(same_shape,x.o),circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(green,filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(green,iota(filter(filter(x.s, not[triangle]), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:green
'λx.apply(and[or[blue,yellow],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(iff[and[circle,or[green,yellow]],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow;4:blue;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, rectangle), green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(and[rectangle,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(or[apply(same_shape,x.o),and[green,circle]], filter(x.s, iff[circle,and[rectangle,triangle]]))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:green;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:triangle
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, blue), or[triangle,apply(same_shape,x.o)]), size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(and[or[yellow,circle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:size2;1:%s.o;2:x
'λx.exists(or[and[apply(same_shape,x.o),apply(same_shape,x.o)],size2], filter(filter(x.s, or[apply(size-lt,x.o),and[rectangle,blue]]), size3))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:blue;4:size3
'λx.apply(or[size3,or[green,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(implies[blue,size1],iota(x.s))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:size1;1:iota(%s);3:%s.s;2:x
'λx.exists(implies[not[triangle],apply(same_shape,x.o)], filter(filter(x.s, not[blue]), and[apply(same_color,x.o),circle]))'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nor[or[apply(same_color,iota(filter(x.s, blue))),blue],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[circle,not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size1,green]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:triangle
'λx.exists(or[size3,apply(same_shape,x.o)], filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(iff[yellow,and[size2,yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[green,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, yellow), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(or[circle,yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[and[blue,triangle],or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(or[not[yellow],green],iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.apply(iff[blue,and[circle,and[circle,apply(same_size,x.o)]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[size2,apply(same_shape,x.o)], filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[and[triangle,blue],size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:size2;1:%s.o;2:x
'λx.exists(implies[and[green,size1],or[size3,or[size3,apply(same_color,iota(filter(filter(x.s, blue), and[apply(same_shape,x.o),nor[size2,size2]])))]]], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:and[%s,%s];4:green;4:size1;4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.exists(or[blue,and[not[yellow],apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, nor[and[size3,size2],apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:size3;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(iff[blue,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[size3,and[blue,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, size3)), filter(x.s, or[rectangle,and[green,triangle]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:triangle
'λx.contains(x.o, filter(x.s, not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.exists(and[or[blue,circle],apply(same_shape,x.o)], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size2,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, nand[green,implies[apply(same_shape,x.o),triangle]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.contains(x.o, filter(x.s, or[size1,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green
'λx.contains(x.o, filter(x.s, or[size1,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2
'λx.contains(x.o, filter(x.s, or[size3,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size2
'λx.apply(or[triangle,nand[yellow,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(nand[green,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(nand[green,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, apply(size-lt,x.o)), apply(same_shape,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[or[iff[triangle,size3],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), or[yellow,blue]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:yellow;4:blue;4:rectangle
'λx.apply(not[and[circle,size1]],iota(filter(filter(x.s, or[triangle,green]), apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[and[size2,blue]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:blue;3:%s.s;2:x
'λx.apply(implies[size2,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(green,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(green,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(not[green],iota(filter(filter(x.s, yellow), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[not[apply(same_shape,x.o)],and[circle,rectangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, or[size2,green]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:green
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(nand[circle,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[size3])), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size2,iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(size1,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(size3,iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), blue), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:not[%s];4:circle
'λx.apply(iff[yellow,rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, apply(same_shape,x.o)), implies[blue,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:blue;4:circle
'λx.apply(not[nor[not[triangle],and[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[not[size1],apply(same_shape,x.o)]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(filter(x.s, apply(same_color,x.o)), size1)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(nand[rectangle,or[size1,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[green,apply(same_color,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[or[or[apply(same_color,x.o),and[not[circle],circle]],and[green,blue]],not[apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:circle;4:circle;4:and[%s,%s];4:green;4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(nor[green,or[apply(same_shape,x.o),size1]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(not[and[implies[size1,green],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:size1;4:green;4:blue;1:%s.o;2:x
'λx.exists(and[green,triangle], filter(x.s, size3))'	0:exists(%s, %s);4:and[%s,%s];4:green;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(apply(size-gt,x.o),filter(filter(x.s, yellow), size1))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(implies[or[green,yellow],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.exists(or[triangle,yellow], filter(x.s, size3))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(blue, filter(x.s, or[triangle,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[size2,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.apply(or[green,not[triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(and[green,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, or[green,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size2), and[triangle,green]), apply(same_size,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[blue,and[circle,or[yellow,green]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(and[apply(size-leq,x.o),or[apply(size-leq,x.o),size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.forall(apply(size-lt,iota(filter(x.s, triangle))),filter(filter(x.s, blue), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(not[rectangle],iota(filter(filter(x.s, triangle), not[or[green,size1]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:or[%s,%s];4:green;4:size1
'λx.apply(or[rectangle,or[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:rectangle
'λx.apply(or[blue,green],iota(filter(filter(x.s, triangle), size2)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.exists(not[and[nand[rectangle,iff[not[size2],yellow]],implies[size3,rectangle]]], x.s)'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:iff[%s,%s];4:not[%s];4:size2;4:yellow;4:implies[%s,%s];4:size3;4:rectangle;3:%s.s;2:x
'λx.apply(and[apply(same_size,iota(filter(x.s, apply(size-leq,x.o)))),apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[not[or[rectangle,triangle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[green,or[blue,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(iff[rectangle,or[not[blue],rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[or[triangle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[not[not[rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.exists(yellow, filter(x.s, rectangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, rectangle), rectangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), size3)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.apply(and[nor[green,size1],apply(same_size,x.o)],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:green;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.empty(filter(x.s, nor[green,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:triangle
'λx.apply(or[rectangle,and[size3,and[green,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(iff[triangle,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(not[and[and[size1,and[circle,blue]],and[circle,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:circle;4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[yellow]), size1)), filter(filter(filter(x.s, apply(same_shape,x.o)), size1), blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:blue
'λx.contains(iota(filter(x.s, and[triangle,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(and[not[size2],and[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), apply(size-lt,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(or[not[size2],apply(same_shape,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), size3), size3)))],filter(filter(x.s, yellow), circle))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.forall(size2,filter(filter(x.s, apply(same_shape,x.o)), and[rectangle,or[not[size3],apply(size-lt,iota(filter(filter(x.s, and[green,circle]), apply(same_size,x.o))))]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[apply(size-leq,x.o),yellow],iota(x.s))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), triangle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:green
'λx.apply(and[not[circle],or[yellow,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(nor[green,or[or[triangle,or[green,rectangle]],yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:or[%s,%s];4:or[%s,%s];4:triangle;4:or[%s,%s];4:green;4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[green,apply(same_shape,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(or[not[circle],and[blue,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, not[yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(not[and[size1,apply(same_color,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(circle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[blue,apply(same_shape,x.o)],iota(filter(filter(x.s, not[size2]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.forall(triangle,filter(x.s, circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, yellow), size1), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[yellow,or[apply(size-lt,iota(filter(x.s, size3))),green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;1:%s.o;2:x
'λx.forall(not[and[apply(same_shape,x.o),blue]],filter(filter(x.s, apply(same_color,x.o)), not[size1]))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(not[nor[and[blue,blue],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, apply(same_color,x.o)), green))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.contains(iota(filter(x.s, circle)), filter(x.s, not[apply(same_size,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[green,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[blue,apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(same_shape,x.o)), triangle), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), size1), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(or[blue,or[size3,and[rectangle,and[green,size2]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(or[yellow,rectangle],iota(filter(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, yellow), circle)))), or[green,size2]), circle), not[size3])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:or[%s,%s];4:green;4:size2;4:circle;4:not[%s];4:size3
'λx.apply(or[green,implies[blue,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),or[yellow,apply(size-geq,iota(filter(x.s, blue)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[not[rectangle],not[size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, implies[circle,rectangle]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[and[circle,blue]],or[or[blue,circle],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:blue;4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[and[or[circle,not[size2]],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, iff[yellow,size1]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:yellow;4:size1;4:circle
'λx.forall(or[yellow,apply(same_size,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[iff[blue,circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[triangle,not[blue]],or[and[green,size2],and[triangle,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:green;4:size2;4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(not[and[nor[size2,blue],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size2;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[apply(same_color,iota(filter(x.s, blue))),not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[and[triangle,iff[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[nand[size2,triangle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size2;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(implies[and[size3,triangle],not[size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, size1), or[apply(size-gt,x.o),triangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle
'λx.forall(size2,filter(filter(x.s, size1), or[apply(size-gt,x.o),triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle
'λx.apply(or[rectangle,or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(and[or[yellow,apply(same_shape,x.o)],not[yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(green,filter(filter(x.s, or[rectangle,size3]), blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size3;4:blue
'λx.exists(or[and[and[size1,blue],triangle],and[apply(same_size,x.o),size2]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size1;4:blue;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, nor[rectangle,size3]), blue), apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:size3;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(or[or[and[not[apply(same_size,x.o)],apply(same_shape,x.o)],green],yellow], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[triangle,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, yellow), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle;3:%s.s;2:x
'λx.forall(yellow,filter(x.s, and[or[apply(same_shape,x.o),circle],rectangle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:rectangle
'λx.apply(apply(size-leq,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[circle]), apply(same_color,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, blue), and[size1,iff[apply(size-leq,x.o),green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green
'λx.apply(nand[not[or[and[size3,size2],and[yellow,iff[circle,blue]]]],iff[green,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:size2;4:and[%s,%s];4:yellow;4:iff[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, and[or[not[and[triangle,apply(same_size,x.o)]],size3],size1]), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size1;4:triangle
'λx.apply(not[and[nor[circle,blue],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:triangle;1:%s.o;2:x
'λx.exists(nand[rectangle,rectangle], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, not[and[blue,not[green]]]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,not[not[circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[circle,apply(size-leq,iota(filter(x.s, circle)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[blue,apply(same_shape,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(not[and[and[apply(same_shape,x.o),apply(size-gt,x.o)],not[size3]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2
'λx.apply(blue,iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.empty(filter(filter(filter(x.s, size3), yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:circle
'λx.apply(circle,iota(filter(filter(x.s, not[implies[apply(size-gt,x.o),triangle]]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle;4:circle
'λx.forall(size1,filter(filter(x.s, yellow), apply(same_color,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[circle,not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[triangle,size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:size3
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), nand[implies[rectangle,rectangle],apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:implies[%s,%s];4:rectangle;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[and[circle,circle],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, or[not[triangle],rectangle])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:triangle;4:rectangle
'λx.forall(size1,filter(filter(x.s, rectangle), rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.forall(size2,filter(filter(x.s, rectangle), rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.apply(apply(same_shape,iota(filter(x.s, rectangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, size3), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), triangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:blue
'λx.apply(or[not[nand[triangle,size3]],or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:triangle;4:size3;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),circle],iota(filter(filter(x.s, not[circle]), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size3
'λx.apply(not[and[circle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(not[yellow], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[size1]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(apply(size-leq,iota(filter(x.s, apply(same_shape,x.o)))),filter(filter(x.s, or[blue,yellow]), and[triangle,size1]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:triangle;4:size1
'λx.exists(or[and[triangle,size3],and[and[rectangle,apply(same_color,x.o)],size1]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(or[not[size2],blue],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(blue,iota(filter(x.s, and[blue,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue
'λx.apply(and[blue,iff[size3,circle]],iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(green,iota(filter(filter(x.s, not[size2]), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.apply(or[circle,or[not[blue],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:blue;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[size2]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.forall(size3,filter(filter(x.s, yellow), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.contains(iota(filter(filter(x.s, green), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;3:%s.s;2:x
'λx.apply(or[yellow,implies[and[blue,not[size1]],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:implies[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(not[nor[not[circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(blue, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[apply(same_shape,x.o),green]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:blue
'λx.apply(and[or[size1,and[yellow,triangle]],or[size2,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:triangle;4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, and[rectangle,size2]), not[green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size2;4:not[%s];4:green
'λx.forall(not[yellow],x.s)'	0:forall(%s,%s);4:not[%s];4:yellow;3:%s.s;2:x
'λx.apply(implies[or[not[circle],blue],and[or[triangle,rectangle],blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:blue
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, not[size3]), nor[yellow,green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:nor[%s,%s];4:yellow;4:green
'λx.apply(and[or[circle,triangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(rectangle,filter(filter(filter(x.s, or[green,size3]), not[size1]), apply(size-geq,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3;4:not[%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, nor[green,size3]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:size3
'λx.exists(and[yellow,iff[triangle,size3]], filter(x.s, yellow))'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:iff[%s,%s];4:triangle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(apply(same_shape,iota(filter(x.s, blue))),filter(filter(x.s, size2), apply(same_size,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(iff[yellow,and[apply(same_color,x.o),green]],x.s)'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.exists(apply(size-lt,iota(filter(x.s, size1))), filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.exists(rectangle, filter(x.s, blue))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_size,x.o), filter(x.s, circle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(not[implies[triangle,green]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:triangle;4:green;3:%s.s;2:x
'λx.apply(circle,iota(filter(x.s, or[yellow,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle
'λx.apply(and[size1,and[green,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(filter(x.s, not[triangle]), size1)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1
'λx.apply(nand[or[circle,blue],iff[triangle,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(or[green,blue], filter(x.s, not[not[apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[size2],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size1],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:%s.s;2:x
'λx.apply(and[green,and[green,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(implies[size3,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[size3,not[apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[size1,and[size1,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:and[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[and[yellow,yellow],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[size1],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(x.s, or[not[circle],yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:yellow
'λx.apply(or[or[size1,yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[nand[not[size3],yellow],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:size3;4:yellow;4:circle;1:%s.o;2:x
'λx.exists(and[and[circle,apply(same_color,x.o)],not[size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size3;3:%s.s;2:x
'λx.apply(or[or[not[circle],green],or[size2,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:green;4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(implies[not[and[size1,and[not[green],rectangle]]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:not[%s];4:green;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[circle,or[or[not[not[size2]],and[apply(same_shape,iota(filter(filter(x.s, blue), triangle))),nor[size1,blue]]],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:nor[%s,%s];4:size1;4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(filter(x.s, triangle), apply(size-leq,x.o)), yellow), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;4:size1
'λx.apply(not[and[rectangle,green]],iota(filter(filter(x.s, apply(same_shape,x.o)), not[and[rectangle,circle]])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:circle
'λx.apply(or[apply(same_color,x.o),green],iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(and[size1,not[apply(size-gt,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, and[circle,iff[circle,apply(same_shape,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, size2), or[blue,apply(size-gt,x.o)]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(or[apply(size-geq,x.o),not[nor[size1,or[nor[size1,apply(same_shape,x.o)],and[size1,circle]]]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:nor[%s,%s];4:size1;4:or[%s,%s];4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(not[nor[or[blue,nor[rectangle,yellow]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:blue;4:nor[%s,%s];4:rectangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.forall(not[size3],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(x.s, blue), size3), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size3
'λx.apply(and[or[blue,circle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[apply(same_color,x.o),not[apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(or[rectangle,apply(size-gt,iota(filter(filter(x.s, yellow), size3)))], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(triangle, filter(filter(x.s, yellow), apply(size-lt,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, not[apply(same_color,x.o)]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(or[circle,green], filter(filter(x.s, apply(size-leq,x.o)), size2))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2
'λx.apply(iff[triangle,iff[triangle,not[and[size2,not[blue]]]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:iff[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, and[blue,apply(size-gt,x.o)]), blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue
'λx.forall(and[or[triangle,apply(size-leq,x.o)],or[implies[yellow,green],not[green]]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:or[%s,%s];4:implies[%s,%s];4:yellow;4:green;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(iff[not[yellow],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[and[not[circle],blue],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.exists(circle, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, circle), not[blue]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:blue;4:circle
'λx.apply(size1,iota(filter(filter(x.s, not[apply(size-leq,x.o)]), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1
'λx.apply(and[blue,and[or[size3,apply(same_size,iota(filter(x.s, blue)))],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[iff[iff[not[green],not[and[blue,rectangle]]],yellow],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:iff[%s,%s];4:not[%s];4:green;4:not[%s];4:and[%s,%s];4:blue;4:rectangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[size3,or[not[apply(same_size,x.o)],nand[yellow,circle]]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(or[and[size2,rectangle],circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:circle;3:%s.s;2:x
'λx.exists(and[apply(same_color,x.o),implies[green,size3]], filter(x.s, nor[yellow,yellow]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:yellow
'λx.apply(or[rectangle,iff[yellow,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(not[not[and[implies[and[blue,circle],yellow],not[not[or[blue,circle]]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:circle;4:yellow;4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(and[size1,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[rectangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[size2,nand[size2,apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:nand[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size3,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.exists(and[apply(same_shape,x.o),not[apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, green), apply(same_color,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[size2,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(rectangle, filter(x.s, and[apply(same_color,x.o),rectangle]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(and[circle,or[circle,blue]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(circle,filter(x.s, apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, or[triangle,blue]))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:blue
'λx.apply(nand[triangle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nand[triangle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(nand[triangle,size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.exists(and[yellow,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),not[not[or[rectangle,blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(nor[yellow,and[apply(same_shape,x.o),or[green,size3]]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:size3;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, or[yellow,circle]), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:circle;4:size3
'λx.apply(and[blue,iff[nand[apply(same_shape,x.o),blue],and[green,size1]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:and[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(nand[rectangle,rectangle], filter(x.s, or[apply(same_shape,x.o),and[rectangle,size1]]))'	0:exists(%s, %s);4:nand[%s,%s];4:rectangle;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(implies[apply(same_shape,x.o),circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[or[rectangle,and[not[blue],triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:and[%s,%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), or[nand[rectangle,size2],size3]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size2;4:size3
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), or[nand[rectangle,size2],size1]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size2;4:size1
'λx.apply(and[rectangle,blue],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[size1,not[size1]],iota(filter(filter(x.s, apply(same_shape,x.o)), green)))'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(yellow,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, green), apply(same_color,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[not[blue],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(nand[not[blue],size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.exists(implies[size2,apply(same_color,x.o)], filter(x.s, not[triangle]))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[yellow,green],iota(filter(filter(x.s, not[and[yellow,triangle]]), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:triangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size3,and[or[green,size1],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:green;4:size1;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, green), size1)))), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, nor[rectangle,apply(same_color,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[or[circle,size3],and[circle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:size3;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(apply(size-gt,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(rectangle,iota(filter(filter(x.s, size1), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,x.o)), triangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, or[apply(same_shape,x.o),and[and[not[or[rectangle,size1]],yellow],apply(same_shape,x.o)]]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:rectangle;4:size1;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[not[yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, blue), implies[triangle,size3]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:implies[%s,%s];4:triangle;4:size3
'λx.apply(iff[apply(size-gt,x.o),circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, blue), apply(same_color,x.o)), blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_size,x.o),size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.empty(filter(x.s, and[apply(same_size,x.o),size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(iff[not[circle],nand[size1,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:nand[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.exists(not[and[triangle,triangle]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:triangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[and[size3,size3],circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size3;4:circle
'λx.forall(size3,filter(filter(x.s, blue), triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(and[iff[apply(size-gt,x.o),size1],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[circle,not[not[blue]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[apply(same_size,x.o),nor[blue,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[or[circle,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, not[size1]), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), triangle), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:triangle;4:size1;3:%s.s;2:x
'λx.exists(iff[and[and[size2,apply(size-leq,x.o)],blue],size3], filter(filter(x.s, triangle), implies[yellow,size1]))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:yellow;4:size1
'λx.forall(yellow,filter(x.s, triangle))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_size,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_size,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, nor[blue,or[size1,blue]]), or[size1,or[triangle,apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:or[%s,%s];4:size1;4:blue;4:or[%s,%s];4:size1;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(not[nand[size2,size2]],x.s)'	0:forall(%s,%s);4:not[%s];4:nand[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.apply(and[size1,or[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(not[and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[rectangle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:blue
'λx.apply(implies[or[or[size3,and[size2,blue]],size3],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:blue;4:size3;4:circle;1:%s.o;2:x
'λx.apply(not[and[yellow,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[or[size3,rectangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, apply(same_shape,x.o)), not[and[nor[nand[yellow,green],apply(same_size,x.o)],yellow]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:nand[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[and[triangle,yellow],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.exists(not[rectangle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, and[apply(same_shape,x.o),nor[size1,apply(same_color,x.o)]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), size3), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[apply(same_shape,x.o),and[blue,size2]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size2
'λx.apply(implies[and[green,rectangle],apply(same_shape,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(or[and[green,apply(same_shape,x.o)],size2], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.forall(yellow,filter(filter(x.s, blue), or[apply(same_color,x.o),and[or[rectangle,rectangle],not[apply(same_shape,x.o)]]]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[and[size2,and[circle,green]]],or[size3,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:circle;4:green;4:or[%s,%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[triangle,blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(not[rectangle], filter(x.s, size3))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(not[rectangle], filter(x.s, size2))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[not[size3],and[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.forall(or[blue,and[size1,green]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(not[blue], filter(filter(x.s, apply(same_color,x.o)), nor[nor[size1,apply(same_shape,x.o)],circle]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(and[and[apply(size-gt,iota(filter(filter(x.s, blue), rectangle))),rectangle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nor[apply(same_size,x.o),yellow]), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:not[%s];4:size2
'λx.apply(or[rectangle,and[size3,and[size3,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, and[or[triangle,blue],not[triangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:not[%s];4:triangle
'λx.apply(not[rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[apply(same_shape,x.o),rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(and[size3,yellow], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:yellow;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(implies[not[and[blue,rectangle]],and[blue,size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), or[iff[or[apply(same_color,x.o),triangle],size3],triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size3;4:triangle
'λx.apply(or[size1,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.forall(nand[apply(same_shape,x.o),not[apply(same_color,x.o)]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, and[apply(same_color,x.o),triangle]), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:blue
'λx.empty(filter(filter(filter(x.s, not[rectangle]), not[apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(not[and[implies[size3,green],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:size3;4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[yellow,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[yellow,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[yellow,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, iff[not[apply(size-gt,x.o)],apply(size-lt,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.apply(or[rectangle,and[triangle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(or[rectangle,and[iff[size1,or[size1,size1]],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:size1;4:or[%s,%s];4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.apply(not[and[triangle,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[nand[circle,blue],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size3,or[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[circle,nand[size2,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(and[or[size1,circle],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:circle;4:rectangle;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, and[apply(same_color,x.o),triangle]), blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:blue
'λx.apply(apply(same_color,iota(filter(filter(x.s, size1), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[and[rectangle,apply(same_color,x.o)],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(and[apply(same_size,x.o),circle], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(or[yellow,size2], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size2;3:%s.s;2:x
'λx.apply(not[and[or[not[circle],yellow],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(implies[or[size1,blue],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[size3,and[size3,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(not[size1],iota(filter(x.s, and[blue,yellow])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, blue), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(or[implies[circle,size2],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:size2;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nand[circle,circle]), nor[blue,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:circle;4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), and[yellow,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[blue,nand[circle,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[circle,and[nand[and[size3,green],yellow],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size3;4:green;4:yellow;4:blue;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, apply(size-geq,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(implies[yellow,rectangle],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[blue,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.empty(filter(filter(x.s, not[blue]), and[or[yellow,triangle],apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:yellow;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[triangle,or[rectangle,and[blue,circle]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, not[circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(yellow,iota(filter(x.s, and[yellow,triangle])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(and[or[size3,green],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:green;4:blue;1:%s.o;2:x
'λx.apply(nand[and[not[not[rectangle]],circle],not[or[and[triangle,nand[circle,and[rectangle,and[apply(same_shape,iota(filter(filter(x.s, not[and[apply(same_color,x.o),apply(same_size,x.o)]]), blue))),rectangle]]]],size1]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:circle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle;4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[and[nor[size3,rectangle],circle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:rectangle;4:circle;3:%s.s;2:x
'λx.exists(and[circle,apply(same_size,x.o)], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[and[triangle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(or[and[or[size3,blue],size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:size3;4:size2;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_shape,x.o),circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(not[yellow], filter(filter(x.s, apply(same_size,x.o)), not[and[apply(same_color,x.o),not[size1]]]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size1
'λx.contains(x.o, filter(x.s, or[blue,green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green
'λx.contains(x.o, filter(x.s, or[blue,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size3
'λx.contains(x.o, filter(x.s, or[blue,size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[not[implies[blue,yellow]],iff[rectangle,triangle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:blue;4:yellow;4:iff[%s,%s];4:rectangle;4:triangle
'λx.forall(triangle,filter(filter(x.s, blue), blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(or[not[and[triangle,triangle]],triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[triangle,not[green]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(not[and[rectangle,size2]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[not[size2],blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(triangle,iota(filter(x.s, and[blue,iff[size1,green]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:iff[%s,%s];4:size1;4:green
'λx.apply(implies[blue,or[size1,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, circle), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(and[size3,or[size3,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,nand[size1,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), and[apply(same_shape,x.o),not[blue]]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue;4:triangle
'λx.apply(not[nor[and[size1,size1],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:size1;4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(size-lt,x.o),size2]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2
'λx.apply(and[green,size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, green), green), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green;4:not[%s];4:rectangle
'λx.contains(x.o, filter(x.s, apply(same_size,iota(filter(x.s, circle)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[not[blue],size1],apply(size-leq,iota(filter(x.s, nor[or[not[blue],and[blue,apply(same_color,x.o)]],yellow])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:size1;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, blue), blue), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:size3
'λx.empty(filter(x.s, and[not[blue],circle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:circle
'λx.apply(not[nor[rectangle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(not[and[blue,or[triangle,rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(or[triangle,yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:yellow;3:%s.s;2:x
'λx.forall(or[nand[nor[and[apply(same_color,x.o),not[size2]],not[apply(same_shape,x.o)]],yellow],green],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:green;3:%s.s;2:x
'λx.empty(filter(x.s, blue))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[nor[triangle,or[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, yellow), apply(size-leq,x.o)), triangle), implies[or[not[or[triangle,not[apply(same_color,iota(filter(x.s, blue)))]]],circle],size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size2
'λx.apply(and[size3,implies[size2,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:implies[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[blue,and[apply(same_color,x.o),yellow]]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:rectangle
'λx.exists(not[apply(same_size,x.o)], filter(x.s, and[apply(same_shape,x.o),rectangle]))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[size1,and[circle,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.contains(iota(filter(x.s, green)), filter(x.s, green))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), or[size1,triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:triangle
'λx.exists(and[nor[or[and[green,and[apply(same_size,x.o),nor[size1,apply(same_shape,x.o)]]],not[apply(same_size,x.o)]],blue],not[circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:not[%s];4:circle;3:%s.s;2:x
'λx.exists(and[and[not[apply(same_color,x.o)],or[blue,green]],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, apply(size-leq,x.o)), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1
'λx.apply(or[and[blue,blue],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(nand[blue,apply(same_color,x.o)],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.empty(filter(x.s, and[not[size2],or[blue,triangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:blue;4:triangle
'λx.apply(circle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[green,apply(same_size,x.o)],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(implies[or[or[green,blue],triangle],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(size-gt,x.o),and[apply(same_shape,x.o),apply(same_shape,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(size-leq,x.o)), yellow), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[apply(size-geq,x.o),size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1
'λx.apply(or[triangle,implies[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(not[and[circle,or[yellow,and[green,circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(x.s, or[blue,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(not[size3],filter(filter(x.s, blue), rectangle))'	0:forall(%s,%s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.forall(not[size1],filter(filter(x.s, blue), rectangle))'	0:forall(%s,%s);4:not[%s];4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.apply(or[or[circle,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), iff[rectangle,circle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:rectangle;4:circle
'λx.apply(nor[and[blue,triangle],size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[yellow,implies[circle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), and[apply(same_color,x.o),triangle]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:green
'λx.apply(or[iff[green,yellow],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:green;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(and[not[and[circle,not[blue]]],nor[and[rectangle,triangle],and[size1,size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, green), rectangle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle;4:green
'λx.apply(not[and[or[circle,blue],or[green,apply(same_shape,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[and[circle,not[blue]]],nor[and[rectangle,triangle],and[size1,size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, size2), yellow), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:rectangle
'λx.apply(apply(same_color,iota(filter(x.s, and[apply(same_shape,x.o),not[rectangle]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(nor[triangle,and[circle,apply(same_shape,x.o)]],filter(x.s, circle))'	0:forall(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[iff[rectangle,implies[yellow,rectangle]],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:implies[%s,%s];4:yellow;4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[circle,and[blue,apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, size2), size2), rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:rectangle
'λx.forall(size2,filter(filter(x.s, triangle), yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[size1,or[size1,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[or[blue,green],and[nand[rectangle,or[triangle,size3]],yellow]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:green;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,not[apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[apply(size-gt,iota(filter(x.s, size3))),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[and[rectangle,green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(nor[not[and[circle,circle]],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[or[and[size2,yellow],and[size3,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, nor[apply(same_shape,x.o),size2]), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:size3
'λx.exists(apply(same_color,x.o), filter(x.s, triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(yellow,filter(filter(filter(x.s, green), apply(same_shape,x.o)), size2))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(green,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[rectangle,size3],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(implies[apply(same_color,x.o),not[blue]],filter(filter(x.s, apply(same_shape,x.o)), not[circle]))'	0:forall(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle
'λx.forall(apply(size-lt,x.o),filter(x.s, size3))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(not[green],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[apply(same_size,x.o),nand[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, and[rectangle,apply(same_shape,x.o)]), yellow)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(nor[circle,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[green,apply(same_color,iota(filter(x.s, blue)))]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[size3,yellow],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[circle]), not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:not[%s];4:blue
'λx.apply(or[rectangle,nand[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, circle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[nand[blue,apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,and[not[not[blue]],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[size1,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:size2
'λx.contains(x.o, filter(x.s, implies[size1,size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:size3
'λx.contains(x.o, filter(x.s, or[not[nand[or[triangle,triangle],blue]],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:blue;4:circle
'λx.apply(and[apply(size-leq,x.o),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), not[yellow]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.empty(filter(x.s, or[blue,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(size3,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size2,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, size1), or[rectangle,not[triangle]]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:rectangle;4:not[%s];4:triangle;4:yellow
'λx.apply(implies[rectangle,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[triangle,or[or[size2,yellow],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), or[green,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:green;4:triangle
'λx.empty(filter(filter(x.s, nor[apply(same_color,x.o),apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, and[triangle,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.apply(not[size1],iota(filter(x.s, or[triangle,circle])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:circle
'λx.contains(iota(filter(x.s, green)), filter(x.s, triangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[triangle,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(or[circle,apply(same_size,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[and[circle,not[size1]],and[circle,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:size1;4:and[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(nor[and[not[triangle],blue],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[nor[circle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size1), apply(size-gt,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, not[circle]), blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:blue;4:blue
'λx.forall(circle,filter(filter(filter(filter(x.s, yellow), nor[and[blue,apply(same_color,iota(filter(filter(x.s, blue), blue)))],rectangle]), size1), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:rectangle;4:size1;4:size3
'λx.exists(rectangle, filter(filter(x.s, rectangle), apply(size-geq,x.o)))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, not[apply(same_color,x.o)]), blue)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(implies[not[circle],and[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[not[blue],or[triangle,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(not[not[nand[circle,implies[blue,triangle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:nand[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, blue), circle), apply(size-gt,iota(filter(x.s, yellow))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;3:%s.s;2:x
'λx.apply(not[iff[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[blue,triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(or[not[size2],apply(same_shape,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), size3), size3)))],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[and[blue,blue],apply(same_shape,iota(filter(x.s, and[blue,blue])))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(apply(same_color,iota(filter(x.s, blue))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(or[or[size1,triangle],and[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[circle,not[or[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[implies[triangle,size1],nor[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:triangle;4:size1;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[apply(same_size,iota(filter(x.s, triangle)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(or[and[triangle,not[circle]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(and[not[rectangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(nor[blue,or[and[size2,not[yellow]],triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[not[apply(size-gt,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[or[nor[size2,yellow],triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:size2;4:yellow;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[blue,triangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[not[blue],and[circle,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(nand[size2,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, or[and[size2,not[triangle]],size3]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:triangle;4:size3
'λx.apply(or[circle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, blue), blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[triangle]), and[yellow,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:and[%s,%s];4:yellow;4:size1
'λx.apply(implies[green,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[not[triangle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[implies[or[circle,or[triangle,size3]],blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:triangle;4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[iff[blue,triangle],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, iff[triangle,size1]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:triangle;4:size1;4:circle
'λx.apply(or[yellow,not[and[blue,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, not[circle]), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(or[and[circle,blue],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.exists(size2, filter(x.s, nand[blue,rectangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:rectangle
'λx.exists(and[blue,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.exists(implies[yellow,size3], filter(filter(x.s, apply(same_size,x.o)), or[or[size3,size3],blue]))'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:size3;4:size3;4:blue
'λx.apply(nand[not[blue],not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(green,filter(x.s, blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, size1), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size3), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size2), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[size1,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.exists(apply(same_size,iota(filter(x.s, and[blue,apply(same_shape,x.o)]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size1), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[apply(size-lt,iota(filter(x.s, size1))),blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;1:%s.o;2:x
'λx.apply(nor[triangle,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(not[yellow], filter(filter(x.s, or[blue,green]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[blue,triangle],iota(filter(filter(x.s, size3), not[circle])))'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:circle
'λx.exists(blue, filter(x.s, apply(size-gt,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(rectangle,x.o)'	0:apply(%s,%s);4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[circle,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(and[apply(same_color,x.o),implies[green,size3]], filter(x.s, nor[yellow,and[apply(same_shape,x.o),rectangle]]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.empty(filter(x.s, and[green,not[apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, blue), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.contains(x.o, filter(filter(x.s, blue), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.contains(x.o, filter(filter(x.s, blue), size3))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.contains(x.o, filter(filter(x.s, triangle), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(and[implies[apply(same_shape,iota(filter(x.s, size3))),blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(x.s, apply(same_color,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.forall(circle,filter(filter(filter(filter(x.s, apply(same_size,x.o)), not[size1]), apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(blue,iota(filter(filter(filter(x.s, not[and[size2,blue]]), and[blue,blue]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:size2;4:blue;4:and[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,and[circle,iff[triangle,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:iff[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), yellow), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:yellow
'λx.exists(triangle, filter(filter(x.s, not[apply(same_size,x.o)]), not[rectangle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.forall(size1,filter(filter(x.s, nor[or[apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), size3))),nand[blue,triangle]],circle]), triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:nand[%s,%s];4:blue;4:triangle;4:circle;4:triangle
'λx.apply(and[triangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(nor[and[triangle,size2],not[apply(same_color,x.o)]], filter(x.s, not[apply(same_shape,x.o)]))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[and[green,size2]], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:green;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nor[and[triangle,size3],and[size2,rectangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(not[and[size1,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[and[blue,circle],or[rectangle,not[or[circle,blue]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:or[%s,%s];4:rectangle;4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[or[and[triangle,size2],and[size1,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(or[implies[nor[size3,size3],blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:nor[%s,%s];4:size3;4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[or[and[circle,size1],green],and[apply(same_shape,x.o),rectangle]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:circle;4:size1;4:green;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.exists(triangle, filter(x.s, nand[green,size1]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:size1
'λx.contains(iota(filter(x.s, apply(size-geq,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(or[yellow,or[rectangle,nor[apply(same_color,x.o),rectangle]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[circle],iota(filter(x.s, nand[blue,apply(same_color,x.o)])))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, apply(size-leq,x.o)), triangle), and[green,size3])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:green;4:size3
'λx.exists(or[apply(same_shape,x.o),yellow], filter(x.s, nor[apply(same_size,x.o),and[green,blue]]))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:green;4:blue
'λx.apply(implies[not[or[blue,circle]],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[size1,or[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), and[blue,nand[circle,circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:circle
'λx.exists(size2, filter(x.s, not[yellow]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.forall(or[circle,blue],filter(filter(x.s, apply(same_shape,x.o)), or[apply(same_color,x.o),blue]))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(or[blue,and[nand[implies[green,green],triangle],apply(size-leq,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:nand[%s,%s];4:implies[%s,%s];4:green;4:green;4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size3,or[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[blue,green],iota(filter(filter(x.s, size3), apply(same_size,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(implies[or[triangle,triangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[and[yellow,size2],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:size3;1:%s.o;2:x
'λx.apply(iff[blue,and[blue,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(or[and[apply(same_shape,iota(filter(x.s, yellow))),size3],size1],filter(filter(x.s, green), rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.forall(or[apply(same_size,x.o),green],filter(filter(filter(x.s, not[size1]), apply(same_color,iota(x.s))), not[blue]))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[blue,or[blue,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(nand[and[triangle,or[and[size2,green],size1]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, apply(same_size,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[and[blue,nor[yellow,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, apply(same_color,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(x.o, filter(x.s, and[size2,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:circle
'λx.apply(iff[size1,and[yellow,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.exists(green, filter(x.s, size1))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(green, filter(x.s, size3))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(green, filter(x.s, size2))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(iff[size3,and[yellow,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(implies[and[rectangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.forall(not[circle],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, or[and[apply(same_color,x.o),green],blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:blue
'λx.apply(or[rectangle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(not[and[blue,not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[size3,apply(same_size,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[or[blue,or[not[size1],size3]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size1;4:size3;4:circle;1:%s.o;2:x
'λx.exists(size1, filter(x.s, green))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size3, filter(x.s, green))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size2, filter(x.s, green))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(size1, filter(x.s, size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(size3, filter(x.s, size3))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(size2, filter(x.s, size2))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(filter(x.s, or[green,or[circle,yellow]]), apply(same_size,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, rectangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(filter(filter(x.s, rectangle), blue), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.empty(filter(filter(x.s, and[rectangle,apply(same_color,x.o)]), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue
'λx.contains(iota(filter(x.s, apply(same_color,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[blue,or[and[not[rectangle],green],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:rectangle;4:green;4:circle;1:%s.o;2:x
'λx.exists(not[green], filter(x.s, rectangle))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[circle,apply(same_shape,x.o)],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.empty(filter(filter(filter(filter(x.s, yellow), size1), apply(same_size,x.o)), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(or[and[or[size3,size2],size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size3;4:size2;4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[or[circle,and[triangle,size2]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:size2;4:size1;1:%s.o;2:x
'λx.apply(nand[blue,and[circle,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.contains(iota(filter(x.s, or[size1,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.apply(or[size1,or[yellow,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[circle,or[green,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, yellow))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(and[blue,not[apply(size-lt,x.o)]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(or[rectangle,apply(size-gt,x.o)], filter(filter(x.s, apply(same_color,x.o)), size1))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, size3), rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle;4:blue
'λx.forall(size3,filter(x.s, and[apply(same_shape,x.o),apply(size-gt,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(same_color,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[size3,and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[size3,and[or[size1,green],triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle;3:%s.s;2:x
'λx.apply(and[not[yellow],not[and[green,size1]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:not[%s];4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(implies[size3,or[blue,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[size1]), not[size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:not[%s];4:size1
'λx.apply(or[apply(same_color,iota(filter(filter(filter(filter(x.s, blue), size1), not[green]), or[size1,yellow]))),and[size1,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:not[%s];4:green;4:or[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, blue), circle), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:circle
'λx.apply(and[blue,blue],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, rectangle), not[size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size3
'λx.contains(x.o, filter(filter(x.s, size1), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle
'λx.forall(and[or[apply(same_size,x.o),triangle],apply(same_color,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[rectangle],filter(x.s, size1))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(not[rectangle],filter(x.s, size3))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nor[and[yellow,circle],and[green,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[circle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[circle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(x.s, apply(same_color,x.o)), not[size2]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,iff[green,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.exists(or[yellow,apply(same_shape,x.o)], filter(filter(x.s, nand[apply(same_size,x.o),apply(same_color,x.o)]), not[yellow]))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.exists(not[or[size2,and[green,apply(same_color,iota(filter(x.s, blue)))]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(or[size3,size2],iota(filter(filter(filter(x.s, yellow), size3), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size3
'λx.apply(and[circle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(nor[and[not[circle],blue],and[blue,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.exists(nand[not[apply(size-lt,x.o)],nand[yellow,size1]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:size1;3:%s.s;2:x
'λx.exists(not[apply(same_shape,x.o)], filter(x.s, apply(size-leq,x.o)))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[circle,yellow],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, or[apply(same_color,x.o),size1]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, blue), or[size2,triangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size2;4:triangle
'λx.apply(or[not[not[circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,nand[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, not[yellow]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size3, filter(x.s, triangle))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(x.s, not[size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;3:%s.s;2:x
'λx.exists(green, filter(x.s, triangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[circle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,and[or[yellow,rectangle],size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(or[blue,circle], filter(x.s, size2))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(or[size3,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), apply(same_shape,x.o)), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[or[rectangle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(size1,iota(filter(filter(filter(x.s, size1), apply(same_shape,x.o)), or[size3,blue])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size3;4:blue
'λx.exists(or[or[nand[yellow,apply(same_color,iota(filter(x.s, blue)))],circle],size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3;3:%s.s;2:x
'λx.apply(size2,iota(filter(x.s, not[circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(blue,iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.forall(blue,filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(blue,filter(filter(filter(x.s, triangle), apply(same_color,x.o)), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[blue,circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.empty(filter(x.s, or[yellow,triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.empty(filter(filter(x.s, apply(size-lt,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), and[apply(same_color,x.o),circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(triangle,filter(filter(filter(x.s, size3), yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[and[apply(size-lt,x.o),yellow],triangle], filter(x.s, yellow))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(apply(same_shape,x.o),filter(x.s, apply(size-geq,iota(filter(filter(x.s, green), apply(same_shape,x.o))))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[apply(size-lt,x.o),not[or[rectangle,blue]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[circle,and[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nand[yellow,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[or[blue,size1],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), iff[circle,and[not[size1],apply(size-lt,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[or[size3,nor[triangle,not[apply(same_color,x.o)]]]],iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:nor[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.contains(x.o, filter(x.s, nand[yellow,yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:yellow
'λx.apply(implies[or[triangle,triangle],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:size3;1:%s.o;2:x
'λx.exists(green, filter(x.s, or[and[circle,size2],size1]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:size2;4:size1
'λx.contains(iota(filter(x.s, circle)), filter(filter(x.s, not[apply(same_shape,x.o)]), circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, triangle), green), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size2
'λx.apply(or[circle,apply(same_color,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[nand[apply(same_shape,x.o),not[apply(same_size,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[green,or[size3,not[circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[size2,triangle]],iota(filter(x.s, or[not[triangle],rectangle])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:triangle;4:rectangle
'λx.apply(and[not[blue],nand[not[triangle],circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:nand[%s,%s];4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nand[circle,yellow]), nor[blue,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:yellow;4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[implies[apply(same_size,x.o),blue],green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:nor[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(or[apply(same_size,x.o),or[and[blue,circle],yellow]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:yellow;3:%s.s;2:x
'λx.apply(implies[rectangle,rectangle],iota(filter(x.s, or[apply(same_shape,x.o),apply(same_shape,x.o)])))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[rectangle,nand[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[or[size1,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[yellow,size2]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:size2
'λx.contains(x.o, filter(x.s, or[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue
'λx.exists(or[rectangle,size2], filter(x.s, and[apply(same_color,x.o),rectangle]))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.contains(x.o, filter(filter(x.s, circle), green))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.contains(x.o, filter(filter(x.s, circle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.contains(x.o, filter(filter(x.s, circle), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), and[not[size2],or[nor[circle,circle],yellow]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:yellow
'λx.exists(blue, filter(x.s, apply(same_size,iota(x.s))))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[triangle,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, implies[yellow,green]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:green
'λx.apply(apply(same_size,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size1,implies[and[blue,not[size1]],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, circle), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;3:%s.s;2:x
'λx.exists(or[size2,apply(size-gt,iota(filter(filter(x.s, yellow), size3)))], filter(x.s, triangle))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(iff[yellow,nor[yellow,apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:yellow;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(not[iff[and[size3,green],and[blue,or[apply(same_shape,x.o),yellow]]]], x.s)'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:size3;4:green;4:and[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(or[triangle,implies[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[triangle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, not[green]), size2), or[size3,size2]), implies[yellow,apply(same_color,x.o)])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2;4:or[%s,%s];4:size3;4:size2;4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_color,iota(filter(filter(x.s, not[and[rectangle,green]]), or[blue,circle])))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:green;4:or[%s,%s];4:blue;4:circle
'λx.apply(rectangle,iota(filter(x.s, and[green,not[size2]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:size2
'λx.empty(filter(x.s, nor[apply(same_size,x.o),triangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(iff[triangle,and[and[blue,triangle],triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), size1), apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[circle,implies[blue,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:rectangle
'λx.apply(apply(same_shape,iota(filter(x.s, apply(same_size,x.o)))),iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(iff[nand[size2,circle],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:size2;4:circle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, blue)))), not[rectangle]), not[apply(same_color,x.o)]), green), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:green
'λx.forall(blue,filter(filter(filter(x.s, size1), circle), implies[size1,apply(same_size,x.o)]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:circle;4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[or[blue,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, not[implies[blue,apply(same_shape,x.o)]]), size1)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.exists(circle, filter(filter(filter(x.s, apply(same_color,x.o)), blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[apply(same_size,x.o),not[and[green,size1]]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:green;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[implies[and[not[apply(same_color,x.o)],circle],yellow]],iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.apply(size2,iota(filter(filter(x.s, nor[size3,apply(same_color,x.o)]), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(or[yellow,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[and[yellow,circle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:size3;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, or[yellow,and[size2,rectangle]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:rectangle
'λx.empty(filter(filter(x.s, and[size3,apply(same_shape,x.o)]), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[and[not[circle],blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[nand[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, not[blue]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle
'λx.apply(or[and[rectangle,apply(same_size,x.o)],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[and[and[circle,size2],size3],apply(same_shape,x.o)])), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[triangle,not[blue]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(not[circle], filter(filter(x.s, green), apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(and[blue,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), implies[triangle,not[yellow]]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:implies[%s,%s];4:triangle;4:not[%s];4:yellow;4:size1
'λx.apply(blue,iota(filter(filter(x.s, apply(size-gt,x.o)), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue
'λx.apply(and[triangle,green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(or[and[blue,not[rectangle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[and[blue,or[size2,size1]],triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:size1;4:triangle
'λx.apply(apply(same_shape,iota(filter(x.s, and[apply(same_shape,x.o),not[rectangle]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, size2), apply(same_shape,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[apply(same_color,x.o)],filter(filter(x.s, green), triangle))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(or[size3,apply(size-leq,x.o)],iota(filter(filter(x.s, size2), rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:rectangle
'λx.apply(and[or[size1,size2],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, circle), and[yellow,apply(same_color,x.o)]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, not[blue]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(not[blue],filter(filter(x.s, apply(same_shape,x.o)), and[apply(same_color,x.o),nand[circle,blue]]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:blue
'λx.apply(blue,iota(filter(x.s, or[size3,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:blue
'λx.exists(or[rectangle,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:triangle;3:%s.s;2:x
'λx.apply(not[or[apply(size-lt,x.o),and[not[circle],not[blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(or[blue,yellow], filter(x.s, iff[and[size1,circle],size3]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:size1;4:circle;4:size3
'λx.apply(and[or[triangle,size2],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:green;1:%s.o;2:x
'λx.apply(not[apply(same_color,iota(filter(x.s, blue)))],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(nor[yellow,not[blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[and[circle,not[blue]],and[blue,and[rectangle,not[green]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, apply(same_shape,x.o)), not[and[rectangle,circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:circle
'λx.forall(green,filter(x.s, and[apply(same_color,x.o),rectangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[size1,and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[green,or[size3,apply(same_color,x.o)]]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(implies[rectangle,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(implies[rectangle,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(and[size1,or[blue,and[green,yellow]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, nand[blue,apply(same_shape,x.o)]), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle
'λx.apply(iff[not[or[size3,circle]],and[size1,rectangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:circle;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(iff[triangle,rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(not[apply(same_shape,x.o)],filter(filter(x.s, not[blue]), or[and[size3,circle],not[apply(same_color,x.o)]]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:size3;4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, iff[size3,green]), not[apply(same_shape,x.o)]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(not[and[and[apply(same_shape,x.o),not[circle]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, or[apply(size-geq,x.o),size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, or[not[not[blue]],and[apply(same_color,x.o),yellow]]), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:rectangle
'λx.apply(or[and[triangle,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[or[rectangle,blue],not[and[not[blue],circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[nand[green,blue],or[size1,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:blue;4:or[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[or[blue,size3],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:circle;1:%s.o;2:x
'λx.apply(iff[apply(same_size,x.o),green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(apply(same_size,x.o),filter(x.s, or[rectangle,size2]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2
'λx.exists(apply(same_shape,x.o), filter(x.s, green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(apply(same_shape,x.o), filter(x.s, size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(apply(same_shape,x.o), filter(x.s, size2))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(apply(same_shape,x.o), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(green,iota(filter(filter(x.s, size2), apply(same_shape,x.o))))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, apply(same_size,x.o)), nor[size1,size3]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:size3
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(not[and[triangle,nand[triangle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:nand[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(implies[circle,not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[blue,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, not[blue]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size2
'λx.forall(green,filter(filter(x.s, rectangle), and[rectangle,apply(size-geq,iota(filter(x.s, triangle)))]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[circle,nor[size2,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, circle))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[or[not[circle],blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:blue;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[green,or[circle,yellow]]), apply(same_color,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[apply(size-lt,iota(filter(x.s, blue))),and[circle,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, not[yellow]), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[implies[size1,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size1;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nand[yellow,and[size1,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.forall(or[blue,and[size1,circle]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[rectangle,triangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, blue), size1), apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(filter(x.s, circle), rectangle), size2), or[and[green,apply(size-lt,iota(filter(x.s, apply(same_shape,x.o))))],rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:size2;4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(or[and[nor[yellow,yellow],or[blue,triangle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:yellow;4:yellow;4:or[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(implies[or[yellow,green],not[rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[size2,yellow],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[yellow,nor[green,size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:nor[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(iff[nor[yellow,not[and[size1,blue]]],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size1;4:blue;4:blue;1:%s.o;2:x
'λx.exists(implies[yellow,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[nor[not[triangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, size3), or[size2,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[size3,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(and[not[not[apply(same_color,iota(filter(filter(x.s, size3), yellow)))]],nor[circle,green]],iota(filter(filter(x.s, triangle), yellow)))'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:nor[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:yellow
'λx.empty(filter(filter(x.s, iff[apply(same_size,x.o),triangle]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:yellow
'λx.apply(nor[and[yellow,apply(same_shape,iota(filter(x.s, size2)))],size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;1:%s.o;2:x
'λx.apply(or[yellow,or[green,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(implies[rectangle,green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(implies[not[rectangle],apply(same_shape,x.o)], filter(x.s, not[rectangle]))'	0:exists(%s, %s);4:implies[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.exists(and[and[or[and[nor[green,apply(same_size,x.o)],blue],yellow],apply(same_shape,x.o)],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(size1,iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(iff[yellow,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[or[size2,not[yellow]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(implies[blue,and[size1,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[blue,and[and[circle,apply(same_color,x.o)],not[rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(not[not[apply(same_color,x.o)]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[blue,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(not[or[and[yellow,apply(same_shape,x.o)],green]],x.s)'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.apply(implies[or[size2,size3],not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size2;4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[rectangle,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),yellow],iota(filter(filter(x.s, rectangle), implies[green,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:green;4:circle
'λx.apply(triangle,iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.apply(or[blue,or[rectangle,not[size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.forall(iff[yellow,and[yellow,size1]],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:iff[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[implies[not[circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, and[apply(same_shape,x.o),size3]), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle
'λx.apply(apply(same_size,iota(filter(x.s, not[apply(same_shape,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[size3,triangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, circle), yellow))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(and[not[circle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(implies[size2,apply(same_size,x.o)],iota(filter(x.s, or[rectangle,circle])))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(or[or[blue,not[circle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(nor[blue,and[circle,or[apply(same_size,x.o),size2]]],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:nor[%s,%s];4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[size2,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.forall(and[nand[and[green,circle],size1],apply(size-geq,x.o)],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:green;4:circle;4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, or[blue,or[size3,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:blue
'λx.apply(nor[size3,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(iff[triangle,size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(iff[triangle,size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(iff[triangle,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[triangle,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.contains(iota(filter(filter(x.s, nand[size2,blue]), or[size3,apply(same_size,x.o)])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:blue;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(green, filter(x.s, or[circle,rectangle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle
'λx.apply(implies[yellow,nor[circle,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[nor[nand[blue,not[green]],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:green;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[blue,size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3
'λx.empty(filter(filter(x.s, rectangle), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(and[apply(same_color,x.o),apply(same_shape,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[or[rectangle,triangle],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:size3;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, circle), blue), apply(same_size,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(and[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, nor[rectangle,rectangle]), blue), apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:rectangle;4:rectangle;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(not[and[apply(same_shape,iota(filter(x.s, and[apply(same_color,x.o),blue]))),green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:green;1:%s.o;2:x
'λx.exists(nand[yellow,blue], filter(filter(filter(x.s, implies[apply(same_shape,x.o),and[blue,size1]]), apply(same_size,x.o)), apply(same_size,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[size3,or[size2,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, apply(same_size,x.o)), or[rectangle,blue]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:blue
'λx.apply(and[green,iff[green,or[rectangle,triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:iff[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(or[or[circle,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:triangle;1:%s.o;2:x
'λx.exists(or[circle,nor[yellow,size2]], filter(x.s, or[and[size1,and[yellow,apply(same_color,x.o)]],triangle]))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:yellow;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.apply(apply(size-lt,iota(filter(x.s, green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(x.s, or[yellow,and[size2,rectangle]])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:size2;4:rectangle
'λx.apply(or[apply(same_size,iota(filter(x.s, rectangle))),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[apply(size-gt,iota(filter(filter(x.s, blue), circle))),green]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:green
'λx.apply(and[and[circle,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.exists(not[and[apply(same_color,x.o),apply(same_color,x.o)]], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(or[size2,and[size1,green]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:and[%s,%s];4:size1;4:green;3:%s.s;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, or[size1,apply(same_size,x.o)]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size1,filter(x.s, and[rectangle,or[size1,apply(same_shape,x.o)]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[not[circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[and[rectangle,rectangle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle
'λx.apply(or[triangle,not[and[circle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), or[apply(size-lt,x.o),or[size1,size1]]), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:or[%s,%s];4:size1;4:size1;4:green
'λx.apply(and[implies[triangle,blue],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(size3, filter(x.s, and[not[rectangle],apply(size-geq,x.o)]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(and[size1,and[or[blue,and[rectangle,implies[size1,apply(same_shape,x.o)]]],size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.exists(and[apply(size-leq,x.o),green], filter(x.s, not[triangle]))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.empty(filter(filter(filter(filter(filter(x.s, apply(same_color,x.o)), not[blue]), not[rectangle]), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:blue;4:not[%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(circle,filter(filter(x.s, yellow), yellow))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.empty(filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(size3, filter(x.s, or[apply(same_color,x.o),yellow]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(not[not[or[circle,or[size3,and[rectangle,size2]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(not[and[not[size3],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(not[apply(size-lt,x.o)],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, not[and[rectangle,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:rectangle
'λx.exists(or[or[nand[size3,apply(same_color,iota(filter(x.s, blue)))],circle],size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:nand[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3;3:%s.s;2:x
'λx.apply(implies[nor[green,circle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:green;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(not[and[circle,iff[size2,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:iff[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(nand[and[blue,size3],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:size3;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(x.s, nor[apply(same_size,x.o),circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(nor[and[green,rectangle],or[yellow,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:or[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, apply(size-lt,x.o)), not[apply(same_shape,x.o)]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[apply(size-geq,x.o),not[nor[size1,or[nor[size1,apply(same_shape,x.o)],size1]]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:nor[%s,%s];4:size1;4:or[%s,%s];4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(nor[triangle,size2],iota(filter(filter(x.s, apply(same_size,x.o)), yellow)))'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(or[green,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.exists(triangle, filter(filter(filter(x.s, apply(same_shape,x.o)), and[iff[size3,rectangle],blue]), triangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:rectangle;4:blue;4:triangle
'λx.apply(not[or[size1,apply(same_color,iota(filter(x.s, blue)))]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[not[triangle],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(and[not[triangle],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:size3;1:%s.o;2:x
'λx.exists(not[and[size2,green]], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[implies[circle,size2],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:size2;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), and[blue,yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:blue;4:yellow
'λx.forall(or[not[circle],or[size3,apply(same_shape,x.o)]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, size1), nor[blue,triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:nor[%s,%s];4:blue;4:triangle
'λx.empty(filter(x.s, and[apply(same_shape,x.o),iff[green,circle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:green;4:circle
'λx.apply(nor[blue,or[triangle,size3]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), and[apply(same_size,x.o),size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(green,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[or[rectangle,triangle],or[or[green,yellow],yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:yellow;1:%s.o;2:x
'λx.exists(not[green], filter(x.s, not[iff[triangle,size2]]))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:triangle;4:size2
'λx.forall(apply(size-geq,iota(filter(x.s, blue))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, implies[size1,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:blue
'λx.exists(and[yellow,triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(not[apply(same_color,iota(filter(x.s, and[blue,blue])))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[not[circle],or[circle,not[blue]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(blue,filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[size3,blue],iota(filter(x.s, not[size3])))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.exists(size1, filter(x.s, and[apply(same_shape,x.o),blue]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[blue,not[and[not[blue],triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[green,nor[iff[triangle,green],size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:nor[%s,%s];4:iff[%s,%s];4:triangle;4:green;4:size3;3:%s.s;2:x
'λx.exists(and[circle,apply(same_size,x.o)], filter(x.s, circle))'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[apply(size-geq,iota(filter(x.s, blue))),or[apply(same_shape,x.o),circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(size3, filter(x.s, not[not[or[yellow,apply(same_color,x.o)]]]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),nand[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(filter(x.s, triangle), triangle), apply(same_color,x.o)), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, and[not[size2],or[or[blue,blue],triangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:triangle
'λx.apply(or[size1,not[or[circle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(triangle,filter(filter(filter(x.s, apply(size-leq,x.o)), yellow), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow;4:circle
'λx.contains(iota(filter(filter(x.s, not[size2]), circle)), filter(x.s, not[apply(same_size,x.o)]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[apply(same_size,x.o),circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(and[not[and[blue,triangle]],apply(same_shape,x.o)], filter(x.s, iff[blue,circle]))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:circle
'λx.apply(and[or[triangle,green],green],iota(filter(filter(x.s, and[size1,apply(same_shape,x.o)]), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, or[blue,and[blue,green]])))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:green
'λx.apply(or[apply(same_size,x.o),yellow],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.empty(filter(filter(x.s, triangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.empty(filter(filter(x.s, triangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.empty(filter(filter(x.s, triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(nand[yellow,size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(blue, filter(x.s, and[apply(same_shape,x.o),apply(same_shape,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, nor[blue,rectangle]), and[apply(same_color,x.o),apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[size3,size3],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size3;4:circle;1:%s.o;2:x
'λx.apply(not[and[blue,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[size1,and[apply(same_size,x.o),not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(not[green],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:%s.s;2:x
'λx.exists(and[not[blue],not[and[circle,size3]]], filter(x.s, size3))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[circle,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.forall(apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[size3,iff[size3,green]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:iff[%s,%s];4:size3;4:green
'λx.forall(or[apply(size-lt,x.o),apply(same_color,x.o)],filter(x.s, or[apply(same_color,x.o),apply(same_shape,x.o)]))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[yellow,rectangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(nand[circle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(circle, filter(x.s, or[size2,apply(same_shape,iota(filter(x.s, size3)))]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[yellow],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[triangle,rectangle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[triangle,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[size2,circle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[or[size2,circle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:circle;4:green;1:%s.o;2:x
'λx.apply(nand[circle,nor[blue,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, green))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.exists(triangle, filter(x.s, size3))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(triangle, filter(x.s, size2))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(triangle, filter(x.s, size1))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(circle, filter(filter(x.s, apply(same_size,x.o)), blue))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(nor[nor[triangle,blue],size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[circle,not[and[circle,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(iff[and[and[size2,apply(size-leq,x.o)],blue],size3], filter(filter(x.s, triangle), implies[yellow,rectangle]))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:implies[%s,%s];4:yellow;4:rectangle
'λx.apply(or[and[blue,not[green]],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[rectangle,and[yellow,apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[not[apply(same_size,x.o)],yellow],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), iff[size3,implies[triangle,triangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size3;4:implies[%s,%s];4:triangle;4:triangle
'λx.apply(or[blue,nand[triangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(and[not[yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.exists(nor[apply(same_size,x.o),rectangle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, size3), circle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;3:%s.s;2:x
'λx.apply(iff[blue,apply(size-leq,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),not[or[blue,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[and[green,triangle],and[size1,not[yellow]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:and[%s,%s];4:size1;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, apply(size-gt,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(implies[blue,or[green,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.forall(and[apply(size-leq,x.o),circle],filter(x.s, nor[nor[circle,green],apply(same_shape,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nor[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, not[rectangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.exists(blue, filter(x.s, apply(same_shape,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.contains(x.o, filter(x.s, iff[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:blue
'λx.exists(and[nor[circle,size1],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:size1;4:blue;3:%s.s;2:x
'λx.apply(not[and[apply(same_color,x.o),size1]],iota(filter(x.s, and[green,circle])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle
'λx.apply(not[nand[or[or[and[size1,circle],green],green],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:circle;4:green;4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[circle,and[circle,apply(same_size,iota(filter(x.s, circle)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(nor[iff[blue,circle],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[implies[size2,apply(same_size,iota(filter(x.s, circle)))],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(or[or[rectangle,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), green), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size3
'λx.apply(blue,iota(filter(filter(x.s, blue), apply(size-gt,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))), triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:blue
'λx.exists(not[green], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(implies[and[or[yellow,size1],apply(same_shape,x.o)],not[not[or[size3,apply(same_size,x.o)]]]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, or[not[not[green]],yellow]), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:not[%s];4:green;4:yellow;4:not[%s];4:circle
'λx.apply(or[triangle,or[green,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, circle), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.exists(not[green], filter(x.s, triangle))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.exists(or[and[yellow,green],not[apply(same_color,x.o)]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(and[and[not[apply(same_color,x.o)],or[circle,green]],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[circle,green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:blue;1:%s.o;2:x
'λx.exists(and[not[size2],nor[green,triangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size2;4:nor[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(x.s, or[blue,not[apply(same_color,iota(filter(x.s, and[triangle,apply(same_size,iota(filter(filter(x.s, triangle), not[size2])))])))]]), yellow), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:size2;4:yellow;4:size2
'λx.apply(or[blue,green],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[or[blue,size1],not[or[yellow,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size1;4:not[%s];4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[size3,green],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(x.s, and[triangle,apply(size-lt,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[blue,size3],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:size1;1:%s.o;2:x
'λx.apply(or[or[blue,size3],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:size3;1:%s.o;2:x
'λx.apply(iff[circle,and[circle,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(nand[size2,size1], filter(filter(filter(x.s, apply(same_color,x.o)), rectangle), nand[size2,green]))'	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:nand[%s,%s];4:size2;4:green
'λx.apply(nand[or[yellow,blue],iff[yellow,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:iff[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(filter(filter(x.s, blue), apply(same_size,x.o)), circle), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:blue
'λx.apply(not[and[not[blue],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), rectangle), or[blue,yellow])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:rectangle;4:or[%s,%s];4:blue;4:yellow
'λx.apply(and[or[size1,green],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:green;4:rectangle;1:%s.o;2:x
'λx.exists(green, x.s)'	0:exists(%s, %s);4:green;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), size2)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.apply(blue,iota(filter(filter(x.s, circle), size3)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3
'λx.apply(blue,iota(filter(x.s, or[blue,and[size2,green]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:size2;4:green
'λx.apply(and[or[blue,circle],nand[yellow,apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[not[rectangle],not[apply(same_shape,iota(filter(x.s, green)))]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(size1, x.s)'	0:exists(%s, %s);4:size1;3:%s.s;2:x
'λx.exists(size2, x.s)'	0:exists(%s, %s);4:size2;3:%s.s;2:x
'λx.exists(size3, x.s)'	0:exists(%s, %s);4:size3;3:%s.s;2:x
'λx.apply(implies[size2,blue],iota(filter(filter(x.s, nor[circle,size1]), blue)))'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:size1;4:blue
'λx.empty(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, circle), blue)))), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:yellow
'λx.apply(apply(size-geq,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nand[circle,yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.exists(nand[size3,size2], filter(filter(filter(x.s, apply(same_color,x.o)), rectangle), nand[size2,green]))'	0:exists(%s, %s);4:nand[%s,%s];4:size3;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:nand[%s,%s];4:size2;4:green
'λx.apply(and[size1,and[size1,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,nand[circle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.empty(x.s)'	0:empty(%s);3:%s.s;2:x
'λx.exists(or[not[implies[triangle,size2]],size1], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:not[%s];4:implies[%s,%s];4:triangle;4:size2;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[not[apply(same_color,x.o)],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(iff[and[yellow,green],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3;1:%s.o;2:x
'λx.apply(and[apply(size-geq,x.o),apply(same_shape,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, size2), and[rectangle,size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:rectangle;4:size2
'λx.apply(triangle,iota(filter(x.s, and[size3,green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green
'λx.forall(yellow,filter(filter(x.s, triangle), size3))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.forall(yellow,filter(filter(x.s, triangle), size2))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2
'λx.exists(or[size2,triangle], filter(x.s, not[green]))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.contains(x.o, filter(x.s, or[and[triangle,and[rectangle,blue]],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:blue;4:blue
'λx.exists(and[blue,apply(same_shape,x.o)], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, blue), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(not[nor[green,or[green,apply(same_shape,x.o)]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:green;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[and[size1,green],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:green;4:yellow;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), filter(x.s, not[rectangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[or[rectangle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(iff[yellow,green],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(iff[not[apply(same_color,x.o)],and[size3,not[implies[triangle,size3]]]],iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:not[%s];4:implies[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.forall(implies[and[or[apply(size-geq,x.o),green],apply(same_shape,x.o)],not[not[or[size3,apply(same_size,x.o)]]]],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[blue,nand[size2,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.exists(and[rectangle,nor[not[apply(same_color,x.o)],circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.exists(nor[circle,iff[size3,apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[yellow,size3],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size2,apply(size-geq,iota(filter(filter(filter(x.s, size1), rectangle), rectangle)))]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:rectangle;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[implies[size3,and[rectangle,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[apply(same_size,x.o),size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(apply(size-leq,x.o),filter(x.s, circle))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(apply(size-gt,x.o), filter(x.s, blue))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[yellow,circle]],iota(filter(filter(x.s, or[triangle,green]), apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, triangle), and[apply(same_color,x.o),triangle]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[apply(same_size,x.o),apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[circle,and[blue,iff[size1,rectangle]]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:iff[%s,%s];4:size1;4:rectangle
'λx.apply(triangle,iota(filter(x.s, or[size1,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:triangle
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), and[triangle,green]), apply(same_size,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[yellow,or[size1,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[size2,or[blue,or[rectangle,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(not[and[triangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(nand[or[yellow,green],not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(nand[apply(same_shape,x.o),or[apply(same_size,x.o),apply(same_size,x.o)]],filter(filter(x.s, iff[rectangle,blue]), triangle))'	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:blue;4:triangle
'λx.forall(or[apply(same_size,x.o),green],filter(filter(x.s, apply(same_color,iota(x.s))), not[blue]))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(and[iff[blue,circle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[not[implies[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, implies[triangle,and[size3,yellow]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:triangle;4:and[%s,%s];4:size3;4:yellow
'λx.exists(yellow, filter(x.s, not[and[and[circle,apply(same_size,x.o)],size2]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(and[apply(same_shape,iota(filter(x.s, or[size3,and[circle,size2]]))),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:and[%s,%s];4:circle;4:size2;4:size1;1:%s.o;2:x
'λx.apply(nand[yellow,and[yellow,size3]],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(circle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[or[not[nor[circle,nor[apply(same_color,x.o),triangle]]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[not[size1],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[green,not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, circle), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(and[implies[rectangle,green],size3],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:green;4:size3;1:iota(%s);3:%s.s;2:x
'λx.forall(nand[size1,yellow],filter(x.s, or[apply(same_shape,x.o),and[blue,size1]]))'	0:forall(%s,%s);4:nand[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[rectangle,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, and[blue,nand[and[apply(same_shape,x.o),nand[size3,size3]],apply(same_color,x.o)]]), blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:size3;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:blue
'λx.exists(or[yellow,size1], filter(filter(x.s, or[blue,or[rectangle,size2]]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[size2]), and[green,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, circle), circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(or[or[size1,green],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:green;4:yellow;1:%s.o;2:x
'λx.apply(nand[not[blue],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[rectangle,circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(not[size2],iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(nand[green,apply(same_size,iota(filter(x.s, green)))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.exists(and[not[blue],not[circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:circle;3:%s.s;2:x
'λx.forall(blue,filter(x.s, rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(implies[triangle,not[nor[rectangle,blue]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:not[%s];4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, yellow), yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, yellow), yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), size3), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:size3
'λx.apply(green,iota(filter(filter(x.s, not[blue]), or[apply(size-lt,x.o),size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2
'λx.apply(or[not[or[nand[circle,and[circle,size3]],blue]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:nand[%s,%s];4:circle;4:and[%s,%s];4:circle;4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[or[and[triangle,not[blue]],apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size3,filter(x.s, nor[apply(same_size,x.o),triangle]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(or[or[circle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(x.s))'	0:apply(%s,%s);4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(triangle,x.s)'	0:forall(%s,%s);4:triangle;3:%s.s;2:x
'λx.apply(not[iff[and[rectangle,not[green]],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(not[nor[or[rectangle,iff[circle,blue]],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:circle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[and[nor[green,circle],yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:circle;4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[not[circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[or[yellow,circle],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:circle;4:green;1:%s.o;2:x
'λx.apply(nand[and[circle,apply(same_size,x.o)],not[or[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(not[blue],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.empty(filter(filter(filter(x.s, blue), or[nor[circle,circle],rectangle]), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), or[size1,green]), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:size1;4:green;4:triangle
'λx.apply(and[and[circle,size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:circle;1:%s.o;2:x
'λx.exists(and[not[apply(same_size,x.o)],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[blue,implies[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, and[and[apply(same_shape,x.o),size1],size1]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:size1
'λx.exists(iff[and[blue,size1],apply(same_shape,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[implies[yellow,not[green]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), iff[size3,and[yellow,size1]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size1
'λx.apply(implies[and[triangle,yellow],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(filter(x.s, not[size3]), implies[blue,circle]), apply(same_size,x.o))))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:implies[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(size-leq,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, yellow), yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow
'λx.apply(or[or[not[yellow],size2],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:size2;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), not[or[green,size1]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:or[%s,%s];4:green;4:size1
'λx.exists(or[green,triangle], filter(filter(x.s, size2), or[yellow,and[apply(same_shape,x.o),size2]]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(not[and[not[blue],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,and[size2,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.exists(nand[size2,size2], filter(x.s, or[apply(same_size,x.o),and[green,yellow]]))'	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:green;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, triangle), triangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(x.s, green), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[apply(same_size,iota(filter(x.s, size1))),size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.apply(and[iff[size2,green],rectangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size2;4:green;4:rectangle;1:%s.o;2:x
'λx.forall(iff[apply(same_color,x.o),green],filter(x.s, yellow))'	0:forall(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, size3))),iota(filter(x.s, and[not[size1],green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:green
'λx.apply(or[or[rectangle,triangle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[not[size2],or[rectangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(nor[yellow,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(nor[yellow,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nor[yellow,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.forall(or[rectangle,blue],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(and[circle,or[not[green],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.forall(or[apply(same_size,x.o),circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.apply(or[or[triangle,rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(nand[size2,circle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(or[blue,and[green,apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[size1,not[or[green,triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:or[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, or[apply(same_shape,x.o),triangle]), not[size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:size3
'λx.apply(or[not[not[size1]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[implies[triangle,green],apply(same_shape,iota(filter(filter(x.s, rectangle), rectangle)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[circle,or[blue,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[apply(size-lt,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, size1), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.contains(iota(filter(filter(filter(x.s, blue), apply(same_color,x.o)), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(nand[nor[rectangle,blue],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[yellow,size2],iota(filter(filter(x.s, triangle), not[green])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:green
'λx.apply(or[circle,size2],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:size2;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, yellow), not[apply(same_shape,iota(filter(x.s, triangle)))]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.forall(not[apply(same_color,x.o)],filter(filter(filter(x.s, blue), blue), or[triangle,rectangle]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:or[%s,%s];4:triangle;4:rectangle
'λx.apply(implies[apply(same_color,iota(filter(x.s, blue))),green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, yellow), apply(same_color,x.o)), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(or[size3,rectangle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(size-geq,x.o)), or[and[and[apply(same_color,x.o),rectangle],not[yellow]],apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[apply(same_size,x.o),yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(iff[size1,not[size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(not[and[rectangle,implies[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nor[circle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(filter(x.s, size2), or[circle,rectangle]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:circle;4:rectangle;4:yellow
'λx.exists(triangle, filter(x.s, not[and[yellow,not[size1]]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:size1
'λx.apply(green,iota(filter(filter(x.s, or[yellow,apply(same_shape,x.o)]), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(and[iff[yellow,triangle],not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:triangle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(not[rectangle],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(blue,filter(filter(filter(x.s, triangle), apply(same_size,x.o)), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[or[not[yellow],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, rectangle), and[rectangle,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(filter(x.s, green), or[nand[size2,size2],size1]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:nand[%s,%s];4:size2;4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[iff[not[circle],blue],and[apply(same_shape,x.o),apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:circle;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[iff[rectangle,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),not[not[or[rectangle,blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:not[%s];4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-gt,x.o)), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(green,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(green,iota(filter(filter(x.s, green), size3)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.apply(triangle,iota(filter(filter(filter(x.s, triangle), size3), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:green
'λx.contains(iota(filter(filter(x.s, blue), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;3:%s.s;2:x
'λx.apply(not[and[circle,not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[and[not[and[blue,circle]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(filter(x.s, and[triangle,apply(same_color,x.o)]), blue), triangle), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:triangle;4:blue
'λx.empty(filter(filter(x.s, not[triangle]), and[apply(same_shape,x.o),green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.contains(iota(filter(filter(filter(x.s, not[blue]), size3), or[nor[rectangle,rectangle],green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3;4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:rectangle;4:green;3:%s.s;2:x
'λx.exists(nor[green,or[apply(size-gt,x.o),circle]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(nand[nor[circle,blue],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:circle;4:blue;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, triangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(or[circle,nand[yellow,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[iff[rectangle,and[blue,apply(same_color,iota(filter(x.s, size2)))]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[not[size3],or[size1,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[not[apply(same_shape,x.o)],size1]), apply(same_color,iota(filter(filter(x.s, size3), or[circle,or[blue,triangle]]))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:triangle;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, blue), apply(same_color,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), circle), blue))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:blue
'λx.apply(not[rectangle],iota(filter(x.s, and[apply(same_color,x.o),nor[and[triangle,green],nor[apply(same_shape,x.o),yellow]]])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(apply(size-geq,iota(filter(x.s, size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, size1))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(or[triangle,or[size3,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(implies[rectangle,apply(same_shape,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[implies[blue,circle],or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(blue, filter(x.s, or[size1,rectangle]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:rectangle
'λx.apply(not[nor[blue,nor[and[size2,yellow],rectangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(iff[and[circle,circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, iff[circle,size2]), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size2;4:blue
'λx.apply(apply(same_shape,iota(x.s)),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(iff[and[yellow,circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))), yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:circle
'λx.apply(and[or[not[blue],size1],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[green,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[implies[yellow,size1],or[blue,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:size1;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.exists(blue, filter(filter(filter(x.s, apply(same_shape,x.o)), and[iff[size3,circle],blue]), triangle))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:size3;4:circle;4:blue;4:triangle
'λx.contains(x.o, filter(filter(x.s, not[size3]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:rectangle
'λx.contains(x.o, filter(filter(x.s, not[size2]), rectangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:rectangle
'λx.apply(implies[not[circle],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[not[blue],and[not[triangle],not[size3]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.contains(iota(filter(x.s, or[apply(same_shape,x.o),and[yellow,apply(same_shape,x.o)]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[triangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[and[green,blue],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[circle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[and[yellow,green],size3],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:size3;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(size-leq,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[rectangle,not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[not[blue],not[and[circle,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[and[or[and[rectangle,circle],blue],green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:blue;4:green;4:blue;1:%s.o;2:x
'λx.apply(not[and[blue,or[size2,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, nor[apply(same_color,x.o),and[rectangle,triangle]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:triangle
'λx.forall(yellow,filter(x.s, blue))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), not[rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.apply(not[and[or[green,apply(same_color,iota(filter(filter(filter(x.s, size3), green), triangle)))],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green;4:triangle;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[nor[size1,green],blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:green;4:blue
'λx.apply(iff[or[green,yellow],not[circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:green;4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[size1,and[or[rectangle,not[circle]],not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[rectangle,and[green,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[blue,not[size2]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:not[%s];4:size2
'λx.apply(iff[size3,yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(not[not[and[not[blue],circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size3), size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(or[triangle,or[triangle,apply(same_size,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[circle,triangle],implies[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[nand[blue,not[circle]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:blue;4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, or[blue,rectangle]), apply(same_shape,x.o)), size3), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:size3
'λx.apply(not[apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(and[size2,yellow],filter(x.s, triangle))'	0:forall(%s,%s);4:and[%s,%s];4:size2;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(nand[blue,and[circle,or[green,circle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size3), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;3:%s.s;2:x
'λx.exists(size2, filter(x.s, not[triangle]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(apply(same_size,iota(filter(x.s, not[yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(not[and[circle,nor[triangle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:nor[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[iff[apply(size-leq,x.o),size2],green],iota(filter(x.s, iff[not[green],size2])))'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:not[%s];4:green;4:size2
'λx.forall(and[blue,yellow],filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_color,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:blue;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, nand[size2,size3]), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[not[blue],nand[size1,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, and[apply(same_size,x.o),yellow]), yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.forall(and[green,not[apply(same_shape,x.o)]],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[size3,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size1,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[circle,nor[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, not[green]), size2)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2
'λx.apply(and[circle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[and[blue,blue],not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(filter(x.s, implies[blue,circle]), apply(same_size,x.o))))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[blue],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(or[triangle,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(green, filter(x.s, not[triangle]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(apply(same_shape,x.o), filter(x.s, or[and[apply(same_color,x.o),not[yellow]],blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:yellow;4:blue
'λx.apply(implies[not[size1],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.exists(or[size1,rectangle], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(size2,iota(filter(x.s, or[blue,circle])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(iff[apply(size-lt,x.o),yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.forall(and[size3,yellow],filter(x.s, and[apply(same_shape,x.o),yellow]))'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(x.s, and[apply(same_color,x.o),nand[circle,blue]]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:blue;4:circle
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, blue), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[size2,not[circle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:not[%s];4:circle
'λx.empty(filter(filter(x.s, blue), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.empty(filter(filter(x.s, blue), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.forall(circle,filter(x.s, apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size3,and[apply(same_size,x.o),or[size2,not[yellow]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(size1,iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(size1,iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.exists(and[apply(same_shape,x.o),blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[circle,not[and[blue,triangle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:not[%s];4:size3
'λx.apply(blue,iota(filter(x.s, or[and[size1,blue],apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), nor[and[rectangle,triangle],and[blue,size3]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:blue;4:size3
'λx.apply(blue,iota(filter(x.s, and[and[blue,blue],size2])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[and[size3,green],not[apply(size-gt,x.o)]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:green;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(nand[blue,implies[size1,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(iff[nand[size1,size3],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:size1;4:size3;4:blue;1:%s.o;2:x
'λx.exists(not[apply(same_size,x.o)], filter(x.s, or[apply(same_shape,x.o),triangle]))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.forall(nand[size1,yellow],filter(x.s, or[apply(same_size,x.o),size3]))'	0:forall(%s,%s);4:nand[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(nand[green,size2],iota(filter(filter(x.s, triangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), apply(same_size,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.forall(not[triangle],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[blue,apply(same_color,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size2,apply(same_shape,x.o)],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.exists(rectangle, filter(x.s, apply(size-geq,x.o)))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(filter(x.s, blue), size1), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:blue
'λx.apply(and[rectangle,or[apply(same_shape,iota(filter(filter(x.s, blue), size1))),size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:size1;1:%s.o;2:x
'λx.apply(iff[and[green,yellow],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(x.s, not[rectangle]), yellow)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:yellow
'λx.apply(or[apply(size-leq,x.o),triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(and[iff[not[rectangle],iff[triangle,blue]],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:not[%s];4:rectangle;4:iff[%s,%s];4:triangle;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(x.s, iff[green,rectangle])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:rectangle
'λx.forall(nand[and[apply(same_shape,x.o),apply(same_shape,x.o)],not[apply(same_color,x.o)]],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, nor[apply(same_color,x.o),and[circle,rectangle]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:rectangle
'λx.apply(and[iff[apply(size-lt,x.o),size1],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size2), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.exists(triangle, filter(filter(x.s, size3), not[blue]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue
'λx.apply(not[and[nor[triangle,blue],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), apply(same_shape,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(blue,iota(filter(x.s, or[blue,and[blue,size3]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size3
'λx.forall(or[triangle,not[apply(same_shape,x.o)]],filter(x.s, rectangle))'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[size2,iff[triangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:iff[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, and[size2,blue]), or[apply(same_color,x.o),circle]), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(x.s, rectangle))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[not[yellow],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, and[nor[apply(same_size,x.o),triangle],not[green]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:not[%s];4:green
'λx.empty(filter(filter(x.s, blue), and[size1,circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:circle
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(nor[apply(size-gt,x.o),nand[circle,size1]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, and[nor[apply(same_size,x.o),triangle],not[size3]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:not[%s];4:size3
'λx.apply(iff[blue,not[and[circle,circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(iff[not[or[size3,circle]],and[size1,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:or[%s,%s];4:size3;4:circle;4:and[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, nand[and[rectangle,circle],circle]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(x.s, apply(size-geq,x.o)), circle), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:circle;4:circle
'λx.exists(and[green,circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:circle;3:%s.s;2:x
'λx.forall(iff[circle,size3],filter(filter(x.s, not[size1]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[nand[apply(same_color,x.o),not[size2]],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:size2;4:blue;3:%s.s;2:x
'λx.exists(implies[yellow,or[size2,or[blue,apply(same_size,iota(filter(filter(x.s, blue), and[apply(same_shape,x.o),nor[size2,size2]])))]]], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:or[%s,%s];4:size2;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:size2;4:size2;3:%s.s;2:x
'λx.forall(not[blue],filter(filter(x.s, apply(same_color,x.o)), rectangle))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.exists(and[green,or[nor[apply(same_color,x.o),not[rectangle]],size1]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:or[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:rectangle;4:size1;3:%s.s;2:x
'λx.exists(apply(size-leq,x.o), filter(filter(x.s, yellow), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.empty(filter(filter(x.s, size1), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:not[%s];4:blue
'λx.apply(apply(same_shape,iota(filter(filter(x.s, blue), or[yellow,apply(same_shape,x.o)]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[or[implies[triangle,blue],green],not[and[size3,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:green;4:not[%s];4:and[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(nand[blue,nor[circle,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:nor[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size3), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.forall(or[blue,circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, implies[blue,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:circle
'λx.forall(size2,filter(filter(filter(x.s, apply(size-leq,x.o)), apply(same_color,x.o)), yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(and[not[yellow],implies[green,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:implies[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size2), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;1:%s.o;2:x
'λx.apply(nand[rectangle,not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(same_color,iota(filter(x.s, implies[yellow,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(nand[and[circle,circle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[size2,nor[size3,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:nor[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), triangle), or[apply(same_color,x.o),size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(apply(size-geq,x.o),iota(filter(filter(filter(x.s, blue), size3), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:size3
'λx.apply(and[nor[rectangle,size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:size3;4:blue;1:%s.o;2:x
'λx.forall(and[nand[triangle,blue],implies[and[triangle,apply(same_shape,x.o)],size3]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:triangle;4:blue;4:implies[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.apply(implies[and[and[or[not[circle],yellow],blue],blue],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:circle;4:yellow;4:blue;4:blue;4:green;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, size2), yellow), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:rectangle
'λx.forall(size2,filter(filter(x.s, size3), triangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.empty(filter(filter(x.s, iff[and[circle,green],blue]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:and[%s,%s];4:circle;4:green;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[blue,and[triangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, blue)), filter(x.s, iff[green,and[apply(same_size,x.o),triangle]]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.exists(apply(same_color,x.o), filter(x.s, or[rectangle,iff[apply(same_shape,x.o),and[blue,yellow]]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:blue;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, blue))),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(nor[size1,not[blue]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:size1;4:not[%s];4:blue;3:%s.s;2:x
'λx.exists(apply(size-gt,x.o), filter(x.s, apply(size-gt,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[size3,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size1,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(not[apply(same_shape,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(or[or[blue,green],blue], filter(x.s, not[not[apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:blue;4:green;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[size3,yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:yellow;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[not[and[size3,apply(same_shape,x.o)]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[nand[blue,rectangle],rectangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:blue;4:rectangle;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, nor[or[green,size2],size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:green;4:size2;4:size3
'λx.apply(implies[rectangle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(not[rectangle],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(iota(filter(x.s, size3)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[implies[blue,circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[not[blue],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),or[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[not[rectangle],green],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(and[or[and[size3,blue],triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:blue;4:triangle;4:blue;1:%s.o;2:x
'λx.forall(and[triangle,blue],filter(filter(filter(x.s, apply(same_shape,x.o)), not[rectangle]), triangle))'	0:forall(%s,%s);4:and[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:rectangle;4:triangle
'λx.exists(not[size2], x.s)'	0:exists(%s, %s);4:not[%s];4:size2;3:%s.s;2:x
'λx.exists(not[size3], x.s)'	0:exists(%s, %s);4:not[%s];4:size3;3:%s.s;2:x
'λx.forall(rectangle,filter(filter(x.s, size3), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(or[circle,and[apply(same_color,x.o),or[size2,not[yellow]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size2;4:not[%s];4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(or[or[circle,size3],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(nor[blue,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[circle,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(implies[and[triangle,triangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[apply(same_shape,x.o),and[apply(same_color,x.o),circle]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(not[and[yellow,yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.contains(iota(x.s), x.s)'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(and[blue,apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(yellow, filter(x.s, not[and[and[circle,size2],apply(same_size,x.o)]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[implies[not[circle],or[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(nor[blue,not[apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[nor[rectangle,yellow],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:rectangle;4:yellow;4:blue;1:%s.o;2:x
'λx.exists(and[triangle,or[size2,yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:yellow;3:%s.s;2:x
'λx.apply(nand[size3,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(or[not[yellow],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[rectangle,not[apply(same_size,x.o)]],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_size,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.forall(and[apply(same_color,x.o),size2],filter(filter(x.s, circle), nor[size1,apply(size-geq,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.empty(filter(x.s, and[rectangle,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(and[size2,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[or[and[triangle,yellow],rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[rectangle,size2]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(or[circle,or[and[blue,triangle],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,apply(same_size,x.o)],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(iff[green,size1],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:iff[%s,%s];4:green;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(apply(same_color,x.o), filter(x.s, iff[or[apply(same_shape,x.o),and[and[size1,and[blue,rectangle]],circle]],and[size3,size2]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:blue;4:rectangle;4:circle;4:and[%s,%s];4:size3;4:size2
'λx.apply(not[green],iota(filter(filter(filter(x.s, blue), size1), apply(size-gt,x.o))))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))), filter(x.s, or[and[size2,size2],or[yellow,blue]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:size2;4:or[%s,%s];4:yellow;4:blue
'λx.exists(and[and[circle,or[apply(same_color,x.o),green]],nor[apply(same_shape,iota(filter(x.s, size3))),size2]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size2;3:%s.s;2:x
'λx.apply(not[size3],iota(filter(x.s, and[not[apply(same_color,x.o)],blue])))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.empty(filter(x.s, not[blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.forall(not[and[size1,and[apply(same_color,x.o),yellow]]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(implies[and[size3,size3],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:size3;4:circle;1:%s.o;2:x
'λx.apply(nand[triangle,not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(blue,filter(x.s, nor[yellow,iff[apply(same_size,iota(filter(x.s, blue))),circle]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.forall(size1,filter(x.s, and[apply(same_color,x.o),nor[blue,size2]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:size2
'λx.apply(iff[blue,not[not[circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:not[%s];4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[or[circle,green],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(nor[yellow,and[not[circle],green]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(nor[nand[blue,size2],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(implies[or[green,size1],or[blue,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:green;4:size1;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(x.s, not[triangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(not[and[circle,not[and[blue,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, not[green]), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[green,and[triangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[or[blue,blue],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:size1
'λx.apply(apply(same_shape,iota(filter(filter(x.s, not[size1]), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_color,x.o)), not[triangle]), size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:triangle;4:size2;4:yellow
'λx.forall(and[circle,green],filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_color,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, apply(same_shape,x.o)), size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(filter(x.s, blue), circle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3
'λx.apply(implies[rectangle,and[blue,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, or[blue,triangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle
'λx.contains(iota(filter(x.s, and[size2,green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green;3:%s.s;2:x
'λx.apply(or[not[size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[not[size1],not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[nand[yellow,size2],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:size2;4:blue;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(filter(x.s, size1), green), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green;4:size1
'λx.apply(and[apply(size-gt,x.o),not[yellow]],iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.empty(filter(x.s, not[or[apply(same_size,x.o),apply(same_shape,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[or[and[size1,triangle],and[size2,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.apply(implies[yellow,size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(implies[yellow,size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(implies[yellow,size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nor[green,apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nor[size3,yellow],iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(not[and[triangle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, not[size2]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.forall(apply(same_shape,x.o),filter(x.s, apply(same_shape,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), yellow), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:not[%s];4:size3
'λx.exists(triangle, filter(x.s, not[green]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(not[not[and[implies[blue,not[circle]],not[not[or[blue,circle]]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:not[%s];4:circle;4:not[%s];4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[and[size1,size2]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(nand[and[size1,yellow],apply(same_shape,x.o)],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[green,apply(same_shape,iota(filter(x.s, green)))],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, blue), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(and[nand[not[blue],or[blue,triangle]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:blue;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[nand[not[blue],or[blue,or[blue,not[circle]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:blue;4:or[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[rectangle,apply(same_shape,x.o)],iota(filter(filter(filter(x.s, apply(same_color,x.o)), circle), implies[blue,and[triangle,green]])))'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:implies[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:green
'λx.apply(nand[size1,green],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, nand[triangle,yellow]), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:yellow;4:blue;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, blue), and[apply(same_size,x.o),blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(and[or[size3,circle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(not[apply(same_color,x.o)], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[green,rectangle], filter(filter(filter(x.s, apply(same_color,x.o)), rectangle), rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:rectangle
'λx.forall(and[apply(same_color,x.o),size2],filter(filter(x.s, circle), nor[triangle,apply(size-geq,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:nor[%s,%s];4:triangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[triangle,or[size2,or[green,not[blue]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:or[%s,%s];4:size2;4:or[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, implies[green,circle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:green;4:circle
'λx.apply(yellow,iota(filter(filter(filter(x.s, size3), yellow), not[green])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow;4:not[%s];4:green
'λx.apply(not[and[blue,nor[size1,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:nor[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.contains(iota(filter(x.s, nor[apply(size-gt,x.o),and[rectangle,size1]])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:rectangle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[triangle,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(or[and[not[yellow],size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:yellow;4:size1;4:circle;1:%s.o;2:x
'λx.apply(and[not[triangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[and[size2,green],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:green;4:green;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, nor[size2,or[circle,green]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:or[%s,%s];4:circle;4:green
'λx.apply(not[not[implies[or[circle,yellow],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:blue;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, triangle), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.exists(size3, filter(x.s, not[rectangle]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(not[or[and[size1,blue],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:size1;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, circle), size3), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[not[circle],and[blue,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[nand[circle,circle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[yellow,rectangle],iota(filter(filter(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, yellow), circle)))), or[green,size2]), circle), not[size3])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle;4:or[%s,%s];4:green;4:size2;4:circle;4:not[%s];4:size3
'λx.apply(and[not[circle],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),apply(same_size,iota(filter(filter(x.s, size3), blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[and[yellow,size3]],iota(filter(x.s, or[apply(size-geq,x.o),size1])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1
'λx.empty(filter(filter(x.s, rectangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(rectangle,iota(filter(x.s, and[green,not[circle]])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:not[%s];4:circle
'λx.apply(apply(size-lt,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, triangle), size3), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3;4:not[%s];4:size1
'λx.apply(not[yellow],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:%s.s;2:x
'λx.forall(not[or[apply(same_color,x.o),apply(same_color,x.o)]],filter(x.s, or[yellow,and[green,rectangle]]))'	0:forall(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:green;4:rectangle
'λx.exists(and[blue,not[apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), apply(same_shape,x.o)), or[size3,size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size3;4:size2
'λx.exists(triangle, filter(filter(x.s, not[apply(same_size,x.o)]), triangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.exists(not[iff[yellow,apply(same_size,x.o)]], x.s)'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[rectangle,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size3), triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, or[rectangle,size2]), yellow), or[size3,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size2;4:yellow;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, and[size1,apply(same_size,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(nand[circle,apply(same_shape,x.o)],filter(filter(x.s, apply(same_color,x.o)), and[or[green,yellow],circle]))'	0:forall(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, green), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.forall(rectangle,filter(x.s, and[green,implies[size3,triangle]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:implies[%s,%s];4:size3;4:triangle
'λx.forall(or[rectangle,apply(same_shape,x.o)],filter(x.s, size3))'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[not[not[blue]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(iff[circle,size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[size1,green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(or[blue,circle],filter(x.s, not[apply(same_size,x.o)]))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, size3), not[yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow
'λx.apply(or[yellow,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), nor[and[rectangle,triangle],green]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:green
'λx.exists(and[apply(same_shape,x.o),nor[or[and[size1,triangle],apply(same_color,x.o)],and[yellow,circle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:circle;3:%s.s;2:x
'λx.forall(not[apply(same_color,x.o)],filter(filter(x.s, yellow), size1))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(not[and[iff[triangle,size1],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size1;4:circle;1:%s.o;2:x
'λx.apply(not[or[triangle,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(or[and[size2,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[not[blue],or[size2,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.exists(apply(same_color,iota(filter(x.s, or[apply(same_shape,x.o),yellow]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(or[or[circle,and[size3,size3]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:and[%s,%s];4:size3;4:size3;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, rectangle), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;3:%s.s;2:x
'λx.exists(and[not[and[size2,size3]],apply(same_shape,x.o)], filter(x.s, iff[blue,circle]))'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size2;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:circle
'λx.exists(nand[yellow,triangle], filter(x.s, size2))'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_size,iota(filter(filter(x.s, rectangle), green))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(and[not[size2],not[triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:not[%s];4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[nor[blue,blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:blue;4:blue;4:circle
'λx.apply(iff[apply(same_shape,iota(filter(x.s, blue))),size2],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[rectangle,implies[circle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:implies[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[blue,and[or[not[blue],blue],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[blue,and[blue,circle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nand[size3,or[blue,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[size2,or[blue,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size2;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[size3,or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[triangle,blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.forall(triangle,filter(filter(x.s, circle), or[apply(same_shape,x.o),rectangle]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(not[and[and[circle,blue],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.forall(or[size1,apply(same_size,x.o)],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[circle,or[or[yellow,rectangle],green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:yellow;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, implies[rectangle,circle]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:circle;4:size2
'λx.apply(or[not[size2],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-lt,x.o)), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.contains(x.o, filter(x.s, or[size2,not[circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:not[%s];4:circle
'λx.apply(nand[implies[blue,rectangle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, circle), size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size2
'λx.empty(filter(filter(x.s, rectangle), and[blue,size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:blue;4:size3
'λx.apply(triangle,iota(filter(x.s, and[green,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size3
'λx.contains(x.o, filter(filter(x.s, apply(same_color,x.o)), iff[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:circle;4:blue
'λx.exists(not[and[not[size1],apply(size-geq,x.o)]], filter(filter(x.s, blue), blue))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(and[yellow,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(nand[not[size3],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size3;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[or[apply(same_size,x.o),blue],circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:circle
'λx.exists(or[rectangle,triangle], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(iff[blue,blue], filter(x.s, and[apply(same_shape,x.o),or[circle,blue]]))'	0:exists(%s, %s);4:iff[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:blue
'λx.apply(yellow,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.empty(filter(filter(filter(x.s, nor[apply(same_shape,x.o),and[size3,circle]]), implies[size2,yellow]), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size3;4:circle;4:implies[%s,%s];4:size2;4:yellow;4:not[%s];4:triangle
'λx.apply(iff[not[apply(size-gt,x.o)],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.forall(not[apply(same_shape,x.o)],filter(x.s, and[size3,yellow]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.apply(and[apply(same_shape,x.o),or[size3,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[or[circle,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[and[and[not[circle],blue],not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(or[apply(same_color,x.o),size3], filter(x.s, apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(filter(x.s, yellow), size3), apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(not[not[not[blue]]], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:not[%s];4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[and[blue,yellow]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.exists(iff[apply(same_color,x.o),nor[size1,circle]], filter(filter(x.s, blue), size3))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:size1;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(or[triangle,iff[size3,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:iff[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(implies[not[iff[circle,blue]],and[green,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:circle;4:blue;4:and[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[implies[size2,iff[circle,blue]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:size2;4:iff[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.forall(or[green,rectangle],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, nor[apply(same_color,x.o),or[rectangle,size2]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:size2
'λx.apply(not[iff[circle,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[yellow,and[nor[triangle,size2],green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:and[%s,%s];4:nor[%s,%s];4:triangle;4:size2;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, size2), blue), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:size2
'λx.exists(size1, filter(filter(x.s, and[apply(same_color,x.o),rectangle]), size1))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:size1
'λx.apply(nand[implies[blue,yellow],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:blue;4:yellow;4:circle;1:%s.o;2:x
'λx.forall(or[apply(size-leq,x.o),size3],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.apply(and[triangle,triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(and[apply(same_size,x.o),rectangle],filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(nand[not[size1],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[and[iff[and[size1,rectangle],blue],or[size3,yellow]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:size1;4:rectangle;4:blue;4:or[%s,%s];4:size3;4:yellow;4:triangle;1:%s.o;2:x
'λx.exists(iff[apply(same_color,x.o),nor[green,circle]], filter(filter(x.s, blue), size3))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nor[%s,%s];4:green;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.contains(x.o, filter(x.s, apply(size-leq,iota(filter(x.s, size3)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(iff[size2,apply(size-gt,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(size3,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(size2,iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.exists(apply(same_shape,x.o), filter(x.s, and[blue,size1]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.exists(iff[iff[size2,blue],apply(same_shape,x.o)], filter(x.s, green))'	0:exists(%s, %s);4:iff[%s,%s];4:iff[%s,%s];4:size2;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[implies[size2,size3],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size2;4:size3;4:yellow;1:%s.o;2:x
'λx.forall(yellow,filter(filter(x.s, rectangle), not[size1]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:size1
'λx.apply(implies[triangle,and[triangle,size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[blue,or[apply(same_color,iota(filter(filter(x.s, and[size3,green]), triangle))),green]]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:triangle;4:green;4:yellow
'λx.apply(not[and[or[green,nor[circle,yellow]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:nor[%s,%s];4:circle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[blue,or[size2,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.exists(iff[and[and[blue,rectangle],blue],apply(same_size,x.o)], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:rectangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, rectangle), green)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, rectangle), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.apply(size1,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.forall(apply(size-geq,x.o),filter(x.s, nand[size2,green]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:green
'λx.empty(filter(filter(x.s, circle), not[apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[yellow,apply(same_color,iota(filter(x.s, triangle)))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(not[rectangle],x.o)'	0:apply(%s,%s);4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(not[rectangle], x.s)'	0:exists(%s, %s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, triangle), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, or[size1,and[size1,size1]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:and[%s,%s];4:size1;4:size1
'λx.apply(nand[not[size1],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, or[size3,size3]), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:size3;4:yellow
'λx.empty(filter(x.s, or[apply(size-lt,x.o),apply(size-lt,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[circle],x.o)'	0:apply(%s,%s);4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, size1), yellow)))), triangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:triangle;4:green
'λx.exists(green, filter(filter(x.s, nand[apply(same_size,x.o),triangle]), and[green,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(and[apply(same_color,x.o),size1],filter(x.s, blue))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(size-gt,x.o), filter(x.s, not[yellow]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(nor[size3,or[size3,not[size2]]],iota(filter(filter(x.s, green), implies[circle,green])))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:or[%s,%s];4:size3;4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:implies[%s,%s];4:circle;4:green
'λx.apply(green,iota(filter(filter(x.s, not[rectangle]), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle;4:green
'λx.exists(triangle, filter(x.s, or[blue,yellow]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow
'λx.apply(not[and[or[triangle,triangle],green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:triangle;4:green;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, apply(same_shape,x.o)), green), triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:triangle
'λx.apply(size3,iota(filter(filter(filter(x.s, yellow), size3), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size3
'λx.apply(not[and[not[size2],size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, size1), apply(size-leq,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(not[implies[blue,not[size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, and[size1,blue]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.empty(filter(x.s, and[or[and[triangle,size3],apply(same_shape,x.o)],not[apply(same_size,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[and[yellow,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.contains(x.o, filter(filter(x.s, size3), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.contains(x.o, filter(filter(x.s, size2), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(or[and[green,apply(size-leq,iota(filter(x.s, size2)))],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle;1:%s.o;2:x
'λx.forall(and[circle,not[size1]],filter(x.s, and[apply(same_size,x.o),blue]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:size1;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(size3,iota(filter(x.s, and[apply(same_size,x.o),triangle])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(apply(same_shape,iota(filter(x.s, apply(size-lt,x.o)))),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(iota(filter(filter(filter(x.s, and[size2,blue]), size2), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(not[or[blue,and[yellow,apply(same_size,iota(filter(x.s, blue)))]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(or[blue,nand[circle,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[size3,nand[blue,and[size1,triangle]]],iota(filter(x.s, and[size3,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nand[%s,%s];4:blue;4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle
'λx.apply(blue,iota(filter(x.s, not[not[and[not[size2],apply(same_shape,x.o)]]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[or[size3,apply(same_shape,iota(filter(x.s, rectangle)))]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, or[and[yellow,green],not[apply(same_size,x.o)]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[not[and[circle,blue]],or[or[blue,circle],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:blue;4:or[%s,%s];4:or[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[triangle,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, and[blue,size3]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, not[blue])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(nand[not[circle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[blue,or[size3,and[green,and[size2,rectangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, rectangle), size1)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[not[or[size1,green]],blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:size1;4:green;4:blue
'λx.forall(green,filter(filter(x.s, apply(same_color,x.o)), and[size2,blue]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(not[blue],iota(filter(filter(x.s, rectangle), and[apply(size-lt,x.o),green])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:green
'λx.apply(and[nor[yellow,rectangle],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(blue, filter(x.s, or[apply(same_shape,x.o),green]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(or[yellow,or[circle,rectangle]],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(or[circle,blue],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(yellow,iota(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_size,x.o)), circle)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(blue,iota(filter(filter(x.s, blue), not[size1])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1
'λx.apply(triangle,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(implies[triangle,or[blue,size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[and[blue,blue]]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:blue;4:circle
'λx.apply(or[or[triangle,and[blue,circle]],not[size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, apply(same_shape,x.o)), nor[rectangle,size2]), or[yellow,yellow]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:yellow;4:yellow
'λx.apply(rectangle,iota(filter(filter(x.s, size1), apply(same_shape,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[circle,implies[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, apply(same_color,iota(x.s)))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x
'λx.apply(nor[size2,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, not[apply(same_size,x.o)]), not[size3])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size3
'λx.apply(not[and[blue,not[and[circle,circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[and[green,yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[size1,size1]],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(and[blue,and[triangle,not[circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(or[not[apply(same_shape,x.o)],or[implies[apply(same_color,x.o),rectangle],blue]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:blue;3:%s.s;2:x
'λx.forall(blue,filter(x.s, and[or[apply(same_size,x.o),triangle],circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, rectangle), blue), rectangle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue;4:rectangle
'λx.exists(nor[apply(same_size,x.o),not[apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, blue), and[blue,or[size2,rectangle]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:rectangle
'λx.apply(not[and[circle,implies[blue,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.forall(and[apply(size-lt,x.o),blue],filter(filter(x.s, size3), blue))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[iff[green,size1],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:green;4:size1;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_shape,x.o),iff[size1,circle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:iff[%s,%s];4:size1;4:circle
'λx.apply(nand[blue,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[size1,and[or[triangle,rectangle],not[blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[iff[not[blue],circle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:not[%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[nor[blue,circle],and[size2,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(implies[blue,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_color,x.o)), or[implies[circle,size2],blue]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:implies[%s,%s];4:circle;4:size2;4:blue
'λx.forall(size1,filter(filter(x.s, rectangle), size3))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size3
'λx.forall(size3,filter(filter(x.s, rectangle), size1))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.apply(and[not[yellow],or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, triangle), apply(same_size,x.o)), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size3
'λx.forall(yellow,filter(filter(x.s, size1), implies[apply(same_color,x.o),size3]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(implies[apply(same_size,x.o),blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(iff[circle,not[blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(size2,filter(x.s, apply(size-leq,x.o)))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[or[apply(same_size,iota(filter(filter(x.s, size1), triangle))),triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(nand[yellow,green],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),circle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), not[size2]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size2;4:green
'λx.apply(and[or[iff[and[or[green,rectangle],triangle],size2],apply(same_shape,iota(filter(x.s, size1)))],and[size3,blue]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:rectangle;4:triangle;4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:and[%s,%s];4:size3;4:blue;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-geq,x.o),filter(x.s, or[or[not[blue],size1],blue]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:size1;4:blue
'λx.apply(nor[and[rectangle,blue],and[blue,triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[and[green,circle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(or[size3,or[size3,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(x.s, apply(same_size,iota(filter(filter(x.s, green), apply(same_shape,x.o))))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,or[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(and[or[blue,and[size3,green]],implies[size2,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:size3;4:green;4:implies[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[not[blue],apply(same_shape,iota(filter(filter(x.s, blue), blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[circle,blue]), nor[size1,not[apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:blue;4:nor[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[yellow,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.exists(iff[size1,triangle], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(size-leq,x.o)), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:triangle
'λx.forall(apply(same_size,x.o),filter(x.s, or[blue,rectangle]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.exists(or[and[yellow,blue],not[apply(same_color,x.o)]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, not[apply(size-gt,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(implies[yellow,not[size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[and[green,not[rectangle]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(not[iff[apply(same_color,x.o),yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[implies[triangle,green],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:triangle;4:green;4:size2;1:%s.o;2:x
'λx.apply(nand[or[not[blue],rectangle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[blue,implies[not[green],apply(same_shape,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:not[%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(and[circle,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.apply(or[or[triangle,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size3), not[rectangle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:rectangle;3:%s.s;2:x
'λx.exists(circle, filter(x.s, or[size1,blue]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:blue
'λx.exists(blue, filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(or[circle,blue], filter(filter(x.s, apply(same_shape,x.o)), not[yellow]))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(not[not[implies[nor[circle,size3],blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:nor[%s,%s];4:circle;4:size3;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, green), and[green,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, triangle), triangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,or[size3,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(iff[and[blue,or[rectangle,triangle]],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[circle,apply(size-leq,x.o)]), blue)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:blue
'λx.forall(apply(size-leq,x.o),filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[not[yellow],size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:size3
'λx.apply(implies[circle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[or[blue,not[yellow]],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.apply(or[and[not[blue],nand[circle,circle]],and[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:nand[%s,%s];4:circle;4:circle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[rectangle],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:%s.s;2:x
'λx.apply(not[or[size3,and[blue,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(nor[triangle,and[blue,circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(and[size1,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:and[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), apply(same_color,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size3), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(nand[green,green],iota(filter(filter(x.s, and[apply(size-gt,x.o),implies[rectangle,yellow]]), blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:implies[%s,%s];4:rectangle;4:yellow;4:blue
'λx.forall(circle,filter(filter(x.s, green), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(or[circle,green], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:green;3:%s.s;2:x
'λx.exists(or[size3,triangle], filter(x.s, yellow))'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[rectangle,or[blue,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.exists(not[triangle], filter(filter(x.s, rectangle), implies[green,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:implies[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[and[blue,circle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.forall(implies[and[apply(same_shape,x.o),nand[size2,green]],apply(same_color,x.o)],x.s)'	0:forall(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:size2;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[implies[circle,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(implies[or[size2,rectangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size2;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[size2,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:%s.o;2:x
'λx.apply(and[size2,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.apply(and[circle,nor[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),or[circle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, nor[apply(same_color,x.o),apply(same_color,x.o)]), or[apply(same_color,x.o),apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[triangle,green]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green;4:size2
'λx.apply(and[size1,size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.exists(and[blue,apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(implies[iff[or[triangle,rectangle],triangle],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[size3,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[blue,and[apply(same_color,x.o),rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[blue,size1],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(not[and[rectangle,implies[blue,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.forall(size3,filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(or[and[nor[circle,yellow],or[blue,triangle]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:or[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, or[and[size2,blue],rectangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size2;4:blue;4:rectangle
'λx.empty(filter(x.s, or[and[green,yellow],apply(size-lt,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[nand[and[triangle,rectangle],yellow]],iota(x.s))'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.empty(filter(filter(x.s, not[or[and[triangle,circle],apply(same_color,x.o)]]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(same_size,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[nand[and[size2,and[triangle,and[blue,apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))]]],size3],nand[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:nand[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[yellow]), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;3:%s.s;2:x
'λx.apply(and[blue,and[or[green,apply(same_size,iota(filter(x.s, blue)))],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[blue,apply(same_color,iota(filter(filter(x.s, blue), circle)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(x.s, green), apply(same_shape,x.o)), size2))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(nor[nor[triangle,or[blue,rectangle]],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:rectangle;4:blue;1:%s.o;2:x
'λx.forall(implies[rectangle,blue],filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:implies[%s,%s];4:rectangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(apply(same_size,x.o), filter(x.s, or[triangle,apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size2,filter(filter(x.s, apply(same_color,x.o)), yellow))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(nor[size1,rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, nor[size1,iff[apply(same_shape,iota(filter(x.s, blue))),size2]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(implies[nor[yellow,size1],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:yellow;4:size1;4:green;1:%s.o;2:x
'λx.forall(nand[iff[triangle,blue],circle],filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:triangle;4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, blue), and[apply(same_shape,x.o),blue]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(nor[and[and[size2,yellow],rectangle],nor[not[apply(same_shape,x.o)],apply(size-leq,x.o)]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:rectangle;4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[and[size1,blue],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[or[triangle,rectangle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:blue
'λx.apply(and[nand[and[size2,and[triangle,and[blue,apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))]]],size3],nand[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:size2;4:and[%s,%s];4:triangle;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:nand[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(not[iff[circle,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, nand[or[circle,iff[green,and[rectangle,size2]]],or[blue,size2]])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:or[%s,%s];4:circle;4:iff[%s,%s];4:green;4:and[%s,%s];4:rectangle;4:size2;4:or[%s,%s];4:blue;4:size2
'λx.exists(nor[or[green,not[triangle]],size3], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:triangle;4:size3;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, rectangle), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size2
'λx.apply(not[not[or[not[triangle],and[not[green],blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:not[%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[and[apply(same_shape,x.o),rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),blue],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[or[rectangle,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[not[rectangle],apply(same_color,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(not[size3], filter(filter(x.s, blue), triangle))'	0:exists(%s, %s);4:not[%s];4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.exists(not[or[green,and[nor[size2,triangle],circle]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:green;4:and[%s,%s];4:nor[%s,%s];4:size2;4:triangle;4:circle;3:%s.s;2:x
'λx.apply(green,iota(filter(filter(x.s, not[triangle]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(not[size2],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size3,green],iota(filter(x.s, apply(size-lt,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, blue), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1
'λx.apply(size2,iota(filter(filter(x.s, blue), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2
'λx.apply(size3,iota(filter(filter(x.s, blue), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3
'λx.apply(and[blue,iff[not[circle],green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:not[%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(iff[blue,and[not[circle],apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[apply(same_shape,x.o),triangle], filter(x.s, apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(nor[and[not[circle],size1],size3],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:not[%s];4:circle;4:size1;4:size3;3:%s.s;2:x
'λx.exists(blue, filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, apply(same_size,iota(filter(x.s, apply(same_color,x.o))))), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.empty(filter(filter(x.s, not[apply(size-lt,x.o)]), and[apply(same_shape,x.o),not[apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, and[blue,size1]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.apply(or[apply(same_shape,x.o),circle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[blue]), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:circle
'λx.apply(implies[size3,not[green]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:not[%s];4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[blue,size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size2;3:%s.s;2:x
'λx.apply(and[and[circle,circle],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[and[rectangle,not[blue]],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[blue,rectangle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, blue), and[size1,iff[apply(size-leq,x.o),yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:yellow
'λx.contains(x.o, filter(x.s, not[and[rectangle,not[blue]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:blue
'λx.apply(green,iota(filter(filter(x.s, circle), or[apply(same_size,x.o),triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(triangle,iota(filter(x.s, and[triangle,or[blue,apply(same_size,x.o)]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, nor[size2,apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))]), rectangle), size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:size2;4:size1
'λx.apply(or[circle,rectangle],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(apply(same_shape,iota(filter(x.s, triangle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;1:%s.o;2:x
'λx.apply(not[and[iff[triangle,size3],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:yellow;1:%s.o;2:x
'λx.apply(or[not[yellow],or[size2,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.forall(or[blue,blue],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size2, filter(x.s, rectangle))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(size1, filter(x.s, rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[not[nand[size1,size1]],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[size2,yellow]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(apply(size-lt,x.o),iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(not[and[size2,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.exists(or[triangle,yellow], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[or[and[blue,not[and[circle,size3]]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:size3;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:circle
'λx.empty(filter(filter(filter(x.s, or[size2,size3]), iff[apply(same_shape,x.o),size2]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:size3;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:circle
'λx.apply(nand[blue,and[apply(same_color,x.o),not[circle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), yellow), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:triangle
'λx.forall(green,filter(filter(x.s, blue), and[apply(same_size,x.o),size1]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.exists(apply(same_shape,x.o), filter(x.s, not[triangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.exists(or[and[size1,size3],and[apply(same_shape,x.o),nor[yellow,yellow]]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.forall(blue,filter(filter(x.s, and[apply(same_size,x.o),yellow]), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:size1
'λx.apply(nand[triangle,implies[blue,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:implies[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.exists(and[or[or[apply(same_color,x.o),rectangle],yellow],circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:yellow;4:circle;3:%s.s;2:x
'λx.apply(and[green,or[iff[size3,apply(same_shape,x.o)],rectangle]],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:iff[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[circle,implies[blue,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, circle), apply(same_size,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(blue, filter(filter(x.s, blue), or[size1,apply(size-gt,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(and[nor[triangle,implies[circle,green]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:implies[%s,%s];4:circle;4:green;4:blue;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[and[circle,blue],size3])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:circle;4:blue;4:size3
'λx.apply(and[not[size3],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[or[size1,and[triangle,size2]],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size2;4:triangle;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, and[blue,apply(same_shape,x.o)]))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[size1,apply(same_size,x.o)]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(triangle,iota(filter(filter(x.s, triangle), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(and[apply(same_shape,x.o),or[size1,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.exists(or[circle,nor[yellow,iff[triangle,size2]]], filter(x.s, or[and[size1,and[yellow,apply(same_color,x.o)]],triangle]))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:yellow;4:iff[%s,%s];4:triangle;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.forall(rectangle,filter(filter(x.s, apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.empty(filter(filter(filter(x.s, nor[apply(same_shape,x.o),and[size3,circle]]), implies[blue,yellow]), not[triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size3;4:circle;4:implies[%s,%s];4:blue;4:yellow;4:not[%s];4:triangle
'λx.exists(apply(same_color,x.o), filter(x.s, not[circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.forall(apply(size-gt,x.o),filter(x.s, size2))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(apply(size-gt,x.o),filter(x.s, size1))'	0:forall(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[triangle,rectangle],iota(filter(filter(x.s, green), triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.exists(or[rectangle,and[size1,yellow]], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:size1;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[nor[size1,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(not[nor[size1,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.exists(or[or[circle,circle],blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:or[%s,%s];4:circle;4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[green,yellow],iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(or[circle,and[size1,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, not[nor[apply(same_size,x.o),blue]]), apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(iff[triangle,circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, not[implies[and[green,not[apply(same_size,x.o)]],yellow]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow
'λx.apply(yellow,iota(filter(filter(x.s, not[green]), size2)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[blue,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:blue
'λx.exists(or[apply(same_shape,x.o),circle], filter(x.s, not[yellow]))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.forall(rectangle,filter(filter(x.s, circle), or[apply(same_shape,x.o),rectangle]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.apply(or[apply(same_shape,x.o),rectangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, rectangle), size1))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1
'λx.forall(or[size3,or[size3,apply(same_shape,x.o)]],filter(x.s, circle))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(rectangle,x.s)'	0:forall(%s,%s);4:rectangle;3:%s.s;2:x
'λx.apply(or[circle,triangle],iota(filter(filter(x.s, size3), or[circle,blue])))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:circle;4:blue
'λx.apply(or[blue,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[apply(same_size,iota(filter(x.s, size1))),size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), yellow), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, or[rectangle,blue]), apply(same_size,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(triangle,filter(x.s, apply(size-gt,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[blue,circle],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(and[implies[not[blue],size3],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:blue;4:size3;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(size-leq,x.o)), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[size3],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[or[triangle,circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:circle;4:circle;1:%s.o;2:x
'λx.forall(and[or[implies[apply(same_shape,x.o),circle],circle],nand[size3,size1]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;4:nand[%s,%s];4:size3;4:size1;3:%s.s;2:x
'λx.forall(and[or[implies[apply(same_shape,x.o),circle],circle],nand[size3,size2]],x.s)'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:circle;4:nand[%s,%s];4:size3;4:size2;3:%s.s;2:x
'λx.empty(filter(filter(x.s, and[yellow,or[apply(same_color,iota(filter(filter(x.s, and[size3,green]), triangle))),green]]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:green;4:triangle;4:green;4:size2
'λx.apply(nor[and[or[yellow,green],rectangle],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:rectangle;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(same_size,x.o)), not[blue]), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue;4:size3
'λx.apply(nor[and[circle,green],and[blue,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[nand[blue,circle],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:circle;4:green;1:%s.o;2:x
'λx.apply(and[triangle,iff[size3,circle]],iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:iff[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(or[green,or[yellow,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[rectangle,nor[size3,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.apply(or[or[size1,rectangle],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[iff[yellow,yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(implies[or[or[size2,triangle],blue],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.empty(filter(x.s, not[implies[apply(size-gt,x.o),triangle]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle
'λx.apply(not[and[implies[size1,or[size2,nand[blue,circle]]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:implies[%s,%s];4:size1;4:or[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[and[or[circle,circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[size3,blue],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, or[green,blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[nand[yellow,blue],or[size1,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[size3,nand[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, rectangle), rectangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.forall(circle,filter(x.s, and[blue,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(and[rectangle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(and[not[size2],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size1,nand[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[triangle,and[green,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(or[circle,implies[size1,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[circle,implies[size1,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(and[or[rectangle,size3],not[or[green,triangle]]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:size3;4:not[%s];4:or[%s,%s];4:green;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size2), circle), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:size2
'λx.apply(or[blue,and[circle,or[size3,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.exists(nand[yellow,yellow], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:yellow;3:%s.s;2:x
'λx.apply(and[not[green],implies[green,and[size2,iff[yellow,not[apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:implies[%s,%s];4:green;4:and[%s,%s];4:size2;4:iff[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(same_color,iota(filter(x.s, blue))),filter(filter(x.s, green), yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:yellow
'λx.apply(apply(same_color,x.o),iota(filter(x.s, not[implies[blue,size2]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:blue;4:size2
'λx.apply(or[yellow,nor[and[size2,green],apply(same_color,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:nor[%s,%s];4:and[%s,%s];4:size2;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.contains(iota(filter(filter(x.s, triangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:blue
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(filter(filter(x.s, blue), blue)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.exists(size2, filter(x.s, blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size3, filter(x.s, blue))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(size1, filter(x.s, blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, and[circle,circle]), iff[not[yellow],size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:iff[%s,%s];4:not[%s];4:yellow;4:size2
'λx.apply(iff[implies[yellow,size1],not[yellow]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:yellow;4:size1;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(or[or[green,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[circle,or[green,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.forall(rectangle,filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.forall(size3,filter(filter(x.s, apply(same_size,x.o)), iff[not[size1],blue]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:iff[%s,%s];4:not[%s];4:size1;4:blue
'λx.empty(filter(x.s, and[apply(same_size,x.o),implies[not[size3],size1]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:not[%s];4:size3;4:size1
'λx.apply(or[not[triangle],and[not[circle],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[or[rectangle,size1],and[size2,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:size1;4:and[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,blue],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[and[rectangle,green],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:green;4:size1;1:%s.o;2:x
'λx.apply(nand[size3,nor[circle,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:nor[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(nand[size3,nor[circle,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:nor[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.forall(size1,filter(x.s, rectangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(size3,filter(x.s, rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(size2,filter(x.s, rectangle))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(and[apply(same_color,x.o),or[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(nand[not[size1],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:size1;4:yellow;1:%s.o;2:x
'λx.exists(or[apply(same_shape,x.o),and[size3,circle]], filter(x.s, iff[circle,and[circle,triangle]]))'	0:exists(%s, %s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size3;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:and[%s,%s];4:circle;4:triangle
'λx.forall(size3,filter(filter(x.s, and[apply(size-gt,x.o),nand[yellow,blue]]), or[apply(same_shape,x.o),green]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:nand[%s,%s];4:yellow;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(apply(size-leq,iota(filter(x.s, blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[apply(same_size,x.o),size2],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, implies[size1,iff[size3,triangle]]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:iff[%s,%s];4:size3;4:triangle;4:green
'λx.apply(implies[or[triangle,size3],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:size3;4:yellow;1:%s.o;2:x
'λx.exists(green, filter(x.s, rectangle))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[apply(size-geq,x.o),size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1
'λx.exists(not[apply(same_size,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nand[nor[blue,circle],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[blue,implies[blue,apply(same_shape,x.o)]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[yellow,blue],iota(filter(x.s, and[or[apply(same_color,x.o),green],and[size3,size3]])))'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:and[%s,%s];4:size3;4:size3
'λx.apply(not[and[circle,or[green,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(or[circle,and[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), or[yellow,size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:yellow;4:size2
'λx.forall(size3,filter(filter(x.s, and[apply(size-gt,x.o),nand[green,triangle]]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:nand[%s,%s];4:green;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[size3,blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.forall(or[and[rectangle,yellow],and[apply(same_size,x.o),not[rectangle]]],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[or[triangle,yellow],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[and[circle,yellow],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:yellow;1:%s.o;2:x
'λx.apply(iff[not[size1],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:size1;4:size3;1:%s.o;2:x
'λx.forall(not[green],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.forall(size1,filter(filter(x.s, circle), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.forall(size2,filter(filter(x.s, circle), blue))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(and[not[blue],apply(same_shape,iota(filter(x.s, blue)))],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, or[apply(same_color,x.o),triangle]), size1), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;4:size1;4:green
'λx.exists(not[iff[yellow,apply(same_shape,x.o)]], x.s)'	0:exists(%s, %s);4:not[%s];4:iff[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(rectangle,filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(not[rectangle],iota(filter(filter(filter(x.s, not[size3]), apply(same_size,x.o)), circle)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.apply(nand[or[size2,size3],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size2;4:size3;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(implies[yellow,size3], filter(filter(x.s, apply(same_size,x.o)), or[or[blue,size3],rectangle]))'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:or[%s,%s];4:blue;4:size3;4:rectangle
'λx.apply(not[and[size1,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), not[size1])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1
'λx.apply(or[and[circle,green],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[triangle,or[not[circle],blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[blue,nor[yellow,size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:nor[%s,%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(size-geq,x.o)), and[or[green,green],apply(same_shape,x.o)]), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:green;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(size3,iota(filter(x.s, and[size3,size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:size3
'λx.apply(nand[yellow,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(nor[size2,size2],filter(filter(filter(x.s, or[rectangle,circle]), yellow), apply(same_color,x.o)))'	0:forall(%s,%s);4:nor[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[blue,and[blue,and[apply(same_size,x.o),blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[and[green,circle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:circle;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[not[size3],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:size3;4:blue
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, size1), green))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, size3), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.contains(x.o, filter(filter(x.s, implies[blue,circle]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:circle;4:triangle
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, triangle), blue), size1))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:size1
'λx.forall(nand[not[blue],apply(same_color,x.o)],filter(x.s, circle))'	0:forall(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(nand[yellow,and[yellow,not[and[size2,triangle]]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.exists(or[yellow,or[triangle,apply(same_size,x.o)]], filter(x.s, size3))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(circle,filter(x.s, not[blue]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, size3), size3), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;4:blue
'λx.apply(size3,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size2,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(size1,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.exists(or[green,size3], filter(x.s, apply(size-lt,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_size,iota(filter(x.s, size3)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.forall(apply(same_size,x.o),filter(x.s, or[yellow,and[green,not[circle]]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:and[%s,%s];4:green;4:not[%s];4:circle
'λx.apply(not[not[or[or[blue,rectangle],triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:or[%s,%s];4:blue;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, apply(same_shape,x.o)), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(and[blue,apply(same_color,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(x.s, apply(same_size,x.o)), blue), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:blue
'λx.apply(nand[apply(same_color,x.o),size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(nand[apply(same_color,x.o),size3],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(nand[apply(same_color,x.o),size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(or[or[circle,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, nor[yellow,size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:size2
'λx.apply(implies[size3,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, or[blue,size1]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[size1,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[size3],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[or[blue,green],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size1), blue), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue;4:circle
'λx.apply(nor[and[size1,yellow],and[or[green,yellow],not[size3]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[implies[size2,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size2;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(x.s, and[rectangle,size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size1
'λx.apply(not[or[size3,and[size1,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(x.s, and[rectangle,or[blue,apply(same_shape,x.o)]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, size2), size2))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;1:%s.o;2:x
'λx.apply(implies[circle,not[size3]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(or[and[green,triangle],nor[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:triangle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, or[apply(same_shape,x.o),and[yellow,apply(same_shape,x.o)]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, nand[circle,yellow]), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(or[blue,and[circle,size1]],filter(x.s, not[apply(same_size,x.o)]))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, implies[not[circle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:circle;4:blue
'λx.apply(not[and[blue,implies[circle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(iff[yellow,rectangle],iota(filter(filter(x.s, triangle), apply(size-gt,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(implies[not[apply(same_color,x.o)],triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.apply(circle,iota(filter(filter(x.s, and[circle,yellow]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[size3,and[blue,size3]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:and[%s,%s];4:blue;4:size3
'λx.forall(not[rectangle],x.s)'	0:forall(%s,%s);4:not[%s];4:rectangle;3:%s.s;2:x
'λx.exists(iff[size3,size1], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:size1;3:%s.s;2:x
'λx.apply(triangle,iota(filter(filter(x.s, blue), or[size2,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:size2;4:triangle
'λx.contains(x.o, filter(x.s, and[or[yellow,green],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, and[or[apply(same_color,x.o),size1],circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;4:circle
'λx.apply(not[implies[not[blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[or[implies[triangle,blue],green],not[and[green,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:triangle;4:blue;4:green;4:not[%s];4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[blue,or[circle,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(not[and[triangle,nor[rectangle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), circle), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:size1
'λx.exists(implies[yellow,green], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:green;3:%s.s;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, implies[circle,size3]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, apply(same_shape,x.o)), size1)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(green,iota(filter(filter(x.s, apply(same_shape,x.o)), size2)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.forall(or[apply(size-lt,x.o),apply(same_color,x.o)],filter(x.s, or[apply(same_shape,x.o),apply(same_color,x.o)]))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(nor[yellow,and[apply(same_shape,x.o),or[green,yellow]]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:green;4:yellow;3:%s.s;2:x
'λx.exists(apply(same_shape,x.o), filter(filter(x.s, rectangle), yellow))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(nand[blue,and[implies[size1,size2],blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:implies[%s,%s];4:size1;4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, or[blue,yellow]), circle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:yellow;4:circle
'λx.forall(or[yellow,apply(same_color,x.o)],filter(filter(x.s, circle), circle))'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.apply(blue,iota(filter(filter(filter(x.s, not[circle]), or[size2,blue]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:or[%s,%s];4:size2;4:blue;4:blue
'λx.apply(size1,iota(filter(x.s, and[size1,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green
'λx.apply(or[and[size3,size1],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, or[yellow,not[blue]]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[size2,green])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green
'λx.apply(not[or[and[size2,not[size2]],and[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:not[%s];4:size2;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),filter(filter(x.s, size2), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size3
'λx.apply(nand[triangle,not[or[circle,blue]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(or[and[size3,yellow],apply(same_shape,x.o)], filter(x.s, not[apply(same_color,x.o)]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[blue,implies[circle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(nand[circle,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, size3), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.apply(triangle,iota(filter(filter(x.s, size1), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.apply(and[implies[yellow,size3],or[blue,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:size3;4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, nor[apply(size-gt,x.o),and[size1,size1]])), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[triangle,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.exists(not[and[triangle,green]], filter(x.s, or[nand[triangle,apply(same_size,iota(filter(x.s, not[not[apply(same_shape,x.o)]])))],yellow]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:triangle;4:green;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(x.s, green), not[nor[or[apply(same_shape,x.o),blue],blue]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue
'λx.forall(not[circle],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[apply(same_size,x.o),or[and[and[rectangle,rectangle],green],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(implies[and[not[size2],blue],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:size2;4:blue;4:circle;1:%s.o;2:x
'λx.exists(or[green,yellow], filter(filter(x.s, not[or[circle,nor[apply(same_shape,x.o),circle]]]), or[apply(same_color,x.o),blue]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(blue, filter(x.s, or[size1,apply(size-gt,x.o)]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[not[yellow],circle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:yellow;4:circle
'λx.apply(green,iota(filter(x.s, and[size1,green])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:green
'λx.apply(or[green,nand[size1,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:nand[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(or[triangle,rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(implies[yellow,apply(same_color,iota(filter(x.s, and[not[circle],apply(same_shape,x.o)])))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[not[apply(same_size,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size2), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, size3), circle)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle
'λx.apply(size1,iota(filter(x.s, and[yellow,apply(size-gt,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(and[not[size2],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), and[nor[rectangle,or[rectangle,blue]],circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:or[%s,%s];4:rectangle;4:blue;4:circle
'λx.apply(iff[and[green,or[and[size3,not[apply(same_color,iota(filter(filter(x.s, rectangle), green)))]],blue]],and[size2,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:green;4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:blue;4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, blue), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;1:%s.o;2:x
'λx.exists(and[blue,or[rectangle,apply(size-leq,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(not[and[yellow,nand[and[implies[blue,triangle],rectangle],green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:nand[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:triangle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(nand[not[blue],implies[rectangle,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:implies[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, triangle))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(triangle,filter(x.s, size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(triangle,filter(x.s, size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(triangle,filter(x.s, size1))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(triangle,filter(x.s, green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[nor[yellow,rectangle],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[blue,and[circle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(not[iff[circle,implies[blue,and[apply(size-gt,x.o),blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:iff[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(not[and[iff[blue,circle],and[triangle,apply(same_size,x.o)]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(nand[and[triangle,or[and[size2,green],size1]],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:triangle;4:or[%s,%s];4:and[%s,%s];4:size2;4:green;4:size1;4:triangle;1:%s.o;2:x
'λx.forall(or[size3,size1],filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:size3;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(and[blue,iff[size2,size2]],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:iff[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, or[apply(size-leq,x.o),size3])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, size1), yellow)))), size3), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size3;4:rectangle
'λx.apply(iff[and[rectangle,blue],not[blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:blue;4:not[%s];4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), nand[or[yellow,implies[apply(size-gt,x.o),green]],apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:or[%s,%s];4:yellow;4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[apply(same_size,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[size2,green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:green
'λx.exists(not[or[apply(same_color,x.o),implies[apply(same_shape,x.o),apply(same_color,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[triangle,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.contains(iota(filter(x.s, apply(same_shape,x.o))), filter(x.s, apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),blue],iota(filter(filter(x.s, blue), apply(size-leq,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[circle,circle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, triangle), size2), green))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:green
'λx.forall(size1,filter(filter(filter(x.s, triangle), size2), green))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:green
'λx.exists(not[green], filter(x.s, size3))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(not[green], filter(x.s, size2))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(size3,filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:yellow
'λx.contains(x.o, filter(x.s, not[and[circle,or[green,yellow]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, not[blue]), size3), or[nor[blue,rectangle],size1])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size3;4:or[%s,%s];4:nor[%s,%s];4:blue;4:rectangle;4:size1;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), rectangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:size2
'λx.apply(not[yellow],iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))),blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[not[size2],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:green;1:%s.o;2:x
'λx.apply(iff[or[size3,size1],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:size3;4:size1;4:size3;1:%s.o;2:x
'λx.apply(and[blue,and[not[yellow],and[and[or[apply(same_size,x.o),nor[apply(same_size,iota(filter(x.s, blue))),yellow]],blue],blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:yellow;4:blue;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(x.s, triangle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(or[rectangle,and[iff[yellow,circle],not[blue]]],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(nand[or[triangle,size1],or[circle,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), yellow), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[triangle,green],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(nand[or[size2,yellow],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(nand[not[not[not[blue]]],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:not[%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[blue,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(or[green,implies[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:implies[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, circle), circle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle
'λx.exists(not[circle], filter(x.s, yellow))'	0:exists(%s, %s);4:not[%s];4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.contains(iota(filter(filter(x.s, triangle), not[blue])), filter(x.s, or[size1,size2]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2
'λx.apply(or[triangle,apply(same_size,x.o)],iota(filter(filter(x.s, blue), apply(same_color,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[apply(size-gt,x.o),yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[or[rectangle,triangle],or[green,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(not[and[blue,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, iff[size2,green]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size2;4:green
'λx.exists(triangle, filter(x.s, iff[size3,green]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size3;4:green
'λx.exists(triangle, filter(x.s, iff[size1,green]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:green
'λx.apply(nand[and[size3,yellow],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),yellow],iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(or[apply(size-lt,x.o),iff[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[size1,apply(size-geq,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),implies[triangle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:implies[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(not[and[blue,or[size2,not[circle]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:or[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(nand[triangle,not[or[blue,rectangle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(or[triangle,size3],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.apply(iff[and[apply(same_shape,x.o),size3],apply(same_shape,x.o)],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(size2,filter(filter(x.s, and[size3,not[nand[apply(same_size,iota(filter(filter(x.s, triangle), blue))),size1]]]), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:size1;4:size2
'λx.apply(iff[circle,apply(size-geq,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.exists(and[not[apply(same_color,x.o)],size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(size1,iota(filter(filter(x.s, yellow), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[triangle,or[triangle,or[rectangle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[size3,not[green]],iota(filter(filter(x.s, size3), or[triangle,yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:or[%s,%s];4:triangle;4:yellow
'λx.exists(yellow, filter(filter(filter(x.s, not[triangle]), apply(same_shape,x.o)), not[size1]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(not[and[triangle,not[or[rectangle,or[apply(same_color,iota(filter(x.s, rectangle))),rectangle]]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[green,apply(size-lt,iota(filter(x.s, and[blue,triangle])))],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:size3;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.forall(triangle,filter(filter(x.s, apply(same_shape,x.o)), size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.contains(iota(filter(filter(x.s, not[blue]), size2)), filter(x.s, rectangle))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(and[apply(same_color,x.o),size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.exists(and[apply(same_color,x.o),size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.forall(size2,filter(filter(x.s, apply(same_shape,x.o)), green))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(and[not[yellow],nand[green,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:nand[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[triangle]), or[size1,yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:or[%s,%s];4:size1;4:yellow
'λx.apply(implies[or[triangle,blue],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(not[implies[and[circle,apply(same_color,x.o)],iff[blue,apply(same_shape,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(filter(x.s, or[size1,size2]), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:size2;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, and[size1,not[nand[apply(same_size,iota(filter(filter(x.s, triangle), blue))),blue]]]), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:blue;4:circle
'λx.forall(rectangle,filter(x.s, green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(rectangle,filter(x.s, size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(rectangle,filter(x.s, size2))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(implies[size3,blue], filter(x.s, green))'	0:exists(%s, %s);4:implies[%s,%s];4:size3;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(circle,filter(filter(x.s, nor[apply(same_shape,x.o),size2]), implies[blue,apply(same_color,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[size1,or[blue,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, nand[yellow,yellow])))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:yellow
'λx.apply(or[size3,or[blue,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[size1,or[apply(same_size,x.o),size3]]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(size2,filter(x.s, and[size1,or[apply(same_size,x.o),size3]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.apply(or[rectangle,nor[green,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:nor[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(or[not[yellow],and[yellow,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.forall(not[triangle],filter(x.s, yellow))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(nand[blue,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[blue]), triangle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, or[green,apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[and[and[blue,size1],triangle],and[apply(same_size,x.o),size2]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:size1;4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.exists(size1, filter(filter(x.s, circle), yellow))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.exists(size2, filter(filter(x.s, circle), yellow))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:yellow
'λx.apply(not[nor[triangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(implies[size1,and[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.forall(blue,filter(x.s, size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(blue,filter(x.s, size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(nor[not[apply(same_shape,x.o)],yellow], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.exists(or[implies[apply(size-geq,x.o),yellow],size1], filter(x.s, blue))'	0:exists(%s, %s);4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.forall(size1,filter(filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), circle), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:blue
'λx.exists(green, filter(x.s, implies[size3,blue]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size3;4:blue
'λx.exists(nand[triangle,apply(same_size,x.o)], filter(x.s, triangle))'	0:exists(%s, %s);4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(iff[apply(same_color,x.o),blue],filter(x.s, yellow))'	0:forall(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(rectangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[size3,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[triangle,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[and[yellow,implies[circle,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:implies[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size2), not[and[size2,apply(size-lt,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), not[triangle]), and[yellow,size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:triangle;4:and[%s,%s];4:yellow;4:size1
'λx.forall(green,filter(filter(x.s, blue), or[apply(same_color,x.o),and[or[rectangle,green],not[apply(same_shape,x.o)]]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[not[blue],and[or[apply(same_color,x.o),green],or[apply(same_shape,iota(filter(x.s, blue))),blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(iff[not[yellow],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.empty(filter(x.s, nor[apply(same_shape,x.o),size1]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.forall(blue,filter(filter(filter(x.s, apply(same_shape,x.o)), yellow), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size3
'λx.apply(or[implies[size2,yellow],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size2;4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), nand[blue,rectangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:blue;4:rectangle
'λx.apply(or[implies[not[circle],yellow],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:circle;4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(implies[circle,apply(same_size,x.o)],iota(filter(x.s, or[rectangle,circle])))'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle
'λx.apply(and[or[blue,size3],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(nor[iff[and[circle,size2],apply(same_shape,x.o)],not[green]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:circle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:green;3:%s.s;2:x
'λx.apply(and[circle,and[not[blue],or[circle,green]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.forall(size2,filter(x.s, and[apply(same_size,x.o),apply(same_color,x.o)]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,iota(filter(x.s, blue)))), size2), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;4:rectangle
'λx.apply(or[or[blue,blue],not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[nand[triangle,triangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:triangle;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[nor[yellow,yellow],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:yellow;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(implies[triangle,not[nor[circle,blue]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:not[%s];4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[not[circle],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(nand[nor[apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),size3],circle], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle;3:%s.s;2:x
'λx.exists(and[green,size1], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(same_color,x.o)), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, and[not[size1],blue]), and[or[triangle,apply(same_shape,x.o)],apply(same_color,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:blue;4:and[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, circle), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(triangle,iota(x.s))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, nand[circle,green]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:green;4:blue
'λx.apply(or[circle,or[or[not[not[size2]],and[apply(same_shape,iota(filter(filter(x.s, blue), triangle))),yellow]],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:or[%s,%s];4:not[%s];4:not[%s];4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, triangle), circle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:circle
'λx.apply(nand[green,circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[not[size1],green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:size1;4:green
'λx.apply(and[not[size3],nor[size1,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:nor[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.empty(filter(x.s, not[not[apply(size-lt,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(not[yellow],filter(x.s, rectangle))'	0:forall(%s,%s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(size1,iota(filter(filter(x.s, size1), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(size3,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, size2), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:yellow
'λx.exists(apply(same_shape,x.o), filter(x.s, implies[size2,rectangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size2;4:rectangle
'λx.forall(apply(size-geq,x.o),filter(x.s, or[implies[size1,rectangle],green]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:size1;4:rectangle;4:green
'λx.apply(iff[not[triangle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, and[not[rectangle],and[size1,green]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:size1;4:green
'λx.apply(nand[implies[blue,size1],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:blue;4:size1;4:triangle;1:%s.o;2:x
'λx.apply(implies[blue,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(or[implies[triangle,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:triangle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[implies[blue,triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, green), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2;3:%s.s;2:x
'λx.contains(iota(filter(filter(x.s, green), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;3:%s.s;2:x
'λx.apply(nor[and[blue,circle],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(or[not[rectangle],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(not[nand[blue,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(nand[green,rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(and[size1,size2],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:size2;1:iota(%s);3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size3), not[yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:yellow
'λx.apply(nor[yellow,blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(or[size3,triangle],iota(filter(filter(filter(x.s, yellow), size3), size3)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3;4:size3
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_size,x.o)), not[and[yellow,circle]]), nor[iff[circle,yellow],rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:yellow;4:circle;4:nor[%s,%s];4:iff[%s,%s];4:circle;4:yellow;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, size3), yellow)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:yellow
'λx.apply(rectangle,iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[apply(size-lt,x.o),not[blue]]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:blue;4:circle
'λx.empty(filter(filter(x.s, and[size2,apply(size-lt,x.o)]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size2
'λx.forall(or[yellow,apply(same_color,x.o)],filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:forall(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[implies[not[circle],yellow],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:not[%s];4:circle;4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), or[apply(same_size,x.o),size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(nand[or[triangle,size1],or[yellow,size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:size1;4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(implies[yellow,green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, size1), apply(same_shape,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(yellow, filter(filter(x.s, triangle), apply(size-lt,x.o)))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(filter(x.s, not[blue]), triangle), size2), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:triangle;4:size2;4:size2
'λx.exists(not[and[yellow,yellow]], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[yellow,size1],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:size1;4:green;1:%s.o;2:x
'λx.apply(implies[blue,or[circle,green]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(or[not[blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, and[rectangle,or[blue,size1]]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:size1
'λx.exists(circle, filter(x.s, nand[not[triangle],nor[yellow,apply(same_color,x.o)]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:triangle;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, apply(same_shape,iota(filter(filter(x.s, green), size1)))), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1;4:circle
'λx.apply(or[not[and[triangle,yellow]],size1],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:yellow;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[triangle],iota(filter(filter(x.s, not[triangle]), green)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:green
'λx.apply(or[or[blue,blue],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:blue;4:green;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, and[blue,triangle]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle;4:blue
'λx.apply(and[not[blue],and[or[apply(same_shape,x.o),blue],or[apply(same_shape,iota(filter(x.s, blue))),blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[or[size2,yellow],or[apply(size-lt,x.o),size3]]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size2;4:yellow;4:or[%s,%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:size3;4:size2
'λx.apply(implies[or[blue,and[triangle,not[size3]]],nor[not[circle],yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:not[%s];4:size3;4:nor[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), rectangle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:blue
'λx.apply(and[green,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(and[circle,or[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(or[green,and[triangle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(not[and[size3,circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(not[circle],iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(not[circle],iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(apply(same_size,iota(filter(filter(x.s, apply(same_size,x.o)), not[triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, iff[circle,size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:size3
'λx.apply(apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), apply(size-geq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[size2,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(or[size1,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[and[green,and[blue,blue]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:green;4:and[%s,%s];4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, or[size2,and[implies[circle,rectangle],triangle]]))),rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size2;4:and[%s,%s];4:implies[%s,%s];4:circle;4:rectangle;4:triangle;4:rectangle;1:%s.o;2:x
'λx.exists(circle, x.s)'	0:exists(%s, %s);4:circle;3:%s.s;2:x
'λx.empty(filter(x.s, and[and[not[or[apply(same_shape,x.o),size2]],or[size2,or[size1,not[apply(same_size,x.o)]]]],size3]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:or[%s,%s];4:size2;4:or[%s,%s];4:size1;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(green,filter(x.s, not[iff[triangle,or[green,blue]]]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:iff[%s,%s];4:triangle;4:or[%s,%s];4:green;4:blue
'λx.forall(blue,filter(x.s, and[size2,or[apply(same_shape,x.o),size3]]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, yellow), rectangle), apply(same_color,iota(filter(filter(x.s, green), not[triangle])))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle
'λx.contains(iota(filter(filter(x.s, circle), or[rectangle,yellow])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:rectangle;4:yellow;3:%s.s;2:x
'λx.apply(and[or[rectangle,yellow],not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:yellow;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,x.o)), not[triangle]), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:triangle;4:size2
'λx.apply(and[circle,not[or[triangle,blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[not[and[blue,size1]],apply(same_shape,x.o)]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(or[nor[circle,size3],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:circle;4:size3;4:size3;1:%s.o;2:x
'λx.apply(and[or[and[triangle,green],iff[not[blue],or[rectangle,triangle]]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:iff[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(and[size3,not[apply(same_shape,x.o)]],filter(x.s, and[size3,yellow]))'	0:forall(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, size1), or[triangle,green]), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:triangle;4:green;4:size1;3:%s.s;2:x
'λx.apply(and[circle,nand[triangle,not[size2]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:nand[%s,%s];4:triangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[and[yellow,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[not[iff[iff[nor[circle,circle],apply(same_shape,x.o)],blue]],apply(same_size,x.o)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, apply(same_size,x.o)), nor[size3,apply(same_shape,iota(filter(x.s, size3)))]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, and[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.contains(x.o, filter(filter(filter(x.s, yellow), not[circle]), yellow))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:circle;4:yellow
'λx.exists(green, filter(filter(x.s, green), and[size1,and[apply(size-gt,x.o),triangle]]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:and[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:not[%s];4:circle
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size3), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:not[%s];4:circle
'λx.apply(implies[triangle,yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(or[blue,green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(nor[size2,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:green;1:%s.o;2:x
'λx.exists(not[blue], x.s)'	0:exists(%s, %s);4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(not[and[size3,size2]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(blue,iota(filter(filter(x.s, triangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(or[apply(same_size,x.o),rectangle],filter(filter(filter(x.s, green), or[circle,apply(same_color,x.o)]), size1))'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.exists(circle, filter(filter(x.s, circle), apply(same_size,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),and[iff[triangle,size3],blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:iff[%s,%s];4:triangle;4:size3;4:blue;1:%s.o;2:x
'λx.exists(size1, filter(x.s, not[apply(same_size,x.o)]))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(filter(x.s, size2), apply(same_color,x.o)), not[triangle]), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:triangle;4:size2
'λx.forall(apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),filter(filter(filter(x.s, size1), yellow), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(implies[and[not[size3],apply(same_size,x.o)],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:not[%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[size3,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle
'λx.empty(filter(x.s, iff[apply(same_size,x.o),not[blue]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:blue
'λx.apply(or[size3,and[yellow,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:size3;1:%s.o;2:x
'λx.forall(or[circle,nand[apply(same_color,x.o),blue]],filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, and[apply(same_shape,x.o),circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[implies[apply(same_size,x.o),nor[triangle,blue]],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:nor[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[and[yellow,size3],size2],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:size2;4:size3;1:%s.o;2:x
'λx.apply(nand[iff[blue,size2],yellow],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:blue;4:size2;4:yellow;1:%s.o;2:x
'λx.apply(and[implies[circle,green],implies[blue,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:circle;4:green;4:implies[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, and[green,rectangle]), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:rectangle;4:rectangle
'λx.apply(or[size3,circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.forall(and[or[apply(same_size,x.o),and[size2,size1]],apply(same_color,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:size2;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[or[triangle,apply(same_size,x.o)],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[or[rectangle,apply(size-geq,x.o)],not[apply(same_color,x.o)]]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[triangle,and[size1,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:and[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[or[apply(same_color,x.o),and[size3,size1]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size3;4:size1
'λx.apply(not[and[nor[size1,size1],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:size1;4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[size1,implies[blue,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:implies[%s,%s];4:blue;4:green;1:%s.o;2:x
'λx.apply(not[not[or[apply(same_shape,x.o),and[or[yellow,apply(same_shape,x.o)],size2]]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(iff[and[rectangle,circle],yellow],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:yellow;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[yellow,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, size2), and[apply(same_color,x.o),or[rectangle,circle]]), yellow), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:rectangle;4:circle;4:yellow;4:size2
'λx.apply(and[and[size2,rectangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(iff[not[rectangle],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(implies[apply(same_color,iota(filter(x.s, blue))),and[green,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.exists(blue, filter(x.s, nor[yellow,size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:size3
'λx.contains(x.o, filter(filter(x.s, yellow), not[circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:circle
'λx.apply(blue,iota(filter(filter(x.s, apply(same_color,x.o)), or[apply(same_size,x.o),apply(size-lt,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, yellow), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.forall(size2,filter(x.s, or[nor[circle,yellow],triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:triangle
'λx.exists(blue, filter(x.s, or[yellow,not[apply(same_color,x.o)]]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[implies[size2,rectangle],nand[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:rectangle;4:nand[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[and[triangle,size3],green])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:green
'λx.forall(apply(same_color,x.o),filter(filter(x.s, nand[triangle,and[apply(same_size,x.o),green]]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(nor[and[circle,triangle],nor[not[apply(same_shape,x.o)],apply(size-leq,x.o)]],x.s)'	0:forall(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(blue,iota(filter(x.s, and[apply(same_shape,x.o),blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[or[blue,and[blue,size3]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:and[%s,%s];4:blue;4:size3;4:size3;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, nand[size2,yellow]), triangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:yellow;4:triangle
'λx.forall(rectangle,filter(filter(x.s, not[and[blue,circle]]), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:blue;4:circle;4:size1
'λx.apply(nor[green,green],iota(filter(filter(x.s, rectangle), apply(same_color,x.o))))'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, implies[rectangle,green]))),circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:green;4:circle;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, apply(size-lt,x.o)), nor[blue,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[iff[green,size3],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:size3;4:size1;1:%s.o;2:x
'λx.apply(not[and[iff[blue,circle],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_size,x.o)), size3))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3
'λx.forall(rectangle,filter(filter(x.s, apply(same_size,x.o)), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1
'λx.apply(nor[triangle,and[circle,not[or[green,yellow]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[or[triangle,size2],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:triangle;4:size2;4:yellow;1:%s.o;2:x
'λx.forall(or[and[size3,rectangle],and[apply(same_size,x.o),not[rectangle]]],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[not[circle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[circle,size2],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:size2;4:green;1:%s.o;2:x
'λx.apply(nor[yellow,apply(size-gt,iota(filter(x.s, yellow)))],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;1:%s.o;2:x
'λx.apply(iff[and[and[triangle,yellow],yellow],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(and[not[green],implies[green,and[size1,iff[blue,not[apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))]]]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:green;4:implies[%s,%s];4:green;4:and[%s,%s];4:size1;4:iff[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[not[size3],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:size3;4:triangle;1:%s.o;2:x
'λx.exists(apply(size-gt,x.o), filter(filter(x.s, blue), blue))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.exists(apply(size-lt,iota(filter(filter(x.s, size1), size1))), filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[green,iff[implies[not[size3],and[apply(same_shape,x.o),or[and[apply(same_shape,iota(filter(filter(x.s, not[yellow]), size3))),triangle],size1]]],rectangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:iff[%s,%s];4:implies[%s,%s];4:not[%s];4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:size3;4:triangle;4:size1;4:rectangle;3:%s.s;2:x
'λx.empty(filter(x.s, and[not[rectangle],and[apply(same_shape,x.o),size1]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.forall(not[and[apply(same_color,x.o),circle]],filter(x.s, not[blue]))'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue
'λx.apply(iff[nand[iff[rectangle,blue],circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:iff[%s,%s];4:rectangle;4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[apply(same_shape,x.o),not[apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[size1,apply(size-leq,x.o)]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[size2,not[blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:not[%s];4:blue
'λx.apply(or[size2,nand[yellow,apply(same_shape,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[apply(same_color,iota(filter(x.s, and[apply(same_color,x.o),blue]))),triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:triangle;1:%s.o;2:x
'λx.exists(circle, filter(x.s, nand[not[rectangle],nor[yellow,apply(same_color,x.o)]]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:rectangle;4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.forall(nand[apply(same_shape,x.o),or[blue,apply(same_size,x.o)]],filter(filter(x.s, iff[rectangle,blue]), triangle))'	0:forall(%s,%s);4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:rectangle;4:blue;4:triangle
'λx.apply(and[blue,nand[green,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.apply(iff[and[and[blue,blue],rectangle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[or[circle,yellow],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[circle,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[blue,not[and[circle,apply(size-leq,x.o)]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), blue), not[circle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:not[%s];4:circle
'λx.forall(or[rectangle,apply(same_shape,x.o)],filter(x.s, apply(size-lt,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[not[apply(same_color,x.o)],circle]), and[not[and[size1,size2]],nor[circle,not[apply(same_shape,x.o)]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:size2;4:nor[%s,%s];4:circle;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[size3,size1],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[implies[or[rectangle,triangle],green],or[yellow,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:green;4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(or[not[circle],triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(rectangle,filter(x.s, and[rectangle,or[blue,apply(same_color,iota(filter(filter(x.s, and[green,circle]), apply(same_size,x.o))))]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, not[size2]), apply(same_color,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(size1,iota(filter(filter(x.s, yellow), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size1
'λx.apply(implies[or[size1,triangle],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:green;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, blue), nand[size2,and[circle,size1]]), size3), or[yellow,or[apply(same_size,x.o),not[rectangle]]]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:size2;4:and[%s,%s];4:circle;4:size1;4:size3;4:or[%s,%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:rectangle
'λx.apply(nor[circle,green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.apply(and[yellow,and[size1,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(filter(x.s, not[circle]), size2)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size2
'λx.apply(nand[yellow,iff[circle,nand[rectangle,yellow]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:circle;4:nand[%s,%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.apply(not[and[or[yellow,green],triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:triangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[triangle,blue])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:blue
'λx.forall(nand[nor[triangle,blue],circle],filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[green,or[apply(same_shape,x.o),green]]), apply(same_shape,x.o))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.exists(not[yellow], filter(x.s, and[apply(same_shape,x.o),not[yellow]]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.apply(blue,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.forall(size2,filter(x.s, and[rectangle,blue]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:blue
'λx.apply(blue,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(blue,iota(filter(filter(x.s, size3), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue
'λx.apply(and[not[yellow],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[nand[blue,not[yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nand[%s,%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[iff[size3,blue],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:size3;4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[not[circle],and[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[green,or[rectangle,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), size1), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(circle,iota(filter(filter(filter(x.s, blue), circle), implies[blue,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:implies[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,nand[circle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[not[and[circle,yellow]],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:yellow;4:size2;1:%s.o;2:x
'λx.apply(or[not[and[circle,yellow]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, and[yellow,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.forall(iff[circle,size3],filter(filter(filter(x.s, blue), blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:iff[%s,%s];4:circle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[implies[size3,triangle],implies[yellow,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:size3;4:triangle;4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(implies[apply(same_color,x.o),size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(implies[apply(same_color,x.o),size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, and[apply(same_shape,x.o),blue]), blue), blue), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue;4:blue;4:blue
'λx.apply(or[green,or[triangle,triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(or[not[size1],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(and[implies[blue,yellow],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:blue;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(not[rectangle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(not[rectangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(and[and[green,triangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:green;4:triangle;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(size-leq,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size1
'λx.apply(circle,iota(filter(x.s, implies[or[implies[size3,size3],size3],apply(same_shape,x.o)])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:or[%s,%s];4:implies[%s,%s];4:size3;4:size3;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[apply(same_shape,x.o),size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(not[and[nor[circle,circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, size3), circle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(x.s, apply(same_shape,x.o)), yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.contains(x.o, filter(filter(x.s, apply(same_shape,x.o)), not[and[circle,or[green,yellow]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:green;4:yellow
'λx.apply(not[or[and[blue,blue],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), apply(size-leq,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[and[size3,triangle],and[rectangle,apply(same_shape,iota(filter(x.s, size1)))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), and[apply(same_size,x.o),rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.forall(green,filter(filter(x.s, and[rectangle,size3]), blue))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;4:blue
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), circle), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:not[%s];4:rectangle
'λx.apply(iff[apply(same_size,x.o),size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(nand[and[blue,blue],size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size2;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(filter(x.s, implies[apply(same_color,x.o),circle]), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[rectangle,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(and[implies[size1,rectangle],not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size1;4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, or[size1,apply(same_shape,x.o)]), not[nand[or[size1,blue],circle]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:nand[%s,%s];4:or[%s,%s];4:size1;4:blue;4:circle
'λx.apply(nand[and[rectangle,rectangle],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(or[green,apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[nor[blue,or[not[yellow],triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.exists(or[rectangle,blue], filter(filter(x.s, apply(same_shape,x.o)), not[apply(size-geq,x.o)]))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, blue), apply(same_shape,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[rectangle,or[size1,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:or[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(x.s, iff[size1,green]), or[size2,blue]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:green;4:or[%s,%s];4:size2;4:blue
'λx.exists(apply(same_color,x.o), filter(filter(x.s, apply(size-gt,x.o)), apply(same_shape,x.o)))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size2,and[size1,not[blue]]],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:size1;4:not[%s];4:blue;1:iota(%s);3:%s.s;2:x
'λx.apply(not[blue],iota(filter(x.s, nand[blue,apply(same_color,x.o)])))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), not[nor[or[apply(same_shape,x.o),blue],yellow]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:yellow
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, and[apply(same_shape,iota(filter(x.s, or[size1,green]))),size1]), yellow), size1), yellow), triangle), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:size1;4:yellow;4:size1;4:yellow;4:triangle;4:yellow
'λx.apply(and[and[triangle,size3],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:size3;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, nor[blue,rectangle]), and[apply(same_color,x.o),apply(same_size,x.o)]), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[circle,or[size3,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.forall(and[not[and[yellow,green]],apply(same_color,x.o)],filter(filter(x.s, apply(same_shape,x.o)), nand[rectangle,apply(same_color,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, rectangle), apply(same_shape,x.o)), rectangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:size2
'λx.apply(nor[and[size1,triangle],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size1;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(nand[circle,nor[rectangle,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:nor[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(and[size3,nand[blue,and[triangle,triangle]]],iota(filter(x.s, and[size3,circle])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:nand[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle
'λx.apply(iff[blue,and[circle,implies[blue,size2]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.apply(or[rectangle,size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(or[rectangle,size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size3;1:%s.o;2:x
'λx.apply(or[rectangle,size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.empty(filter(x.s, not[implies[apply(size-gt,x.o),and[yellow,triangle]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:triangle
'λx.apply(implies[or[circle,blue],and[green,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:blue;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(and[size2,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(filter(x.s, or[green,size3]), not[size1]), apply(same_size,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3;4:not[%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, apply(same_shape,x.o)), and[apply(same_size,x.o),apply(same_color,x.o)]), circle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:not[%s];4:blue
'λx.apply(and[size1,or[not[size2],or[size3,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, implies[apply(same_shape,x.o),circle]), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:size3
'λx.forall(blue,filter(x.s, and[rectangle,triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:triangle
'λx.apply(circle,iota(filter(x.s, or[blue,rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:rectangle
'λx.apply(or[blue,or[triangle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, not[apply(same_size,x.o)]), size3), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size3
'λx.empty(filter(filter(filter(x.s, not[apply(same_size,x.o)]), size3), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:green
'λx.apply(size2,iota(filter(filter(x.s, yellow), triangle)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:triangle
'λx.apply(blue,iota(filter(x.s, or[apply(same_color,x.o),and[green,yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:green;4:yellow
'λx.forall(blue,filter(filter(filter(filter(x.s, circle), rectangle), size2), or[and[green,apply(size-lt,iota(filter(x.s, apply(same_shape,x.o))))],yellow]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:rectangle;4:size2;4:or[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[size2,and[nand[size1,size3],apply(size-leq,iota(filter(x.s, size1)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:and[%s,%s];4:nand[%s,%s];4:size1;4:size3;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(nor[blue,not[and[nand[circle,or[circle,size3]],nand[circle,blue]]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:or[%s,%s];4:circle;4:size3;4:nand[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[and[or[not[blue],green],rectangle],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:green;4:rectangle;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.forall(not[apply(same_color,x.o)],filter(filter(x.s, size1), yellow))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:yellow
'λx.apply(blue,iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.apply(or[or[green,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:blue;4:triangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[apply(same_color,x.o),green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[or[and[size1,size3],iff[not[blue],or[rectangle,triangle]]],apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size1;4:size3;4:iff[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[nor[triangle,size3],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:size3;4:size2;1:%s.o;2:x
'λx.forall(size2,filter(filter(filter(x.s, or[triangle,apply(same_color,iota(filter(x.s, blue)))]), rectangle), size2))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size2
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), apply(size-geq,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.exists(not[or[blue,circle]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:blue;4:circle;3:%s.s;2:x
'λx.apply(apply(size-lt,iota(x.s)),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-lt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.exists(nor[circle,nor[apply(same_shape,x.o),and[size1,size2]]], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size1;4:size2;3:%s.s;2:x
'λx.exists(implies[yellow,blue], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:yellow;4:blue;3:%s.s;2:x
'λx.apply(or[implies[size3,rectangle],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:size3;4:rectangle;4:triangle;1:%s.o;2:x
'λx.forall(iff[green,apply(same_color,x.o)],filter(x.s, yellow))'	0:forall(%s,%s);4:iff[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[or[and[size2,size3],and[triangle,not[blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[rectangle,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(nor[rectangle,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(not[not[apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, and[blue,circle])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:circle
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(or[and[apply(same_shape,x.o),size2],yellow],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(filter(x.s, apply(same_shape,iota(x.s))), apply(same_color,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(or[apply(same_color,x.o),size2],iota(filter(filter(x.s, rectangle), nand[size3,yellow])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:nand[%s,%s];4:size3;4:yellow
'λx.apply(not[and[yellow,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[blue,and[circle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:green;1:%s.o;2:x
'λx.exists(iff[size1,green], filter(x.s, triangle))'	0:exists(%s, %s);4:iff[%s,%s];4:size1;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(size2,iota(filter(filter(x.s, rectangle), yellow)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:yellow
'λx.apply(and[or[size1,blue],not[or[yellow,rectangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:not[%s];4:or[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(or[nand[blue,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, or[not[circle],triangle]), size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:triangle;4:size3
'λx.apply(implies[implies[size2,iff[circle,size1]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:size2;4:iff[%s,%s];4:circle;4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[and[blue,blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size1;1:%s.o;2:x
'λx.apply(or[and[blue,blue],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, not[size1]), blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, implies[yellow,circle]), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:yellow;4:circle;4:size2
'λx.apply(or[circle,nor[circle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nor[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(iff[and[rectangle,triangle],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(x.s))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(circle,iota(filter(filter(x.s, apply(same_shape,x.o)), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(and[not[size1],blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:size1;4:blue;3:%s.s;2:x
'λx.apply(blue,iota(filter(filter(x.s, or[circle,size2]), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size2;4:blue
'λx.apply(or[size2,apply(same_color,x.o)],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[or[not[size1],yellow],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:not[%s];4:size1;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(not[and[size2,blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, and[size3,circle]), and[circle,blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:circle;4:and[%s,%s];4:circle;4:blue
'λx.apply(nor[blue,and[not[rectangle],circle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, not[yellow]), not[apply(same_color,x.o)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[not[blue],and[not[yellow],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:not[%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(not[and[not[circle],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), and[yellow,apply(same_color,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[not[circle],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(or[and[yellow,size2],triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:triangle;3:%s.s;2:x
'λx.apply(or[and[circle,rectangle],nor[blue,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(iff[nor[apply(same_shape,iota(filter(filter(x.s, green), circle))),circle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle;4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[blue,apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, size3), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:triangle
'λx.empty(filter(filter(x.s, size1), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle
'λx.empty(filter(filter(x.s, size2), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:triangle
'λx.forall(size2,filter(x.s, or[blue,triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:triangle
'λx.forall(triangle,filter(filter(x.s, not[or[rectangle,blue]]), and[apply(same_size,x.o),apply(same_shape,x.o)]))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size2,yellow],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[iff[or[nor[yellow,or[green,yellow]],size1],blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:green;4:yellow;4:size1;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[and[or[circle,blue],or[apply(same_color,x.o),triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.forall(blue,filter(x.s, nor[size3,triangle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size3;4:triangle
'λx.exists(nor[triangle,triangle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.forall(circle,filter(filter(filter(filter(x.s, yellow), nor[and[rectangle,apply(same_color,iota(filter(filter(x.s, blue), blue)))],rectangle]), size1), size3))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:rectangle;4:size1;4:size3
'λx.apply(and[not[triangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:triangle;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;3:%s.s;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, not[circle]), yellow))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:yellow
'λx.apply(nand[size1,blue],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(and[not[green],size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:green;4:size2;3:%s.s;2:x
'λx.apply(nand[and[green,circle],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:green;4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[or[blue,green],apply(same_shape,x.o)],iota(filter(filter(x.s, not[size2]), blue)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:blue
'λx.forall(green,filter(filter(filter(x.s, size1), apply(same_color,x.o)), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.empty(filter(filter(filter(filter(x.s, nor[size1,apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))]), yellow), size2), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:size1;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:size2;4:size1
'λx.apply(implies[size2,not[blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(size3,filter(x.s, and[apply(same_shape,x.o),yellow]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), implies[circle,size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:circle;4:size3;4:yellow
'λx.exists(blue, filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(iff[size1,and[size2,size1]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:size2;4:size1;1:%s.o;2:x
'λx.forall(size2,filter(x.s, or[triangle,blue]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:blue
'λx.apply(or[rectangle,iff[size3,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:iff[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.exists(nor[or[circle,size3],green], filter(x.s, triangle))'	0:exists(%s, %s);4:nor[%s,%s];4:or[%s,%s];4:circle;4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(filter(filter(filter(x.s, and[apply(same_shape,iota(filter(x.s, or[size1,green]))),triangle]), size3), size3), size3), rectangle), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:green;4:triangle;4:size3;4:size3;4:size3;4:rectangle;4:circle
'λx.apply(or[apply(same_shape,x.o),blue],iota(filter(filter(x.s, green), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.forall(apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),filter(filter(x.s, rectangle), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:circle
'λx.apply(or[nor[and[green,rectangle],yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[rectangle,rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:rectangle
'λx.exists(implies[rectangle,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[rectangle,triangle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(x.o, filter(filter(filter(x.s, iff[circle,blue]), nand[rectangle,circle]), not[and[circle,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:blue;4:nand[%s,%s];4:rectangle;4:circle;4:not[%s];4:and[%s,%s];4:circle;4:rectangle
'λx.apply(not[or[not[size3],size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:not[%s];4:size3;4:size2;1:%s.o;2:x
'λx.exists(blue, filter(x.s, size2))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.exists(blue, filter(x.s, size3))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(blue, filter(x.s, size1))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[circle,or[size3,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(and[size2,green], filter(x.s, size2))'	0:exists(%s, %s);4:and[%s,%s];4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.forall(circle,filter(filter(x.s, or[size1,triangle]), apply(size-gt,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size2), and[size2,apply(same_size,iota(filter(filter(filter(x.s, size1), rectangle), rectangle)))]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:rectangle;4:rectangle;4:rectangle
'λx.apply(and[nor[blue,rectangle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.forall(green,filter(x.s, nand[yellow,apply(same_size,x.o)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[blue,or[not[size1],size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size1;4:size3;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, not[triangle]), size1))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle;4:size1
'λx.apply(not[nor[and[apply(same_shape,x.o),blue],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size1;1:%s.o;2:x
'λx.exists(not[blue], filter(filter(filter(x.s, apply(same_color,x.o)), apply(same_shape,x.o)), circle))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.apply(iff[size2,and[green,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:and[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.exists(green, filter(filter(x.s, nand[apply(same_size,x.o),triangle]), and[implies[size2,green],apply(same_shape,x.o)]))'	0:exists(%s, %s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:and[%s,%s];4:implies[%s,%s];4:size2;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[not[blue],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(iff[implies[rectangle,blue],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:rectangle;4:blue;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(and[not[size2],apply(same_size,x.o)],filter(x.s, green))'	0:forall(%s,%s);4:and[%s,%s];4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.contains(x.o, filter(filter(filter(x.s, circle), circle), not[blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:not[%s];4:blue
'λx.apply(or[rectangle,or[triangle,or[rectangle,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:or[%s,%s];4:triangle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[not[or[triangle,rectangle]],implies[apply(same_shape,x.o),blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:or[%s,%s];4:triangle;4:rectangle;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(and[blue,and[size3,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.forall(not[apply(same_color,x.o)],filter(x.s, and[triangle,green]))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:green
'λx.empty(filter(x.s, and[and[and[green,apply(same_size,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))],triangle],blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:green;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:triangle;4:blue
'λx.apply(or[nor[blue,circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, iff[green,size1]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size1
'λx.exists(triangle, filter(x.s, iff[green,size3]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:size3
'λx.apply(and[or[apply(same_color,iota(filter(x.s, or[blue,apply(same_color,x.o)]))),green],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;4:green;1:%s.o;2:x
'λx.apply(and[or[and[yellow,circle],blue],size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:circle;4:blue;4:size2;1:%s.o;2:x
'λx.apply(not[and[or[triangle,not[circle]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, iff[green,rectangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:green;4:rectangle
'λx.forall(rectangle,filter(filter(x.s, blue), triangle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(blue,iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[or[circle,green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:circle;4:green;4:circle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, and[apply(same_size,x.o),rectangle])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.exists(not[blue], filter(x.s, or[apply(same_color,x.o),and[circle,apply(same_shape,x.o)]]))'	0:exists(%s, %s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, or[triangle,green]), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:green;4:size1;3:%s.s;2:x
'λx.apply(nor[blue,or[not[size3],triangle]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size3;4:triangle;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(size-lt,x.o)), not[size1]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(not[implies[and[circle,circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:and[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(iff[and[size1,size1],and[yellow,blue]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size1;4:size1;4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, or[apply(same_shape,x.o),nor[apply(same_size,x.o),triangle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(implies[blue,or[circle,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(nand[nand[blue,blue],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), size2), apply(same_color,iota(filter(filter(x.s, green), not[triangle])))))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:triangle
'λx.apply(size1,iota(filter(filter(filter(x.s, yellow), yellow), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, implies[circle,yellow]), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:yellow;4:size3;1:%s.o;2:x
'λx.exists(nor[and[rectangle,circle],yellow], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:circle;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))),not[size3]],not[size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size3;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(iff[and[blue,circle],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:circle;4:triangle;1:%s.o;2:x
'λx.apply(implies[not[size3],not[triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:size3;4:not[%s];4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.exists(implies[circle,apply(same_shape,x.o)], filter(filter(x.s, not[blue]), and[apply(same_color,x.o),circle]))'	0:exists(%s, %s);4:implies[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nand[nor[triangle,blue],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(and[and[not[blue],apply(same_size,x.o)],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[or[size1,blue],apply(same_shape,x.o)]), and[apply(same_size,x.o),and[circle,not[blue]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:circle;4:not[%s];4:blue
'λx.apply(or[circle,not[not[size1]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[and[implies[size1,blue],blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size1;4:blue;4:blue;4:size1;1:%s.o;2:x
'λx.apply(nor[triangle,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(nand[circle,or[rectangle,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:or[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[green,and[yellow,nand[yellow,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:and[%s,%s];4:yellow;4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(x.s, blue), not[size1])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size1
'λx.apply(and[blue,not[green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:not[%s];4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(filter(x.s, size2), iff[size3,green]), not[apply(same_shape,x.o)]), size2)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:iff[%s,%s];4:size3;4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.forall(blue,filter(filter(filter(filter(x.s, apply(same_shape,x.o)), circle), apply(same_color,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(nand[rectangle,size1],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,size2],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(nand[triangle,implies[blue,yellow]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:implies[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, not[not[size3]]), apply(size-lt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:size3;4:apply(%s,%s);5:size-lt;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(size-leq,x.o)), not[iff[not[and[and[apply(same_size,x.o),triangle],yellow]],size3]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle;4:yellow;4:size3
'λx.apply(nand[circle,not[size3]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, nor[circle,or[size2,triangle]])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:or[%s,%s];4:size2;4:triangle
'λx.apply(or[size3,apply(same_shape,x.o)],iota(filter(filter(filter(x.s, apply(same_color,x.o)), circle), apply(same_size,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, triangle), apply(same_shape,x.o)), triangle), not[blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:not[%s];4:blue
'λx.exists(not[triangle], filter(x.s, nand[size2,yellow]))'	0:exists(%s, %s);4:not[%s];4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:yellow
'λx.apply(apply(size-gt,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(and[yellow,size3],filter(x.s, and[size1,apply(same_size,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[size3,apply(same_color,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[nor[size3,blue],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:size3;4:blue;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[triangle,and[circle,blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nor[size3,not[size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, or[triangle,apply(same_shape,x.o)]), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.apply(or[not[and[blue,blue]],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(iff[and[blue,triangle],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(and[rectangle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[and[yellow,size2],green])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:green
'λx.apply(implies[or[apply(size-gt,x.o),iff[circle,blue]],apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:iff[%s,%s];4:circle;4:blue;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(iff[apply(same_size,x.o),rectangle], filter(x.s, size3))'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_size,iota(filter(filter(x.s, apply(same_shape,x.o)), not[and[circle,or[size2,yellow]]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(iff[implies[size1,and[size1,rectangle]],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:implies[%s,%s];4:size1;4:and[%s,%s];4:size1;4:rectangle;4:size1;1:%s.o;2:x
'λx.apply(nor[circle,and[apply(same_shape,x.o),blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(or[or[not[size3],size2],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:not[%s];4:size3;4:size2;4:triangle;1:%s.o;2:x
'λx.apply(and[blue,or[blue,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[not[or[apply(size-gt,x.o),green]],blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;4:blue
'λx.forall(not[and[apply(same_shape,iota(filter(x.s, blue))),size2]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size2;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size1)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(apply(same_color,x.o),iota(filter(x.s, size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(apply(same_color,x.o),iota(filter(x.s, green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), not[or[apply(same_color,x.o),and[size1,size2]]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:size1;4:size2
'λx.empty(filter(filter(x.s, size1), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.empty(filter(filter(x.s, size1), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:size1
'λx.empty(filter(filter(x.s, size3), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.empty(filter(filter(x.s, size3), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.apply(or[blue,implies[size1,and[rectangle,rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(nand[size1,not[rectangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[nor[blue,circle],apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(not[and[not[rectangle],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:rectangle;4:yellow;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[rectangle,not[size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:size2
'λx.apply(not[not[blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[size2,nand[blue,size2]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:size2;4:nand[%s,%s];4:blue;4:size2
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, apply(same_size,x.o)), or[circle,and[size2,size2]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:circle;4:and[%s,%s];4:size2;4:size2
'λx.apply(and[triangle,size3],iota(filter(filter(x.s, apply(same_color,x.o)), size3)))'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3
'λx.apply(implies[or[size3,triangle],yellow],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(and[iff[green,rectangle],triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:green;4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(nor[size2,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.apply(not[and[size1,or[size3,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size1;4:or[%s,%s];4:size3;4:green;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, yellow), size2))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.contains(x.o, filter(filter(x.s, blue), not[rectangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:rectangle
'λx.apply(nand[triangle,apply(same_size,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_size,x.o), filter(filter(filter(x.s, apply(same_color,x.o)), blue), size3))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size3
'λx.exists(or[circle,apply(same_shape,x.o)], filter(filter(filter(x.s, apply(same_color,x.o)), not[or[circle,blue]]), not[circle]))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:circle;4:blue;4:not[%s];4:circle
'λx.forall(size3,filter(filter(x.s, yellow), or[or[apply(same_shape,x.o),size3],apply(same_color,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:or[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[triangle,apply(size-gt,iota(x.s))],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[size2],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(not[size1],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(circle,iota(filter(x.s, and[size1,circle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:circle
'λx.exists(not[or[and[size3,triangle],implies[apply(same_shape,x.o),apply(same_color,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[size3,and[rectangle,circle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:and[%s,%s];4:rectangle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(filter(x.s, size3), and[triangle,or[apply(same_color,x.o),rectangle]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, rectangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, blue), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[and[nand[triangle,size2],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:triangle;4:size2;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[not[circle],nand[blue,blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:nand[%s,%s];4:blue;4:blue
'λx.contains(x.o, filter(x.s, and[not[blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:circle
'λx.apply(or[circle,and[blue,and[triangle,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:and[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.exists(not[green], filter(x.s, apply(same_size,iota(filter(x.s, blue)))))'	0:exists(%s, %s);4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[apply(same_shape,iota(filter(x.s, rectangle))),green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), iff[size3,and[yellow,green]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:size3;4:and[%s,%s];4:yellow;4:green
'λx.empty(filter(filter(x.s, circle), blue))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue
'λx.apply(and[yellow,or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(and[size2,size2],iota(filter(filter(x.s, circle), not[green])))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:green
'λx.apply(not[and[not[blue],not[size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:not[%s];4:size3;1:%s.o;2:x
'λx.exists(not[circle], x.s)'	0:exists(%s, %s);4:not[%s];4:circle;3:%s.s;2:x
'λx.exists(or[and[size1,blue],rectangle], filter(x.s, not[green]))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(not[nor[and[green,rectangle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(or[size1,and[rectangle,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(or[circle,and[apply(same_color,x.o),blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.exists(apply(same_shape,iota(filter(x.s, blue))), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.forall(or[green,size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:green;4:size1;3:%s.s;2:x
'λx.forall(size1,filter(filter(x.s, blue), not[not[apply(same_color,x.o)]]))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), or[yellow,apply(same_shape,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[blue,triangle],not[triangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, and[or[and[blue,blue],not[and[apply(same_color,x.o),size3]]],and[circle,yellow]]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:and[%s,%s];4:circle;4:yellow;4:yellow
'λx.empty(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(apply(same_color,iota(filter(filter(x.s, size3), and[triangle,or[apply(same_color,x.o),green]]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:triangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;1:%s.o;2:x
'λx.apply(and[or[rectangle,triangle],not[or[blue,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:rectangle;4:triangle;4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, not[size1])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(circle,iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(or[circle,not[or[or[yellow,yellow],green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:not[%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:yellow;4:green;1:%s.o;2:x
'λx.forall(triangle,filter(filter(x.s, size3), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:rectangle
'λx.apply(or[nand[nor[apply(same_size,iota(filter(x.s, apply(size-leq,x.o)))),size3],size3],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size3;4:size3;4:blue;1:%s.o;2:x
'λx.exists(apply(size-gt,iota(filter(x.s, apply(same_color,x.o)))), filter(x.s, size1))'	0:exists(%s, %s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(and[yellow,not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(implies[circle,blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),or[size1,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(nand[triangle,nor[blue,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:nor[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[rectangle,apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[circle,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(not[and[circle,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, not[blue]), apply(same_color,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[and[blue,yellow],and[not[size1],not[blue]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, or[triangle,apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))]), circle), triangle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, or[apply(same_shape,x.o),nor[apply(same_size,x.o),triangle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.apply(iff[and[circle,yellow],blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(x.s, nor[apply(same_color,x.o),blue])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(green,iota(filter(filter(x.s, triangle), and[triangle,size1])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:triangle;4:size1
'λx.apply(not[and[triangle,yellow]],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(apply(same_color,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[size1],iota(filter(x.s, or[green,size3])))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:size3
'λx.apply(and[circle,implies[size2,apply(size-leq,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:implies[%s,%s];4:size2;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(not[apply(size-gt,x.o)],x.s)'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, or[size3,triangle]), blue))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:triangle;4:blue
'λx.apply(size3,iota(filter(x.s, iff[size1,yellow])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:yellow
'λx.apply(and[blue,or[yellow,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[apply(size-leq,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, or[implies[apply(same_size,x.o),rectangle],or[size3,triangle]]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle;4:or[%s,%s];4:size3;4:triangle
'λx.apply(or[size2,apply(same_color,iota(filter(x.s, size3)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, not[green]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(apply(same_color,x.o),iota(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue
'λx.apply(apply(same_size,x.o),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(implies[iff[size3,triangle],size2],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:size3;4:triangle;4:size2;1:%s.o;2:x
'λx.apply(nor[circle,size3],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(nor[circle,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size2;1:%s.o;2:x
'λx.apply(nor[circle,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.forall(or[circle,blue],filter(filter(x.s, apply(same_shape,x.o)), or[apply(same_color,x.o),circle]))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.exists(triangle, filter(x.s, or[triangle,size3]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:size3
'λx.apply(implies[nor[size1,size1],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nor[%s,%s];4:size1;4:size1;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, and[circle,implies[blue,yellow]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:implies[%s,%s];4:blue;4:yellow
'λx.apply(and[blue,implies[size1,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:implies[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, not[yellow])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow
'λx.apply(or[and[blue,circle],iff[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(iff[apply(same_shape,x.o),not[circle]], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;3:%s.s;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), or[apply(size-geq,x.o),blue]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:blue
'λx.exists(nand[nor[apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))),size1],green], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:green;3:%s.s;2:x
'λx.apply(implies[or[blue,apply(same_color,x.o)],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, rectangle), size1), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:size1;4:rectangle
'λx.apply(and[blue,blue],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(or[not[size2],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, apply(same_size,x.o)), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.exists(and[nor[circle,size1],blue], filter(x.s, blue))'	0:exists(%s, %s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[blue,and[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(filter(filter(x.s, apply(same_color,x.o)), blue), size3), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:size3;4:size3
'λx.forall(not[and[iff[green,or[yellow,apply(same_color,iota(filter(filter(x.s, blue), apply(same_shape,x.o))))]],blue]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:iff[%s,%s];4:green;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;3:%s.s;2:x
'λx.apply(and[size2,or[circle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.exists(implies[size2,size2], filter(filter(x.s, not[size2]), apply(same_size,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(implies[size2,size1], filter(filter(x.s, not[size2]), apply(same_size,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_color,x.o)), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:triangle
'λx.apply(or[and[size3,and[size2,blue]],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size3;4:and[%s,%s];4:size2;4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[nand[yellow,circle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:yellow;4:circle;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,iota(filter(x.s, yellow)))), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2
'λx.forall(nand[and[size1,yellow],apply(same_size,x.o)],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:size1;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, blue), apply(same_size,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.contains(iota(x.s), filter(filter(x.s, blue), blue))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue
'λx.empty(filter(filter(x.s, and[yellow,size1]), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(and[or[size2,size1],apply(same_size,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:size2;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[triangle,triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:triangle;1:%s.o;2:x
'λx.apply(not[nor[blue,size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.forall(and[apply(same_shape,x.o),apply(same_color,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[and[blue,size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:size3;4:blue;1:%s.o;2:x
'λx.apply(not[nor[blue,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[or[size2,triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size2;4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[circle,circle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:circle;1:iota(%s);3:%s.s;2:x
'λx.apply(and[not[not[size3]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[rectangle,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[blue,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:yellow;1:%s.o;2:x
'λx.exists(not[or[green,not[apply(same_shape,x.o)]]], filter(x.s, not[size1]))'	0:exists(%s, %s);4:not[%s];4:or[%s,%s];4:green;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.forall(size3,filter(x.s, and[size1,apply(size-leq,x.o)]))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, implies[rectangle,green]))),size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:rectangle;4:green;4:size2;1:%s.o;2:x
'λx.apply(not[and[or[yellow,green],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:green;4:circle;1:%s.o;2:x
'λx.apply(or[size3,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(or[not[yellow],or[size1,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.exists(not[and[triangle,triangle]], filter(x.s, or[nand[triangle,apply(same_size,iota(filter(x.s, not[not[apply(same_shape,x.o)]])))],yellow]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:triangle;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), apply(same_color,iota(filter(x.s, blue))))), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:%s.s;2:x
'λx.apply(or[size1,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, and[blue,apply(same_color,x.o)]), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.contains(iota(filter(filter(x.s, circle), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size3;3:%s.s;2:x
'λx.apply(and[not[size1],not[implies[or[apply(same_shape,iota(filter(x.s, blue))),nand[blue,size1]],blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:nand[%s,%s];4:blue;4:size1;4:blue;1:%s.o;2:x
'λx.apply(or[nor[circle,rectangle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:circle;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(size1,iota(filter(x.s, nor[or[green,circle],size3])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:or[%s,%s];4:green;4:circle;4:size3
'λx.exists(apply(same_size,iota(x.s)), filter(x.s, triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(circle,filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(apply(same_shape,iota(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_shape,x.o)), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(nand[size3,or[rectangle,triangle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, not[size2]), yellow)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:yellow
'λx.apply(or[size2,not[circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, blue), size3), or[apply(same_color,x.o),green])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size3;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, nand[circle,or[yellow,green]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green
'λx.forall(not[rectangle],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[nor[and[triangle,green],not[or[circle,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[rectangle,not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(nand[rectangle,not[size2]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[or[green,yellow],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:yellow;4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, blue))),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[size3,rectangle],iota(filter(x.s, apply(same_color,iota(filter(x.s, yellow))))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(green,iota(filter(x.s, and[apply(same_shape,x.o),size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(and[or[blue,circle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[nor[and[triangle,rectangle],not[or[circle,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:triangle;4:rectangle;4:not[%s];4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[yellow,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:blue;1:%s.o;2:x
'λx.apply(and[size3,size3],iota(filter(filter(x.s, circle), not[size1])))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:not[%s];4:size1
'λx.apply(nor[and[nor[size3,green],triangle],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:size3;4:green;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(iff[size3,and[size3,triangle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[triangle,and[rectangle,or[yellow,green]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:and[%s,%s];4:rectangle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, size2), not[green])), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[circle,blue], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[and[implies[blue,circle],rectangle],and[or[size3,circle],blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:circle;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(size-gt,iota(filter(x.s, size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.exists(rectangle, filter(filter(x.s, iff[size1,circle]), or[size2,blue]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:size1;4:circle;4:or[%s,%s];4:size2;4:blue
'λx.apply(or[and[triangle,yellow],and[rectangle,apply(same_shape,iota(filter(x.s, size1)))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:yellow;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), green), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:size1
'λx.exists(not[yellow], filter(x.s, or[triangle,and[circle,size3]]))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:size3
'λx.apply(iff[and[implies[not[triangle],triangle],blue],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:not[%s];4:triangle;4:triangle;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[or[blue,size1],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:size1;4:blue;1:%s.o;2:x
'λx.apply(circle,iota(filter(x.s, not[green])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green
'λx.apply(not[and[not[blue],or[triangle,and[circle,apply(same_shape,x.o)]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:triangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, apply(same_size,x.o)), circle))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle
'λx.exists(size3, filter(x.s, or[apply(same_color,x.o),and[circle,yellow]]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:circle;4:yellow
'λx.exists(or[size1,and[apply(size-gt,x.o),size2]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size1;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(or[yellow,or[size1,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(not[implies[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(circle,filter(x.s, nor[nor[circle,green],apply(same_shape,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:nor[%s,%s];4:circle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[circle,nand[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(not[green],iota(filter(filter(filter(x.s, apply(same_size,x.o)), apply(same_color,x.o)), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(implies[iff[circle,yellow],green],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:iff[%s,%s];4:circle;4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(x.s, nand[blue,blue]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:blue;4:blue
'λx.apply(implies[yellow,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, rectangle), blue)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, apply(same_color,x.o)), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.apply(green,iota(filter(filter(x.s, or[and[triangle,size2],apply(same_shape,x.o)]), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.exists(or[green,yellow], filter(filter(x.s, not[or[circle,nor[apply(same_shape,x.o),blue]]]), or[apply(same_color,x.o),blue]))'	0:exists(%s, %s);4:or[%s,%s];4:green;4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:circle;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(and[size2,green],iota(filter(filter(x.s, size2), green)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.forall(rectangle,filter(filter(x.s, size1), apply(same_shape,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[size2,and[size2,size2]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:size2;4:and[%s,%s];4:size2;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(implies[yellow,and[and[triangle,apply(same_color,iota(filter(x.s, triangle)))],not[circle]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_shape,x.o)), not[apply(same_color,x.o)]))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, and[nand[yellow,rectangle],and[circle,apply(same_size,x.o)]])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:yellow;4:rectangle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[implies[yellow,size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:yellow;4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[and[circle,green],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:size1;1:%s.o;2:x
'λx.exists(or[size3,circle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:size3;4:circle;3:%s.s;2:x
'λx.forall(blue,x.s)'	0:forall(%s,%s);4:blue;3:%s.s;2:x
'λx.exists(or[and[size3,nor[not[blue],not[apply(same_shape,x.o)]]],yellow], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size3;4:nor[%s,%s];4:not[%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.apply(not[and[circle,nand[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(implies[circle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, not[size1]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.empty(filter(filter(x.s, blue), triangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.exists(and[apply(same_shape,x.o),not[circle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, triangle), triangle), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle;4:green
'λx.apply(nor[or[apply(same_color,iota(filter(x.s, blue))),blue],blue],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[not[and[circle,triangle]],triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:triangle;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[size3,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.apply(and[size1,circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[and[blue,triangle],triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:blue;4:triangle;4:triangle
'λx.forall(blue,filter(x.s, and[not[implies[apply(same_shape,x.o),blue]],size3]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size3
'λx.apply(or[not[green],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:green;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, rectangle), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nor[green,triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(not[nor[apply(same_shape,iota(filter(x.s, blue))),and[size1,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:size1;4:size3;1:%s.o;2:x
'λx.exists(not[nand[apply(same_shape,x.o),not[apply(same_color,x.o)]]], x.s)'	0:exists(%s, %s);4:not[%s];4:nand[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(nand[rectangle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[or[implies[size3,and[size1,triangle]],size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:size3;4:and[%s,%s];4:size1;4:triangle;4:size1;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[apply(size-leq,x.o),apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(implies[and[circle,apply(same_size,x.o)],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.forall(or[and[yellow,size3],apply(same_color,x.o)],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:and[%s,%s];4:yellow;4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[nor[rectangle,blue],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, apply(same_size,x.o)), blue)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(and[and[not[blue],apply(same_shape,x.o)],not[circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),not[or[blue,circle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),blue],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:iota(%s);3:%s.s;2:x
'λx.exists(apply(same_color,x.o), filter(x.s, nor[circle,circle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:circle;4:circle
'λx.contains(x.o, filter(filter(x.s, not[green]), size1))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size1
'λx.exists(and[not[yellow],or[apply(same_shape,x.o),triangle]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;3:%s.s;2:x
'λx.apply(and[apply(size-geq,iota(filter(x.s, blue))),or[apply(same_color,x.o),circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(or[blue,and[apply(same_size,x.o),circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[size1,not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(and[size3,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[size2,not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(nor[size3,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(not[and[or[not[blue],triangle],or[circle,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:not[%s];4:blue;4:triangle;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, rectangle), not[green]), size3)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:green;4:size3
'λx.exists(and[circle,blue], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:circle;4:blue;3:%s.s;2:x
'λx.apply(nor[and[triangle,green],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:green;4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(x.s, circle), and[iff[apply(same_shape,x.o),size1],blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:blue
'λx.apply(size3,iota(filter(x.s, nor[green,size1])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:green;4:size1
'λx.apply(or[rectangle,and[blue,or[size1,blue]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:and[%s,%s];4:blue;4:or[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(and[or[and[apply(same_shape,iota(filter(x.s, circle))),size1],circle],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[size1,triangle],iota(x.s))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:iota(%s);3:%s.s;2:x
'λx.exists(nand[green,rectangle], filter(filter(x.s, apply(same_shape,x.o)), implies[apply(same_size,x.o),blue]))'	0:exists(%s, %s);4:nand[%s,%s];4:green;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(nand[or[circle,blue],iff[yellow,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:blue;4:iff[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.exists(apply(size-leq,x.o), filter(x.s, and[implies[nand[blue,circle],green],size2]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:implies[%s,%s];4:nand[%s,%s];4:blue;4:circle;4:green;4:size2
'λx.contains(x.o, filter(x.s, and[not[iff[iff[nor[circle,circle],apply(same_shape,x.o)],blue]],apply(same_shape,x.o)]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:iff[%s,%s];4:nor[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[green,size3]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(blue,iota(filter(x.s, and[or[size1,blue],nor[or[nor[blue,apply(size-leq,x.o)],green],size2]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:size1;4:blue;4:nor[%s,%s];4:or[%s,%s];4:nor[%s,%s];4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:green;4:size2
'λx.apply(implies[and[size3,yellow],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(or[nand[circle,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:circle;4:blue;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.forall(apply(same_size,x.o),filter(x.s, size2))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[or[and[yellow,size2],and[size3,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:size2;4:and[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(iff[size3,and[triangle,size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[not[circle],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(x.s, and[not[and[size3,rectangle]],size3])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:and[%s,%s];4:size3;4:rectangle;4:size3
'λx.exists(triangle, filter(filter(x.s, triangle), not[green]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:green
'λx.apply(or[and[implies[triangle,size1],rectangle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:triangle;4:size1;4:rectangle;4:blue;1:%s.o;2:x
'λx.apply(nand[circle,yellow],iota(filter(filter(x.s, green), size1)))'	0:apply(%s,%s);4:nand[%s,%s];4:circle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(green,iota(filter(filter(x.s, rectangle), or[and[size3,not[apply(same_color,x.o)]],size2])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2
'λx.apply(iff[size1,and[triangle,size3]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(or[nand[nor[apply(same_size,iota(filter(x.s, apply(size-leq,x.o)))),size2],green],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;4:green;4:triangle;1:%s.o;2:x
'λx.apply(not[and[circle,nand[size2,size3]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:size2;4:size3;1:%s.o;2:x
'λx.apply(iff[and[blue,circle],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.forall(or[size2,circle],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:size2;4:circle;3:%s.s;2:x
'λx.apply(iff[rectangle,and[yellow,green]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:rectangle;4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.exists(not[and[size1,iff[circle,apply(same_shape,x.o)]]], filter(filter(x.s, blue), rectangle))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:size1;4:iff[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.exists(circle, filter(x.s, or[green,blue]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:size1
'λx.apply(green,iota(filter(x.s, and[green,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:triangle
'λx.apply(iff[or[circle,yellow],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:or[%s,%s];4:circle;4:yellow;4:size3;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(nand[green,triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(not[or[and[yellow,triangle],and[triangle,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:yellow;4:triangle;4:and[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.apply(and[implies[size1,not[not[circle]]],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size1;4:not[%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.forall(size3,filter(filter(x.s, yellow), apply(same_shape,iota(filter(filter(x.s, circle), green)))))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.exists(size1, filter(filter(filter(x.s, apply(same_shape,x.o)), blue), blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue
'λx.apply(not[blue],iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(or[or[circle,not[blue]],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:not[%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(implies[yellow,and[and[triangle,apply(same_color,iota(filter(x.s, triangle)))],not[green]]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:and[%s,%s];4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(and[circle,and[circle,apply(same_shape,iota(filter(x.s, circle)))]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),or[circle,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(implies[not[circle],size1],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(or[circle,or[blue,and[green,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:blue;4:and[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.apply(nand[rectangle,implies[size1,green]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:implies[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.exists(or[and[size1,size2],and[rectangle,apply(same_color,x.o)]], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size1;4:size2;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(and[not[circle],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, apply(same_size,x.o)), not[triangle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:triangle;1:%s.o;2:x
'λx.apply(or[size2,not[rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, nand[green,not[size1]]), triangle), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:green;4:not[%s];4:size1;4:triangle;4:triangle;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, apply(same_size,iota(filter(filter(x.s, size3), not[rectangle])))), green))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:rectangle;4:green
'λx.apply(and[and[size2,size2],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:size2;4:size2;4:circle;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, apply(same_size,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[and[apply(same_shape,x.o),rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[rectangle,not[and[apply(same_shape,x.o),not[size1]]]])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(nand[yellow,apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(yellow,filter(x.s, and[or[apply(same_shape,x.o),yellow],rectangle]))'	0:forall(%s,%s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:rectangle
'λx.contains(x.o, filter(x.s, nand[not[circle],size3]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:circle;4:size3
'λx.apply(nand[yellow,blue],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[apply(same_color,x.o),blue],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.apply(green,iota(filter(x.s, implies[circle,triangle])))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:triangle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), blue), size3)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:size3
'λx.apply(not[and[rectangle,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:green;1:%s.o;2:x
'λx.apply(yellow,iota(filter(x.s, and[apply(same_shape,x.o),and[size3,rectangle]])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:size3;4:rectangle
'λx.exists(nand[not[apply(size-lt,x.o)],nand[and[apply(same_size,x.o),circle],and[blue,blue]]], x.s)'	0:exists(%s, %s);4:nand[%s,%s];4:not[%s];4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:nand[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:and[%s,%s];4:blue;4:blue;3:%s.s;2:x
'λx.empty(filter(filter(filter(filter(x.s, and[size3,apply(same_color,iota(filter(x.s, rectangle)))]), green), rectangle), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:green;4:rectangle;4:green
'λx.apply(implies[rectangle,yellow],iota(filter(filter(x.s, and[nand[circle,circle],or[blue,yellow]]), size2)))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:circle;4:circle;4:or[%s,%s];4:blue;4:yellow;4:size2
'λx.exists(not[and[rectangle,size3]], filter(filter(x.s, apply(same_shape,x.o)), not[yellow]))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:rectangle;4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:yellow
'λx.empty(filter(x.s, nor[apply(same_size,x.o),or[apply(same_color,x.o),implies[not[size1],not[circle]]]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:implies[%s,%s];4:not[%s];4:size1;4:not[%s];4:circle
'λx.apply(or[size1,size2],iota(filter(x.s, and[blue,nor[and[size2,yellow],and[nand[green,not[rectangle]],and[triangle,green]]]])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:nor[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:nand[%s,%s];4:green;4:not[%s];4:rectangle;4:and[%s,%s];4:triangle;4:green
'λx.exists(circle, filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, blue), rectangle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle
'λx.contains(x.o, filter(x.s, nand[not[circle],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:not[%s];4:circle;4:blue
'λx.apply(or[and[or[triangle,rectangle],or[and[green,green],yellow]],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:triangle;4:rectangle;4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:yellow;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(nand[or[triangle,blue],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(size3,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(size2,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(size3,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(size1,iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.empty(filter(filter(x.s, and[yellow,apply(same_color,x.o)]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.forall(size3,filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.forall(size1,filter(filter(x.s, triangle), blue))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue
'λx.apply(not[green],iota(filter(x.s, and[not[apply(same_color,x.o)],blue])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(implies[green,blue],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(and[implies[rectangle,or[apply(same_color,iota(filter(x.s, circle))),size1]],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:rectangle;4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1;4:circle;1:%s.o;2:x
'λx.apply(nor[triangle,size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(nor[triangle,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.forall(nand[or[yellow,green],apply(same_color,x.o)],filter(x.s, circle))'	0:forall(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(and[apply(same_size,x.o),or[yellow,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[size1,apply(same_size,x.o)]), rectangle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:rectangle
'λx.apply(and[green,not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:size3;1:%s.o;2:x
'λx.apply(and[green,not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[green,not[size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:green;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(or[size2,size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.empty(filter(filter(filter(x.s, not[yellow]), triangle), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:triangle;4:size2
'λx.apply(and[not[size1],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, green), size3))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size3
'λx.forall(rectangle,filter(filter(x.s, green), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size1
'λx.apply(and[implies[green,triangle],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:green;4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, and[blue,rectangle]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:rectangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, and[size2,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size2;4:blue
'λx.apply(and[not[and[circle,circle]],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:circle;4:circle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, triangle), size3)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size3
'λx.apply(triangle,iota(filter(filter(x.s, triangle), size1)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size1
'λx.apply(triangle,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(nor[and[triangle,size2],not[blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:triangle;4:size2;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(iff[blue,apply(same_color,x.o)],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(yellow,iota(filter(filter(x.s, not[apply(size-geq,x.o)]), yellow)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:yellow
'λx.empty(filter(filter(x.s, not[blue]), and[or[size3,triangle],apply(same_color,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:and[%s,%s];4:or[%s,%s];4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[not[nand[triangle,blue]],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:nand[%s,%s];4:triangle;4:blue;4:circle
'λx.forall(circle,filter(filter(filter(x.s, apply(same_shape,x.o)), apply(same_color,x.o)), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[and[circle,green],not[apply(size-gt,x.o)]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.exists(or[triangle,triangle], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:triangle;3:%s.s;2:x
'λx.apply(or[nor[blue,size1],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:size1;4:size1;1:%s.o;2:x
'λx.apply(or[triangle,apply(same_shape,x.o)],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:%s.s;2:x
'λx.apply(not[and[triangle,nor[blue,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.forall(nand[size1,circle],x.s)'	0:forall(%s,%s);4:nand[%s,%s];4:size1;4:circle;3:%s.s;2:x
'λx.apply(not[implies[blue,nand[size1,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:implies[%s,%s];4:blue;4:nand[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(not[green],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.contains(x.o, filter(x.s, nand[circle,not[and[circle,blue]]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:not[%s];4:and[%s,%s];4:circle;4:blue
'λx.apply(or[or[size1,blue],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:blue;4:size1;1:%s.o;2:x
'λx.exists(apply(same_size,x.o), filter(x.s, not[or[apply(same_shape,x.o),apply(size-gt,x.o)]]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(size2,iota(filter(filter(x.s, not[green]), size2)))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:green;4:size2
'λx.apply(green,iota(filter(filter(x.s, triangle), green)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green
'λx.apply(or[size2,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:rectangle;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size1,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, circle), and[blue,circle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:and[%s,%s];4:blue;4:circle
'λx.apply(rectangle,iota(filter(filter(filter(x.s, size2), not[circle]), green)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:not[%s];4:circle;4:green
'λx.exists(not[yellow], filter(filter(x.s, triangle), triangle))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(or[and[circle,rectangle],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:rectangle;4:size3;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, and[circle,apply(size-lt,x.o)]), circle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:circle
'λx.exists(and[size3,not[blue]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:size3;4:not[%s];4:blue;3:%s.s;2:x
'λx.apply(not[and[apply(same_shape,x.o),size1]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_color,iota(filter(x.s, blue)))), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[not[not[blue]],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:not[%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(nand[and[not[not[rectangle]],circle],not[or[and[rectangle,nand[circle,and[rectangle,and[apply(same_shape,iota(filter(filter(x.s, not[and[apply(same_color,x.o),apply(same_size,x.o)]]), blue))),rectangle]]]],size2]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:not[%s];4:not[%s];4:rectangle;4:circle;4:not[%s];4:or[%s,%s];4:and[%s,%s];4:rectangle;4:nand[%s,%s];4:circle;4:and[%s,%s];4:rectangle;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue;4:rectangle;4:size2;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size1), green))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:green
'λx.forall(blue,filter(filter(x.s, size3), size3))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3
'λx.apply(or[or[and[size3,triangle],circle],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[not[triangle],or[blue,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:triangle;4:or[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(x.s, or[apply(size-gt,x.o),size1]), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;4:size2
'λx.exists(circle, filter(x.s, yellow))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.forall(circle,filter(filter(x.s, and[rectangle,size3]), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:size3;4:blue
'λx.apply(implies[circle,iff[blue,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[not[iff[or[rectangle,green],apply(same_shape,x.o)]],size2])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:iff[%s,%s];4:or[%s,%s];4:rectangle;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.contains(iota(filter(filter(x.s, not[circle]), size1)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:size1;3:%s.s;2:x
'λx.exists(or[circle,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size1;3:%s.s;2:x
'λx.exists(or[circle,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:circle;4:size3;3:%s.s;2:x
'λx.apply(and[and[not[blue],nand[circle,circle]],implies[blue,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:nand[%s,%s];4:circle;4:circle;4:implies[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[not[green],blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:green;4:blue;3:%s.s;2:x
'λx.apply(or[and[blue,yellow],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:yellow;4:blue;1:%s.o;2:x
'λx.apply(iff[and[or[size2,not[blue]],triangle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:or[%s,%s];4:size2;4:not[%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))), triangle), size3), size2))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:size3;4:size2
'λx.apply(iff[circle,and[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:circle;4:and[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(blue,filter(filter(x.s, size3), apply(same_size,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(iff[blue,and[circle,or[not[size2],circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:blue;4:and[%s,%s];4:circle;4:or[%s,%s];4:not[%s];4:size2;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[and[blue,blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle
'λx.contains(x.o, filter(filter(filter(x.s, circle), blue), circle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:circle
'λx.apply(implies[not[iff[circle,blue]],and[blue,yellow]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:iff[%s,%s];4:circle;4:blue;4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.exists(nor[apply(size-gt,x.o),circle], x.s)'	0:exists(%s, %s);4:nor[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.apply(and[triangle,size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(and[triangle,size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:triangle;4:size2;1:%s.o;2:x
'λx.apply(nor[and[size2,yellow],and[not[size1],not[blue]]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:not[%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(implies[or[not[yellow],circle],rectangle], x.s)'	0:exists(%s, %s);4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:yellow;4:circle;4:rectangle;3:%s.s;2:x
'λx.exists(and[nand[and[triangle,triangle],not[blue]],apply(same_shape,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:nand[%s,%s];4:and[%s,%s];4:triangle;4:triangle;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:%s.s;2:x
'λx.contains(iota(filter(x.s, and[triangle,implies[size1,triangle]])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:triangle;4:implies[%s,%s];4:size1;4:triangle;3:%s.s;2:x
'λx.empty(filter(x.s, and[not[blue],and[triangle,apply(same_shape,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, blue), apply(same_shape,x.o)), not[circle]), and[apply(same_color,x.o),blue]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:circle;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.exists(size3, filter(x.s, nand[rectangle,size3]))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:rectangle;4:size3
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, not[size3]), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(filter(x.s, size3), size3))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;1:%s.o;2:x
'λx.exists(not[size2], filter(filter(x.s, apply(same_color,x.o)), blue))'	0:exists(%s, %s);4:not[%s];4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(triangle,filter(filter(x.s, not[or[rectangle,blue]]), apply(same_size,x.o)))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:or[%s,%s];4:rectangle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[circle,nand[yellow,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(filter(filter(filter(x.s, yellow), yellow), apply(same_size,x.o)), size2)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(or[size3,or[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.exists(iff[size1,green], filter(filter(x.s, triangle), triangle))'	0:exists(%s, %s);4:iff[%s,%s];4:size1;4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:triangle
'λx.apply(and[apply(same_size,x.o),apply(same_shape,x.o)],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[triangle,size1], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size1;3:%s.s;2:x
'λx.exists(or[triangle,size3], x.s)'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, size3), apply(same_shape,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.contains(iota(filter(filter(filter(x.s, blue), rectangle), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:blue;3:%s.s;2:x
'λx.apply(or[size3,apply(same_color,x.o)],iota(filter(x.s, apply(size-geq,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[triangle,not[green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:green;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, or[yellow,triangle])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, or[not[circle],apply(same_size,x.o)]), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:blue
'λx.apply(and[apply(same_shape,x.o),apply(same_shape,x.o)],iota(filter(filter(x.s, blue), apply(size-leq,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[or[size1,circle],and[green,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:circle;4:and[%s,%s];4:green;4:green;1:%s.o;2:x
'λx.apply(or[nor[triangle,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[triangle],iota(filter(x.s, not[triangle])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(nor[circle,circle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,iota(x.s)),iota(filter(x.s, blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:%s.s;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(apply(same_size,x.o), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.forall(green,filter(x.s, nand[nand[green,apply(same_shape,iota(filter(x.s, size2)))],apply(same_size,x.o)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nand[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(not[nor[blue,not[circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(not[apply(same_color,iota(filter(x.s, not[blue])))],filter(x.s, blue))'	0:forall(%s,%s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[nor[circle,size1],not[blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:circle;4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(nor[not[apply(same_shape,x.o)],yellow], filter(x.s, or[rectangle,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[blue,or[triangle,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size1;1:%s.o;2:x
'λx.apply(and[blue,or[triangle,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:size3;1:%s.o;2:x
'λx.apply(apply(size-leq,x.o),iota(filter(x.s, and[or[blue,green],triangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:blue;4:green;4:triangle
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, not[size2]), and[blue,apply(same_shape,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2;4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(or[blue,circle],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[apply(size-gt,x.o),size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size3), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(filter(x.s, size2), apply(same_shape,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[green,apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.exists(circle, filter(x.s, circle))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[size3,or[size3,nand[yellow,circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:or[%s,%s];4:size3;4:nand[%s,%s];4:yellow;4:circle;1:%s.o;2:x
'λx.apply(or[and[blue,blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(not[apply(size-geq,x.o)],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(or[nand[rectangle,size3],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size3;4:size2;1:%s.o;2:x
'λx.apply(or[nand[rectangle,size3],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:rectangle;4:size3;4:size1;1:%s.o;2:x
'λx.apply(and[size2,green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(nand[iff[triangle,blue],rectangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.exists(or[size2,green], filter(x.s, rectangle))'	0:exists(%s, %s);4:or[%s,%s];4:size2;4:green;3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(or[and[blue,size1],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:size1;4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[triangle,triangle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:triangle
'λx.apply(not[or[size2,or[circle,and[triangle,blue]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size2;4:or[%s,%s];4:circle;4:and[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, circle), iff[apply(size-gt,x.o),yellow]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:iff[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:yellow
'λx.apply(and[blue,and[size3,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size3;4:size3;1:%s.o;2:x
'λx.apply(and[or[apply(same_shape,x.o),triangle],blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[or[iff[triangle,blue],rectangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:triangle;4:blue;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.forall(apply(size-geq,x.o),filter(x.s, nor[blue,apply(same_shape,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, green), green)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.exists(and[or[size1,size2],apply(same_size,x.o)], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:size1;4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(or[circle,or[yellow,green]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(and[not[and[blue,rectangle]],iff[size3,triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:rectangle;4:iff[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(and[nand[green,circle],not[and[blue,apply(same_color,x.o)]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:green;4:circle;4:not[%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[triangle,not[or[yellow,triangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:or[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[nor[blue,triangle],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:blue;4:triangle;4:size1
'λx.apply(not[and[apply(same_size,x.o),and[blue,not[size1]]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:not[%s];4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, green), apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.forall(apply(same_size,x.o),filter(filter(x.s, green), triangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(and[circle,and[size2,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:and[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, or[green,blue])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:green;4:blue
'λx.apply(not[triangle],iota(filter(x.s, size1)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(not[triangle],iota(filter(x.s, size2)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.apply(not[triangle],iota(filter(x.s, green)))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(triangle,iota(filter(filter(x.s, implies[size1,yellow]), green)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:size1;4:yellow;4:green
'λx.apply(and[blue,or[blue,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),triangle],iota(filter(x.s, circle)))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.contains(x.o, filter(x.s, apply(same_color,iota(filter(x.s, or[blue,circle])))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:circle
'λx.apply(or[triangle,apply(same_size,iota(filter(x.s, apply(same_shape,x.o))))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(same_shape,x.o)), rectangle), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:circle
'λx.forall(green,filter(x.s, and[and[apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),triangle],green]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:green
'λx.exists(rectangle, filter(filter(x.s, green), not[yellow]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:yellow
'λx.apply(or[nor[blue,triangle],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(x.s, circle), size1)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:size1
'λx.apply(circle,iota(filter(filter(x.s, circle), green)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:green
'λx.apply(not[or[size3,and[green,blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:size3;4:and[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.exists(circle, filter(x.s, or[yellow,apply(same_size,iota(filter(x.s, size3)))]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(and[circle,or[yellow,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.forall(not[triangle],filter(filter(x.s, yellow), size3))'	0:forall(%s,%s);4:not[%s];4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.apply(green,iota(filter(filter(x.s, or[apply(same_size,x.o),green]), triangle)))'	0:apply(%s,%s);4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;4:triangle
'λx.apply(and[apply(same_size,x.o),circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(iff[size3,green], x.s)'	0:exists(%s, %s);4:iff[%s,%s];4:size3;4:green;3:%s.s;2:x
'λx.apply(not[and[or[yellow,nor[blue,blue]],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:yellow;4:nor[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, nand[triangle,size2]), triangle)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:size2;4:triangle;3:%s.s;2:x
'λx.contains(x.o, filter(filter(x.s, size2), or[size2,apply(size-geq,iota(filter(x.s, size3)))]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:size2;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(x.s, yellow), and[apply(same_shape,x.o),yellow]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.apply(and[and[not[blue],nand[blue,size2]],implies[circle,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:nand[%s,%s];4:blue;4:size2;4:implies[%s,%s];4:circle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[nor[blue,blue],triangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nor[%s,%s];4:blue;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(not[size1],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[size3],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size1,iota(filter(x.s, and[green,green])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:green
'λx.apply(iff[and[triangle,size1],size3],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:size1;4:size3;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, not[circle]), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, and[size3,blue])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(apply(same_color,x.o),iota(filter(x.s, and[apply(same_shape,x.o),implies[blue,blue]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:blue;4:blue
'λx.apply(yellow,iota(filter(filter(x.s, yellow), not[apply(same_shape,x.o)])))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[blue,nor[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:nor[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), circle), apply(same_shape,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:circle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(apply(same_color,iota(filter(x.s, nand[yellow,yellow]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:yellow;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(same_color,iota(filter(filter(x.s, size3), not[rectangle])))), green))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:rectangle;4:green
'λx.apply(and[or[size3,blue],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(or[blue,apply(same_color,x.o)], filter(filter(x.s, triangle), nand[blue,apply(same_size,x.o)]))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:nand[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(filter(x.s, apply(same_color,x.o)), blue), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;4:triangle
'λx.apply(blue,iota(filter(x.s, or[size1,nand[triangle,yellow]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:nand[%s,%s];4:triangle;4:yellow
'λx.apply(apply(size-gt,x.o),iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(not[and[rectangle,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:rectangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(x.s, apply(same_shape,x.o)), rectangle))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle
'λx.exists(yellow, filter(x.s, not[triangle]))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(apply(same_shape,x.o),iota(filter(x.s, not[apply(size-geq,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(nor[and[size3,yellow],size1],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:size3;4:yellow;4:size1;1:%s.o;2:x
'λx.apply(not[and[green,circle]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), or[iff[or[apply(same_color,x.o),size3],size3],triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:iff[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:size3;4:triangle
'λx.exists(circle, filter(x.s, apply(size-leq,iota(filter(x.s, apply(same_shape,x.o))))))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(size2, filter(x.s, or[yellow,blue]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:blue
'λx.exists(not[apply(same_shape,x.o)], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size3), apply(size-geq,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),blue],iota(filter(x.s, not[nor[and[and[triangle,circle],circle],blue]])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:triangle;4:circle;4:circle;4:blue
'λx.apply(not[or[yellow,and[yellow,green]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size2), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:yellow
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size3), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:yellow
'λx.exists(nand[size2,size2], filter(x.s, or[apply(same_size,x.o),size2]))'	0:exists(%s, %s);4:nand[%s,%s];4:size2;4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size2
'λx.apply(and[not[or[and[size2,yellow],and[yellow,rectangle]]],implies[green,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:yellow;4:and[%s,%s];4:yellow;4:rectangle;4:implies[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), rectangle), size3))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:size3
'λx.apply(iff[size3,or[size3,green]],iota(filter(x.s, apply(size-gt,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:or[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(size2,iota(filter(x.s, and[green,size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:green;4:size2
'λx.apply(nand[iff[yellow,circle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:iff[%s,%s];4:yellow;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[apply(same_shape,iota(filter(filter(x.s, not[and[circle,nand[rectangle,size1]]]), blue)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:circle;4:nand[%s,%s];4:rectangle;4:size1;4:blue;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(x.s, triangle), or[yellow,size1])))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:yellow;4:size1
'λx.apply(or[implies[or[rectangle,not[circle]],green],or[yellow,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:circle;4:green;4:or[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.exists(apply(same_size,iota(x.s)), x.s)'	0:exists(%s, %s);4:apply(%s,%s);5:same_size;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(filter(x.s, blue), size1), blue)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:size1;4:blue
'λx.forall(rectangle,filter(filter(x.s, and[size1,apply(same_shape,x.o)]), blue))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(not[nor[blue,not[triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:not[%s];4:triangle;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, implies[apply(same_color,x.o),and[yellow,blue]]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:blue
'λx.apply(and[size3,green],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.empty(filter(filter(filter(x.s, size3), apply(same_shape,x.o)), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle
'λx.exists(blue, filter(filter(filter(x.s, and[or[yellow,blue],apply(same_size,iota(filter(filter(x.s, blue), apply(size-gt,x.o))))]), blue), nand[size3,size3]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:blue;4:nand[%s,%s];4:size3;4:size3
'λx.exists(circle, filter(x.s, or[rectangle,apply(same_size,x.o)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(nand[nand[yellow,size2],iff[green,circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:yellow;4:size2;4:iff[%s,%s];4:green;4:circle;1:%s.o;2:x
'λx.apply(nand[or[circle,triangle],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nor[and[implies[blue,green],rectangle],and[or[size3,circle],blue]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:green;4:rectangle;4:and[%s,%s];4:or[%s,%s];4:size3;4:circle;4:blue;1:%s.o;2:x
'λx.apply(and[nor[and[blue,circle],apply(size-gt,x.o)],or[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[and[size1,blue],not[and[size1,not[rectangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size1;4:blue;4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.forall(or[apply(size-geq,x.o),size1],x.s)'	0:forall(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:size1;3:%s.s;2:x
'λx.apply(rectangle,iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.apply(nand[nand[blue,blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), and[blue,nand[circle,size1]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:blue;4:nand[%s,%s];4:circle;4:size1
'λx.apply(or[or[size1,apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:rectangle;1:%s.o;2:x
'λx.apply(nand[and[circle,blue],triangle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:blue;4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(and[yellow,blue],filter(filter(filter(x.s, not[apply(size-leq,x.o)]), circle), circle))'	0:forall(%s,%s);4:and[%s,%s];4:yellow;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:circle
'λx.contains(iota(filter(x.s, blue)), filter(x.s, blue))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[not[iff[blue,triangle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:not[%s];4:iff[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.forall(size1,x.s)'	0:forall(%s,%s);4:size1;3:%s.s;2:x
'λx.forall(size2,x.s)'	0:forall(%s,%s);4:size2;3:%s.s;2:x
'λx.forall(size3,x.s)'	0:forall(%s,%s);4:size3;3:%s.s;2:x
'λx.exists(not[triangle], x.s)'	0:exists(%s, %s);4:not[%s];4:triangle;3:%s.s;2:x
'λx.apply(size3,iota(filter(x.s, iff[nand[not[yellow],and[size3,and[and[apply(same_shape,x.o),apply(same_color,x.o)],size3]]],nor[size3,not[blue]]])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:nand[%s,%s];4:not[%s];4:yellow;4:and[%s,%s];4:size3;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;4:nor[%s,%s];4:size3;4:not[%s];4:blue
'λx.apply(or[size1,nor[size1,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:nor[%s,%s];4:size1;4:blue;1:%s.o;2:x
'λx.forall(or[blue,rectangle],filter(x.s, apply(same_color,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[apply(same_shape,iota(filter(x.s, apply(size-leq,x.o)))),apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(size1,filter(filter(filter(x.s, size3), blue), circle))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:circle
'λx.apply(or[green,circle],iota(filter(x.s, size3)))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(nand[blue,and[not[circle],blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:and[%s,%s];4:not[%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[or[or[not[apply(same_shape,iota(filter(x.s, blue)))],blue],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:or[%s,%s];4:not[%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(implies[apply(same_shape,x.o),blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[and[green,green],blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:green;4:green;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, apply(same_size,x.o)), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:triangle
'λx.contains(x.o, filter(filter(filter(x.s, triangle), green), size2))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:green;4:size2
'λx.apply(nand[nor[size3,blue],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:size3;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[blue,not[or[triangle,not[green]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:or[%s,%s];4:triangle;4:not[%s];4:green;1:%s.o;2:x
'λx.empty(filter(filter(x.s, and[apply(same_size,x.o),size1]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size1;4:size1
'λx.apply(nand[blue,size1],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:blue;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(nor[yellow,apply(size-lt,x.o)],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:yellow;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[or[triangle,blue],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:triangle;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[or[and[apply(size-leq,x.o),circle],green],triangle],iota(filter(filter(x.s, not[apply(same_color,x.o)]), circle)))'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:circle;4:green;4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle
'λx.apply(and[yellow,iff[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:yellow;4:iff[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(and[and[blue,blue],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size3;1:%s.o;2:x
'λx.apply(and[and[blue,blue],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:blue;4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),or[iff[blue,triangle],rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:iff[%s,%s];4:blue;4:triangle;4:rectangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, green), not[rectangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:not[%s];4:rectangle
'λx.exists(nand[yellow,yellow], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:nand[%s,%s];4:yellow;4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[blue,circle],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:circle;4:circle;1:%s.o;2:x
'λx.apply(and[or[blue,or[rectangle,triangle]],implies[and[yellow,blue],size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:blue;4:or[%s,%s];4:rectangle;4:triangle;4:implies[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:size2;1:%s.o;2:x
'λx.apply(and[nor[triangle,green],circle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:triangle;4:green;4:circle;1:%s.o;2:x
'λx.empty(filter(filter(filter(filter(x.s, or[circle,rectangle]), yellow), apply(same_shape,x.o)), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:rectangle;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, blue), or[nor[circle,yellow],yellow]), apply(same_size,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:nor[%s,%s];4:circle;4:yellow;4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[nand[blue,circle],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nand[%s,%s];4:blue;4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, circle), or[apply(same_shape,iota(filter(filter(x.s, apply(same_shape,x.o)), blue))),blue]), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:blue;4:size1
'λx.contains(iota(filter(x.s, or[rectangle,circle])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;3:%s.s;2:x
'λx.apply(size3,iota(filter(filter(filter(x.s, triangle), blue), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:blue;4:size3
'λx.exists(not[yellow], filter(x.s, size2))'	0:exists(%s, %s);4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:size2
'λx.contains(x.o, filter(x.s, or[yellow,or[green,circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:yellow;4:or[%s,%s];4:green;4:circle
'λx.apply(and[circle,blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(nand[size1,nor[size3,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size1;4:nor[%s,%s];4:size3;4:blue;1:%s.o;2:x
'λx.exists(iff[circle,blue], filter(x.s, apply(size-geq,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:circle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[or[yellow,and[not[blue],green]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:yellow;4:and[%s,%s];4:not[%s];4:blue;4:green;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:circle
'λx.apply(and[iff[yellow,green],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:yellow;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(same_color,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[size1,or[yellow,apply(same_shape,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[triangle,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[nor[and[blue,green],and[blue,circle]],or[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:blue;4:green;4:and[%s,%s];4:blue;4:circle;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[and[apply(same_color,x.o),yellow],yellow]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;4:yellow
'λx.apply(or[apply(same_color,iota(filter(x.s, apply(same_shape,x.o)))),yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),not[size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),not[size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size3;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nor[and[circle,blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:and[%s,%s];4:circle;4:blue;4:circle
'λx.forall(blue,filter(filter(x.s, yellow), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[or[green,not[size1]],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:green;4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.apply(apply(same_shape,iota(filter(x.s, apply(size-geq,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[blue,not[and[size1,not[rectangle]]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:and[%s,%s];4:size1;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, apply(same_size,x.o)), not[and[circle,yellow]]), nor[iff[circle,yellow],rectangle])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:and[%s,%s];4:circle;4:yellow;4:nor[%s,%s];4:iff[%s,%s];4:circle;4:yellow;4:rectangle
'λx.contains(x.o, filter(filter(filter(x.s, iff[circle,blue]), nand[rectangle,blue]), not[and[circle,rectangle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:circle;4:blue;4:nand[%s,%s];4:rectangle;4:blue;4:not[%s];4:and[%s,%s];4:circle;4:rectangle
'λx.apply(triangle,iota(filter(filter(x.s, triangle), and[not[implies[green,blue]],size3])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:and[%s,%s];4:not[%s];4:implies[%s,%s];4:green;4:blue;4:size3
'λx.apply(not[and[blue,implies[circle,yellow]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:implies[%s,%s];4:circle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, blue)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[not[blue],or[rectangle,not[circle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:blue;4:or[%s,%s];4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.forall(green,filter(filter(x.s, blue), circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(or[and[implies[size2,nand[yellow,size3]],blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:size2;4:nand[%s,%s];4:yellow;4:size3;4:blue;4:circle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, not[yellow])), filter(x.s, apply(same_color,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(rectangle, filter(x.s, yellow))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[iff[circle,blue],and[triangle,circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:circle;4:blue;4:and[%s,%s];4:triangle;4:circle;1:%s.o;2:x
'λx.exists(apply(same_color,x.o), filter(filter(x.s, green), triangle))'	0:exists(%s, %s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:triangle
'λx.apply(yellow,iota(filter(filter(x.s, yellow), size3)))'	0:apply(%s,%s);4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size3
'λx.empty(filter(filter(x.s, apply(size-lt,x.o)), not[size1]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:size1
'λx.apply(implies[not[not[triangle]],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:not[%s];4:triangle;4:blue;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, triangle), apply(same_shape,x.o)), apply(same_color,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_size,x.o)), circle), or[yellow,green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;4:or[%s,%s];4:yellow;4:green
'λx.apply(nand[rectangle,yellow],iota(x.s))'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:yellow;1:iota(%s);3:%s.s;2:x
'λx.exists(triangle, filter(x.s, or[and[size3,not[iff[circle,nor[green,implies[or[apply(size-geq,iota(filter(x.s, apply(same_shape,x.o)))),green],blue]]]]],triangle]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:not[%s];4:iff[%s,%s];4:circle;4:nor[%s,%s];4:green;4:implies[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:blue;4:triangle
'λx.apply(not[not[implies[or[size1,circle],apply(same_size,x.o)]]],iota(filter(filter(x.s, or[iff[yellow,not[apply(same_size,x.o)]],size3]), circle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:size1;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:circle
'λx.apply(and[size1,or[size2,blue]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:or[%s,%s];4:size2;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), yellow), iff[apply(size-leq,iota(filter(filter(x.s, size1), triangle))),and[size3,yellow]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:iff[%s,%s];4:apply(%s,%s);5:size-leq;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:triangle;4:and[%s,%s];4:size3;4:yellow
'λx.apply(and[or[apply(same_shape,x.o),size2],blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[and[size2,size3],nor[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:size3;4:nor[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_shape,x.o)), implies[size1,size3]), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:implies[%s,%s];4:size1;4:size3;4:yellow
'λx.apply(not[or[nor[blue,nor[triangle,triangle]],apply(size-lt,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:nor[%s,%s];4:blue;4:nor[%s,%s];4:triangle;4:triangle;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.forall(apply(same_size,x.o),filter(x.s, not[apply(same_color,x.o)]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[blue,yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:yellow;1:%s.o;2:x
'λx.apply(nand[triangle,nor[blue,blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:nor[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.contains(iota(x.s), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(x.s, yellow), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:circle
'λx.apply(implies[triangle,rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(or[green,or[size2,apply(same_color,x.o)]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:green;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nor[size1,yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:yellow;1:%s.o;2:x
'λx.forall(rectangle,filter(x.s, apply(same_size,x.o)))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.forall(size2,filter(x.s, nand[yellow,rectangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:yellow;4:rectangle
'λx.apply(blue,iota(filter(filter(filter(x.s, rectangle), rectangle), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle;4:blue
'λx.apply(implies[rectangle,rectangle],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:implies[%s,%s];4:rectangle;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(and[circle,or[size2,yellow]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:size2;4:yellow;1:%s.o;2:x
'λx.forall(rectangle,filter(filter(x.s, apply(size-leq,x.o)), not[iff[not[and[yellow,triangle]],size3]]))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:not[%s];4:iff[%s,%s];4:not[%s];4:and[%s,%s];4:yellow;4:triangle;4:size3
'λx.forall(rectangle,filter(filter(filter(filter(x.s, apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))), triangle), circle), circle))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:circle;4:circle
'λx.contains(x.o, filter(filter(x.s, size2), or[implies[size3,blue],yellow]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:or[%s,%s];4:implies[%s,%s];4:size3;4:blue;4:yellow
'λx.apply(apply(same_size,x.o),iota(filter(x.s, not[apply(size-gt,x.o)])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[size2,or[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:or[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(apply(same_color,x.o),iota(filter(filter(x.s, blue), and[not[size2],or[nor[size2,circle],triangle]])))'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:and[%s,%s];4:not[%s];4:size2;4:or[%s,%s];4:nor[%s,%s];4:size2;4:circle;4:triangle
'λx.apply(or[and[blue,blue],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:blue;4:blue;1:%s.o;2:x
'λx.apply(or[and[circle,apply(same_shape,iota(filter(x.s, blue)))],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;1:%s.o;2:x
'λx.apply(and[blue,apply(same_size,x.o)],iota(filter(filter(x.s, apply(same_color,x.o)), size1)))'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1
'λx.exists(not[apply(same_color,iota(filter(x.s, rectangle)))], x.s)'	0:exists(%s, %s);4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;3:%s.s;2:x
'λx.apply(nor[and[or[green,and[yellow,rectangle]],rectangle],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:yellow;4:rectangle;4:rectangle;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[circle,iff[triangle,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:triangle;4:green;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, yellow), rectangle), yellow))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle;4:yellow
'λx.apply(implies[implies[blue,green],size3],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:blue;4:green;4:size3;1:%s.o;2:x
'λx.apply(not[or[green,size3]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:size3;1:%s.o;2:x
'λx.apply(not[or[green,size2]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(iff[nor[apply(same_shape,iota(filter(filter(x.s, size2), circle))),rectangle],rectangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:circle;4:rectangle;4:rectangle;1:%s.o;2:x
'λx.apply(nor[and[implies[apply(same_color,iota(filter(x.s, blue))),rectangle],yellow],green],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:rectangle;4:yellow;4:green;1:%s.o;2:x
'λx.apply(iff[triangle,nand[size1,green]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:iff[%s,%s];4:triangle;4:nand[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(rectangle,filter(filter(x.s, and[apply(same_size,x.o),yellow]), size1))'	0:forall(%s,%s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:yellow;4:size1
'λx.apply(and[blue,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:triangle;1:%s.o;2:x
'λx.apply(iff[apply(same_color,x.o),not[or[blue,circle]]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nand[and[circle,not[blue]],circle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:and[%s,%s];4:circle;4:not[%s];4:blue;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, apply(same_shape,iota(filter(x.s, blue)))))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.exists(or[rectangle,blue], filter(x.s, size1))'	0:exists(%s, %s);4:or[%s,%s];4:rectangle;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.forall(not[and[apply(same_color,iota(filter(x.s, blue))),green]],x.s)'	0:forall(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;3:%s.s;2:x
'λx.apply(implies[size3,not[blue]],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:not[%s];4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(size3,iota(filter(filter(filter(x.s, blue), circle), size3)))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;4:size3
'λx.apply(or[blue,or[triangle,rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:triangle;4:rectangle;1:%s.o;2:x
'λx.forall(blue,filter(x.s, not[size3]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.apply(and[size3,not[and[rectangle,triangle]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:and[%s,%s];4:rectangle;4:triangle;1:%s.o;2:x
'λx.apply(or[or[blue,green],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:green;4:triangle;1:%s.o;2:x
'λx.exists(and[not[yellow],or[apply(same_shape,x.o),yellow]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:not[%s];4:yellow;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;3:%s.s;2:x
'λx.exists(apply(size-geq,x.o), filter(x.s, nor[yellow,nor[circle,blue]]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:yellow;4:nor[%s,%s];4:circle;4:blue
'λx.apply(or[not[size1],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:blue;1:%s.o;2:x
'λx.exists(and[apply(same_color,x.o),circle], filter(filter(x.s, apply(same_shape,x.o)), blue))'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(implies[or[circle,blue],and[yellow,triangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:circle;4:blue;4:and[%s,%s];4:yellow;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(x.s, blue), not[size2]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:not[%s];4:size2
'λx.apply(implies[implies[blue,green],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:implies[%s,%s];4:blue;4:green;4:rectangle;1:%s.o;2:x
'λx.apply(or[blue,and[size3,not[rectangle]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:size3;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.exists(yellow, filter(x.s, triangle))'	0:exists(%s, %s);4:yellow;3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.contains(x.o, filter(x.s, and[nand[rectangle,blue],implies[and[circle,apply(same_color,x.o)],blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nand[%s,%s];4:rectangle;4:blue;4:implies[%s,%s];4:and[%s,%s];4:circle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue
'λx.forall(blue,filter(filter(x.s, and[circle,circle]), apply(same_size,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(or[blue,rectangle], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:blue;4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, size3), iff[apply(same_shape,x.o),triangle]), circle))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:iff[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:circle
'λx.apply(and[nand[size3,yellow],not[and[blue,apply(same_color,x.o)]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:and[%s,%s];4:nand[%s,%s];4:size3;4:yellow;4:not[%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(and[apply(same_color,x.o),size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size3;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),size2],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size1;1:%s.o;2:x
'λx.apply(nand[not[and[triangle,blue]],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:and[%s,%s];4:triangle;4:blue;4:triangle;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, apply(same_color,x.o)), rectangle), apply(same_shape,x.o)))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, not[size3]), blue)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3;4:blue;3:%s.s;2:x
'λx.apply(and[apply(same_color,x.o),or[blue,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:or[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(implies[size2,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:circle;1:%s.o;2:x
'λx.apply(implies[size1,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size1;4:circle;1:%s.o;2:x
'λx.apply(or[blue,or[and[triangle,green],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:triangle;4:green;4:circle;1:%s.o;2:x
'λx.apply(not[nor[blue,nor[rectangle,size2]]],x.o)'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:blue;4:nor[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.apply(and[or[size3,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:size3;4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[and[blue,iff[green,size1]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:blue;4:iff[%s,%s];4:green;4:size1;1:%s.o;2:x
'λx.forall(green,filter(x.s, not[apply(same_shape,x.o)]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(and[or[yellow,blue],size1],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:yellow;4:blue;4:size1;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, nand[nor[triangle,blue],circle]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:nor[%s,%s];4:triangle;4:blue;4:circle
'λx.apply(not[and[not[apply(same_size,x.o)],green]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[and[blue,apply(same_color,iota(filter(x.s, blue)))],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[and[triangle,not[blue]],or[and[rectangle,triangle],and[green,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.forall(not[blue],filter(x.s, and[not[circle],apply(same_size,x.o)]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:not[%s];4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(implies[size3,circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size3;4:circle;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, and[apply(same_size,x.o),apply(same_shape,x.o)]), yellow), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;4:yellow
'λx.apply(nor[blue,size2],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:blue;4:size2;1:%s.o;2:x
'λx.forall(green,filter(x.s, and[and[apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))),triangle],rectangle]))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;4:rectangle
'λx.exists(not[rectangle], filter(x.s, or[and[yellow,blue],apply(same_shape,x.o)]))'	0:exists(%s, %s);4:not[%s];4:rectangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:yellow;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[or[yellow,green]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:yellow;4:green;1:%s.o;2:x
'λx.apply(or[blue,iff[blue,blue]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:iff[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(nand[size3,not[size1]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:size3;4:not[%s];4:size1;1:%s.o;2:x
'λx.apply(or[nor[and[green,rectangle],yellow],and[circle,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:and[%s,%s];4:green;4:rectangle;4:yellow;4:and[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, size1), or[and[not[blue],apply(same_shape,x.o)],triangle]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:or[%s,%s];4:and[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(or[size1,blue],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.forall(and[green,apply(same_color,x.o)],filter(x.s, size1))'	0:forall(%s,%s);4:and[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size1
'λx.apply(nand[nor[blue,size3],not[blue]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:blue;4:size3;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(and[size3,not[rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,x.o),yellow],iota(filter(x.s, and[blue,size1])))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:size1
'λx.forall(apply(same_size,x.o),filter(x.s, not[size3]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size3
'λx.forall(apply(same_size,x.o),filter(x.s, not[size1]))'	0:forall(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(and[or[green,yellow],or[or[rectangle,not[circle]],triangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:or[%s,%s];4:or[%s,%s];4:rectangle;4:not[%s];4:circle;4:triangle;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, yellow), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:rectangle
'λx.apply(not[and[nor[blue,rectangle],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(or[green,blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:green;4:blue;1:%s.o;2:x
'λx.apply(or[blue,not[apply(same_color,iota(filter(x.s, apply(same_shape,x.o))))]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(circle,iota(filter(filter(filter(x.s, yellow), yellow), and[and[apply(same_shape,x.o),circle],not[triangle]])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;4:not[%s];4:triangle
'λx.apply(and[and[rectangle,rectangle],or[green,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:rectangle;4:rectangle;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[triangle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.forall(blue,filter(filter(filter(x.s, green), apply(same_shape,x.o)), size2))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.apply(not[and[triangle,not[blue]]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:triangle;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, green), rectangle)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:rectangle
'λx.apply(nor[not[apply(same_color,x.o)],and[yellow,blue]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nor[%s,%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:and[%s,%s];4:yellow;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, not[size1]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(triangle,iota(filter(x.s, circle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(or[circle,and[blue,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:and[%s,%s];4:blue;4:blue;1:%s.o;2:x
'λx.apply(not[or[and[size2,size1],and[blue,circle]]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:and[%s,%s];4:size2;4:size1;4:and[%s,%s];4:blue;4:circle;1:%s.o;2:x
'λx.apply(nand[implies[size3,circle],triangle],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:implies[%s,%s];4:size3;4:circle;4:triangle;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, apply(same_shape,x.o)), size3), circle))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:circle
'λx.apply(nor[size1,size1],iota(filter(x.s, and[and[size2,apply(same_color,x.o)],iff[green,and[circle,blue]]])))'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:iff[%s,%s];4:green;4:and[%s,%s];4:circle;4:blue
'λx.apply(triangle,iota(filter(filter(x.s, triangle), or[green,nor[yellow,size2]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:or[%s,%s];4:green;4:nor[%s,%s];4:yellow;4:size2
'λx.contains(x.o, filter(x.s, nand[circle,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:circle;4:blue
'λx.apply(size2,iota(filter(x.s, and[and[nor[green,circle],not[green]],size2])))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:green;4:circle;4:not[%s];4:green;4:size2
'λx.apply(or[triangle,green],iota(filter(x.s, and[circle,green])))'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:green
'λx.forall(apply(same_shape,iota(x.s)),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:%s.s;2:x
'λx.apply(not[and[size3,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(and[apply(same_size,x.o),circle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;3:%s.s;2:x
'λx.contains(x.o, filter(x.s, and[size3,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:blue
'λx.contains(x.o, filter(x.s, and[size1,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:blue
'λx.apply(not[and[yellow,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:yellow;4:rectangle;1:%s.o;2:x
'λx.apply(apply(size-geq,iota(filter(x.s, or[rectangle,circle]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, not[and[not[size1],blue]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:and[%s,%s];4:not[%s];4:size1;4:blue
'λx.exists(rectangle, filter(filter(x.s, rectangle), or[blue,size1]))'	0:exists(%s, %s);4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:or[%s,%s];4:blue;4:size1
'λx.apply(iff[nor[size2,and[or[or[yellow,green],yellow],circle]],not[size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nor[%s,%s];4:size2;4:and[%s,%s];4:or[%s,%s];4:or[%s,%s];4:yellow;4:green;4:yellow;4:circle;4:not[%s];4:size2;1:%s.o;2:x
'λx.apply(not[or[implies[green,circle],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:implies[%s,%s];4:green;4:circle;4:circle;1:%s.o;2:x
'λx.apply(or[nor[blue,circle],apply(size-gt,x.o)],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:nor[%s,%s];4:blue;4:circle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(not[and[nor[blue,triangle],circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(or[and[size2,triangle],not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:size2;4:triangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.apply(and[apply(same_size,x.o),or[blue,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[nor[not[or[circle,blue]],yellow],apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:nor[%s,%s];4:not[%s];4:or[%s,%s];4:circle;4:blue;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(or[blue,or[not[size1],rectangle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:or[%s,%s];4:not[%s];4:size1;4:rectangle;1:%s.o;2:x
'λx.apply(nor[and[or[green,and[yellow,apply(same_color,x.o)]],rectangle],and[yellow,size2]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;4:and[%s,%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(implies[not[and[blue,triangle]],circle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:and[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.apply(implies[blue,apply(size-lt,iota(filter(filter(filter(x.s, triangle), size2), green)))],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;4:size2;4:green;1:%s.o;2:x
'λx.forall(and[circle,circle],filter(x.s, and[yellow,apply(same_color,x.o)]))'	0:forall(%s,%s);4:and[%s,%s];4:circle;4:circle;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(iff[nand[size2,or[and[yellow,yellow],rectangle]],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:nand[%s,%s];4:size2;4:or[%s,%s];4:and[%s,%s];4:yellow;4:yellow;4:rectangle;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), size2))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size2
'λx.empty(filter(filter(x.s, apply(same_shape,x.o)), size1))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1
'λx.apply(rectangle,iota(filter(filter(x.s, rectangle), not[green])))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:not[%s];4:green
'λx.forall(not[blue],filter(filter(x.s, apply(same_shape,x.o)), and[apply(same_color,x.o),nand[circle,circle]]))'	0:forall(%s,%s);4:not[%s];4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:circle;4:circle
'λx.contains(x.o, filter(filter(x.s, size3), and[size3,blue]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:size3;4:blue
'λx.forall(circle,filter(filter(x.s, rectangle), blue))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(not[circle],iota(filter(filter(x.s, rectangle), apply(size-geq,iota(filter(x.s, apply(same_shape,x.o)))))))'	0:apply(%s,%s);4:not[%s];4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(green,filter(filter(filter(x.s, apply(same_shape,x.o)), size1), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:yellow
'λx.forall(green,filter(filter(filter(x.s, apply(same_shape,x.o)), size3), yellow))'	0:forall(%s,%s);4:green;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;4:yellow
'λx.apply(or[rectangle,not[yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:rectangle;4:not[%s];4:yellow;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), yellow), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(rectangle,iota(filter(filter(x.s, size1), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:blue
'λx.apply(rectangle,iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:rectangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(or[and[rectangle,yellow],iff[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:rectangle;4:yellow;4:iff[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.apply(or[triangle,apply(size-gt,iota(x.s))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:iota(%s);3:%s.s;2:x;1:%s.o;2:x
'λx.apply(and[circle,iff[blue,rectangle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:iff[%s,%s];4:blue;4:rectangle;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, or[and[size3,triangle],rectangle]), apply(size-geq,x.o)))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:and[%s,%s];4:size3;4:triangle;4:rectangle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[not[size1],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(or[not[size1],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size1;4:size3;1:%s.o;2:x
'λx.apply(not[or[apply(same_color,x.o),rectangle]],iota(filter(x.s, yellow)))'	0:apply(%s,%s);4:not[%s];4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(and[apply(same_shape,iota(filter(x.s, and[circle,blue]))),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue;4:blue;1:%s.o;2:x
'λx.apply(iff[and[implies[blue,size1],triangle],and[size1,size2]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:implies[%s,%s];4:blue;4:size1;4:triangle;4:and[%s,%s];4:size1;4:size2;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(filter(filter(filter(x.s, apply(same_color,x.o)), size2), size2), blue), blue)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:size2;4:size2;4:blue;4:blue
'λx.apply(iff[and[blue,blue],circle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:blue;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[yellow,apply(same_size,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.empty(filter(x.s, and[nor[size2,circle],not[yellow]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:nor[%s,%s];4:size2;4:circle;4:not[%s];4:yellow
'λx.apply(and[size1,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:triangle;1:%s.o;2:x
'λx.apply(and[iff[circle,green],yellow],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:iff[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(and[size3,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.apply(or[size2,and[green,size2]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:and[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.apply(iff[yellow,green],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:iff[%s,%s];4:yellow;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[size3,rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(or[size1,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:%s.s;2:x
'λx.exists(iff[and[circle,triangle],apply(same_shape,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:iff[%s,%s];4:and[%s,%s];4:circle;4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(nor[nand[blue,size2],rectangle],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:nand[%s,%s];4:blue;4:size2;4:rectangle;1:%s.o;2:x
'λx.apply(nand[yellow,iff[circle,not[rectangle]]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:yellow;4:iff[%s,%s];4:circle;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(x.s, triangle)), filter(x.s, nand[triangle,green]))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:nand[%s,%s];4:triangle;4:green
'λx.apply(or[size2,circle],iota(x.s))'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:circle;1:iota(%s);3:%s.s;2:x
'λx.forall(apply(size-geq,iota(filter(x.s, apply(same_size,x.o)))),x.s)'	0:forall(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:%s.s;2:x
'λx.apply(apply(same_color,iota(filter(filter(filter(filter(x.s, circle), blue), apply(same_size,x.o)), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(filter(x.s, not[blue]), apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.forall(apply(same_color,x.o),filter(filter(filter(x.s, blue), blue), apply(same_shape,x.o)))'	0:forall(%s,%s);4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, yellow), apply(same_color,x.o)), rectangle))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:rectangle
'λx.exists(size2, filter(x.s, and[and[not[and[green,triangle]],triangle],size2]))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:not[%s];4:and[%s,%s];4:green;4:triangle;4:triangle;4:size2
'λx.apply(or[and[or[green,yellow],nand[circle,circle]],and[circle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:or[%s,%s];4:green;4:yellow;4:nand[%s,%s];4:circle;4:circle;4:and[%s,%s];4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(x.s, not[apply(size-geq,x.o)]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(or[or[circle,size3],rectangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:size3;4:rectangle;1:%s.o;2:x
'λx.apply(apply(same_size,iota(filter(x.s, apply(same_shape,x.o)))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(and[blue,or[and[apply(same_color,iota(filter(x.s, circle))),blue],size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:or[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:circle;4:blue;4:size1;1:%s.o;2:x
'λx.exists(not[and[apply(same_shape,x.o),apply(same_color,x.o)]], filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),blue],iota(filter(x.s, not[nor[and[and[size3,size1],circle],blue]])))'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:nor[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size3;4:size1;4:circle;4:blue
'λx.empty(filter(x.s, and[and[and[size2,apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))],triangle],yellow]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:size2;4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue;4:triangle;4:yellow
'λx.apply(or[circle,green],iota(filter(x.s, green)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.apply(not[and[nand[circle,circle],blue]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:circle;4:blue;1:%s.o;2:x
'λx.apply(not[not[apply(same_color,x.o)]],iota(filter(filter(x.s, or[circle,size2]), circle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:circle;4:size2;4:circle
'λx.empty(filter(filter(x.s, size3), and[apply(same_color,x.o),green]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:green
'λx.apply(size2,iota(filter(filter(filter(x.s, size2), blue), apply(same_shape,x.o))))'	0:apply(%s,%s);4:size2;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(apply(size-leq,x.o),filter(filter(x.s, and[apply(size-gt,x.o),or[size2,apply(same_shape,x.o)]]), or[size1,not[blue]]))'	0:forall(%s,%s);4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:size1;4:not[%s];4:blue
'λx.apply(or[or[circle,or[green,size1]],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:circle;4:or[%s,%s];4:green;4:size1;4:size1;1:%s.o;2:x
'λx.apply(and[or[apply(same_size,iota(filter(x.s, not[yellow]))),triangle],green],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_size;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:triangle;4:green;1:%s.o;2:x
'λx.apply(nand[triangle,apply(same_shape,x.o)],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:%s.o;2:x
'λx.exists(circle, filter(x.s, or[size1,apply(same_shape,x.o)]))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[size2,apply(same_shape,iota(filter(x.s, size3)))],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, implies[not[blue],apply(same_color,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:not[%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(not[size2],iota(filter(x.s, not[size2])))'	0:apply(%s,%s);4:not[%s];4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size2
'λx.apply(or[yellow,not[and[rectangle,size2]]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:yellow;4:not[%s];4:and[%s,%s];4:rectangle;4:size2;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, not[yellow]), and[triangle,or[circle,apply(size-geq,x.o)]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:and[%s,%s];4:triangle;4:or[%s,%s];4:circle;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[size2,or[rectangle,circle]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:or[%s,%s];4:rectangle;4:circle;1:%s.o;2:x
'λx.apply(and[size1,nand[green,size2]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:nand[%s,%s];4:green;4:size2;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, apply(size-lt,x.o)), not[yellow]), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-lt;1:%s.o;2:x;4:not[%s];4:yellow;4:green
'λx.apply(and[apply(same_size,x.o),and[apply(same_color,iota(filter(x.s, size3))),size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:size3;1:%s.o;2:x
'λx.apply(or[apply(same_color,x.o),yellow],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[yellow,or[triangle,apply(same_color,x.o)]], filter(x.s, size3))'	0:exists(%s, %s);4:or[%s,%s];4:yellow;4:or[%s,%s];4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.apply(or[size1,circle],iota(filter(filter(x.s, apply(size-geq,x.o)), nor[size2,circle])))'	0:apply(%s,%s);4:or[%s,%s];4:size1;4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-geq;1:%s.o;2:x;4:nor[%s,%s];4:size2;4:circle
'λx.apply(or[or[blue,apply(same_shape,iota(filter(x.s, or[not[triangle],rectangle])))],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:triangle;4:rectangle;4:green;1:%s.o;2:x
'λx.apply(implies[not[circle],and[iff[rectangle,green],blue]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:circle;4:and[%s,%s];4:iff[%s,%s];4:rectangle;4:green;4:blue;1:%s.o;2:x
'λx.apply(not[and[green,rectangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:green;4:rectangle;1:%s.o;2:x
'λx.contains(iota(filter(filter(x.s, apply(same_size,x.o)), and[triangle,size2])), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:and[%s,%s];4:triangle;4:size2;3:%s.s;2:x
'λx.apply(or[and[circle,green],and[nor[blue,triangle],circle]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:green;4:and[%s,%s];4:nor[%s,%s];4:blue;4:triangle;4:circle;1:%s.o;2:x
'λx.exists(implies[triangle,blue], filter(filter(x.s, or[rectangle,apply(same_color,x.o)]), apply(same_shape,x.o)))'	0:exists(%s, %s);4:implies[%s,%s];4:triangle;4:blue;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), iff[size1,not[blue]])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:iff[%s,%s];4:size1;4:not[%s];4:blue
'λx.exists(blue, filter(x.s, or[apply(same_shape,x.o),yellow]))'	0:exists(%s, %s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:yellow
'λx.exists(apply(size-geq,x.o), filter(x.s, not[size1]))'	0:exists(%s, %s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:size1
'λx.apply(circle,iota(filter(x.s, and[circle,blue])))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:circle;4:blue
'λx.apply(not[and[apply(same_color,x.o),circle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.forall(size2,filter(x.s, and[and[and[nand[circle,not[size3]],apply(same_color,x.o)],nand[green,rectangle]],nor[and[size2,size2],blue]]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:and[%s,%s];4:and[%s,%s];4:nand[%s,%s];4:circle;4:not[%s];4:size3;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:nand[%s,%s];4:green;4:rectangle;4:nor[%s,%s];4:and[%s,%s];4:size2;4:size2;4:blue
'λx.apply(nor[size1,and[size3,yellow]],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:size1;4:and[%s,%s];4:size3;4:yellow;1:%s.o;2:x
'λx.apply(implies[green,triangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:green;4:triangle;1:%s.o;2:x
'λx.exists(triangle, filter(x.s, or[size3,iff[circle,green]]))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:size3;4:iff[%s,%s];4:circle;4:green
'λx.apply(not[and[or[circle,triangle],yellow]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:or[%s,%s];4:circle;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(implies[not[blue],and[rectangle,apply(same_color,x.o)]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:not[%s];4:blue;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(iota(filter(filter(filter(x.s, yellow), apply(same_shape,x.o)), size3)), x.s)'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size3;3:%s.s;2:x
'λx.forall(circle,filter(filter(x.s, size1), apply(same_size,x.o)))'	0:forall(%s,%s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(size1,iota(filter(filter(filter(x.s, apply(same_shape,x.o)), size1), blue)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:size1;4:blue
'λx.apply(size1,iota(filter(filter(x.s, and[or[not[and[size1,apply(same_size,x.o)]],size3],size1]), triangle)))'	0:apply(%s,%s);4:size1;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:not[%s];4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:size1;4:triangle
'λx.apply(and[size2,triangle],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:size2;4:triangle;1:%s.o;2:x
'λx.forall(apply(same_shape,iota(x.s)),filter(x.s, size3))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:iota(%s);3:%s.s;2:x;3:filter(%s, %s);3:%s.s;2:x;4:size3
'λx.exists(and[yellow,iff[triangle,size3]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:iff[%s,%s];4:triangle;4:size3;3:%s.s;2:x
'λx.apply(or[blue,and[circle,size3]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:and[%s,%s];4:circle;4:size3;1:%s.o;2:x
'λx.apply(or[or[size3,blue],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:blue;4:size3;1:%s.o;2:x
'λx.forall(size3,filter(filter(filter(x.s, yellow), size2), rectangle))'	0:forall(%s,%s);4:size3;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:size2;4:rectangle
'λx.apply(iff[size3,and[circle,circle]],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:size3;4:and[%s,%s];4:circle;4:circle;1:%s.o;2:x
'λx.apply(implies[size2,not[rectangle]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:size2;4:not[%s];4:rectangle;1:%s.o;2:x
'λx.apply(and[and[apply(same_shape,iota(filter(x.s, blue))),or[yellow,not[blue]]],apply(same_size,x.o)],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:or[%s,%s];4:yellow;4:not[%s];4:blue;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.apply(implies[or[not[green],size1],blue],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:not[%s];4:green;4:size1;4:blue;1:%s.o;2:x
'λx.apply(implies[yellow,or[size1,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:yellow;4:or[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), apply(same_shape,iota(filter(x.s, apply(same_shape,x.o))))), green))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, size3), green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:green
'λx.forall(apply(same_shape,x.o),filter(filter(x.s, size2), green))'	0:forall(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:green
'λx.apply(circle,iota(filter(filter(x.s, not[implies[apply(size-gt,x.o),green]]), circle)))'	0:apply(%s,%s);4:circle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:implies[%s,%s];4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:green;4:circle
'λx.apply(and[apply(same_shape,x.o),or[blue,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.apply(and[apply(same_shape,x.o),or[blue,size3]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:or[%s,%s];4:blue;4:size3;1:%s.o;2:x
'λx.forall(size2,filter(x.s, or[nor[circle,size3],triangle]))'	0:forall(%s,%s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:nor[%s,%s];4:circle;4:size3;4:triangle
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.apply(size3,iota(filter(filter(x.s, size3), not[blue])))'	0:apply(%s,%s);4:size3;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:not[%s];4:blue
'λx.apply(apply(same_color,iota(filter(filter(x.s, apply(same_shape,x.o)), circle))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:circle;1:%s.o;2:x
'λx.exists(iff[iff[size2,yellow],apply(same_shape,x.o)], filter(x.s, green))'	0:exists(%s, %s);4:iff[%s,%s];4:iff[%s,%s];4:size2;4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:green
'λx.empty(filter(filter(x.s, and[rectangle,apply(same_color,x.o)]), not[or[blue,circle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:not[%s];4:or[%s,%s];4:blue;4:circle
'λx.apply(blue,iota(filter(x.s, apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))))))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(iff[and[size3,size2],size1],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:size3;4:size2;4:size1;1:%s.o;2:x
'λx.apply(not[blue],x.o)'	0:apply(%s,%s);4:not[%s];4:blue;1:%s.o;2:x
'λx.exists(and[apply(size-leq,x.o),size2], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:apply(%s,%s);5:size-leq;1:%s.o;2:x;4:size2;3:%s.s;2:x
'λx.apply(and[implies[size2,blue],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:implies[%s,%s];4:size2;4:blue;4:blue;1:%s.o;2:x
'λx.exists(circle, filter(filter(x.s, green), green))'	0:exists(%s, %s);4:circle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:green
'λx.forall(triangle,filter(filter(filter(x.s, size3), blue), size3))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size3;4:blue;4:size3
'λx.apply(implies[or[size1,triangle],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:or[%s,%s];4:size1;4:triangle;4:rectangle;1:%s.o;2:x
'λx.apply(triangle,iota(filter(x.s, and[blue,or[implies[or[size3,apply(same_size,x.o)],size3],triangle]])))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:or[%s,%s];4:implies[%s,%s];4:or[%s,%s];4:size3;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:triangle
'λx.apply(blue,iota(filter(filter(x.s, or[blue,green]), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:green;4:circle
'λx.apply(or[size3,size2],iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:size2;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.forall(apply(size-lt,x.o),filter(x.s, yellow))'	0:forall(%s,%s);4:apply(%s,%s);5:size-lt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:yellow
'λx.apply(or[not[circle],or[triangle,blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:circle;4:or[%s,%s];4:triangle;4:blue;1:%s.o;2:x
'λx.apply(and[apply(same_color,x.o),blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;1:%s.o;2:x
'λx.forall(triangle,filter(filter(filter(x.s, and[yellow,apply(same_shape,x.o)]), not[size1]), yellow))'	0:forall(%s,%s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:yellow;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:not[%s];4:size1;4:yellow
'λx.apply(apply(size-geq,x.o),iota(filter(x.s, triangle)))'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:triangle
'λx.apply(not[green],iota(filter(x.s, not[rectangle])))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:rectangle
'λx.contains(iota(filter(x.s, blue)), filter(x.s, apply(same_shape,x.o)))'	0:contains(%s, %s);1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.forall(size1,filter(filter(x.s, blue), apply(size-gt,iota(filter(x.s, blue)))))'	0:forall(%s,%s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-gt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.empty(filter(filter(x.s, apply(same_size,x.o)), not[size3]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:not[%s];4:size3
'λx.contains(x.o, filter(filter(x.s, implies[blue,rectangle]), triangle))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:blue;4:rectangle;4:triangle
'λx.forall(or[circle,nand[apply(same_color,x.o),blue]],filter(x.s, apply(same_shape,x.o)))'	0:forall(%s,%s);4:or[%s,%s];4:circle;4:nand[%s,%s];4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(nor[size3,green], filter(x.s, apply(same_shape,x.o)))'	0:exists(%s, %s);4:nor[%s,%s];4:size3;4:green;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(x.s, and[blue,triangle])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:blue;4:triangle
'λx.apply(or[blue,apply(same_color,x.o)],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:apply(%s,%s);5:same_color;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(or[triangle,apply(size-gt,x.o)], filter(x.s, apply(same_color,x.o)))'	0:exists(%s, %s);4:or[%s,%s];4:triangle;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(size1, filter(filter(x.s, rectangle), rectangle))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:rectangle
'λx.exists(and[or[blue,yellow],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:blue;4:yellow;4:triangle;3:%s.s;2:x
'λx.apply(or[circle,circle],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:circle;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(or[iff[circle,green],yellow],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:circle;4:green;4:yellow;1:%s.o;2:x
'λx.apply(iff[size1,rectangle],iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:iff[%s,%s];4:size1;4:rectangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.apply(or[or[rectangle,blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.exists(triangle, filter(filter(x.s, not[yellow]), apply(size-geq,x.o)))'	0:exists(%s, %s);4:triangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:yellow;4:apply(%s,%s);5:size-geq;1:%s.o;2:x
'λx.apply(and[blue,and[size1,size1]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size1;1:%s.o;2:x
'λx.apply(nand[triangle,size1],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nand[%s,%s];4:triangle;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(blue,iota(filter(filter(x.s, blue), circle)))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:circle
'λx.apply(not[green],iota(filter(filter(x.s, size2), blue)))'	0:apply(%s,%s);4:not[%s];4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:blue
'λx.apply(nor[size2,circle],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:nor[%s,%s];4:size2;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(or[or[size3,blue],triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:size3;4:blue;4:triangle;1:%s.o;2:x
'λx.apply(or[iff[circle,blue],and[triangle,yellow]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:iff[%s,%s];4:circle;4:blue;4:and[%s,%s];4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(nand[nor[size2,circle],blue],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:nor[%s,%s];4:size2;4:circle;4:blue;1:%s.o;2:x
'λx.empty(filter(filter(x.s, iff[blue,blue]), apply(size-gt,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:iff[%s,%s];4:blue;4:blue;4:apply(%s,%s);5:size-gt;1:%s.o;2:x
'λx.apply(or[or[iff[and[triangle,not[green]],rectangle],blue],circle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:and[%s,%s];4:triangle;4:not[%s];4:green;4:rectangle;4:blue;4:circle;1:%s.o;2:x
'λx.apply(or[size2,nand[yellow,apply(same_size,x.o)]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:size2;4:nand[%s,%s];4:yellow;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[not[nor[circle,green]],size1]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:not[%s];4:nor[%s,%s];4:circle;4:green;4:size1
'λx.exists(and[green,rectangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:green;4:rectangle;3:%s.s;2:x
'λx.apply(not[triangle],iota(filter(x.s, or[rectangle,size3])))'	0:apply(%s,%s);4:not[%s];4:triangle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:rectangle;4:size3
'λx.apply(implies[nand[blue,blue],rectangle],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:nand[%s,%s];4:blue;4:blue;4:rectangle;1:%s.o;2:x
'λx.apply(or[apply(same_shape,iota(filter(x.s, apply(same_shape,x.o)))),triangle],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle;1:%s.o;2:x
'λx.apply(or[implies[circle,yellow],not[blue]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:implies[%s,%s];4:circle;4:yellow;4:not[%s];4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(filter(x.s, size1), apply(same_shape,x.o)))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[not[implies[or[circle,circle],apply(same_size,x.o)]]],iota(filter(filter(x.s, or[iff[yellow,not[apply(same_size,x.o)]],size3]), circle)))'	0:apply(%s,%s);4:not[%s];4:not[%s];4:implies[%s,%s];4:or[%s,%s];4:circle;4:circle;4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:iff[%s,%s];4:yellow;4:not[%s];4:apply(%s,%s);5:same_size;1:%s.o;2:x;4:size3;4:circle
'λx.apply(and[circle,or[size1,not[blue]]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:circle;4:or[%s,%s];4:size1;4:not[%s];4:blue;1:%s.o;2:x
'λx.apply(nand[not[blue],not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:not[%s];4:blue;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[apply(size-lt,iota(filter(x.s, size1)))],x.o)'	0:apply(%s,%s);4:not[%s];4:apply(%s,%s);5:size-lt;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:size1;1:%s.o;2:x
'λx.apply(not[yellow],iota(filter(filter(x.s, blue), triangle)))'	0:apply(%s,%s);4:not[%s];4:yellow;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:triangle
'λx.apply(and[size1,green],iota(filter(filter(x.s, and[size1,apply(same_shape,x.o)]), apply(same_color,x.o))))'	0:apply(%s,%s);4:and[%s,%s];4:size1;4:green;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[and[circle,circle],and[blue,size1]],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:circle;4:circle;4:and[%s,%s];4:blue;4:size1;1:%s.o;2:x
'λx.exists(and[or[iff[rectangle,size2],green],triangle], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:or[%s,%s];4:iff[%s,%s];4:rectangle;4:size2;4:green;4:triangle;3:%s.s;2:x
'λx.empty(filter(filter(filter(x.s, apply(same_color,x.o)), circle), nor[blue,nor[apply(same_shape,x.o),triangle]]))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:circle;4:nor[%s,%s];4:blue;4:nor[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:triangle
'λx.apply(nor[and[rectangle,triangle],yellow],x.o)'	0:apply(%s,%s);4:nor[%s,%s];4:and[%s,%s];4:rectangle;4:triangle;4:yellow;1:%s.o;2:x
'λx.apply(triangle,iota(filter(filter(x.s, apply(size-gt,x.o)), triangle)))'	0:apply(%s,%s);4:triangle;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-gt;1:%s.o;2:x;4:triangle
'λx.apply(or[blue,blue],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:or[%s,%s];4:blue;4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(nand[rectangle,not[circle]],x.o)'	0:apply(%s,%s);4:nand[%s,%s];4:rectangle;4:not[%s];4:circle;1:%s.o;2:x
'λx.apply(not[nor[yellow,or[green,apply(same_shape,x.o)]]],iota(filter(x.s, blue)))'	0:apply(%s,%s);4:not[%s];4:nor[%s,%s];4:yellow;4:or[%s,%s];4:green;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue
'λx.apply(not[and[size2,size1]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size1;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.apply(not[and[size2,size3]],iota(filter(x.s, apply(same_shape,x.o))))'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size2;4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x
'λx.exists(implies[size2,apply(same_size,x.o)], filter(x.s, not[triangle]))'	0:exists(%s, %s);4:implies[%s,%s];4:size2;4:apply(%s,%s);5:same_size;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:triangle
'λx.apply(apply(same_color,iota(filter(filter(filter(x.s, size2), size2), blue))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:size2;4:size2;4:blue;1:%s.o;2:x
'λx.apply(not[size3],iota(filter(x.s, rectangle)))'	0:apply(%s,%s);4:not[%s];4:size3;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle
'λx.exists(or[and[size3,size1],rectangle], filter(filter(x.s, green), size2))'	0:exists(%s, %s);4:or[%s,%s];4:and[%s,%s];4:size3;4:size1;4:rectangle;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(apply(size-geq,iota(filter(x.s, and[or[apply(same_shape,x.o),green],blue]))),x.o)'	0:apply(%s,%s);4:apply(%s,%s);5:size-geq;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:or[%s,%s];4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:green;4:blue;1:%s.o;2:x
'λx.exists(size2, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(size3, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:size3;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.exists(size1, filter(x.s, apply(same_size,x.o)))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(or[size3,blue],iota(filter(filter(x.s, apply(same_shape,x.o)), blue)))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:blue;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:same_shape;1:%s.o;2:x;4:blue
'λx.apply(or[size3,circle],iota(filter(x.s, and[size3,or[rectangle,apply(same_color,x.o)]])))'	0:apply(%s,%s);4:or[%s,%s];4:size3;4:circle;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size3;4:or[%s,%s];4:rectangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(or[not[yellow],size3],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size3;1:%s.o;2:x
'λx.apply(or[not[yellow],size1],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size1;1:%s.o;2:x
'λx.apply(or[not[yellow],size2],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:yellow;4:size2;1:%s.o;2:x
'λx.apply(and[and[triangle,green],size3],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:and[%s,%s];4:triangle;4:green;4:size3;1:%s.o;2:x
'λx.exists(size2, filter(filter(x.s, rectangle), blue))'	0:exists(%s, %s);4:size2;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.exists(size1, filter(filter(x.s, rectangle), blue))'	0:exists(%s, %s);4:size1;3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:rectangle;4:blue
'λx.apply(blue,iota(filter(x.s, and[size1,apply(same_size,x.o)])))'	0:apply(%s,%s);4:blue;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:and[%s,%s];4:size1;4:apply(%s,%s);5:same_size;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, green), size2)))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:green;4:size2
'λx.apply(implies[blue,or[circle,size1]],x.o)'	0:apply(%s,%s);4:implies[%s,%s];4:blue;4:or[%s,%s];4:circle;4:size1;1:%s.o;2:x
'λx.apply(and[not[yellow],nand[size1,green]],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:yellow;4:nand[%s,%s];4:size1;4:green;1:%s.o;2:x
'λx.apply(apply(same_shape,x.o),iota(filter(filter(x.s, blue), apply(size-leq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, nor[blue,circle]), nand[size3,triangle]), apply(same_color,x.o)))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:circle;4:nand[%s,%s];4:size3;4:triangle;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.exists(and[yellow,and[triangle,apply(size-leq,x.o)]], x.s)'	0:exists(%s, %s);4:and[%s,%s];4:yellow;4:and[%s,%s];4:triangle;4:apply(%s,%s);5:size-leq;1:%s.o;2:x;3:%s.s;2:x
'λx.empty(filter(x.s, nor[blue,nand[implies[and[blue,green],size1],apply(same_color,x.o)]]))'	0:empty(%s);3:filter(%s, %s);3:%s.s;2:x;4:nor[%s,%s];4:blue;4:nand[%s,%s];4:implies[%s,%s];4:and[%s,%s];4:blue;4:green;4:size1;4:apply(%s,%s);5:same_color;1:%s.o;2:x
'λx.apply(and[not[size3],blue],x.o)'	0:apply(%s,%s);4:and[%s,%s];4:not[%s];4:size3;4:blue;1:%s.o;2:x
'λx.apply(or[and[nor[blue,and[size1,size2]],not[apply(same_color,iota(filter(x.s, blue)))]],green],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:and[%s,%s];4:nor[%s,%s];4:blue;4:and[%s,%s];4:size1;4:size2;4:not[%s];4:apply(%s,%s);5:same_color;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:blue;4:green;1:%s.o;2:x
'λx.forall(blue,filter(x.s, not[circle]))'	0:forall(%s,%s);4:blue;3:filter(%s, %s);3:%s.s;2:x;4:not[%s];4:circle
'λx.apply(not[and[size3,triangle]],x.o)'	0:apply(%s,%s);4:not[%s];4:and[%s,%s];4:size3;4:triangle;1:%s.o;2:x
'λx.empty(filter(filter(filter(x.s, yellow), apply(same_color,x.o)), yellow))'	0:empty(%s);3:filter(%s, %s);3:filter(%s, %s);3:filter(%s, %s);3:%s.s;2:x;4:yellow;4:apply(%s,%s);5:same_color;1:%s.o;2:x;4:yellow
'λx.apply(or[not[size2],blue],x.o)'	0:apply(%s,%s);4:or[%s,%s];4:not[%s];4:size2;4:blue;1:%s.o;2:x
'λx.contains(x.o, filter(x.s, or[blue,not[circle]]))'	0:contains(%s, %s);1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:or[%s,%s];4:blue;4:not[%s];4:circle
'λx.forall(and[size1,blue],filter(x.s, circle))'	0:forall(%s,%s);4:and[%s,%s];4:size1;4:blue;3:filter(%s, %s);3:%s.s;2:x;4:circle
'λx.apply(apply(same_size,x.o),iota(filter(x.s, apply(size-leq,x.o))))'	0:apply(%s,%s);4:apply(%s,%s);5:same_size;1:%s.o;2:x;1:iota(%s);3:filter(%s, %s);3:%s.s;2:x;4:apply(%s,%s);5:size-leq;1:%s.o;2:x
'λx.exists(apply(same_shape,x.o), filter(x.s, implies[circle,triangle]))'	0:exists(%s, %s);4:apply(%s,%s);5:same_shape;1:%s.o;2:x;3:filter(%s, %s);3:%s.s;2:x;4:implies[%s,%s];4:circle;4:triangle
'λx.apply(iff[and[triangle,blue],triangle],x.o)'	0:apply(%s,%s);4:iff[%s,%s];4:and[%s,%s];4:triangle;4:blue;4:triangle;1:%s.o;2:x
